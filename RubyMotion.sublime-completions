{
  "scope": "source.rubymotion",
  "completions": [
    "ABAddressBookCreate",
    "ABGroupCreate",
    "ABNewPersonViewController",
    "ABNewPersonViewControllerDelegate",
    "ABPeoplePickerNavigationController",
    "ABPeoplePickerNavigationControllerDelegate",
    "ABPersonCreate",
    "ABPersonGetCompositeNameFormat",
    "ABPersonGetSortOrdering",
    "ABPersonViewController",
    "ABPersonViewControllerDelegate",
    "ABUnknownPersonViewController",
    "ABUnknownPersonViewControllerDelegate",
    "ACAccount",
    "ACAccountCredential",
    "ACAccountStore",
    "ACAccountType",
    "ADBannerView",
    "ADBannerViewDelegate",
    "ADInterstitialAd",
    "ADInterstitialAdDelegate",
    "ALAsset",
    "ALAssetRepresentation",
    "ALAssetsFilter",
    "ALAssetsFilter.allAssets",
    "ALAssetsFilter.allPhotos",
    "ALAssetsFilter.allVideos",
    "ALAssetsGroup",
    "ALAssetsLibrary",
    "AMSymbol",
    "API",
    "AVAsset",
    "AVAssetExportSession",
    "AVAssetExportSession.allExportPresets",
    "AVAssetImageGenerator",
    "AVAssetReader",
    "AVAssetReaderAudioMixOutput",
    "AVAssetReaderOutput",
    "AVAssetReaderTrackOutput",
    "AVAssetReaderVideoCompositionOutput",
    "AVAssetTrack",
    "AVAssetTrackSegment",
    "AVAssetWriter",
    "AVAssetWriterInput",
    "AVAssetWriterInputPixelBufferAdaptor",
    "AVAsynchronousKeyValueLoading",
    "AVAudioMix",
    "AVAudioMixInputParameters",
    "AVAudioPlayer",
    "AVAudioPlayerDelegate",
    "AVAudioRecorder",
    "AVAudioRecorderDelegate",
    "AVAudioSession",
    "AVAudioSession.sharedInstance",
    "AVAudioSessionDelegate",
    "AVCaptureAudioChannel",
    "AVCaptureAudioDataOutput",
    "AVCaptureAudioDataOutputSampleBufferDelegate",
    "AVCaptureConnection",
    "AVCaptureDevice",
    "AVCaptureDevice.devices",
    "AVCaptureDeviceInput",
    "AVCaptureFileOutput",
    "AVCaptureFileOutputRecordingDelegate",
    "AVCaptureInput",
    "AVCaptureInputPort",
    "AVCaptureMovieFileOutput",
    "AVCaptureOutput",
    "AVCaptureSession",
    "AVCaptureStillImageOutput",
    "AVCaptureVideoDataOutput",
    "AVCaptureVideoDataOutputSampleBufferDelegate",
    "AVCaptureVideoPreviewLayer",
    "AVComposition",
    "AVCompositionTrack",
    "AVCompositionTrackSegment",
    "AVMediaSelectionGroup",
    "AVMediaSelectionOption",
    "AVMetadataItem",
    "AVMutableAudioMix",
    "AVMutableAudioMix.audioMix",
    "AVMutableAudioMixInputParameters",
    "AVMutableAudioMixInputParameters.audioMixInputParameters",
    "AVMutableComposition",
    "AVMutableComposition.composition",
    "AVMutableCompositionTrack",
    "AVMutableMetadataItem",
    "AVMutableMetadataItem.metadataItem",
    "AVMutableTimedMetadataGroup",
    "AVMutableVideoComposition",
    "AVMutableVideoComposition.videoComposition",
    "AVMutableVideoCompositionInstruction",
    "AVMutableVideoCompositionInstruction.videoCompositionInstruction",
    "AVMutableVideoCompositionLayerInstruction",
    "AVMutableVideoCompositionLayerInstruction.videoCompositionLayerInstruction",
    "AVPlayer",
    "AVPlayerItem",
    "AVPlayerItemAccessLog",
    "AVPlayerItemAccessLogEvent",
    "AVPlayerItemErrorLog",
    "AVPlayerItemErrorLogEvent",
    "AVPlayerItemTrack",
    "AVPlayerLayer",
    "AVQueuePlayer",
    "AVSynchronizedLayer",
    "AVTimedMetadataGroup",
    "AVURLAsset",
    "AVURLAsset.audiovisualMIMETypes",
    "AVURLAsset.audiovisualTypes",
    "AVVideoComposition",
    "AVVideoCompositionCoreAnimationTool",
    "AVVideoCompositionInstruction",
    "AVVideoCompositionLayerInstruction",
    "AVVideoCompositionValidationHandling",
    "CAAction",
    "CAAnimation",
    "CAAnimation.animation",
    "CAAnimationDelegate",
    "CAAnimationGroup",
    "CABasicAnimation",
    "CACurrentMediaTime",
    "CADisplayLink",
    "CAEmitterCell",
    "CAEmitterCell.emitterCell",
    "CAEmitterLayer",
    "CAGradientLayer",
    "CAKeyframeAnimation",
    "CALayer",
    "CALayer.layer",
    "CALayerDelegate",
    "CAMediaTiming",
    "CAMediaTimingFunction",
    "CAPropertyAnimation",
    "CAReplicatorLayer",
    "CAScrollLayer",
    "CAShapeLayer",
    "CATextLayer",
    "CATiledLayer",
    "CATiledLayer.fadeDuration",
    "CATransaction",
    "CATransaction.animationDuration",
    "CATransaction.animationTimingFunction",
    "CATransaction.begin",
    "CATransaction.commit",
    "CATransaction.completionBlock",
    "CATransaction.disableActions",
    "CATransaction.flush",
    "CATransaction.lock",
    "CATransaction.unlock",
    "CATransform3DValue",
    "CATransition",
    "CAValueFunction",
    "CBCentralManager",
    "CBCentralManagerDelegate",
    "CBCharacteristic",
    "CBDescriptor",
    "CBPeripheral",
    "CBPeripheralDelegate",
    "CBService",
    "CBUUID",
    "CFAbsoluteTimeGetCurrent",
    "CFAllocatorGetDefault",
    "CFAllocatorGetTypeID",
    "CFArrayGetTypeID",
    "CFAttributedStringGetTypeID",
    "CFBagGetTypeID",
    "CFBinaryHeapGetTypeID",
    "CFBitVectorGetTypeID",
    "CFBooleanGetTypeID",
    "CFBundleGetAllBundles",
    "CFBundleGetMainBundle",
    "CFBundleGetTypeID",
    "CFByteOrderGetCurrent",
    "CFCalendarCopyCurrent",
    "CFCalendarGetTypeID",
    "CFCharacterSetGetTypeID",
    "CFCopyHomeDirectoryURL",
    "CFDataGetTypeID",
    "CFDateFormatterGetTypeID",
    "CFDateGetTypeID",
    "CFDictionaryGetTypeID",
    "CFErrorGetTypeID",
    "CFFileDescriptorGetTypeID",
    "CFFileSecurityGetTypeID",
    "CFHTTPAuthenticationGetTypeID",
    "CFHTTPMessageGetTypeID",
    "CFHostGetTypeID",
    "CFLocaleCopyAvailableLocaleIdentifiers",
    "CFLocaleCopyCommonISOCurrencyCodes",
    "CFLocaleCopyCurrent",
    "CFLocaleCopyISOCountryCodes",
    "CFLocaleCopyISOCurrencyCodes",
    "CFLocaleCopyISOLanguageCodes",
    "CFLocaleCopyPreferredLanguages",
    "CFLocaleGetSystem",
    "CFLocaleGetTypeID",
    "CFMachPortGetTypeID",
    "CFMessagePortGetTypeID",
    "CFNetServiceBrowserGetTypeID",
    "CFNetServiceGetTypeID",
    "CFNetServiceMonitorGetTypeID",
    "CFNetworkCopySystemProxySettings",
    "CFNotificationCenterGetDarwinNotifyCenter",
    "CFNotificationCenterGetLocalCenter",
    "CFNotificationCenterGetTypeID",
    "CFNullGetTypeID",
    "CFNumberFormatterGetTypeID",
    "CFNumberGetTypeID",
    "CFPlugInGetTypeID",
    "CFPlugInInstanceGetTypeID",
    "CFReadStreamGetTypeID",
    "CFRunLoopGetCurrent",
    "CFRunLoopGetMain",
    "CFRunLoopGetTypeID",
    "CFRunLoopObserverGetTypeID",
    "CFRunLoopRun",
    "CFRunLoopSourceGetTypeID",
    "CFRunLoopTimerGetTypeID",
    "CFSetGetTypeID",
    "CFSocketGetDefaultNameRegistryPortNumber",
    "CFSocketGetTypeID",
    "CFStringGetListOfAvailableEncodings",
    "CFStringGetSystemEncoding",
    "CFStringGetTypeID",
    "CFStringTokenizerGetTypeID",
    "CFTimeZoneCopyAbbreviationDictionary",
    "CFTimeZoneCopyDefault",
    "CFTimeZoneCopyKnownNames",
    "CFTimeZoneCopySystem",
    "CFTimeZoneGetTypeID",
    "CFTimeZoneResetSystem",
    "CFTreeGetTypeID",
    "CFURLEnumeratorGetTypeID",
    "CFURLGetTypeID",
    "CFUUIDGetTypeID",
    "CFWriteStreamGetTypeID",
    "CGAffineTransformValue",
    "CGColor",
    "CGColorGetTypeID",
    "CGColorSpaceCreateDeviceCMYK",
    "CGColorSpaceCreateDeviceGray",
    "CGColorSpaceCreateDeviceRGB",
    "CGColorSpaceGetTypeID",
    "CGContextGetTypeID",
    "CGDataConsumerGetTypeID",
    "CGDataProviderGetTypeID",
    "CGFontGetTypeID",
    "CGFunctionGetTypeID",
    "CGGradientGetTypeID",
    "CGImage",
    "CGImageDestinationCopyTypeIdentifiers",
    "CGImageDestinationGetTypeID",
    "CGImageGetTypeID",
    "CGImageSourceCopyTypeIdentifiers",
    "CGImageSourceGetTypeID",
    "CGLayerGetTypeID",
    "CGPDFDocumentGetTypeID",
    "CGPDFOperatorTableCreate",
    "CGPDFPageGetTypeID",
    "CGPath",
    "CGPathCreateMutable",
    "CGPathGetTypeID",
    "CGPatternGetTypeID",
    "CGPointValue",
    "CGRectValue",
    "CGShadingGetTypeID",
    "CGSizeValue",
    "CIColor",
    "CIContext",
    "CIDetector",
    "CIFaceFeature",
    "CIFeature",
    "CIFilter",
    "CIImage",
    "CIImage.emptyImage",
    "CIVector",
    "CLGeocoder",
    "CLHeading",
    "CLLocation",
    "CLLocationManager",
    "CLLocationManager.authorizationStatus",
    "CLLocationManager.headingAvailable",
    "CLLocationManager.locationServicesEnabled",
    "CLLocationManager.regionMonitoringAvailable",
    "CLLocationManager.regionMonitoringEnabled",
    "CLLocationManager.significantLocationChangeMonitoringAvailable",
    "CLLocationManagerDelegate",
    "CLPlacemark",
    "CLRegion",
    "CMAccelerometerData",
    "CMAttitude",
    "CMBlockBufferGetTypeID",
    "CMBufferQueueGetCallbacksForSampleBuffersSortedByOutputPTS",
    "CMBufferQueueGetCallbacksForUnsortedSampleBuffers",
    "CMBufferQueueGetTypeID",
    "CMDeviceMotion",
    "CMFormatDescriptionGetTypeID",
    "CMGyroData",
    "CMLogItem",
    "CMMagnetometerData",
    "CMMotionManager",
    "CMMotionManager.availableAttitudeReferenceFrames",
    "CMSampleBufferGetTypeID",
    "CMSimpleQueueGetTypeID",
    "CMTimeMappingValue",
    "CMTimeRangeValue",
    "CMTimeValue",
    "CMVideoFormatDescriptionGetExtensionKeysCommonWithImageBuffers",
    "CNCopySupportedInterfaces",
    "CTCall",
    "CTCallCenter",
    "CTCarrier",
    "CTFontCollectionGetTypeID",
    "CTFontDescriptorGetTypeID",
    "CTFontGetTypeID",
    "CTFrameGetTypeID",
    "CTFramesetterGetTypeID",
    "CTGetCoreTextVersion",
    "CTGlyphInfoGetTypeID",
    "CTLineGetTypeID",
    "CTParagraphStyleGetTypeID",
    "CTRunGetTypeID",
    "CTTelephonyNetworkInfo",
    "CTTextTabGetTypeID",
    "CTTypesetterGetTypeID",
    "CVGetCurrentHostTime",
    "CVGetHostClockFrequency",
    "CVGetHostClockMinimumTimeDelta",
    "CVOpenGLESTextureCacheGetTypeID",
    "CVOpenGLESTextureGetTypeID",
    "CVPixelBufferGetTypeID",
    "CVPixelBufferPoolGetTypeID",
    "EAAccessory",
    "EAAccessoryDelegate",
    "EAAccessoryManager",
    "EAAccessoryManager.sharedAccessoryManager",
    "EAGLContext",
    "EAGLContext.currentContext",
    "EAGLDrawable",
    "EASession",
    "EKAlarm",
    "EKCalendar",
    "EKCalendarChooser",
    "EKCalendarChooserDelegate",
    "EKCalendarItem",
    "EKEvent",
    "EKEventEditViewController",
    "EKEventEditViewDelegate",
    "EKEventStore",
    "EKEventViewController",
    "EKEventViewDelegate",
    "EKObject",
    "EKParticipant",
    "EKRecurrenceDayOfWeek",
    "EKRecurrenceEnd",
    "EKRecurrenceRule",
    "EKSource",
    "GKAchievement",
    "GKAchievementDescription",
    "GKAchievementDescription.incompleteAchievementImage",
    "GKAchievementDescription.placeholderCompletedAchievementImage",
    "GKAchievementViewController",
    "GKAchievementViewControllerDelegate",
    "GKFriendRequestComposeViewController",
    "GKFriendRequestComposeViewController.maxNumberOfRecipients",
    "GKFriendRequestComposeViewControllerDelegate",
    "GKInvite",
    "GKLeaderboard",
    "GKLeaderboardViewController",
    "GKLeaderboardViewControllerDelegate",
    "GKLocalPlayer",
    "GKLocalPlayer.localPlayer",
    "GKMatch",
    "GKMatchDelegate",
    "GKMatchRequest",
    "GKMatchmaker",
    "GKMatchmaker.sharedMatchmaker",
    "GKMatchmakerViewController",
    "GKMatchmakerViewControllerDelegate",
    "GKNotificationBanner",
    "GKPeerPickerController",
    "GKPeerPickerControllerDelegate",
    "GKPlayer",
    "GKScore",
    "GKSession",
    "GKSessionDelegate",
    "GKTurnBasedEventHandler",
    "GKTurnBasedEventHandler.sharedTurnBasedEventHandler",
    "GKTurnBasedEventHandlerDelegate",
    "GKTurnBasedMatch",
    "GKTurnBasedMatchmakerViewController",
    "GKTurnBasedMatchmakerViewControllerDelegate",
    "GKTurnBasedParticipant",
    "GKVoiceChat",
    "GKVoiceChat.isVoIPAllowed",
    "GKVoiceChatClient",
    "GKVoiceChatService",
    "GKVoiceChatService.defaultVoiceChatService",
    "GKVoiceChatService.isVoIPAllowed",
    "GLKBaseEffect",
    "GLKEffectPropertyFog",
    "GLKEffectPropertyLight",
    "GLKEffectPropertyMaterial",
    "GLKEffectPropertyTexture",
    "GLKEffectPropertyTransform",
    "GLKMatrixStackGetTypeID",
    "GLKNamedEffect",
    "GLKReflectionMapEffect",
    "GLKSkyboxEffect",
    "GLKTextureInfo",
    "GLKTextureLoader",
    "GLKView",
    "GLKViewController",
    "GLKViewControllerDelegate",
    "GLKViewDelegate",
    "HTTPBody",
    "HTTPBodyStream",
    "HTTPMethod",
    "HTTPShouldHandleCookies",
    "HTTPShouldUsePipelining",
    "ISOcountryCode",
    "MFMailComposeViewController",
    "MFMailComposeViewController.canSendMail",
    "MFMailComposeViewControllerDelegate",
    "MFMessageComposeViewController",
    "MFMessageComposeViewController.canSendText",
    "MFMessageComposeViewControllerDelegate",
    "MIDIGetDriverIORunLoop",
    "MIDIGetNumberOfDestinations",
    "MIDIGetNumberOfDevices",
    "MIDIGetNumberOfExternalDevices",
    "MIDIGetNumberOfSources",
    "MIDINetworkConnection",
    "MIDINetworkHost",
    "MIDINetworkSession",
    "MIDINetworkSession.defaultSession",
    "MIDIRestart",
    "MIMEType",
    "MKAnnotation",
    "MKAnnotationView",
    "MKCircle",
    "MKCircleView",
    "MKMapView",
    "MKMapViewDelegate",
    "MKMultiPoint",
    "MKOverlay",
    "MKOverlayPathView",
    "MKOverlayView",
    "MKPinAnnotationView",
    "MKPlacemark",
    "MKPointAnnotation",
    "MKPolygon",
    "MKPolygonView",
    "MKPolyline",
    "MKPolylineView",
    "MKReverseGeocoder",
    "MKReverseGeocoderDelegate",
    "MKShape",
    "MKUserLocation",
    "MKUserTrackingBarButtonItem",
    "MPMediaEntity",
    "MPMediaItem",
    "MPMediaItemArtwork",
    "MPMediaItemCollection",
    "MPMediaLibrary",
    "MPMediaLibrary.defaultMediaLibrary",
    "MPMediaPickerController",
    "MPMediaPickerControllerDelegate",
    "MPMediaPlayback",
    "MPMediaPropertyPredicate",
    "MPMediaQuery",
    "MPMediaQuery.albumsQuery",
    "MPMediaQuery.artistsQuery",
    "MPMediaQuery.audiobooksQuery",
    "MPMediaQuery.compilationsQuery",
    "MPMediaQuery.composersQuery",
    "MPMediaQuery.genresQuery",
    "MPMediaQuery.playlistsQuery",
    "MPMediaQuery.podcastsQuery",
    "MPMediaQuery.songsQuery",
    "MPMediaQuerySection",
    "MPMovieAccessLog",
    "MPMovieAccessLogEvent",
    "MPMovieErrorLog",
    "MPMovieErrorLogEvent",
    "MPMoviePlayerController",
    "MPMoviePlayerViewController",
    "MPMusicPlayerController",
    "MPMusicPlayerController.applicationMusicPlayer",
    "MPMusicPlayerController.iPodMusicPlayer",
    "MPNowPlayingInfoCenter",
    "MPNowPlayingInfoCenter.defaultCenter",
    "MPTimedMetadata",
    "MPVolumeSettingsAlertHide",
    "MPVolumeSettingsAlertIsVisible",
    "MPVolumeSettingsAlertShow",
    "MPVolumeView",
    "NKAssetDownload",
    "NKIssue",
    "NKLibrary",
    "NKLibrary.sharedLibrary",
    "NSArray",
    "NSArray.array",
    "NSAssertionHandler",
    "NSAssertionHandler.currentHandler",
    "NSAtomicStore",
    "NSAtomicStoreCacheNode",
    "NSAttributeDescription",
    "NSAttributedString",
    "NSAutoreleasePool",
    "NSBlockOperation",
    "NSBundle",
    "NSBundle.allBundles",
    "NSBundle.allFrameworks",
    "NSBundle.mainBundle",
    "NSCache",
    "NSCacheDelegate",
    "NSCachedURLResponse",
    "NSCalendar",
    "NSCalendar.autoupdatingCurrentCalendar",
    "NSCalendar.currentCalendar",
    "NSCharacterSet",
    "NSCharacterSet.alphanumericCharacterSet",
    "NSCharacterSet.capitalizedLetterCharacterSet",
    "NSCharacterSet.controlCharacterSet",
    "NSCharacterSet.decimalDigitCharacterSet",
    "NSCharacterSet.decomposableCharacterSet",
    "NSCharacterSet.illegalCharacterSet",
    "NSCharacterSet.letterCharacterSet",
    "NSCharacterSet.lowercaseLetterCharacterSet",
    "NSCharacterSet.newlineCharacterSet",
    "NSCharacterSet.nonBaseCharacterSet",
    "NSCharacterSet.punctuationCharacterSet",
    "NSCharacterSet.symbolCharacterSet",
    "NSCharacterSet.uppercaseLetterCharacterSet",
    "NSCharacterSet.whitespaceAndNewlineCharacterSet",
    "NSCharacterSet.whitespaceCharacterSet",
    "NSCoder",
    "NSCoderMethods",
    "NSCoderMethods.version",
    "NSCoding",
    "NSComparisonPredicate",
    "NSCompoundPredicate",
    "NSCondition",
    "NSConditionLock",
    "NSCopyLinkMoveHandler",
    "NSCopying",
    "NSCountedSet",
    "NSData",
    "NSData.data",
    "NSDataDetector",
    "NSDate",
    "NSDate.date",
    "NSDate.distantFuture",
    "NSDate.distantPast",
    "NSDate.timeIntervalSinceReferenceDate",
    "NSDateComponents",
    "NSDateFormatter",
    "NSDateFormatter.defaultFormatterBehavior",
    "NSDecimalNumber",
    "NSDecimalNumber.defaultBehavior",
    "NSDecimalNumber.maximumDecimalNumber",
    "NSDecimalNumber.minimumDecimalNumber",
    "NSDecimalNumber.notANumber",
    "NSDecimalNumber.one",
    "NSDecimalNumber.zero",
    "NSDecimalNumberBehaviors",
    "NSDecimalNumberHandler",
    "NSDecimalNumberHandler.defaultDecimalNumberHandler",
    "NSDefaultMallocZone",
    "NSDelayedPerforming",
    "NSDictionary",
    "NSDictionary.dictionary",
    "NSDirectoryEnumerator",
    "NSDiscardableContent",
    "NSDiscardableContentProxy",
    "NSEntityDescription",
    "NSEntityMapping",
    "NSEntityMigrationPolicy",
    "NSEnumerator",
    "NSError",
    "NSErrorRecoveryAttempting",
    "NSException",
    "NSExpression",
    "NSExpression.expressionForEvaluatedObject",
    "NSExpressionDescription",
    "NSFastEnumeration",
    "NSFetchRequest",
    "NSFetchRequestExpression",
    "NSFetchedPropertyDescription",
    "NSFetchedResultsController",
    "NSFetchedResultsControllerDelegate",
    "NSFetchedResultsSectionInfo",
    "NSFileCoordinator",
    "NSFileCoordinator.filePresenters",
    "NSFileHandle",
    "NSFileHandle.fileHandleWithNullDevice",
    "NSFileHandle.fileHandleWithStandardError",
    "NSFileHandle.fileHandleWithStandardInput",
    "NSFileHandle.fileHandleWithStandardOutput",
    "NSFileManager",
    "NSFileManager.defaultManager",
    "NSFileManagerDelegate",
    "NSFilePresenter",
    "NSFileVersion",
    "NSFileWrapper",
    "NSFormatter",
    "NSFullUserName",
    "NSGetUncaughtExceptionHandler",
    "NSHTTPCookie",
    "NSHTTPCookieStorage",
    "NSHTTPCookieStorage.sharedHTTPCookieStorage",
    "NSHTTPURLResponse",
    "NSHomeDirectory",
    "NSHostByteOrder",
    "NSIncrementalStore",
    "NSIncrementalStoreNode",
    "NSIndexPath",
    "NSIndexSet",
    "NSIndexSet.indexSet",
    "NSInputStream",
    "NSInvocation",
    "NSInvocationOperation",
    "NSJSONSerialization",
    "NSKeyValueCoding",
    "NSKeyValueCoding.accessInstanceVariablesDirectly",
    "NSKeyValueObserverNotification",
    "NSKeyValueObserverRegistration",
    "NSKeyValueObserving",
    "NSKeyValueObservingCustomization",
    "NSKeyedArchiver",
    "NSKeyedArchiverDelegate",
    "NSKeyedArchiverObjectSubstitution",
    "NSKeyedArchiverObjectSubstitution.classFallbacksForKeyedArchiver",
    "NSKeyedUnarchiver",
    "NSKeyedUnarchiverDelegate",
    "NSKeyedUnarchiverObjectSubstitution",
    "NSKeyedUnarchiverObjectSubstitution.classForKeyedUnarchiver",
    "NSLinguisticTagger",
    "NSLocale",
    "NSLocale.ISOCountryCodes",
    "NSLocale.ISOCurrencyCodes",
    "NSLocale.ISOLanguageCodes",
    "NSLocale.autoupdatingCurrentLocale",
    "NSLocale.availableLocaleIdentifiers",
    "NSLocale.commonISOCurrencyCodes",
    "NSLocale.currentLocale",
    "NSLocale.preferredLanguages",
    "NSLocale.systemLocale",
    "NSLock",
    "NSLocking",
    "NSLogPageSize",
    "NSMachPort",
    "NSMachPortDelegate",
    "NSManagedObject",
    "NSManagedObject.contextShouldIgnoreUnmodeledPropertyChanges",
    "NSManagedObjectContext",
    "NSManagedObjectID",
    "NSManagedObjectModel",
    "NSMappingModel",
    "NSMergeConflict",
    "NSMergePolicy",
    "NSMetadataItem",
    "NSMetadataQuery",
    "NSMetadataQueryAttributeValueTuple",
    "NSMetadataQueryDelegate",
    "NSMetadataQueryResultGroup",
    "NSMethodSignature",
    "NSMigrationManager",
    "NSMutableArray",
    "NSMutableAttributedString",
    "NSMutableCharacterSet",
    "NSMutableCopying",
    "NSMutableData",
    "NSMutableDictionary",
    "NSMutableIndexSet",
    "NSMutableOrderedSet",
    "NSMutableSet",
    "NSMutableString",
    "NSMutableURLRequest",
    "NSNetService",
    "NSNetServiceBrowser",
    "NSNetServiceBrowserDelegate",
    "NSNetServiceDelegate",
    "NSNotification",
    "NSNotificationCenter",
    "NSNotificationCenter.defaultCenter",
    "NSNotificationQueue",
    "NSNotificationQueue.defaultQueue",
    "NSNull",
    "NSNull.null",
    "NSNumber",
    "NSNumberFormatter",
    "NSNumberFormatter.defaultFormatterBehavior",
    "NSObject",
    "NSObject.accessInstanceVariablesDirectly",
    "NSObject.alloc",
    "NSObject.appearance",
    "NSObject.class",
    "NSObject.classFallbacksForKeyedArchiver",
    "NSObject.classForKeyedUnarchiver",
    "NSObject.description",
    "NSObject.initialize",
    "NSObject.load",
    "NSObject.new",
    "NSObject.superclass",
    "NSObject.version",
    "NSOpenStepRootDirectory",
    "NSOperation",
    "NSOperationQueue",
    "NSOperationQueue.currentQueue",
    "NSOperationQueue.mainQueue",
    "NSOrderedSet",
    "NSOrderedSet.orderedSet",
    "NSOrthography",
    "NSOutputStream",
    "NSOutputStream.outputStreamToMemory",
    "NSPageSize",
    "NSPersistentStore",
    "NSPersistentStore.migrationManagerClass",
    "NSPersistentStoreCoordinator",
    "NSPersistentStoreCoordinator.registeredStoreTypes",
    "NSPersistentStoreRequest",
    "NSPipe",
    "NSPipe.pipe",
    "NSPort",
    "NSPort.port",
    "NSPortDelegate",
    "NSPredicate",
    "NSProcessInfo",
    "NSProcessInfo.processInfo",
    "NSPropertyDescription",
    "NSPropertyListSerialization",
    "NSPropertyMapping",
    "NSProxy",
    "NSProxy.alloc",
    "NSProxy.class",
    "NSRealMemoryAvailable",
    "NSRecursiveLock",
    "NSRegularExpression",
    "NSRelationshipDescription",
    "NSRunLoop",
    "NSRunLoop.currentRunLoop",
    "NSRunLoop.mainRunLoop",
    "NSSaveChangesRequest",
    "NSScanner",
    "NSSet",
    "NSSet.set",
    "NSSocketPort",
    "NSSortDescriptor",
    "NSStream",
    "NSStreamDelegate",
    "NSString",
    "NSString.availableStringEncodings",
    "NSString.defaultCStringEncoding",
    "NSString.string",
    "NSTemporaryDirectory",
    "NSTextCheckingResult",
    "NSThread",
    "NSThread.callStackReturnAddresses",
    "NSThread.callStackSymbols",
    "NSThread.currentThread",
    "NSThread.exit",
    "NSThread.isMainThread",
    "NSThread.isMultiThreaded",
    "NSThread.mainThread",
    "NSThread.threadPriority",
    "NSThreadPerformAdditions",
    "NSTimeZone",
    "NSTimeZone.abbreviationDictionary",
    "NSTimeZone.defaultTimeZone",
    "NSTimeZone.knownTimeZoneNames",
    "NSTimeZone.localTimeZone",
    "NSTimeZone.resetSystemTimeZone",
    "NSTimeZone.systemTimeZone",
    "NSTimeZone.timeZoneDataVersion",
    "NSTimer",
    "NSURL",
    "NSURLAuthenticationChallenge",
    "NSURLAuthenticationChallengeSender",
    "NSURLCache",
    "NSURLCache.sharedURLCache",
    "NSURLConnection",
    "NSURLConnectionDataDelegate",
    "NSURLConnectionDelegate",
    "NSURLConnectionDownloadDelegate",
    "NSURLCredential",
    "NSURLCredentialStorage",
    "NSURLCredentialStorage.sharedCredentialStorage",
    "NSURLProtectionSpace",
    "NSURLProtocol",
    "NSURLProtocolClient",
    "NSURLRequest",
    "NSURLResponse",
    "NSUbiquitousKeyValueStore",
    "NSUbiquitousKeyValueStore.defaultStore",
    "NSUndoManager",
    "NSUserDefaults",
    "NSUserDefaults.resetStandardUserDefaults",
    "NSUserDefaults.standardUserDefaults",
    "NSUserName",
    "NSValue",
    "NSValueTransformer",
    "NSValueTransformer.allowsReverseTransformation",
    "NSValueTransformer.transformedValueClass",
    "NSValueTransformer.valueTransformerNames",
    "NSXMLParser",
    "NSXMLParserDelegate",
    "PMSymbol",
    "QLPreviewController",
    "QLPreviewControllerDataSource",
    "QLPreviewControllerDelegate",
    "QLPreviewItem",
    "RSSI",
    "SCCopyLastError",
    "SCError",
    "SCNetworkReachabilityGetTypeID",
    "SKMutablePayment",
    "SKPayment",
    "SKPaymentQueue",
    "SKPaymentQueue.canMakePayments",
    "SKPaymentQueue.defaultQueue",
    "SKPaymentTransaction",
    "SKPaymentTransactionObserver",
    "SKProduct",
    "SKProductsRequest",
    "SKProductsRequestDelegate",
    "SKProductsResponse",
    "SKRequest",
    "SKRequestDelegate",
    "SSLContextGetTypeID",
    "SecCertificateGetTypeID",
    "SecIdentityGetTypeID",
    "SecKeyGetTypeID",
    "SecPolicyCreateBasicX509",
    "SecPolicyGetTypeID",
    "SecTrustGetTypeID",
    "TWRequest",
    "TWTweetComposeViewController",
    "TWTweetComposeViewController.canSendTweet",
    "TXTRecordData",
    "UIAcceleration",
    "UIAccelerometer",
    "UIAccelerometer.sharedAccelerometer",
    "UIAccelerometerDelegate",
    "UIAccessibility",
    "UIAccessibilityAction",
    "UIAccessibilityContainer",
    "UIAccessibilityElement",
    "UIAccessibilityFocus",
    "UIAccessibilityIdentification",
    "UIAccessibilityIsClosedCaptioningEnabled",
    "UIAccessibilityIsMonoAudioEnabled",
    "UIAccessibilityIsVoiceOverRunning",
    "UIAccessibilityReadingContent",
    "UIAccessibilityRegisterGestureConflictWithZoom",
    "UIActionSheet",
    "UIActionSheetDelegate",
    "UIActivityIndicatorView",
    "UIAlertView",
    "UIAlertViewDelegate",
    "UIAppearance",
    "UIAppearance.appearance",
    "UIApplication",
    "UIApplication.sharedApplication",
    "UIApplicationDelegate",
    "UIBarButtonItem",
    "UIBarItem",
    "UIBezierPath",
    "UIBezierPath.bezierPath",
    "UIButton",
    "UIColor",
    "UIColor.blackColor",
    "UIColor.blueColor",
    "UIColor.brownColor",
    "UIColor.clearColor",
    "UIColor.cyanColor",
    "UIColor.darkGrayColor",
    "UIColor.darkTextColor",
    "UIColor.grayColor",
    "UIColor.greenColor",
    "UIColor.groupTableViewBackgroundColor",
    "UIColor.lightGrayColor",
    "UIColor.lightTextColor",
    "UIColor.magentaColor",
    "UIColor.orangeColor",
    "UIColor.purpleColor",
    "UIColor.redColor",
    "UIColor.scrollViewTexturedBackgroundColor",
    "UIColor.underPageBackgroundColor",
    "UIColor.viewFlipsideBackgroundColor",
    "UIColor.whiteColor",
    "UIColor.yellowColor",
    "UIControl",
    "UIDatePicker",
    "UIDevice",
    "UIDevice.currentDevice",
    "UIDictationPhrase",
    "UIDocument",
    "UIDocumentInteractionController",
    "UIDocumentInteractionControllerDelegate",
    "UIEdgeInsetsValue",
    "UIEvent",
    "UIFont",
    "UIFont.buttonFontSize",
    "UIFont.familyNames",
    "UIFont.labelFontSize",
    "UIFont.smallSystemFontSize",
    "UIFont.systemFontSize",
    "UIGestureRecognizer",
    "UIGestureRecognizerDelegate",
    "UIGraphicsBeginPDFPage",
    "UIGraphicsEndImageContext",
    "UIGraphicsEndPDFContext",
    "UIGraphicsGetCurrentContext",
    "UIGraphicsGetImageFromCurrentImageContext",
    "UIGraphicsGetPDFContextBounds",
    "UIGraphicsPopContext",
    "UIImage",
    "UIImagePickerController",
    "UIImagePickerControllerDelegate",
    "UIImageView",
    "UIInputViewAudioFeedback",
    "UIKeyInput",
    "UILabel",
    "UILocalNotification",
    "UILocalizedIndexedCollation",
    "UILocalizedIndexedCollation.currentCollation",
    "UILongPressGestureRecognizer",
    "UIManagedDocument",
    "UIManagedDocument.persistentStoreName",
    "UIMarkupTextPrintFormatter",
    "UIMenuController",
    "UIMenuController.sharedMenuController",
    "UIMenuItem",
    "UINavigationBar",
    "UINavigationBarDelegate",
    "UINavigationController",
    "UINavigationControllerDelegate",
    "UINavigationItem",
    "UINib",
    "UINibLoadingAdditions",
    "UIOffsetValue",
    "UIPageControl",
    "UIPageViewController",
    "UIPageViewControllerDataSource",
    "UIPageViewControllerDelegate",
    "UIPanGestureRecognizer",
    "UIPasteboard",
    "UIPasteboard.generalPasteboard",
    "UIPasteboard.pasteboardWithUniqueName",
    "UIPickerView",
    "UIPickerViewAccessibilityDelegate",
    "UIPickerViewDataSource",
    "UIPickerViewDelegate",
    "UIPinchGestureRecognizer",
    "UIPopoverBackgroundView",
    "UIPopoverBackgroundView.arrowBase",
    "UIPopoverBackgroundView.arrowHeight",
    "UIPopoverBackgroundView.contentViewInsets",
    "UIPopoverController",
    "UIPopoverControllerDelegate",
    "UIPrintFormatter",
    "UIPrintInfo",
    "UIPrintInfo.printInfo",
    "UIPrintInteractionController",
    "UIPrintInteractionController.isPrintingAvailable",
    "UIPrintInteractionController.printableUTIs",
    "UIPrintInteractionController.sharedPrintController",
    "UIPrintInteractionControllerDelegate",
    "UIPrintPageRenderer",
    "UIPrintPaper",
    "UIProgressView",
    "UIReferenceLibraryViewController",
    "UIResponder",
    "UIResponderStandardEditActions",
    "UIRotationGestureRecognizer",
    "UIScreen",
    "UIScreen.mainScreen",
    "UIScreen.screens",
    "UIScreenMode",
    "UIScrollView",
    "UIScrollViewDelegate",
    "UISearchBar",
    "UISearchBarDelegate",
    "UISearchDisplayController",
    "UISearchDisplayDelegate",
    "UISegmentedControl",
    "UISimpleTextPrintFormatter",
    "UISlider",
    "UISplitViewController",
    "UISplitViewControllerDelegate",
    "UIStepper",
    "UIStoryboard",
    "UIStoryboardPopoverSegue",
    "UIStoryboardSegue",
    "UISwipeGestureRecognizer",
    "UISwitch",
    "UITabBar",
    "UITabBarController",
    "UITabBarControllerDelegate",
    "UITabBarDelegate",
    "UITabBarItem",
    "UITableView",
    "UITableViewCell",
    "UITableViewController",
    "UITableViewDataSource",
    "UITableViewDelegate",
    "UITapGestureRecognizer",
    "UITextChecker",
    "UITextChecker.availableLanguages",
    "UITextField",
    "UITextFieldDelegate",
    "UITextInput",
    "UITextInputDelegate",
    "UITextInputMode",
    "UITextInputMode.activeInputModes",
    "UITextInputMode.currentInputMode",
    "UITextInputStringTokenizer",
    "UITextInputTokenizer",
    "UITextInputTraits",
    "UITextRange",
    "UITextView",
    "UITextViewDelegate",
    "UIToolbar",
    "UITouch",
    "UIVideoEditorController",
    "UIVideoEditorControllerDelegate",
    "UIView",
    "UIView.areAnimationsEnabled",
    "UIView.commitAnimations",
    "UIView.layerClass",
    "UIViewController",
    "UIViewController.attemptRotationToDeviceOrientation",
    "UIViewPrintFormatter",
    "UIWebView",
    "UIWebViewDelegate",
    "UIWindow",
    "URI",
    "URIRepresentation",
    "URL",
    "URLByDeletingLastPathComponent",
    "URLByDeletingPathExtension",
    "URLByResolvingSymlinksInPath",
    "URLByStandardizingPath",
    "URLRequest",
    "URLs",
    "UTF8String",
    "UTI",
    "UUID",
    "W",
    "X",
    "Y",
    "Z",
    "abbreviation",
    "abortParsing",
    "absoluteDate",
    "absoluteString",
    "absoluteURL",
    "acceleration",
    "accelerometerData",
    "accelerometerUpdateInterval",
    "acceptConnectionInBackgroundAndNotify",
    "accessGranted",
    "accessLog",
    "accessibilityActivationPoint",
    "accessibilityContainer",
    "accessibilityDecrement",
    "accessibilityElementCount",
    "accessibilityElementDidBecomeFocused",
    "accessibilityElementDidLoseFocus",
    "accessibilityElementIsFocused",
    "accessibilityElementsHidden",
    "accessibilityFrame",
    "accessibilityHint",
    "accessibilityIdentifier",
    "accessibilityIncrement",
    "accessibilityLabel",
    "accessibilityLanguage",
    "accessibilityPageContent",
    "accessibilityPerformEscape",
    "accessibilityTraits",
    "accessibilityValue",
    "accessibilityViewIsModal",
    "accessory",
    "accessoryAction",
    "accessoryType",
    "accessoryView",
    "account",
    "accountDescription",
    "accountType",
    "accountTypeDescription",
    "accounts",
    "achievedDescription",
    "achievementDelegate",
    "action",
    "actionAtItemEnd",
    "actionSheetStyle",
    "actions",
    "activeProcessorCount",
    "activityIndicatorViewStyle",
    "addClip",
    "address",
    "addressBook",
    "addressComponents",
    "addressDictionary",
    "addresses",
    "adjustsFontSizeToFitWidth",
    "adjustsImageWhenDisabled",
    "adjustsImageWhenHighlighted",
    "administrativeArea",
    "advanceToNextItem",
    "advertisingSection",
    "affectedStores",
    "affineTransform",
    "alGetError",
    "alarms",
    "alcGetCurrentContext",
    "alertAction",
    "alertBody",
    "alertLaunchImage",
    "alertViewStyle",
    "alias",
    "alignmentMode",
    "allControlEvents",
    "allCredentials",
    "allHTTPHeaderFields",
    "allHeaderFields",
    "allKeys",
    "allLanguages",
    "allMetadata",
    "allObjects",
    "allScripts",
    "allTargets",
    "allTouches",
    "allValues",
    "allowableMovement",
    "allowsActions",
    "allowsAddingToAddressBook",
    "allowsAirPlay",
    "allowsAirPlayVideo",
    "allowsCalendarPreview",
    "allowsContentModifications",
    "allowsEditing",
    "allowsEmptySelection",
    "allowsExternalBinaryDataStorage",
    "allowsFloats",
    "allowsImageEditing",
    "allowsInlineMediaPlayback",
    "allowsKeyedCoding",
    "allowsMultipleSelection",
    "allowsMultipleSelectionDuringEditing",
    "allowsPickingMultipleItems",
    "allowsSelection",
    "allowsSelectionDuringEditing",
    "allowsVOIP",
    "alpha",
    "alphaRange",
    "alphaSpeed",
    "alphaState",
    "alternateName",
    "alternativeInterpretations",
    "altitude",
    "alwaysBounceHorizontal",
    "alwaysBounceVertical",
    "alwaysCopiesSampleData",
    "alwaysDiscardsLateVideoFrames",
    "alwaysShowsDecimalSeparator",
    "ambientColor",
    "anchorPoint",
    "anchorPointZ",
    "animatesDrop",
    "animationDuration",
    "animationImages",
    "animationKeys",
    "animationRepeatCount",
    "animationTool",
    "animations",
    "annotation",
    "annotationVisibleRect",
    "annotations",
    "anyObject",
    "apertureMode",
    "applicationFrame",
    "applicationIconBadgeNumber",
    "applicationState",
    "applicationSupportsShakeToEdit",
    "appliesPreferredTrackTransform",
    "apportionsSegmentWidthsByContent",
    "areasOfInterest",
    "arguments",
    "argumentsRetained",
    "array",
    "arrowDirection",
    "arrowOffset",
    "ascender",
    "ascending",
    "aspectRatioThumbnail",
    "asset",
    "assetTrack",
    "assetWriterInput",
    "attendees",
    "attitude",
    "attitudeReferenceFrame",
    "attribute",
    "attributeMappings",
    "attributeType",
    "attributeValueClassName",
    "attributes",
    "attributesByName",
    "audioChannels",
    "audioMix",
    "audioSettings",
    "audioTracks",
    "authenticationMethod",
    "autoAdjustmentFilters",
    "autoContentAccessingProxy",
    "autocapitalizationType",
    "autocorrectionType",
    "automaticallyAdjustsMirroring",
    "automaticallyForwardAppearanceAndRotationMethodsToChildViewControllers",
    "autorelease",
    "autorepeat",
    "autoresizesSubviews",
    "autoresizingMask",
    "autoreverses",
    "availability",
    "availableChapterLocales",
    "availableData",
    "availableImageDataCVPixelFormatTypes",
    "availableImageDataCodecTypes",
    "availableMediaCharacteristicsWithMediaSelectionOptions",
    "availableMediaTypes",
    "availableMetadataFormats",
    "availableModes",
    "availableVideoCVPixelFormatTypes",
    "availableVideoCodecTypes",
    "averagePowerLevel",
    "awakeFromFetch",
    "awakeFromInsert",
    "awakeFromNib",
    "backBarButtonItem",
    "backItem",
    "background",
    "backgroundColor",
    "backgroundFilters",
    "backgroundImage",
    "backgroundTimeRemaining",
    "backgroundView",
    "badgeValue",
    "barStyle",
    "baseURL",
    "baselineAdjustment",
    "batteryLevel",
    "batteryState",
    "becomeFirstResponder",
    "becomeKeyWindow",
    "beginConfiguration",
    "beginContentAccess",
    "beginEditing",
    "beginGeneratingDeviceOrientationNotifications",
    "beginGeneratingLibraryChangeNotifications",
    "beginGeneratingPlaybackNotifications",
    "beginIgnoringInteractionEvents",
    "beginInterruption",
    "beginReceivingRemoteControlEvents",
    "beginSeekingBackward",
    "beginSeekingForward",
    "beginTime",
    "beginUndoGrouping",
    "beginUpdates",
    "beginningOfDocument",
    "biasValues",
    "bindDrawable",
    "birthRate",
    "birthdayPersonID",
    "bitmapRepresentation",
    "blue",
    "blueRange",
    "blueSpeed",
    "body",
    "boolValue",
    "borderColor",
    "borderStyle",
    "borderWidth",
    "bounces",
    "bouncesZoom",
    "boundingMapRect",
    "bounds",
    "brightness",
    "broadcast",
    "builtInPlugInsPath",
    "builtInPlugInsURL",
    "bundleIdentifier",
    "bundlePath",
    "bundleURL",
    "buttonType",
    "byValue",
    "bytes",
    "cString",
    "cStringLength",
    "cacheName",
    "cacheNodes",
    "cachePolicy",
    "cachedResponse",
    "cachedSnapshot",
    "calculationMode",
    "calendar",
    "calendarIdentifier",
    "calendars",
    "callEventHandler",
    "callID",
    "callStackReturnAddresses",
    "callStackSymbols",
    "callState",
    "calloutOffset",
    "cameraCaptureMode",
    "cameraDevice",
    "cameraFlashMode",
    "cameraOverlayView",
    "cameraViewTransform",
    "canBecomeFirstResponder",
    "canCancelContentTouches",
    "canGoBack",
    "canGoForward",
    "canPlayFastForward",
    "canPlayFastReverse",
    "canRedo",
    "canResignFirstResponder",
    "canShowCallout",
    "canUndo",
    "cancel",
    "cancelAction",
    "cancelAllCGImageGeneration",
    "cancelAllLocalNotifications",
    "cancelAllOperations",
    "cancelAllThumbnailImageRequests",
    "cancelBannerViewAction",
    "cancelButtonIndex",
    "cancelExport",
    "cancelGeocode",
    "cancelLoading",
    "cancelPendingSeeks",
    "cancelReading",
    "cancelWriting",
    "cancelsTouchesInView",
    "capHeight",
    "capInsets",
    "capitalizedString",
    "carrierName",
    "caseSensitive",
    "category",
    "center",
    "centerCoordinate",
    "centerOffset",
    "certificates",
    "changeCount",
    "changedValues",
    "changedValuesForCurrentEvent",
    "charValue",
    "characteristic",
    "characteristics",
    "charactersToBeSkipped",
    "checkingTypes",
    "childViewControllers",
    "circle",
    "class",
    "classForCoder",
    "classForKeyedArchiver",
    "clearButtonMode",
    "clearKeepAliveTimeout",
    "clearsContextBeforeDrawing",
    "clearsOnBeginEditing",
    "clearsSelectionOnViewWillAppear",
    "client",
    "clipsToBounds",
    "close",
    "closeFile",
    "closePath",
    "code",
    "collection",
    "collectionSections",
    "collections",
    "color",
    "colorMaterialEnabled",
    "colorSpace",
    "colors",
    "columnNumber",
    "comment",
    "commentURL",
    "commitConfiguration",
    "commonKey",
    "commonMetadata",
    "comparator",
    "comparisonPredicateModifier",
    "comparisonType",
    "completionBlock",
    "completionHandler",
    "components",
    "composeViewDelegate",
    "compositingFilter",
    "compoundIndexes",
    "compoundPredicateType",
    "concurrencyType",
    "condition",
    "configurationName",
    "configurations",
    "connectedAccessories",
    "connectionID",
    "connectionPolicy",
    "connectionTypesMask",
    "connections",
    "constantAttenuation",
    "constantColor",
    "constantValue",
    "contacts",
    "containsMipmaps",
    "contentEdgeInsets",
    "contentHorizontalAlignment",
    "contentInset",
    "contentInsets",
    "contentMode",
    "contentOffset",
    "contentScaleFactor",
    "contentSize",
    "contentSizeForViewInPopover",
    "contentStretch",
    "contentURL",
    "contentVerticalAlignment",
    "contentView",
    "contentViewController",
    "contents",
    "contentsAreFlipped",
    "contentsCenter",
    "contentsGravity",
    "contentsRect",
    "contentsScale",
    "context",
    "contextExpression",
    "continuityValues",
    "controlStyle",
    "cookieAcceptPolicy",
    "cookies",
    "coordinate",
    "copy",
    "copyNextSampleBuffer",
    "cornerRadius",
    "count",
    "countDownDuration",
    "countLimit",
    "country",
    "countryCode",
    "course",
    "createPath",
    "creationDate",
    "credential",
    "currencyCode",
    "currencyDecimalSeparator",
    "currencyGroupingSeparator",
    "currencySymbol",
    "currentBackgroundImage",
    "currentCalls",
    "currentContentSizeIdentifier",
    "currentDate",
    "currentDirectoryPath",
    "currentDiskUsage",
    "currentEntityMapping",
    "currentHardwareInputNumberOfChannels",
    "currentHardwareOutputNumberOfChannels",
    "currentHardwareSampleRate",
    "currentImage",
    "currentItem",
    "currentMaximumTrackImage",
    "currentMemoryUsage",
    "currentMinimumTrackImage",
    "currentMode",
    "currentPage",
    "currentParticipant",
    "currentPlaybackRate",
    "currentPlaybackTime",
    "currentPoint",
    "currentPreviewItem",
    "currentPreviewItemIndex",
    "currentRequest",
    "currentThumbImage",
    "currentTime",
    "currentTitle",
    "currentTitleColor",
    "currentTitleShadowColor",
    "currentlyReadingIssue",
    "customSelector",
    "customView",
    "customizableViewControllers",
    "data",
    "dataDetectorTypes",
    "dataSource",
    "dataValue",
    "date",
    "dateFormat",
    "datePickerMode",
    "dateStyle",
    "dateValue",
    "day",
    "dayOfTheWeek",
    "daylightSavingTimeOffset",
    "daysOfTheMonth",
    "daysOfTheWeek",
    "daysOfTheYear",
    "dealloc",
    "debugDescription",
    "decelerationRate",
    "decimalSeparator",
    "decimalValue",
    "decodeDataObject",
    "decodeObject",
    "decomposedStringWithCanonicalMapping",
    "decomposedStringWithCompatibilityMapping",
    "defaultCalendarForNewEvents",
    "defaultDate",
    "defaultInvitationMessage",
    "defaultRepresentation",
    "defaultValue",
    "defersCurrentPageDisplay",
    "definesPresentationContext",
    "delaysContentTouches",
    "delaysTouchesBegan",
    "delaysTouchesEnded",
    "delegate",
    "deleteBackward",
    "deleteDrawable",
    "deleteRecording",
    "deleteRule",
    "deletedObjects",
    "density",
    "dependencies",
    "descender",
    "description",
    "descriptionInStringsFileFormat",
    "descriptors",
    "desiredAccuracy",
    "destinationContext",
    "destinationEndpoint",
    "destinationEntity",
    "destinationEntityName",
    "destinationEntityVersionHash",
    "destinationModel",
    "destinationViewController",
    "destructiveButtonIndex",
    "detailTextLabel",
    "detectsPhoneNumbers",
    "developmentLocalization",
    "device",
    "deviceCurrentTime",
    "deviceMotion",
    "deviceMotionUpdateInterval",
    "dictationRecognitionFailed",
    "dictationRecordingDidEnd",
    "dictionaryRepresentation",
    "didMoveToSuperview",
    "didMoveToWindow",
    "didReceiveMemoryWarning",
    "didSave",
    "didTurnIntoFault",
    "diffuseColor",
    "dimensions",
    "direction",
    "directoryAttributes",
    "disableEditing",
    "disableUndoRegistration",
    "disableUpdates",
    "disabledBackground",
    "disablesAutomaticKeyboardDismissal",
    "discardContentIfPossible",
    "disconnect",
    "disconnectFromAllPeers",
    "disconnectTimeout",
    "diskCapacity",
    "dismiss",
    "dismissHeadingCalibrationDisplay",
    "dismissMoviePlayerViewControllerAnimated",
    "dispatch_object",
    "display",
    "displayIfNeeded",
    "displayName",
    "displayedPerson",
    "displayedProperties",
    "distanceFilter",
    "distinguishedNames",
    "documentState",
    "doesRelativeDateFormatting",
    "domain",
    "dominantLanguage",
    "dominantScript",
    "doubleValue",
    "downloadingAssets",
    "dragState",
    "drain",
    "draw",
    "drawableColorFormat",
    "drawableDepthFormat",
    "drawableHeight",
    "drawableMultisample",
    "drawableProperties",
    "drawableStencilFormat",
    "drawableWidth",
    "duplex",
    "duration",
    "durationWatched",
    "edgeAntialiasingMask",
    "editAction",
    "editButtonItem",
    "editViewDelegate",
    "editingAccessoryType",
    "editingAccessoryView",
    "editingStyle",
    "emissionLatitude",
    "emissionLongitude",
    "emissionRange",
    "emissiveColor",
    "emitterCells",
    "emitterDepth",
    "emitterMode",
    "emitterPosition",
    "emitterShape",
    "emitterSize",
    "emitterZPosition",
    "enableEditing",
    "enableInputClicksWhenVisible",
    "enablePostProcessing",
    "enableRate",
    "enableSetNeedsDisplay",
    "enableUndoRegistration",
    "enableUpdates",
    "enabled",
    "enabledRemoteNotificationTypes",
    "enablesReturnKeyAutomatically",
    "end",
    "endContentAccess",
    "endDate",
    "endEditing",
    "endGeneratingDeviceOrientationNotifications",
    "endGeneratingLibraryChangeNotifications",
    "endGeneratingPlaybackNotifications",
    "endIgnoringInteractionEvents",
    "endInterruption",
    "endOfDocument",
    "endPlaybackTime",
    "endPoint",
    "endProgress",
    "endReceivingRemoteControlEvents",
    "endSeeking",
    "endUndoGrouping",
    "endUpdates",
    "entities",
    "entitiesByName",
    "entity",
    "entityMappings",
    "entityMappingsByName",
    "entityMigrationPolicyClassName",
    "entityName",
    "entityVersionHashesByName",
    "envMode",
    "environment",
    "era",
    "eraSymbols",
    "error",
    "errorComment",
    "errorDomain",
    "errorLog",
    "errorStatusCode",
    "estimatedDataRate",
    "estimatedOutputFileLength",
    "event",
    "eventIdentifier",
    "eventStore",
    "eventStoreIdentifier",
    "events",
    "evictsObjectsWithDiscardedContent",
    "executableArchitectures",
    "executablePath",
    "executableURL",
    "executionBlocks",
    "expectedContentLength",
    "expectedPlayerCount",
    "expectsMediaDataInRealTime",
    "expiresDate",
    "exponentSymbol",
    "exposureMode",
    "exposurePointOfInterest",
    "expression",
    "expressionBlock",
    "expressionResultType",
    "expressionType",
    "extendedLanguageTag",
    "extendedLogData",
    "extendedLogDataStringEncoding",
    "extent",
    "extraAttributes",
    "failureResponse",
    "familyName",
    "fastestEncoding",
    "faultingState",
    "fetchBatchSize",
    "fetchLimit",
    "fetchOffset",
    "fetchRequest",
    "fetchRequestTemplatesByName",
    "fetchedObjects",
    "fileAttributes",
    "fileCreationDate",
    "fileDescriptor",
    "fileExtensionHidden",
    "fileGroupOwnerAccountID",
    "fileGroupOwnerAccountName",
    "fileHFSCreatorCode",
    "fileHFSTypeCode",
    "fileHandleForReading",
    "fileHandleForWriting",
    "fileIsAppendOnly",
    "fileIsImmutable",
    "fileLengthLimit",
    "fileModificationDate",
    "fileOwnerAccountID",
    "fileOwnerAccountName",
    "filePathURL",
    "filePosixPermissions",
    "fileReferenceURL",
    "fileSize",
    "fileSystemFileNumber",
    "fileSystemNumber",
    "fileSystemRepresentation",
    "fileType",
    "fileURL",
    "fileWrappers",
    "filename",
    "fill",
    "fillColor",
    "fillMode",
    "fillRule",
    "filter",
    "filterPredicates",
    "filters",
    "finalize",
    "finishDecoding",
    "finishEncoding",
    "finishWriting",
    "finishedSelectedImage",
    "finishedUnselectedImage",
    "fire",
    "fireDate",
    "firmwareRevision",
    "firstDayOfTheWeek",
    "firstIndex",
    "firstObject",
    "firstOtherButtonIndex",
    "firstWeekday",
    "flashMode",
    "flashScrollIndicators",
    "flatness",
    "floatValue",
    "focusMode",
    "focusPointOfInterest",
    "fog",
    "font",
    "fontName",
    "fontSize",
    "footerHeight",
    "foregroundColor",
    "formatDescription",
    "formatDescriptions",
    "formatWidth",
    "formattedValue",
    "formatterBehavior",
    "forwardPlaybackEndTime",
    "fragment",
    "frame",
    "frameDuration",
    "frameInterval",
    "frameLength",
    "framesDisplayed",
    "framesPerSecond",
    "frequency",
    "friends",
    "fromValue",
    "fullResolutionImage",
    "fullScreenImage",
    "function",
    "generatesCalendarDates",
    "generatesDecimalNumbers",
    "gestureRecognizers",
    "getCFRunLoop",
    "glCreateProgram",
    "glFinish",
    "glFlush",
    "glGetError",
    "glLoadIdentity",
    "glLoadPaletteFromModelViewMatrixOES",
    "glPopGroupMarkerEXT",
    "glPopMatrix",
    "glPushMatrix",
    "glReleaseShaderCompiler",
    "glResolveMultisampleFramebufferAPPLE",
    "globallyUniqueString",
    "goBack",
    "goForward",
    "grammarDetails",
    "gravity",
    "green",
    "greenRange",
    "greenSpeed",
    "gregorianStartDate",
    "groupedResults",
    "groupingAttributes",
    "groupingLevel",
    "groupingSeparator",
    "groupingSize",
    "groupingType",
    "groupsByEvent",
    "gyroData",
    "gyroUpdateInterval",
    "hardwareRevision",
    "hasAction",
    "hasAlarms",
    "hasAttendees",
    "hasBytesAvailable",
    "hasChanges",
    "hasFlash",
    "hasLeftEyePosition",
    "hasMouthPosition",
    "hasNotes",
    "hasPassword",
    "hasProtectedContent",
    "hasRecurrenceRules",
    "hasRightEyePosition",
    "hasSpaceAvailable",
    "hasText",
    "hasTorch",
    "hasUnsavedChanges",
    "hash",
    "havingPredicate",
    "headerHeight",
    "heading",
    "headingAccuracy",
    "headingAvailable",
    "headingFilter",
    "headingOrientation",
    "height",
    "helpAnchor",
    "hidesAccessoryWhenEditing",
    "hidesBackButton",
    "hidesBottomBarWhenPushed",
    "hidesForSinglePage",
    "hidesWhenStopped",
    "highlightedAnimationImages",
    "highlightedImage",
    "highlightedTextColor",
    "horizontalAccuracy",
    "host",
    "hostName",
    "hour",
    "icons",
    "identifier",
    "identity",
    "ignoredWords",
    "image",
    "imageCropRect",
    "imageEdgeInsets",
    "imageInsets",
    "imageOrientation",
    "imageView",
    "images",
    "includedServices",
    "includesPendingChanges",
    "includesPropertyValues",
    "includesSubentities",
    "indentationLevel",
    "indentationWidth",
    "indexOfNowPlayingItem",
    "indexPathByRemovingLastIndex",
    "indexPathForSelectedRow",
    "indexPathsForSelectedRows",
    "indexPathsForVisibleRows",
    "indexTitle",
    "indicatedBitrate",
    "indicatorStyle",
    "infoDictionary",
    "init",
    "initToMemory",
    "initialPlaybackTime",
    "inlandWater",
    "input",
    "inputAccessoryView",
    "inputDelegate",
    "inputImageMaximumSize",
    "inputIsAvailable",
    "inputKeys",
    "inputMeterLevel",
    "inputParameters",
    "inputPorts",
    "inputStream",
    "inputView",
    "inputs",
    "insertedObjects",
    "instanceAlphaOffset",
    "instanceBlueOffset",
    "instanceColor",
    "instanceCount",
    "instanceDelay",
    "instanceGreenOffset",
    "instanceRedOffset",
    "instanceTransform",
    "instantiateInitialViewController",
    "instructions",
    "intValue",
    "integerValue",
    "interfaceOrientation",
    "interiorPolygons",
    "internationalCurrencySymbol",
    "interval",
    "invalidProductIdentifiers",
    "invalidate",
    "invalidatePath",
    "inverseRelationship",
    "invert",
    "invertedSet",
    "inviteHandler",
    "inviter",
    "invocation",
    "invoke",
    "isAbsolutePath",
    "isAbstract",
    "isAccelerometerActive",
    "isAccelerometerAvailable",
    "isAccessibilityElement",
    "isActionInProgress",
    "isActive",
    "isAdditive",
    "isAdjustingExposure",
    "isAdjustingFocus",
    "isAdjustingWhiteBalance",
    "isAirPlayVideoActive",
    "isAllDay",
    "isAnimating",
    "isAtEnd",
    "isAuthenticated",
    "isAvailable",
    "isBannerLoaded",
    "isBannerViewActionInProgress",
    "isBatteryMonitoringEnabled",
    "isBeingDismissed",
    "isBeingPresented",
    "isBroadcasted",
    "isCancelled",
    "isCapturingStillImage",
    "isClosedCaptionDisplayEnabled",
    "isCompatibleWithSavedPhotosAlbum",
    "isCompleted",
    "isComposable",
    "isConcurrent",
    "isConflict",
    "isConnected",
    "isContentDiscarded",
    "isContinuous",
    "isCountOnlyRequest",
    "isCumulative",
    "isCustomizing",
    "isDaylightSavingTime",
    "isDecelerating",
    "isDeleted",
    "isDetached",
    "isDeviceMotionActive",
    "isDeviceMotionAvailable",
    "isDirectionalLockEnabled",
    "isDirectory",
    "isDiscardable",
    "isDoubleSided",
    "isDraggable",
    "isDragging",
    "isEditable",
    "isEditing",
    "isEmpty",
    "isEnabled",
    "isExclusiveTouch",
    "isExecuting",
    "isExportable",
    "isExposurePointOfInterestSupported",
    "isFault",
    "isFileReferenceURL",
    "isFileURL",
    "isFinished",
    "isFirstResponder",
    "isFlashActive",
    "isFlashAvailable",
    "isFocusPointOfInterestSupported",
    "isFriend",
    "isFullscreen",
    "isGathering",
    "isGeneratingDeviceOrientationNotifications",
    "isGeocoding",
    "isGeometryFlipped",
    "isGyroActive",
    "isGyroAvailable",
    "isHTTPOnly",
    "isHidden",
    "isHighlighted",
    "isHosted",
    "isIdleTimerDisabled",
    "isIgnoringInteractionEvents",
    "isImmutable",
    "isIndexed",
    "isIndexedBySpotlight",
    "isInputMeteringEnabled",
    "isInserted",
    "isInterrupted",
    "isKeyWindow",
    "isLenient",
    "isLoaded",
    "isLoading",
    "isMagnetometerActive",
    "isMagnetometerAvailable",
    "isMainThread",
    "isMenuVisible",
    "isMeteringEnabled",
    "isMicrophoneMuted",
    "isMirrored",
    "isMirroringSupported",
    "isModalInPopover",
    "isMomentary",
    "isMovingFromParentViewController",
    "isMovingToParentViewController",
    "isMultipleTouchEnabled",
    "isMultitaskingSupported",
    "isNavigationBarHidden",
    "isNetworkActivityIndicatorVisible",
    "isNew",
    "isNotifying",
    "isOn",
    "isOneway",
    "isOpaque",
    "isOptional",
    "isOrdered",
    "isOrientationSupported",
    "isOutputMeteringEnabled",
    "isPagingEnabled",
    "isPartialStringValidationEnabled",
    "isPaused",
    "isPersistent",
    "isPlayable",
    "isPlaybackBufferEmpty",
    "isPlaybackBufferFull",
    "isPlaybackLikelyToKeepUp",
    "isPlaying",
    "isPopoverVisible",
    "isPreparedToPlay",
    "isProtectedDataAvailable",
    "isProximityMonitoringEnabled",
    "isProximitySensingEnabled",
    "isProxy",
    "isQuerying",
    "isReadOnly",
    "isReadable",
    "isReady",
    "isReadyForDisplay",
    "isReadyForMoreMediaData",
    "isRecording",
    "isRedoing",
    "isRegularFile",
    "isRemovedOnCompletion",
    "isResolved",
    "isRunning",
    "isScrollEnabled",
    "isSearchResultsButtonSelected",
    "isSecure",
    "isSecureTextEntry",
    "isSelected",
    "isSelfContained",
    "isSessionOnly",
    "isStarted",
    "isStatusBarHidden",
    "isStopped",
    "isStoredInExternalRecord",
    "isSubjectAreaChangeMonitoringEnabled",
    "isSubscribed",
    "isSuspended",
    "isSymbolicLink",
    "isTemporaryID",
    "isToMany",
    "isToolbarHidden",
    "isTorchAvailable",
    "isTouchInside",
    "isTracking",
    "isTransient",
    "isTranslucent",
    "isUnderage",
    "isUndoRegistrationEnabled",
    "isUndoing",
    "isUpdated",
    "isUpdating",
    "isUserInteractionEnabled",
    "isUserLocationVisible",
    "isValid",
    "isVideoMaxFrameDurationSupported",
    "isVideoMinFrameDurationSupported",
    "isVideoMirrored",
    "isVideoMirroringSupported",
    "isVideoOrientationSupported",
    "isViewLoaded",
    "isVisible",
    "isWrapped",
    "isZoomBouncing",
    "isZoomEnabled",
    "isZooming",
    "isoCountryCode",
    "issue",
    "issues",
    "itemSections",
    "items",
    "jobName",
    "key",
    "keyEnumerator",
    "keyPath",
    "keySpace",
    "keyTimes",
    "keyWindow",
    "keyboardAppearance",
    "keyboardType",
    "keyspace",
    "label",
    "landscapeImagePhone",
    "landscapeImagePhoneInsets",
    "languageCode",
    "languageMap",
    "lastIndex",
    "lastModifiedDate",
    "lastObject",
    "lastPathComponent",
    "lastReportedDate",
    "lastTurnDate",
    "layer",
    "layerInstructions",
    "layoutIfNeeded",
    "layoutSublayers",
    "layoutSubviews",
    "leaderboardDelegate",
    "leading",
    "leftBarButtonItem",
    "leftBarButtonItems",
    "leftCalloutAccessoryView",
    "leftCapWidth",
    "leftExpression",
    "leftEyePosition",
    "leftItemsSupplementBackButton",
    "leftView",
    "leftViewMode",
    "length",
    "level",
    "levelsOfDetail",
    "levelsOfDetailBias",
    "levelsOfUndo",
    "lifetime",
    "lifetimeRange",
    "light0",
    "light1",
    "light2",
    "lightModelAmbientColor",
    "lightModelTwoSided",
    "lightingType",
    "lineBreakMode",
    "lineCap",
    "lineCapStyle",
    "lineDashPattern",
    "lineDashPhase",
    "lineHeight",
    "lineJoin",
    "lineJoinStyle",
    "lineNumber",
    "lineWidth",
    "linearAttenuation",
    "load",
    "loadState",
    "loadView",
    "loadedTimeRanges",
    "localName",
    "localPlayerScore",
    "locale",
    "localeIdentifier",
    "locality",
    "localizationDictionary",
    "localizations",
    "localizedDescription",
    "localizedFailureReason",
    "localizedInfoDictionary",
    "localizedModel",
    "localizedName",
    "localizedNameOfSavingComputer",
    "localizedRecoveryOptions",
    "localizedRecoverySuggestion",
    "localizedTitle",
    "location",
    "locationServicesEnabled",
    "locations",
    "lock",
    "lockedObjects",
    "longEraSymbols",
    "longLongValue",
    "longValue",
    "lossyCString",
    "lowercaseString",
    "lyrics",
    "machPort",
    "magneticField",
    "magneticHeading",
    "magnetometerData",
    "magnetometerUpdateInterval",
    "magnificationFilter",
    "mailComposeDelegate",
    "main",
    "mainDocumentURL",
    "makeKeyAndVisible",
    "makeKeyWindow",
    "managedObjectClassName",
    "managedObjectContext",
    "managedObjectModel",
    "manufacturer",
    "mapType",
    "mapView",
    "mappingModel",
    "mappingType",
    "markAsFinished",
    "markedTextRange",
    "markedTextStyle",
    "markupText",
    "mask",
    "masksToBounds",
    "matchData",
    "matchID",
    "matchOutcome",
    "matchRequest",
    "matchmakerDelegate",
    "material",
    "matrix",
    "maxConcurrentOperationCount",
    "maxCount",
    "maxDuration",
    "maxPlayers",
    "maxRange",
    "maxRecordedDuration",
    "maxRecordedFileSize",
    "maximum",
    "maximumContentHeight",
    "maximumContentWidth",
    "maximumDate",
    "maximumFractionDigits",
    "maximumIntegerDigits",
    "maximumNumberOfTouches",
    "maximumPoints",
    "maximumRegionMonitoringDistance",
    "maximumSignificantDigits",
    "maximumSize",
    "maximumTrackTintColor",
    "maximumValue",
    "maximumValueImage",
    "maximumZoomScale",
    "mediaPlaybackAllowsAirPlay",
    "mediaPlaybackRequiresUserAction",
    "mediaSubTypes",
    "mediaTimeScale",
    "mediaType",
    "mediaTypes",
    "memoryCapacity",
    "menuFrame",
    "menuItems",
    "mergePolicy",
    "mergeType",
    "message",
    "messageComposeDelegate",
    "metadata",
    "methodReturnLength",
    "methodReturnType",
    "methodSignature",
    "migrationProgress",
    "minCount",
    "minFrameDuration",
    "minFreeDiskSpaceLimit",
    "minPlayers",
    "minificationFilter",
    "minificationFilterBias",
    "minimum",
    "minimumDate",
    "minimumDaysInFirstWeek",
    "minimumFontSize",
    "minimumFractionDigits",
    "minimumIntegerDigits",
    "minimumNumberOfTouches",
    "minimumPressDuration",
    "minimumSignificantDigits",
    "minimumTrackTintColor",
    "minimumValue",
    "minimumValueImage",
    "minimumZoomScale",
    "minusSign",
    "minute",
    "minuteInterval",
    "mirroredScreen",
    "miterLimit",
    "mobileCountryCode",
    "mobileNetworkCode",
    "modalPresentationStyle",
    "modalTransitionStyle",
    "modalViewController",
    "mode",
    "model",
    "modelConfiguration",
    "modelID",
    "modelLayer",
    "modelNumber",
    "modelviewMatrix",
    "modificationDate",
    "monitoredRegions",
    "month",
    "monthSymbols",
    "monthsOfTheYear",
    "moreNavigationController",
    "mouthPosition",
    "movieControlMode",
    "movieFragmentInterval",
    "movieMediaTypes",
    "moviePlayer",
    "movieSourceType",
    "movieTimeScale",
    "multipleSelectionBackgroundView",
    "multiplier",
    "mutableBytes",
    "mutableCopy",
    "mutableString",
    "name",
    "naturalSize",
    "naturalTimeScale",
    "navigationBar",
    "navigationController",
    "navigationItem",
    "navigationOrientation",
    "needsDisplay",
    "needsDisplayOnBoundsChange",
    "needsLayout",
    "negativeFormat",
    "negativeInfinitySymbol",
    "negativePrefix",
    "negativeSuffix",
    "netServiceDomain",
    "netServiceName",
    "networkName",
    "networkPort",
    "networkServiceType",
    "newPersonViewDelegate",
    "newVersionNumber",
    "newsstandAssetDownload",
    "nextDaylightSavingTimeTransition",
    "nextObject",
    "nextResponder",
    "nibBundle",
    "nibName",
    "nilSymbol",
    "nominalFrameRate",
    "nonretainedObjectValue",
    "normalMatrix",
    "notANumberSymbol",
    "notes",
    "notificationBatchingInterval",
    "nowPlayingInfo",
    "nowPlayingItem",
    "numberOfArguments",
    "numberOfAssets",
    "numberOfButtons",
    "numberOfBytesTransferred",
    "numberOfCaptureGroups",
    "numberOfChannels",
    "numberOfComponents",
    "numberOfDroppedVideoFrames",
    "numberOfItems",
    "numberOfLines",
    "numberOfLoops",
    "numberOfObjects",
    "numberOfPages",
    "numberOfRanges",
    "numberOfSections",
    "numberOfSegments",
    "numberOfSegmentsDownloaded",
    "numberOfServerAddressChanges",
    "numberOfStalls",
    "numberOfTapsRequired",
    "numberOfTouches",
    "numberOfTouchesRequired",
    "numberStyle",
    "numberValue",
    "objCType",
    "object",
    "objectEnumerator",
    "objectID",
    "objectSnapshot",
    "objectZone",
    "objects",
    "observationInfo",
    "observedBitrate",
    "occurrenceCount",
    "ocean",
    "offsetInFile",
    "oldVersionNumber",
    "onTintColor",
    "opacity",
    "open",
    "operand",
    "operatingSystem",
    "operatingSystemName",
    "operatingSystemVersionString",
    "operationCount",
    "operations",
    "options",
    "organizer",
    "orientation",
    "originalAsset",
    "originalRequest",
    "originalTransaction",
    "orthography",
    "output",
    "outputFileType",
    "outputFileURL",
    "outputFormat",
    "outputImage",
    "outputImageMaximumSize",
    "outputKeys",
    "outputMeterLevel",
    "outputSettings",
    "outputStream",
    "outputType",
    "outputURL",
    "outputs",
    "overlay",
    "overlays",
    "overscanCompensation",
    "paddingCharacter",
    "paddingPosition",
    "pageCount",
    "pan",
    "panGestureRecognizer",
    "paperRect",
    "paperSize",
    "parameterString",
    "parameters",
    "parentContext",
    "parentGroup",
    "parentViewController",
    "parse",
    "parserError",
    "participantID",
    "participantRole",
    "participantStatus",
    "participantType",
    "participants",
    "passthroughViews",
    "password",
    "pasteboardTypes",
    "path",
    "pathComponents",
    "pathExtension",
    "pattern",
    "pause",
    "pauseOnWillResignActive",
    "payment",
    "peakHoldLevel",
    "peerID",
    "peoplePickerDelegate",
    "perMillSymbol",
    "percentComplete",
    "percentSymbol",
    "perform",
    "peripheral",
    "persistedSnapshot",
    "persistence",
    "persistentDomainNames",
    "persistentIdentifier",
    "persistentStore",
    "persistentStoreCoordinator",
    "persistentStoreOptions",
    "persistentStores",
    "personViewDelegate",
    "phase",
    "phoneNumber",
    "physicalMemory",
    "pinColor",
    "pinchGestureRecognizer",
    "pitch",
    "pixelAspectRatio",
    "pixelBufferPool",
    "placeholder",
    "placemark",
    "play",
    "playInputClick",
    "playableDuration",
    "playbackSessionID",
    "playbackStartDate",
    "playbackStartOffset",
    "playbackState",
    "player",
    "playerAttributes",
    "playerGroup",
    "playerID",
    "playerIDs",
    "playerItem",
    "playerScope",
    "playerStateUpdateHandler",
    "playersToInvite",
    "plusSign",
    "pointCount",
    "pointSize",
    "pointerValue",
    "points",
    "polygon",
    "polyline",
    "popoverArrowDirection",
    "popoverBackgroundViewClass",
    "popoverContentSize",
    "popoverController",
    "popoverLayoutMargins",
    "port",
    "portList",
    "ports",
    "position",
    "positiveFormat",
    "positiveInfinitySymbol",
    "positivePrefix",
    "positiveSuffix",
    "possibleTitles",
    "postalCode",
    "posterImage",
    "precomposedStringWithCanonicalMapping",
    "precomposedStringWithCompatibilityMapping",
    "predicate",
    "predicateFormat",
    "predicateOperatorType",
    "preferredFilename",
    "preferredFrameSize",
    "preferredFramesPerSecond",
    "preferredHardwareSampleRate",
    "preferredIOBufferDuration",
    "preferredLocalizations",
    "preferredMode",
    "preferredRate",
    "preferredTransform",
    "preferredVolume",
    "prepareForDeletion",
    "prepareForReuse",
    "prepareToDraw",
    "prepareToPlay",
    "prepareToRecord",
    "presentationLayer",
    "presentationSize",
    "presentedItemDidChange",
    "presentedItemOperationQueue",
    "presentedItemURL",
    "presentedViewController",
    "presentingViewController",
    "presentsWithGesture",
    "preservesDepth",
    "presetName",
    "previewItemTitle",
    "previewItemURL",
    "previousFailureCount",
    "price",
    "priceLocale",
    "primaryLanguage",
    "principalClass",
    "printFormatter",
    "printFormatters",
    "printInfo",
    "printPageRenderer",
    "printPaper",
    "printRect",
    "printableRect",
    "printerID",
    "printingItem",
    "printingItems",
    "privateFrameworksPath",
    "privateFrameworksURL",
    "processIdentifier",
    "processName",
    "processPendingChanges",
    "processorCount",
    "productIdentifier",
    "products",
    "progress",
    "progressImage",
    "progressTintColor",
    "progressViewStyle",
    "projectionMatrix",
    "prompt",
    "propagatesDeletesAtEndOfEvent",
    "properties",
    "propertiesByName",
    "propertiesToFetch",
    "propertiesToGroupBy",
    "property",
    "propertyCache",
    "propertyList",
    "propertyListFromStringsFileFormat",
    "proposedCredential",
    "protectionSpace",
    "protocol",
    "protocolFamily",
    "protocolString",
    "protocolStrings",
    "providesPreciseDurationAndTiming",
    "providesPresentationContextTransitionStyle",
    "proximityState",
    "proxyType",
    "publicID",
    "publish",
    "purpose",
    "quadraticAttenuation",
    "quantity",
    "quarter",
    "quarterSymbols",
    "quaternion",
    "query",
    "queuePriority",
    "radius",
    "raise",
    "range",
    "rangeValue",
    "rank",
    "rasterizationScale",
    "rate",
    "readDataToEndOfFile",
    "readInBackgroundAndNotify",
    "readRSSI",
    "readToEndOfFileInBackgroundAndNotify",
    "readabilityHandler",
    "realm",
    "reason",
    "receivesCredentialSecurely",
    "recipients",
    "record",
    "recordedDuration",
    "recordedFileSize",
    "recoveryAttempter",
    "recurrenceEnd",
    "recurrenceRule",
    "recurrenceRules",
    "red",
    "redRange",
    "redSpeed",
    "redo",
    "redoActionIsDiscardable",
    "redoActionName",
    "redoMenuItemTitle",
    "referenceRestrictions",
    "refresh",
    "refreshCurrentPreviewItem",
    "refreshSourcesIfNecessary",
    "region",
    "registerForLocalNotifications",
    "registeredObjects",
    "regularExpression",
    "regularFileContents",
    "relationshipKeyPathsForPrefetching",
    "relationshipMappings",
    "relationshipsByName",
    "relativeOffset",
    "relativePath",
    "relativeString",
    "release",
    "reload",
    "reloadAllComponents",
    "reloadData",
    "reloadInputViews",
    "reloadSectionIndexTitles",
    "remoteParticipantVolume",
    "removeAllActions",
    "removeAllAnimations",
    "removeAllCachedResponses",
    "removeAllImages",
    "removeAllIndexes",
    "removeAllItems",
    "removeAllObjects",
    "removeAllPoints",
    "removeAllSegments",
    "removeAllURLs",
    "removeFromParentViewController",
    "removeFromPrintPageRenderer",
    "removeFromSuperlayer",
    "removeFromSuperview",
    "removeLastObject",
    "renamingIdentifier",
    "renderMode",
    "renderScale",
    "renderSize",
    "repeatCalendar",
    "repeatCount",
    "repeatDuration",
    "repeatInterval",
    "repeatMode",
    "replacementString",
    "representativeItem",
    "request",
    "requestData",
    "requestExpression",
    "requestMethod",
    "requestType",
    "requestedTimeToleranceAfter",
    "requestedTimeToleranceBefore",
    "requiredContentSizeIdentifiers",
    "reservedSpaceLength",
    "reset",
    "resignFirstResponder",
    "resignKeyWindow",
    "resolve",
    "resourcePath",
    "resourceSpecifier",
    "resourceURL",
    "response",
    "restoreCompletedTransactions",
    "result",
    "resultCount",
    "resultType",
    "results",
    "resumeOnDidBecomeActive",
    "retain",
    "retainArguments",
    "retainCount",
    "retainsRegisteredObjects",
    "retrieveConnectedPeripherals",
    "returnKeyType",
    "returnsDistinctResults",
    "returnsObjectsAsFaults",
    "reuseIdentifier",
    "reverseObjectEnumerator",
    "reversePlaybackEndTime",
    "reversedOrderedSet",
    "reversedSortDescriptor",
    "reversesTitleShadowWhenHighlighted",
    "rightBarButtonItem",
    "rightBarButtonItems",
    "rightCalloutAccessoryView",
    "rightExpression",
    "rightEyePosition",
    "rightView",
    "rightViewMode",
    "roll",
    "rollback",
    "rootViewController",
    "rotatingFooterView",
    "rotatingHeaderView",
    "rotation",
    "rotationMatrix",
    "rotationMode",
    "rotationRate",
    "roundingIncrement",
    "roundingMode",
    "row",
    "rowHeight",
    "run",
    "runLoopModes",
    "sampleBufferCallbackQueue",
    "sampleBufferDelegate",
    "savingFileType",
    "scale",
    "scaleRange",
    "scaleSpeed",
    "scalesPageToFit",
    "scalingMode",
    "scanLocation",
    "scheduledLocalNotifications",
    "scheme",
    "scopeBarBackgroundImage",
    "scopeButtonTitles",
    "scores",
    "screen",
    "scrollIndicatorInsets",
    "scrollMode",
    "scrollView",
    "scrollsToTop",
    "searchBar",
    "searchContentsController",
    "searchDisplayController",
    "searchFieldBackgroundPositionAdjustment",
    "searchForBrowsableDomains",
    "searchForRegistrationDomains",
    "searchResultsDataSource",
    "searchResultsDelegate",
    "searchResultsTableView",
    "searchResultsTitle",
    "searchScopes",
    "searchTextPositionAdjustment",
    "second",
    "secondaryGroupingSize",
    "secondsFromGMT",
    "section",
    "sectionFooterHeight",
    "sectionHeaderHeight",
    "sectionIndexMinimumDisplayRowCount",
    "sectionIndexTitles",
    "sectionNameKeyPath",
    "sectionTitles",
    "sections",
    "seed",
    "seekToEndOfFile",
    "seekableTimeRanges",
    "segmentedControlStyle",
    "segments",
    "segmentsDownloadedDuration",
    "selectedAnnotations",
    "selectedBackgroundView",
    "selectedCalendars",
    "selectedImage",
    "selectedImageTintColor",
    "selectedIndex",
    "selectedItem",
    "selectedRange",
    "selectedScopeButtonIndex",
    "selectedSegmentIndex",
    "selectedTextColor",
    "selectedTextRange",
    "selectedViewController",
    "selectionAffinity",
    "selectionIndicatorImage",
    "selectionStyle",
    "selector",
    "self",
    "sender",
    "separatorColor",
    "separatorStyle",
    "serialNumber",
    "serializedRepresentation",
    "serverAddress",
    "serverTrust",
    "service",
    "services",
    "session",
    "sessionID",
    "sessionMode",
    "sessionPreset",
    "set",
    "setDefaults",
    "setFill",
    "setNeedsDisplay",
    "setNeedsLayout",
    "setPositions",
    "setStroke",
    "settings",
    "shadowColor",
    "shadowOffset",
    "shadowOpacity",
    "shadowPath",
    "shadowRadius",
    "sharedFrameworksPath",
    "sharedFrameworksURL",
    "sharedSupportPath",
    "sharedSupportURL",
    "sharegroup",
    "shininess",
    "shortMonthSymbols",
    "shortQuarterSymbols",
    "shortStandaloneMonthSymbols",
    "shortStandaloneQuarterSymbols",
    "shortStandaloneWeekdaySymbols",
    "shortValue",
    "shortWeekdaySymbols",
    "shouldAutoplay",
    "shouldIndentWhileEditing",
    "shouldOptimizeForNetworkUse",
    "shouldProcessNamespaces",
    "shouldRasterize",
    "shouldRefreshRefetchedObjects",
    "shouldReportNamespacePrefixes",
    "shouldResolveExternalEntities",
    "shouldSetDefaultLeaderboard",
    "shouldShowLinkedPeople",
    "show",
    "showExistingMatches",
    "showingDeleteConfirmation",
    "showsBookmarkButton",
    "showsCameraControls",
    "showsCancelButton",
    "showsCompletionBanner",
    "showsDeviceMovementDisplay",
    "showsDoneButton",
    "showsHorizontalScrollIndicator",
    "showsPageRange",
    "showsReorderControl",
    "showsRouteButton",
    "showsScopeBar",
    "showsSearchResultsButton",
    "showsSelectionIndicator",
    "showsTouchWhenHighlighted",
    "showsUserLocation",
    "showsVerticalScrollIndicator",
    "showsVolumeSlider",
    "shuffleMode",
    "signal",
    "signedURLRequest",
    "size",
    "sizeToFit",
    "skipDescendants",
    "skipDescendents",
    "skipToBeginning",
    "skipToNextItem",
    "skipToPreviousItem",
    "smallestEncoding",
    "snapshot",
    "socket",
    "socketType",
    "sortDescriptors",
    "sortedArrayHint",
    "soundName",
    "source",
    "sourceContext",
    "sourceEndpoint",
    "sourceEntityName",
    "sourceEntityVersionHash",
    "sourceExpression",
    "sourceIdentifier",
    "sourceModel",
    "sourceObject",
    "sourcePixelBufferAttributes",
    "sourceTrackID",
    "sourceType",
    "sourceURL",
    "sourceViewController",
    "sources",
    "specularColor",
    "speed",
    "spellCheckingType",
    "spin",
    "spinRange",
    "spineLocation",
    "splitViewController",
    "spotCutoff",
    "spotDirection",
    "spotExponent",
    "stackSize",
    "stalenessInterval",
    "standaloneMonthSymbols",
    "standaloneQuarterSymbols",
    "standaloneWeekdaySymbols",
    "standardizedURL",
    "start",
    "startAccelerometerUpdates",
    "startAnimating",
    "startDate",
    "startDeviceMotionUpdates",
    "startGyroUpdates",
    "startLoading",
    "startMagnetometerUpdates",
    "startMonitoring",
    "startMonitoringSignificantLocationChanges",
    "startPage",
    "startPoint",
    "startProgress",
    "startQuery",
    "startReading",
    "startRunning",
    "startUpdatingHeading",
    "startUpdatingLocation",
    "startVideoCapture",
    "startWriting",
    "state",
    "status",
    "statusBarFrame",
    "statusBarOrientation",
    "statusBarOrientationAnimationDuration",
    "statusBarStyle",
    "statusCode",
    "stepValue",
    "stop",
    "stopAccelerometerUpdates",
    "stopAnimating",
    "stopDeviceMotionUpdates",
    "stopGyroUpdates",
    "stopLoading",
    "stopMagnetometerUpdates",
    "stopMonitoring",
    "stopMonitoringSignificantLocationChanges",
    "stopQuery",
    "stopRecording",
    "stopRunning",
    "stopScan",
    "stopUpdatingHeading",
    "stopUpdatingLocation",
    "stopVideoCapture",
    "storagePolicy",
    "storyboard",
    "streamError",
    "streamStatus",
    "string",
    "stringByAbbreviatingWithTildeInPath",
    "stringByDeletingLastPathComponent",
    "stringByDeletingPathExtension",
    "stringByExpandingTildeInPath",
    "stringByResolvingSymlinksInPath",
    "stringByStandardizingPath",
    "stringRepresentation",
    "stringValue",
    "strings",
    "stroke",
    "strokeColor",
    "strokeEnd",
    "strokeStart",
    "style",
    "subAdministrativeArea",
    "subLocality",
    "subThoroughfare",
    "subentities",
    "subentitiesByName",
    "subgroups",
    "sublayerTransform",
    "sublayers",
    "subpredicates",
    "subscriberCellularProvider",
    "subscriberCellularProviderDidUpdateNotifier",
    "subtitle",
    "subtype",
    "subviews",
    "suggestedFilename",
    "superclass",
    "superentity",
    "superlayer",
    "superview",
    "supportedEventAvailabilities",
    "supportedFileTypes",
    "symbolicLinkDestinationURL",
    "synchronize",
    "synchronizeFile",
    "systemID",
    "systemName",
    "systemUptime",
    "systemVersion",
    "tabBar",
    "tabBarController",
    "tabBarItem",
    "tableFooterView",
    "tableHeaderView",
    "tableView",
    "tag",
    "tagSchemes",
    "takePicture",
    "tapCount",
    "target",
    "tensionValues",
    "text",
    "textAlignment",
    "textAttributesForNegativeInfinity",
    "textAttributesForNegativeValues",
    "textAttributesForNil",
    "textAttributesForNotANumber",
    "textAttributesForPositiveInfinity",
    "textAttributesForPositiveValues",
    "textAttributesForZero",
    "textColor",
    "textEncodingName",
    "textInputView",
    "textLabel",
    "texture2d0",
    "texture2d1",
    "textureCubeMap",
    "textureOrder",
    "textureOrigin",
    "thoroughfare",
    "threadDictionary",
    "threadPriority",
    "thumbTintColor",
    "thumbnail",
    "tileSize",
    "time",
    "timeInterval",
    "timeIntervalSince1970",
    "timeIntervalSinceNow",
    "timeIntervalSinceReferenceDate",
    "timeMapping",
    "timeOffset",
    "timeRange",
    "timeScope",
    "timeSinceFirstResume",
    "timeSinceLastDraw",
    "timeSinceLastResume",
    "timeSinceLastUpdate",
    "timeStyle",
    "timeZone",
    "timedMetadata",
    "timeoutInterval",
    "timestamp",
    "timingFunction",
    "timingFunctions",
    "tintColor",
    "title",
    "titleEdgeInsets",
    "titleLabel",
    "titlePositionAdjustment",
    "titleShadowOffset",
    "titleTextAttributes",
    "titleView",
    "toValue",
    "tokenizer",
    "toolbar",
    "toolbarItems",
    "topCapHeight",
    "topItem",
    "topViewController",
    "torchLevel",
    "torchMode",
    "totalCostLimit",
    "totalSampleDataLength",
    "track",
    "trackID",
    "trackImage",
    "trackTintColor",
    "tracks",
    "transactionDate",
    "transactionIdentifier",
    "transactionReceipt",
    "transactionState",
    "transactions",
    "transform",
    "transitionStyle",
    "trueHeading",
    "truncationMode",
    "tryLock",
    "turnBasedMatchmakerDelegate",
    "twoDigitStartDate",
    "type",
    "unachievedDescription",
    "undo",
    "undoActionIsDiscardable",
    "undoActionName",
    "undoManager",
    "undoMenuItemTitle",
    "undoNestedGroup",
    "uniqueID",
    "uniqueIdentifier",
    "unknownPersonViewDelegate",
    "unload",
    "unlock",
    "unlockForConfiguration",
    "unmarkText",
    "unregisterForLocalNotifications",
    "unregisterForRemoteNotifications",
    "unsignedCharValue",
    "unsignedIntValue",
    "unsignedIntegerValue",
    "unsignedLongLongValue",
    "unsignedLongValue",
    "unsignedShortValue",
    "unusedTrackID",
    "update",
    "updateCurrentPageDisplay",
    "updateInterval",
    "updateMeters",
    "updatedObjects",
    "uppercaseString",
    "url",
    "useApplicationAudioSession",
    "useConstantColor",
    "user",
    "userAcceleration",
    "userInfo",
    "userInterfaceIdiom",
    "userInterfaceLayoutDirection",
    "userLocation",
    "userTrackingMode",
    "username",
    "usesAirPlayVideoWhileAirPlayScreenIsActive",
    "usesEvenOddFillRule",
    "usesGroupingSeparator",
    "usesSignificantDigits",
    "usesStoreSpecificMigrationManager",
    "validationPredicates",
    "validationWarnings",
    "value",
    "valueExpression",
    "valueFunction",
    "valueListAttributes",
    "valueLists",
    "valueTransformerName",
    "values",
    "variable",
    "velocity",
    "velocityRange",
    "version",
    "versionHash",
    "versionHashModifier",
    "versionIdentifiers",
    "verticalAccuracy",
    "veryShortMonthSymbols",
    "veryShortStandaloneMonthSymbols",
    "veryShortStandaloneWeekdaySymbols",
    "veryShortWeekdaySymbols",
    "videoComposition",
    "videoGravity",
    "videoMaxFrameDuration",
    "videoMaxScaleAndCropFactor",
    "videoMaximumDuration",
    "videoMinFrameDuration",
    "videoOrientation",
    "videoPath",
    "videoQuality",
    "videoScaleAndCropFactor",
    "videoSettings",
    "videoTracks",
    "view",
    "viewControllers",
    "viewDidLayoutSubviews",
    "viewDidLoad",
    "viewDidUnload",
    "viewPrintFormatter",
    "viewWillLayoutSubviews",
    "viewWillUnload",
    "visibleCells",
    "visibleMapRect",
    "visibleRect",
    "visibleViewController",
    "volatileDomainNames",
    "volume",
    "wait",
    "waitForDataInBackgroundAndNotify",
    "waitUntilAllOperationsAreFinished",
    "waitUntilFinished",
    "wantsFullScreenLayout",
    "wantsSoftwareDimming",
    "week",
    "weekNumber",
    "weekOfMonth",
    "weekOfYear",
    "weekday",
    "weekdayOrdinal",
    "weekdaySymbols",
    "weeksOfTheYear",
    "whiteBalanceMode",
    "width",
    "willSave",
    "willTurnIntoFault",
    "window",
    "windowLevel",
    "windows",
    "wraps",
    "writeabilityHandler",
    "x",
    "xAcceleration",
    "xHeight",
    "xSize",
    "y",
    "yAcceleration",
    "ySize",
    "yaw",
    "year",
    "yearForWeekOfYear",
    "z",
    "zAcceleration",
    "zPosition",
    "zSize",
    "zeroSymbol",
    "zone",
    "zoomScale",
    {
      "trigger": "ABAddressBookAddRecord",
      "contents": "ABAddressBookAddRecord(${1:ABAddressBookRef addressBook}, ${2:ABRecordRef record}, ${3:CFErrorRef* error})"
    },
    {
      "trigger": "ABAddressBookCopyArrayOfAllGroups",
      "contents": "ABAddressBookCopyArrayOfAllGroups(${1:ABAddressBookRef addressBook})"
    },
    {
      "trigger": "ABAddressBookCopyArrayOfAllGroupsInSource",
      "contents": "ABAddressBookCopyArrayOfAllGroupsInSource(${1:ABAddressBookRef addressBook}, ${2:ABRecordRef source})"
    },
    {
      "trigger": "ABAddressBookCopyArrayOfAllPeople",
      "contents": "ABAddressBookCopyArrayOfAllPeople(${1:ABAddressBookRef addressBook})"
    },
    {
      "trigger": "ABAddressBookCopyArrayOfAllPeopleInSource",
      "contents": "ABAddressBookCopyArrayOfAllPeopleInSource(${1:ABAddressBookRef addressBook}, ${2:ABRecordRef source})"
    },
    {
      "trigger": "ABAddressBookCopyArrayOfAllPeopleInSourceWithSortOrdering",
      "contents": "ABAddressBookCopyArrayOfAllPeopleInSourceWithSortOrdering(${1:ABAddressBookRef addressBook}, ${2:ABRecordRef source}, ${3:ABPersonSortOrdering sortOrdering})"
    },
    {
      "trigger": "ABAddressBookCopyArrayOfAllSources",
      "contents": "ABAddressBookCopyArrayOfAllSources(${1:ABAddressBookRef addressBook})"
    },
    {
      "trigger": "ABAddressBookCopyDefaultSource",
      "contents": "ABAddressBookCopyDefaultSource(${1:ABAddressBookRef addressBook})"
    },
    {
      "trigger": "ABAddressBookCopyLocalizedLabel",
      "contents": "ABAddressBookCopyLocalizedLabel(${1:CFStringRef label})"
    },
    {
      "trigger": "ABAddressBookCopyPeopleWithName",
      "contents": "ABAddressBookCopyPeopleWithName(${1:ABAddressBookRef addressBook}, ${2:CFStringRef name})"
    },
    {
      "trigger": "ABAddressBookErrorDomain (CFStringRef)",
      "contents": "ABAddressBookErrorDomain"
    },
    {
      "trigger": "ABAddressBookGetGroupCount",
      "contents": "ABAddressBookGetGroupCount(${1:ABAddressBookRef addressBook})"
    },
    {
      "trigger": "ABAddressBookGetGroupWithRecordID",
      "contents": "ABAddressBookGetGroupWithRecordID(${1:ABAddressBookRef addressBook}, ${2:ABRecordID recordID})"
    },
    {
      "trigger": "ABAddressBookGetPersonCount",
      "contents": "ABAddressBookGetPersonCount(${1:ABAddressBookRef addressBook})"
    },
    {
      "trigger": "ABAddressBookGetPersonWithRecordID",
      "contents": "ABAddressBookGetPersonWithRecordID(${1:ABAddressBookRef addressBook}, ${2:ABRecordID recordID})"
    },
    {
      "trigger": "ABAddressBookGetSourceWithRecordID",
      "contents": "ABAddressBookGetSourceWithRecordID(${1:ABAddressBookRef addressBook}, ${2:ABRecordID sourceID})"
    },
    {
      "trigger": "ABAddressBookHasUnsavedChanges",
      "contents": "ABAddressBookHasUnsavedChanges(${1:ABAddressBookRef addressBook})"
    },
    {
      "trigger": "ABAddressBookRegisterExternalChangeCallback",
      "contents": "ABAddressBookRegisterExternalChangeCallback(${1:ABAddressBookRef addressBook}, ${2:ABExternalChangeCallback callback}, ${3:void* context})"
    },
    {
      "trigger": "ABAddressBookRemoveRecord",
      "contents": "ABAddressBookRemoveRecord(${1:ABAddressBookRef addressBook}, ${2:ABRecordRef record}, ${3:CFErrorRef* error})"
    },
    {
      "trigger": "ABAddressBookRevert",
      "contents": "ABAddressBookRevert(${1:ABAddressBookRef addressBook})"
    },
    {
      "trigger": "ABAddressBookSave",
      "contents": "ABAddressBookSave(${1:ABAddressBookRef addressBook}, ${2:CFErrorRef* error})"
    },
    {
      "trigger": "ABAddressBookUnregisterExternalChangeCallback",
      "contents": "ABAddressBookUnregisterExternalChangeCallback(${1:ABAddressBookRef addressBook}, ${2:ABExternalChangeCallback callback}, ${3:void* context})"
    },
    {
      "trigger": "ABCreateStringWithAddressDictionary",
      "contents": "ABCreateStringWithAddressDictionary(${1:NSDictionary* address}, ${2:BOOL addCountryName})"
    },
    {
      "trigger": "ABGroupAddMember",
      "contents": "ABGroupAddMember(${1:ABRecordRef group}, ${2:ABRecordRef person}, ${3:CFErrorRef* error})"
    },
    {
      "trigger": "ABGroupCopyArrayOfAllMembers",
      "contents": "ABGroupCopyArrayOfAllMembers(${1:ABRecordRef group})"
    },
    {
      "trigger": "ABGroupCopyArrayOfAllMembersWithSortOrdering",
      "contents": "ABGroupCopyArrayOfAllMembersWithSortOrdering(${1:ABRecordRef group}, ${2:ABPersonSortOrdering sortOrdering})"
    },
    {
      "trigger": "ABGroupCopySource",
      "contents": "ABGroupCopySource(${1:ABRecordRef group})"
    },
    {
      "trigger": "ABGroupCreateInSource",
      "contents": "ABGroupCreateInSource(${1:ABRecordRef source})"
    },
    {
      "trigger": "ABGroupRemoveMember",
      "contents": "ABGroupRemoveMember(${1:ABRecordRef group}, ${2:ABRecordRef member}, ${3:CFErrorRef* error})"
    },
    {
      "trigger": "ABMultiValueAddValueAndLabel",
      "contents": "ABMultiValueAddValueAndLabel(${1:ABMutableMultiValueRef multiValue}, ${2:CFTypeRef value}, ${3:CFStringRef label}, ${4:ABMultiValueIdentifier* outIdentifier})"
    },
    {
      "trigger": "ABMultiValueCopyArrayOfAllValues",
      "contents": "ABMultiValueCopyArrayOfAllValues(${1:ABMultiValueRef multiValue})"
    },
    {
      "trigger": "ABMultiValueCopyLabelAtIndex",
      "contents": "ABMultiValueCopyLabelAtIndex(${1:ABMultiValueRef multiValue}, ${2:CFIndex index})"
    },
    {
      "trigger": "ABMultiValueCopyValueAtIndex",
      "contents": "ABMultiValueCopyValueAtIndex(${1:ABMultiValueRef multiValue}, ${2:CFIndex index})"
    },
    {
      "trigger": "ABMultiValueCreateMutable",
      "contents": "ABMultiValueCreateMutable(${1:ABPropertyType type})"
    },
    {
      "trigger": "ABMultiValueCreateMutableCopy",
      "contents": "ABMultiValueCreateMutableCopy(${1:ABMultiValueRef multiValue})"
    },
    {
      "trigger": "ABMultiValueGetCount",
      "contents": "ABMultiValueGetCount(${1:ABMultiValueRef multiValue})"
    },
    {
      "trigger": "ABMultiValueGetFirstIndexOfValue",
      "contents": "ABMultiValueGetFirstIndexOfValue(${1:ABMultiValueRef multiValue}, ${2:CFTypeRef value})"
    },
    {
      "trigger": "ABMultiValueGetIdentifierAtIndex",
      "contents": "ABMultiValueGetIdentifierAtIndex(${1:ABMultiValueRef multiValue}, ${2:CFIndex index})"
    },
    {
      "trigger": "ABMultiValueGetIndexForIdentifier",
      "contents": "ABMultiValueGetIndexForIdentifier(${1:ABMultiValueRef multiValue}, ${2:ABMultiValueIdentifier identifier})"
    },
    {
      "trigger": "ABMultiValueGetPropertyType",
      "contents": "ABMultiValueGetPropertyType(${1:ABMultiValueRef multiValue})"
    },
    {
      "trigger": "ABMultiValueInsertValueAndLabelAtIndex",
      "contents": "ABMultiValueInsertValueAndLabelAtIndex(${1:ABMutableMultiValueRef multiValue}, ${2:CFTypeRef value}, ${3:CFStringRef label}, ${4:CFIndex index}, ${5:ABMultiValueIdentifier* outIdentifier})"
    },
    {
      "trigger": "ABMultiValueRemoveValueAndLabelAtIndex",
      "contents": "ABMultiValueRemoveValueAndLabelAtIndex(${1:ABMutableMultiValueRef multiValue}, ${2:CFIndex index})"
    },
    {
      "trigger": "ABMultiValueReplaceLabelAtIndex",
      "contents": "ABMultiValueReplaceLabelAtIndex(${1:ABMutableMultiValueRef multiValue}, ${2:CFStringRef label}, ${3:CFIndex index})"
    },
    {
      "trigger": "ABMultiValueReplaceValueAtIndex",
      "contents": "ABMultiValueReplaceValueAtIndex(${1:ABMutableMultiValueRef multiValue}, ${2:CFTypeRef value}, ${3:CFIndex index})"
    },
    {
      "trigger": "ABPersonComparePeopleByName",
      "contents": "ABPersonComparePeopleByName(${1:ABRecordRef person1}, ${2:ABRecordRef person2}, ${3:ABPersonSortOrdering ordering})"
    },
    {
      "trigger": "ABPersonCopyArrayOfAllLinkedPeople",
      "contents": "ABPersonCopyArrayOfAllLinkedPeople(${1:ABRecordRef person})"
    },
    {
      "trigger": "ABPersonCopyImageData",
      "contents": "ABPersonCopyImageData(${1:ABRecordRef person})"
    },
    {
      "trigger": "ABPersonCopyImageDataWithFormat",
      "contents": "ABPersonCopyImageDataWithFormat(${1:ABRecordRef person}, ${2:ABPersonImageFormat format})"
    },
    {
      "trigger": "ABPersonCopyLocalizedPropertyName",
      "contents": "ABPersonCopyLocalizedPropertyName(${1:ABPropertyID property})"
    },
    {
      "trigger": "ABPersonCopySource",
      "contents": "ABPersonCopySource(${1:ABRecordRef person})"
    },
    {
      "trigger": "ABPersonCreateInSource",
      "contents": "ABPersonCreateInSource(${1:ABRecordRef source})"
    },
    {
      "trigger": "ABPersonCreatePeopleInSourceWithVCardRepresentation",
      "contents": "ABPersonCreatePeopleInSourceWithVCardRepresentation(${1:ABRecordRef source}, ${2:CFDataRef vCardData})"
    },
    {
      "trigger": "ABPersonCreateVCardRepresentationWithPeople",
      "contents": "ABPersonCreateVCardRepresentationWithPeople(${1:CFArrayRef people})"
    },
    {
      "trigger": "ABPersonGetTypeOfProperty",
      "contents": "ABPersonGetTypeOfProperty(${1:ABPropertyID property})"
    },
    {
      "trigger": "ABPersonHasImageData",
      "contents": "ABPersonHasImageData(${1:ABRecordRef person})"
    },
    {
      "trigger": "ABPersonRemoveImageData",
      "contents": "ABPersonRemoveImageData(${1:ABRecordRef person}, ${2:CFErrorRef* error})"
    },
    {
      "trigger": "ABPersonSetImageData",
      "contents": "ABPersonSetImageData(${1:ABRecordRef person}, ${2:CFDataRef imageData}, ${3:CFErrorRef* error})"
    },
    {
      "trigger": "ABRecordCopyCompositeName",
      "contents": "ABRecordCopyCompositeName(${1:ABRecordRef record})"
    },
    {
      "trigger": "ABRecordCopyValue",
      "contents": "ABRecordCopyValue(${1:ABRecordRef record}, ${2:ABPropertyID property})"
    },
    {
      "trigger": "ABRecordGetRecordID",
      "contents": "ABRecordGetRecordID(${1:ABRecordRef record})"
    },
    {
      "trigger": "ABRecordGetRecordType",
      "contents": "ABRecordGetRecordType(${1:ABRecordRef record})"
    },
    {
      "trigger": "ABRecordRemoveValue",
      "contents": "ABRecordRemoveValue(${1:ABRecordRef record}, ${2:ABPropertyID property}, ${3:CFErrorRef* error})"
    },
    {
      "trigger": "ABRecordSetValue",
      "contents": "ABRecordSetValue(${1:ABRecordRef record}, ${2:ABPropertyID property}, ${3:CFTypeRef value}, ${4:CFErrorRef* error})"
    },
    {
      "trigger": "ABRecordWithAddressBook:",
      "contents": "ABRecordWithAddressBook(${1:ABAddressBookRef addressBook})"
    },
    {
      "trigger": "ACAccountStoreDidChangeNotification (NSString*)",
      "contents": "ACAccountStoreDidChangeNotification"
    },
    {
      "trigger": "ACAccountTypeIdentifierTwitter (NSString*)",
      "contents": "ACAccountTypeIdentifierTwitter"
    },
    {
      "trigger": "ACErrorAccountAlreadyExists (5)",
      "contents": "ACErrorAccountAlreadyExists"
    },
    {
      "trigger": "ACErrorAccountAuthenticationFailed (3)",
      "contents": "ACErrorAccountAuthenticationFailed"
    },
    {
      "trigger": "ACErrorAccountMissingRequiredProperty (2)",
      "contents": "ACErrorAccountMissingRequiredProperty"
    },
    {
      "trigger": "ACErrorAccountNotFound (6)",
      "contents": "ACErrorAccountNotFound"
    },
    {
      "trigger": "ACErrorAccountTypeInvalid (4)",
      "contents": "ACErrorAccountTypeInvalid"
    },
    {
      "trigger": "ACErrorDomain (NSString*)",
      "contents": "ACErrorDomain"
    },
    {
      "trigger": "ACErrorPermissionDenied (7)",
      "contents": "ACErrorPermissionDenied"
    },
    {
      "trigger": "ACErrorUnknown (1)",
      "contents": "ACErrorUnknown"
    },
    {
      "trigger": "ADBannerContentSizeIdentifier320x50 (NSString*)",
      "contents": "ADBannerContentSizeIdentifier320x50"
    },
    {
      "trigger": "ADBannerContentSizeIdentifier480x32 (NSString*)",
      "contents": "ADBannerContentSizeIdentifier480x32"
    },
    {
      "trigger": "ADBannerContentSizeIdentifierLandscape (NSString*)",
      "contents": "ADBannerContentSizeIdentifierLandscape"
    },
    {
      "trigger": "ADBannerContentSizeIdentifierPortrait (NSString*)",
      "contents": "ADBannerContentSizeIdentifierPortrait"
    },
    {
      "trigger": "ADBannerView.sizeFromBannerContentSizeIdentifier:",
      "contents": "ADBannerView.sizeFromBannerContentSizeIdentifier(${1:NSString* contentSizeIdentifier})"
    },
    {
      "trigger": "ADErrorApplicationInactive (6)",
      "contents": "ADErrorApplicationInactive"
    },
    {
      "trigger": "ADErrorBannerVisibleWithoutContent (5)",
      "contents": "ADErrorBannerVisibleWithoutContent"
    },
    {
      "trigger": "ADErrorConfigurationError (4)",
      "contents": "ADErrorConfigurationError"
    },
    {
      "trigger": "ADErrorDomain (NSString*)",
      "contents": "ADErrorDomain"
    },
    {
      "trigger": "ADErrorInventoryUnavailable (3)",
      "contents": "ADErrorInventoryUnavailable"
    },
    {
      "trigger": "ADErrorLoadingThrottled (2)",
      "contents": "ADErrorLoadingThrottled"
    },
    {
      "trigger": "ADErrorServerFailure (1)",
      "contents": "ADErrorServerFailure"
    },
    {
      "trigger": "ADErrorUnknown (0)",
      "contents": "ADErrorUnknown"
    },
    {
      "trigger": "ALAssetOrientationDown (1)",
      "contents": "ALAssetOrientationDown"
    },
    {
      "trigger": "ALAssetOrientationDownMirrored (5)",
      "contents": "ALAssetOrientationDownMirrored"
    },
    {
      "trigger": "ALAssetOrientationLeft (2)",
      "contents": "ALAssetOrientationLeft"
    },
    {
      "trigger": "ALAssetOrientationLeftMirrored (6)",
      "contents": "ALAssetOrientationLeftMirrored"
    },
    {
      "trigger": "ALAssetOrientationRight (3)",
      "contents": "ALAssetOrientationRight"
    },
    {
      "trigger": "ALAssetOrientationRightMirrored (7)",
      "contents": "ALAssetOrientationRightMirrored"
    },
    {
      "trigger": "ALAssetOrientationUp (0)",
      "contents": "ALAssetOrientationUp"
    },
    {
      "trigger": "ALAssetOrientationUpMirrored (4)",
      "contents": "ALAssetOrientationUpMirrored"
    },
    {
      "trigger": "ALAssetPropertyDate (NSString*)",
      "contents": "ALAssetPropertyDate"
    },
    {
      "trigger": "ALAssetPropertyDuration (NSString*)",
      "contents": "ALAssetPropertyDuration"
    },
    {
      "trigger": "ALAssetPropertyLocation (NSString*)",
      "contents": "ALAssetPropertyLocation"
    },
    {
      "trigger": "ALAssetPropertyOrientation (NSString*)",
      "contents": "ALAssetPropertyOrientation"
    },
    {
      "trigger": "ALAssetPropertyRepresentations (NSString*)",
      "contents": "ALAssetPropertyRepresentations"
    },
    {
      "trigger": "ALAssetPropertyType (NSString*)",
      "contents": "ALAssetPropertyType"
    },
    {
      "trigger": "ALAssetPropertyURLs (NSString*)",
      "contents": "ALAssetPropertyURLs"
    },
    {
      "trigger": "ALAssetTypePhoto (NSString*)",
      "contents": "ALAssetTypePhoto"
    },
    {
      "trigger": "ALAssetTypeUnknown (NSString*)",
      "contents": "ALAssetTypeUnknown"
    },
    {
      "trigger": "ALAssetTypeVideo (NSString*)",
      "contents": "ALAssetTypeVideo"
    },
    {
      "trigger": "ALAssetsGroupAlbum (2)",
      "contents": "ALAssetsGroupAlbum"
    },
    {
      "trigger": "ALAssetsGroupAll (4294967295)",
      "contents": "ALAssetsGroupAll"
    },
    {
      "trigger": "ALAssetsGroupEvent (4)",
      "contents": "ALAssetsGroupEvent"
    },
    {
      "trigger": "ALAssetsGroupFaces (8)",
      "contents": "ALAssetsGroupFaces"
    },
    {
      "trigger": "ALAssetsGroupLibrary (1)",
      "contents": "ALAssetsGroupLibrary"
    },
    {
      "trigger": "ALAssetsGroupPhotoStream (32)",
      "contents": "ALAssetsGroupPhotoStream"
    },
    {
      "trigger": "ALAssetsGroupPropertyName (NSString*)",
      "contents": "ALAssetsGroupPropertyName"
    },
    {
      "trigger": "ALAssetsGroupPropertyPersistentID (NSString*)",
      "contents": "ALAssetsGroupPropertyPersistentID"
    },
    {
      "trigger": "ALAssetsGroupPropertyType (NSString*)",
      "contents": "ALAssetsGroupPropertyType"
    },
    {
      "trigger": "ALAssetsGroupPropertyURL (NSString*)",
      "contents": "ALAssetsGroupPropertyURL"
    },
    {
      "trigger": "ALAssetsGroupSavedPhotos (16)",
      "contents": "ALAssetsGroupSavedPhotos"
    },
    {
      "trigger": "ALAssetsLibraryAccessGloballyDeniedError (-3312)",
      "contents": "ALAssetsLibraryAccessGloballyDeniedError"
    },
    {
      "trigger": "ALAssetsLibraryAccessUserDeniedError (-3311)",
      "contents": "ALAssetsLibraryAccessUserDeniedError"
    },
    {
      "trigger": "ALAssetsLibraryChangedNotification (NSString*)",
      "contents": "ALAssetsLibraryChangedNotification"
    },
    {
      "trigger": "ALAssetsLibraryDataUnavailableError (-3310)",
      "contents": "ALAssetsLibraryDataUnavailableError"
    },
    {
      "trigger": "ALAssetsLibraryErrorDomain (NSString*)",
      "contents": "ALAssetsLibraryErrorDomain"
    },
    {
      "trigger": "ALAssetsLibraryUnknownError (-1)",
      "contents": "ALAssetsLibraryUnknownError"
    },
    {
      "trigger": "ALAssetsLibraryWriteBusyError (-3301)",
      "contents": "ALAssetsLibraryWriteBusyError"
    },
    {
      "trigger": "ALAssetsLibraryWriteDataEncodingError (-3304)",
      "contents": "ALAssetsLibraryWriteDataEncodingError"
    },
    {
      "trigger": "ALAssetsLibraryWriteDiskSpaceError (-3305)",
      "contents": "ALAssetsLibraryWriteDiskSpaceError"
    },
    {
      "trigger": "ALAssetsLibraryWriteFailedError (-3300)",
      "contents": "ALAssetsLibraryWriteFailedError"
    },
    {
      "trigger": "ALAssetsLibraryWriteIncompatibleDataError (-3303)",
      "contents": "ALAssetsLibraryWriteIncompatibleDataError"
    },
    {
      "trigger": "ALAssetsLibraryWriteInvalidDataError (-3302)",
      "contents": "ALAssetsLibraryWriteInvalidDataError"
    },
    {
      "trigger": "ALC_ALL_ATTRIBUTES (4099)",
      "contents": "ALC_ALL_ATTRIBUTES"
    },
    {
      "trigger": "ALC_ALL_DEVICES_SPECIFIER (4115)",
      "contents": "ALC_ALL_DEVICES_SPECIFIER"
    },
    {
      "trigger": "ALC_ASA_OBSTRUCTION (1868723060)",
      "contents": "ALC_ASA_OBSTRUCTION"
    },
    {
      "trigger": "ALC_ASA_OCCLUSION (1868784492)",
      "contents": "ALC_ASA_OCCLUSION"
    },
    {
      "trigger": "ALC_ASA_REVERB_EQ_BANDWITH (1920361826)",
      "contents": "ALC_ASA_REVERB_EQ_BANDWITH"
    },
    {
      "trigger": "ALC_ASA_REVERB_EQ_FREQ (1920361830)",
      "contents": "ALC_ASA_REVERB_EQ_FREQ"
    },
    {
      "trigger": "ALC_ASA_REVERB_EQ_GAIN (1920361831)",
      "contents": "ALC_ASA_REVERB_EQ_GAIN"
    },
    {
      "trigger": "ALC_ASA_REVERB_GLOBAL_LEVEL (1920362348)",
      "contents": "ALC_ASA_REVERB_GLOBAL_LEVEL"
    },
    {
      "trigger": "ALC_ASA_REVERB_ON (1920364398)",
      "contents": "ALC_ASA_REVERB_ON"
    },
    {
      "trigger": "ALC_ASA_REVERB_ROOM_TYPE (1920365172)",
      "contents": "ALC_ASA_REVERB_ROOM_TYPE"
    },
    {
      "trigger": "ALC_ASA_REVERB_ROOM_TYPE_Cathedral (8)",
      "contents": "ALC_ASA_REVERB_ROOM_TYPE_Cathedral"
    },
    {
      "trigger": "ALC_ASA_REVERB_ROOM_TYPE_LargeChamber (7)",
      "contents": "ALC_ASA_REVERB_ROOM_TYPE_LargeChamber"
    },
    {
      "trigger": "ALC_ASA_REVERB_ROOM_TYPE_LargeHall (4)",
      "contents": "ALC_ASA_REVERB_ROOM_TYPE_LargeHall"
    },
    {
      "trigger": "ALC_ASA_REVERB_ROOM_TYPE_LargeHall2 (12)",
      "contents": "ALC_ASA_REVERB_ROOM_TYPE_LargeHall2"
    },
    {
      "trigger": "ALC_ASA_REVERB_ROOM_TYPE_LargeRoom (2)",
      "contents": "ALC_ASA_REVERB_ROOM_TYPE_LargeRoom"
    },
    {
      "trigger": "ALC_ASA_REVERB_ROOM_TYPE_LargeRoom2 (9)",
      "contents": "ALC_ASA_REVERB_ROOM_TYPE_LargeRoom2"
    },
    {
      "trigger": "ALC_ASA_REVERB_ROOM_TYPE_MediumChamber (6)",
      "contents": "ALC_ASA_REVERB_ROOM_TYPE_MediumChamber"
    },
    {
      "trigger": "ALC_ASA_REVERB_ROOM_TYPE_MediumHall (3)",
      "contents": "ALC_ASA_REVERB_ROOM_TYPE_MediumHall"
    },
    {
      "trigger": "ALC_ASA_REVERB_ROOM_TYPE_MediumHall2 (10)",
      "contents": "ALC_ASA_REVERB_ROOM_TYPE_MediumHall2"
    },
    {
      "trigger": "ALC_ASA_REVERB_ROOM_TYPE_MediumHall3 (11)",
      "contents": "ALC_ASA_REVERB_ROOM_TYPE_MediumHall3"
    },
    {
      "trigger": "ALC_ASA_REVERB_ROOM_TYPE_MediumRoom (1)",
      "contents": "ALC_ASA_REVERB_ROOM_TYPE_MediumRoom"
    },
    {
      "trigger": "ALC_ASA_REVERB_ROOM_TYPE_Plate (5)",
      "contents": "ALC_ASA_REVERB_ROOM_TYPE_Plate"
    },
    {
      "trigger": "ALC_ASA_REVERB_ROOM_TYPE_SmallRoom (0)",
      "contents": "ALC_ASA_REVERB_ROOM_TYPE_SmallRoom"
    },
    {
      "trigger": "ALC_ASA_REVERB_SEND_LEVEL (1920365420)",
      "contents": "ALC_ASA_REVERB_SEND_LEVEL"
    },
    {
      "trigger": "ALC_ATTRIBUTES_SIZE (4098)",
      "contents": "ALC_ATTRIBUTES_SIZE"
    },
    {
      "trigger": "ALC_CAPTURE_DEFAULT_DEVICE_SPECIFIER (785)",
      "contents": "ALC_CAPTURE_DEFAULT_DEVICE_SPECIFIER"
    },
    {
      "trigger": "ALC_CAPTURE_DEVICE_SPECIFIER (784)",
      "contents": "ALC_CAPTURE_DEVICE_SPECIFIER"
    },
    {
      "trigger": "ALC_CAPTURE_SAMPLES (786)",
      "contents": "ALC_CAPTURE_SAMPLES"
    },
    {
      "trigger": "ALC_DEFAULT_ALL_DEVICES_SPECIFIER (4114)",
      "contents": "ALC_DEFAULT_ALL_DEVICES_SPECIFIER"
    },
    {
      "trigger": "ALC_DEFAULT_DEVICE_SPECIFIER (4100)",
      "contents": "ALC_DEFAULT_DEVICE_SPECIFIER"
    },
    {
      "trigger": "ALC_DEVICE_SPECIFIER (4101)",
      "contents": "ALC_DEVICE_SPECIFIER"
    },
    {
      "trigger": "ALC_EXTENSIONS (4102)",
      "contents": "ALC_EXTENSIONS"
    },
    {
      "trigger": "ALC_FALSE (0)",
      "contents": "ALC_FALSE"
    },
    {
      "trigger": "ALC_FREQUENCY (4103)",
      "contents": "ALC_FREQUENCY"
    },
    {
      "trigger": "ALC_INVALID (0)",
      "contents": "ALC_INVALID"
    },
    {
      "trigger": "ALC_INVALID_CONTEXT (40962)",
      "contents": "ALC_INVALID_CONTEXT"
    },
    {
      "trigger": "ALC_INVALID_DEVICE (40961)",
      "contents": "ALC_INVALID_DEVICE"
    },
    {
      "trigger": "ALC_INVALID_ENUM (40963)",
      "contents": "ALC_INVALID_ENUM"
    },
    {
      "trigger": "ALC_INVALID_VALUE (40964)",
      "contents": "ALC_INVALID_VALUE"
    },
    {
      "trigger": "ALC_IPHONE_SPATIAL_RENDERING_QUALITY_HEADPHONES (1751412840)",
      "contents": "ALC_IPHONE_SPATIAL_RENDERING_QUALITY_HEADPHONES"
    },
    {
      "trigger": "ALC_MAC_OSX_RENDER_CHANNEL_COUNT_STEREO (1919120244)",
      "contents": "ALC_MAC_OSX_RENDER_CHANNEL_COUNT_STEREO"
    },
    {
      "trigger": "ALC_MAC_OSX_SPATIAL_RENDERING_QUALITY_HIGH (1920034921)",
      "contents": "ALC_MAC_OSX_SPATIAL_RENDERING_QUALITY_HIGH"
    },
    {
      "trigger": "ALC_MAC_OSX_SPATIAL_RENDERING_QUALITY_LOW (1919183983)",
      "contents": "ALC_MAC_OSX_SPATIAL_RENDERING_QUALITY_LOW"
    },
    {
      "trigger": "ALC_MAJOR_VERSION (4096)",
      "contents": "ALC_MAJOR_VERSION"
    },
    {
      "trigger": "ALC_MINOR_VERSION (4097)",
      "contents": "ALC_MINOR_VERSION"
    },
    {
      "trigger": "ALC_MONO_SOURCES (4112)",
      "contents": "ALC_MONO_SOURCES"
    },
    {
      "trigger": "ALC_NO_ERROR (0)",
      "contents": "ALC_NO_ERROR"
    },
    {
      "trigger": "ALC_OUT_OF_MEMORY (40965)",
      "contents": "ALC_OUT_OF_MEMORY"
    },
    {
      "trigger": "ALC_REFRESH (4104)",
      "contents": "ALC_REFRESH"
    },
    {
      "trigger": "ALC_STEREO_SOURCES (4113)",
      "contents": "ALC_STEREO_SOURCES"
    },
    {
      "trigger": "ALC_SYNC (4105)",
      "contents": "ALC_SYNC"
    },
    {
      "trigger": "ALC_TRUE (1)",
      "contents": "ALC_TRUE"
    },
    {
      "trigger": "ALC_VERSION_0_1 (1)",
      "contents": "ALC_VERSION_0_1"
    },
    {
      "trigger": "ALErrorInvalidProperty (NSString*)",
      "contents": "ALErrorInvalidProperty"
    },
    {
      "trigger": "AL_BITS (8194)",
      "contents": "AL_BITS"
    },
    {
      "trigger": "AL_BUFFER (4105)",
      "contents": "AL_BUFFER"
    },
    {
      "trigger": "AL_BUFFERS_PROCESSED (4118)",
      "contents": "AL_BUFFERS_PROCESSED"
    },
    {
      "trigger": "AL_BUFFERS_QUEUED (4117)",
      "contents": "AL_BUFFERS_QUEUED"
    },
    {
      "trigger": "AL_BYTE_OFFSET (4134)",
      "contents": "AL_BYTE_OFFSET"
    },
    {
      "trigger": "AL_CHANNELS (8195)",
      "contents": "AL_CHANNELS"
    },
    {
      "trigger": "AL_CONE_INNER_ANGLE (4097)",
      "contents": "AL_CONE_INNER_ANGLE"
    },
    {
      "trigger": "AL_CONE_OUTER_ANGLE (4098)",
      "contents": "AL_CONE_OUTER_ANGLE"
    },
    {
      "trigger": "AL_CONE_OUTER_GAIN (4130)",
      "contents": "AL_CONE_OUTER_GAIN"
    },
    {
      "trigger": "AL_DIRECTION (4101)",
      "contents": "AL_DIRECTION"
    },
    {
      "trigger": "AL_DISTANCE_MODEL (53248)",
      "contents": "AL_DISTANCE_MODEL"
    },
    {
      "trigger": "AL_DOPPLER_FACTOR (49152)",
      "contents": "AL_DOPPLER_FACTOR"
    },
    {
      "trigger": "AL_DOPPLER_VELOCITY (49153)",
      "contents": "AL_DOPPLER_VELOCITY"
    },
    {
      "trigger": "AL_EXPONENT_DISTANCE (53253)",
      "contents": "AL_EXPONENT_DISTANCE"
    },
    {
      "trigger": "AL_EXPONENT_DISTANCE_CLAMPED (53254)",
      "contents": "AL_EXPONENT_DISTANCE_CLAMPED"
    },
    {
      "trigger": "AL_EXTENSIONS (45060)",
      "contents": "AL_EXTENSIONS"
    },
    {
      "trigger": "AL_FALSE (0)",
      "contents": "AL_FALSE"
    },
    {
      "trigger": "AL_FORMAT_MONO16 (4353)",
      "contents": "AL_FORMAT_MONO16"
    },
    {
      "trigger": "AL_FORMAT_MONO8 (4352)",
      "contents": "AL_FORMAT_MONO8"
    },
    {
      "trigger": "AL_FORMAT_STEREO16 (4355)",
      "contents": "AL_FORMAT_STEREO16"
    },
    {
      "trigger": "AL_FORMAT_STEREO8 (4354)",
      "contents": "AL_FORMAT_STEREO8"
    },
    {
      "trigger": "AL_FREQUENCY (8193)",
      "contents": "AL_FREQUENCY"
    },
    {
      "trigger": "AL_GAIN (4106)",
      "contents": "AL_GAIN"
    },
    {
      "trigger": "AL_GAMEKIT (1735095154)",
      "contents": "AL_GAMEKIT"
    },
    {
      "trigger": "AL_ILLEGAL_COMMAND (40964)",
      "contents": "AL_ILLEGAL_COMMAND"
    },
    {
      "trigger": "AL_ILLEGAL_ENUM (40962)",
      "contents": "AL_ILLEGAL_ENUM"
    },
    {
      "trigger": "AL_INITIAL (4113)",
      "contents": "AL_INITIAL"
    },
    {
      "trigger": "AL_INVALID (-1)",
      "contents": "AL_INVALID"
    },
    {
      "trigger": "AL_INVALID_ENUM (40962)",
      "contents": "AL_INVALID_ENUM"
    },
    {
      "trigger": "AL_INVALID_NAME (40961)",
      "contents": "AL_INVALID_NAME"
    },
    {
      "trigger": "AL_INVALID_OPERATION (40964)",
      "contents": "AL_INVALID_OPERATION"
    },
    {
      "trigger": "AL_INVALID_VALUE (40963)",
      "contents": "AL_INVALID_VALUE"
    },
    {
      "trigger": "AL_INVERSE_DISTANCE (53249)",
      "contents": "AL_INVERSE_DISTANCE"
    },
    {
      "trigger": "AL_INVERSE_DISTANCE_CLAMPED (53250)",
      "contents": "AL_INVERSE_DISTANCE_CLAMPED"
    },
    {
      "trigger": "AL_LINEAR_DISTANCE (53251)",
      "contents": "AL_LINEAR_DISTANCE"
    },
    {
      "trigger": "AL_LINEAR_DISTANCE_CLAMPED (53252)",
      "contents": "AL_LINEAR_DISTANCE_CLAMPED"
    },
    {
      "trigger": "AL_LOOPING (4103)",
      "contents": "AL_LOOPING"
    },
    {
      "trigger": "AL_MAX_DISTANCE (4131)",
      "contents": "AL_MAX_DISTANCE"
    },
    {
      "trigger": "AL_MAX_GAIN (4110)",
      "contents": "AL_MAX_GAIN"
    },
    {
      "trigger": "AL_MIN_GAIN (4109)",
      "contents": "AL_MIN_GAIN"
    },
    {
      "trigger": "AL_NONE (0)",
      "contents": "AL_NONE"
    },
    {
      "trigger": "AL_NO_ERROR (0)",
      "contents": "AL_NO_ERROR"
    },
    {
      "trigger": "AL_ORIENTATION (4111)",
      "contents": "AL_ORIENTATION"
    },
    {
      "trigger": "AL_OUT_OF_MEMORY (40965)",
      "contents": "AL_OUT_OF_MEMORY"
    },
    {
      "trigger": "AL_PAUSED (4115)",
      "contents": "AL_PAUSED"
    },
    {
      "trigger": "AL_PENDING (8209)",
      "contents": "AL_PENDING"
    },
    {
      "trigger": "AL_PITCH (4099)",
      "contents": "AL_PITCH"
    },
    {
      "trigger": "AL_PLAYING (4114)",
      "contents": "AL_PLAYING"
    },
    {
      "trigger": "AL_POSITION (4100)",
      "contents": "AL_POSITION"
    },
    {
      "trigger": "AL_PROCESSED (8210)",
      "contents": "AL_PROCESSED"
    },
    {
      "trigger": "AL_QUEUE_HAS_LOOPED (36864)",
      "contents": "AL_QUEUE_HAS_LOOPED"
    },
    {
      "trigger": "AL_REFERENCE_DISTANCE (4128)",
      "contents": "AL_REFERENCE_DISTANCE"
    },
    {
      "trigger": "AL_RENDERER (45059)",
      "contents": "AL_RENDERER"
    },
    {
      "trigger": "AL_ROLLOFF_FACTOR (4129)",
      "contents": "AL_ROLLOFF_FACTOR"
    },
    {
      "trigger": "AL_SAMPLE_OFFSET (4133)",
      "contents": "AL_SAMPLE_OFFSET"
    },
    {
      "trigger": "AL_SEC_OFFSET (4132)",
      "contents": "AL_SEC_OFFSET"
    },
    {
      "trigger": "AL_SIZE (8196)",
      "contents": "AL_SIZE"
    },
    {
      "trigger": "AL_SOURCE_RELATIVE (514)",
      "contents": "AL_SOURCE_RELATIVE"
    },
    {
      "trigger": "AL_SOURCE_STATE (4112)",
      "contents": "AL_SOURCE_STATE"
    },
    {
      "trigger": "AL_SOURCE_TYPE (4135)",
      "contents": "AL_SOURCE_TYPE"
    },
    {
      "trigger": "AL_SPEED_OF_SOUND (49155)",
      "contents": "AL_SPEED_OF_SOUND"
    },
    {
      "trigger": "AL_STATIC (4136)",
      "contents": "AL_STATIC"
    },
    {
      "trigger": "AL_STOPPED (4116)",
      "contents": "AL_STOPPED"
    },
    {
      "trigger": "AL_STREAMING (4137)",
      "contents": "AL_STREAMING"
    },
    {
      "trigger": "AL_TRUE (1)",
      "contents": "AL_TRUE"
    },
    {
      "trigger": "AL_UNDETERMINED (4144)",
      "contents": "AL_UNDETERMINED"
    },
    {
      "trigger": "AL_UNUSED (8208)",
      "contents": "AL_UNUSED"
    },
    {
      "trigger": "AL_VELOCITY (4102)",
      "contents": "AL_VELOCITY"
    },
    {
      "trigger": "AL_VENDOR (45057)",
      "contents": "AL_VENDOR"
    },
    {
      "trigger": "AL_VERSION (45058)",
      "contents": "AL_VERSION"
    },
    {
      "trigger": "AUDIO_TOOLBOX_VERSION (1060)",
      "contents": "AUDIO_TOOLBOX_VERSION"
    },
    {
      "trigger": "AUGraphAddNode",
      "contents": "AUGraphAddNode(${1:AUGraph inGraph}, ${2:AudioComponentDescription* inDescription}, ${3:AUNode* outNode})"
    },
    {
      "trigger": "AUGraphAddRenderNotify",
      "contents": "AUGraphAddRenderNotify(${1:AUGraph inGraph}, ${2:AURenderCallback inCallback}, ${3:void* inRefCon})"
    },
    {
      "trigger": "AUGraphClearConnections",
      "contents": "AUGraphClearConnections(${1:AUGraph inGraph})"
    },
    {
      "trigger": "AUGraphClose",
      "contents": "AUGraphClose(${1:AUGraph inGraph})"
    },
    {
      "trigger": "AUGraphConnectNodeInput",
      "contents": "AUGraphConnectNodeInput(${1:AUGraph inGraph}, ${2:AUNode inSourceNode}, ${3:UInt32 inSourceOutputNumber}, ${4:AUNode inDestNode}, ${5:UInt32 inDestInputNumber})"
    },
    {
      "trigger": "AUGraphCountNodeInteractions",
      "contents": "AUGraphCountNodeInteractions(${1:AUGraph inGraph}, ${2:AUNode inNode}, ${3:UInt32* outNumInteractions})"
    },
    {
      "trigger": "AUGraphDisconnectNodeInput",
      "contents": "AUGraphDisconnectNodeInput(${1:AUGraph inGraph}, ${2:AUNode inDestNode}, ${3:UInt32 inDestInputNumber})"
    },
    {
      "trigger": "AUGraphGetCPULoad",
      "contents": "AUGraphGetCPULoad(${1:AUGraph inGraph}, ${2:Float32* outAverageCPULoad})"
    },
    {
      "trigger": "AUGraphGetIndNode",
      "contents": "AUGraphGetIndNode(${1:AUGraph inGraph}, ${2:UInt32 inIndex}, ${3:AUNode* outNode})"
    },
    {
      "trigger": "AUGraphGetInteractionInfo",
      "contents": "AUGraphGetInteractionInfo(${1:AUGraph inGraph}, ${2:UInt32 inInteractionIndex}, ${3:AUNodeInteraction* outInteraction})"
    },
    {
      "trigger": "AUGraphGetMaxCPULoad",
      "contents": "AUGraphGetMaxCPULoad(${1:AUGraph inGraph}, ${2:Float32* outMaxLoad})"
    },
    {
      "trigger": "AUGraphGetNodeCount",
      "contents": "AUGraphGetNodeCount(${1:AUGraph inGraph}, ${2:UInt32* outNumberOfNodes})"
    },
    {
      "trigger": "AUGraphGetNodeInteractions",
      "contents": "AUGraphGetNodeInteractions(${1:AUGraph inGraph}, ${2:AUNode inNode}, ${3:UInt32* ioNumInteractions}, ${4:AUNodeInteraction* outInteractions})"
    },
    {
      "trigger": "AUGraphGetNumberOfInteractions",
      "contents": "AUGraphGetNumberOfInteractions(${1:AUGraph inGraph}, ${2:UInt32* outNumInteractions})"
    },
    {
      "trigger": "AUGraphInitialize",
      "contents": "AUGraphInitialize(${1:AUGraph inGraph})"
    },
    {
      "trigger": "AUGraphIsInitialized",
      "contents": "AUGraphIsInitialized(${1:AUGraph inGraph}, ${2:Boolean* outIsInitialized})"
    },
    {
      "trigger": "AUGraphIsOpen",
      "contents": "AUGraphIsOpen(${1:AUGraph inGraph}, ${2:Boolean* outIsOpen})"
    },
    {
      "trigger": "AUGraphIsRunning",
      "contents": "AUGraphIsRunning(${1:AUGraph inGraph}, ${2:Boolean* outIsRunning})"
    },
    {
      "trigger": "AUGraphNodeInfo",
      "contents": "AUGraphNodeInfo(${1:AUGraph inGraph}, ${2:AUNode inNode}, ${3:AudioComponentDescription* outDescription}, ${4:AudioUnit* outAudioUnit})"
    },
    {
      "trigger": "AUGraphOpen",
      "contents": "AUGraphOpen(${1:AUGraph inGraph})"
    },
    {
      "trigger": "AUGraphRemoveNode",
      "contents": "AUGraphRemoveNode(${1:AUGraph inGraph}, ${2:AUNode inNode})"
    },
    {
      "trigger": "AUGraphRemoveRenderNotify",
      "contents": "AUGraphRemoveRenderNotify(${1:AUGraph inGraph}, ${2:AURenderCallback inCallback}, ${3:void* inRefCon})"
    },
    {
      "trigger": "AUGraphSetNodeInputCallback",
      "contents": "AUGraphSetNodeInputCallback(${1:AUGraph inGraph}, ${2:AUNode inDestNode}, ${3:UInt32 inDestInputNumber}, ${4:AURenderCallbackStruct* inInputCallback})"
    },
    {
      "trigger": "AUGraphStart",
      "contents": "AUGraphStart(${1:AUGraph inGraph})"
    },
    {
      "trigger": "AUGraphStop",
      "contents": "AUGraphStop(${1:AUGraph inGraph})"
    },
    {
      "trigger": "AUGraphUninitialize",
      "contents": "AUGraphUninitialize(${1:AUGraph inGraph})"
    },
    {
      "trigger": "AUGraphUpdate",
      "contents": "AUGraphUpdate(${1:AUGraph inGraph}, ${2:Boolean* outIsUpdated})"
    },
    {
      "trigger": "AVAsset.assetWithURL:",
      "contents": "AVAsset.assetWithURL(${1:NSURL* URL})"
    },
    {
      "trigger": "AVAssetExportPreset1280x720 (NSString*)",
      "contents": "AVAssetExportPreset1280x720"
    },
    {
      "trigger": "AVAssetExportPreset1920x1080 (NSString*)",
      "contents": "AVAssetExportPreset1920x1080"
    },
    {
      "trigger": "AVAssetExportPreset640x480 (NSString*)",
      "contents": "AVAssetExportPreset640x480"
    },
    {
      "trigger": "AVAssetExportPreset960x540 (NSString*)",
      "contents": "AVAssetExportPreset960x540"
    },
    {
      "trigger": "AVAssetExportPresetAppleM4A (NSString*)",
      "contents": "AVAssetExportPresetAppleM4A"
    },
    {
      "trigger": "AVAssetExportPresetHighestQuality (NSString*)",
      "contents": "AVAssetExportPresetHighestQuality"
    },
    {
      "trigger": "AVAssetExportPresetLowQuality (NSString*)",
      "contents": "AVAssetExportPresetLowQuality"
    },
    {
      "trigger": "AVAssetExportPresetMediumQuality (NSString*)",
      "contents": "AVAssetExportPresetMediumQuality"
    },
    {
      "trigger": "AVAssetExportPresetPassthrough (NSString*)",
      "contents": "AVAssetExportPresetPassthrough"
    },
    {
      "trigger": "AVAssetExportSession.exportPresetsCompatibleWithAsset:",
      "contents": "AVAssetExportSession.exportPresetsCompatibleWithAsset(${1:AVAsset* asset})"
    },
    {
      "trigger": "AVAssetExportSession.exportSessionWithAsset:presetName:",
      "contents": "AVAssetExportSession.exportSessionWithAsset(${1:AVAsset* asset}, presetName:${2:NSString* presetName})"
    },
    {
      "trigger": "AVAssetExportSessionStatusCancelled (5)",
      "contents": "AVAssetExportSessionStatusCancelled"
    },
    {
      "trigger": "AVAssetExportSessionStatusCompleted (3)",
      "contents": "AVAssetExportSessionStatusCompleted"
    },
    {
      "trigger": "AVAssetExportSessionStatusExporting (2)",
      "contents": "AVAssetExportSessionStatusExporting"
    },
    {
      "trigger": "AVAssetExportSessionStatusFailed (4)",
      "contents": "AVAssetExportSessionStatusFailed"
    },
    {
      "trigger": "AVAssetExportSessionStatusUnknown (0)",
      "contents": "AVAssetExportSessionStatusUnknown"
    },
    {
      "trigger": "AVAssetExportSessionStatusWaiting (1)",
      "contents": "AVAssetExportSessionStatusWaiting"
    },
    {
      "trigger": "AVAssetImageGenerator.assetImageGeneratorWithAsset:",
      "contents": "AVAssetImageGenerator.assetImageGeneratorWithAsset(${1:AVAsset* asset})"
    },
    {
      "trigger": "AVAssetImageGeneratorApertureModeCleanAperture (NSString*)",
      "contents": "AVAssetImageGeneratorApertureModeCleanAperture"
    },
    {
      "trigger": "AVAssetImageGeneratorApertureModeEncodedPixels (NSString*)",
      "contents": "AVAssetImageGeneratorApertureModeEncodedPixels"
    },
    {
      "trigger": "AVAssetImageGeneratorApertureModeProductionAperture (NSString*)",
      "contents": "AVAssetImageGeneratorApertureModeProductionAperture"
    },
    {
      "trigger": "AVAssetImageGeneratorCancelled (2)",
      "contents": "AVAssetImageGeneratorCancelled"
    },
    {
      "trigger": "AVAssetImageGeneratorFailed (1)",
      "contents": "AVAssetImageGeneratorFailed"
    },
    {
      "trigger": "AVAssetImageGeneratorSucceeded (0)",
      "contents": "AVAssetImageGeneratorSucceeded"
    },
    {
      "trigger": "AVAssetReader.assetReaderWithAsset:error:",
      "contents": "AVAssetReader.assetReaderWithAsset(${1:AVAsset* asset}, error:${2:NSError** outError})"
    },
    {
      "trigger": "AVAssetReaderAudioMixOutput.assetReaderAudioMixOutputWithAudioTracks:audioSettings:",
      "contents": "AVAssetReaderAudioMixOutput.assetReaderAudioMixOutputWithAudioTracks(${1:NSArray* audioTracks}, audioSettings:${2:NSDictionary* audioSettings})"
    },
    {
      "trigger": "AVAssetReaderStatusCancelled (4)",
      "contents": "AVAssetReaderStatusCancelled"
    },
    {
      "trigger": "AVAssetReaderStatusCompleted (2)",
      "contents": "AVAssetReaderStatusCompleted"
    },
    {
      "trigger": "AVAssetReaderStatusFailed (3)",
      "contents": "AVAssetReaderStatusFailed"
    },
    {
      "trigger": "AVAssetReaderStatusReading (1)",
      "contents": "AVAssetReaderStatusReading"
    },
    {
      "trigger": "AVAssetReaderStatusUnknown (0)",
      "contents": "AVAssetReaderStatusUnknown"
    },
    {
      "trigger": "AVAssetReaderTrackOutput.assetReaderTrackOutputWithTrack:outputSettings:",
      "contents": "AVAssetReaderTrackOutput.assetReaderTrackOutputWithTrack(${1:AVAssetTrack* track}, outputSettings:${2:NSDictionary* outputSettings})"
    },
    {
      "trigger": "AVAssetReaderVideoCompositionOutput.assetReaderVideoCompositionOutputWithVideoTracks:videoSettings:",
      "contents": "AVAssetReaderVideoCompositionOutput.assetReaderVideoCompositionOutputWithVideoTracks(${1:NSArray* videoTracks}, videoSettings:${2:NSDictionary* videoSettings})"
    },
    {
      "trigger": "AVAssetReferenceRestrictionForbidAll (65535)",
      "contents": "AVAssetReferenceRestrictionForbidAll"
    },
    {
      "trigger": "AVAssetReferenceRestrictionForbidCrossSiteReference (4)",
      "contents": "AVAssetReferenceRestrictionForbidCrossSiteReference"
    },
    {
      "trigger": "AVAssetReferenceRestrictionForbidLocalReferenceToLocal (8)",
      "contents": "AVAssetReferenceRestrictionForbidLocalReferenceToLocal"
    },
    {
      "trigger": "AVAssetReferenceRestrictionForbidLocalReferenceToRemote (2)",
      "contents": "AVAssetReferenceRestrictionForbidLocalReferenceToRemote"
    },
    {
      "trigger": "AVAssetReferenceRestrictionForbidNone (0)",
      "contents": "AVAssetReferenceRestrictionForbidNone"
    },
    {
      "trigger": "AVAssetReferenceRestrictionForbidRemoteReferenceToLocal (1)",
      "contents": "AVAssetReferenceRestrictionForbidRemoteReferenceToLocal"
    },
    {
      "trigger": "AVAssetWriter.assetWriterWithURL:fileType:error:",
      "contents": "AVAssetWriter.assetWriterWithURL(${1:NSURL* outputURL}, fileType:${2:NSString* outputFileType}, error:${3:NSError** outError})"
    },
    {
      "trigger": "AVAssetWriterInput.assetWriterInputWithMediaType:outputSettings:",
      "contents": "AVAssetWriterInput.assetWriterInputWithMediaType(${1:NSString* mediaType}, outputSettings:${2:NSDictionary* outputSettings})"
    },
    {
      "trigger": "AVAssetWriterInputPixelBufferAdaptor.assetWriterInputPixelBufferAdaptorWithAssetWriterInput:sourcePixelBufferAttributes:",
      "contents": "AVAssetWriterInputPixelBufferAdaptor.assetWriterInputPixelBufferAdaptorWithAssetWriterInput(${1:AVAssetWriterInput* input}, sourcePixelBufferAttributes:${2:NSDictionary* sourcePixelBufferAttributes})"
    },
    {
      "trigger": "AVAssetWriterStatusCancelled (4)",
      "contents": "AVAssetWriterStatusCancelled"
    },
    {
      "trigger": "AVAssetWriterStatusCompleted (2)",
      "contents": "AVAssetWriterStatusCompleted"
    },
    {
      "trigger": "AVAssetWriterStatusFailed (3)",
      "contents": "AVAssetWriterStatusFailed"
    },
    {
      "trigger": "AVAssetWriterStatusUnknown (0)",
      "contents": "AVAssetWriterStatusUnknown"
    },
    {
      "trigger": "AVAssetWriterStatusWriting (1)",
      "contents": "AVAssetWriterStatusWriting"
    },
    {
      "trigger": "AVAudioQualityHigh (96)",
      "contents": "AVAudioQualityHigh"
    },
    {
      "trigger": "AVAudioQualityLow (32)",
      "contents": "AVAudioQualityLow"
    },
    {
      "trigger": "AVAudioQualityMax (127)",
      "contents": "AVAudioQualityMax"
    },
    {
      "trigger": "AVAudioQualityMedium (64)",
      "contents": "AVAudioQualityMedium"
    },
    {
      "trigger": "AVAudioQualityMin (0)",
      "contents": "AVAudioQualityMin"
    },
    {
      "trigger": "AVAudioSessionCategoryAmbient (NSString*)",
      "contents": "AVAudioSessionCategoryAmbient"
    },
    {
      "trigger": "AVAudioSessionCategoryAudioProcessing (NSString*)",
      "contents": "AVAudioSessionCategoryAudioProcessing"
    },
    {
      "trigger": "AVAudioSessionCategoryPlayAndRecord (NSString*)",
      "contents": "AVAudioSessionCategoryPlayAndRecord"
    },
    {
      "trigger": "AVAudioSessionCategoryPlayback (NSString*)",
      "contents": "AVAudioSessionCategoryPlayback"
    },
    {
      "trigger": "AVAudioSessionCategoryRecord (NSString*)",
      "contents": "AVAudioSessionCategoryRecord"
    },
    {
      "trigger": "AVAudioSessionCategorySoloAmbient (NSString*)",
      "contents": "AVAudioSessionCategorySoloAmbient"
    },
    {
      "trigger": "AVAudioSessionInterruptionFlags_ShouldResume (1)",
      "contents": "AVAudioSessionInterruptionFlags_ShouldResume"
    },
    {
      "trigger": "AVAudioSessionModeDefault (NSString*)",
      "contents": "AVAudioSessionModeDefault"
    },
    {
      "trigger": "AVAudioSessionModeGameChat (NSString*)",
      "contents": "AVAudioSessionModeGameChat"
    },
    {
      "trigger": "AVAudioSessionModeMeasurement (NSString*)",
      "contents": "AVAudioSessionModeMeasurement"
    },
    {
      "trigger": "AVAudioSessionModeVideoRecording (NSString*)",
      "contents": "AVAudioSessionModeVideoRecording"
    },
    {
      "trigger": "AVAudioSessionModeVoiceChat (NSString*)",
      "contents": "AVAudioSessionModeVoiceChat"
    },
    {
      "trigger": "AVAudioSessionSetActiveFlags_NotifyOthersOnDeactivation (1)",
      "contents": "AVAudioSessionSetActiveFlags_NotifyOthersOnDeactivation"
    },
    {
      "trigger": "AVCaptureDevice.defaultDeviceWithMediaType:",
      "contents": "AVCaptureDevice.defaultDeviceWithMediaType(${1:NSString* mediaType})"
    },
    {
      "trigger": "AVCaptureDevice.deviceWithUniqueID:",
      "contents": "AVCaptureDevice.deviceWithUniqueID(${1:NSString* deviceUniqueID})"
    },
    {
      "trigger": "AVCaptureDevice.devicesWithMediaType:",
      "contents": "AVCaptureDevice.devicesWithMediaType(${1:NSString* mediaType})"
    },
    {
      "trigger": "AVCaptureDeviceInput.deviceInputWithDevice:error:",
      "contents": "AVCaptureDeviceInput.deviceInputWithDevice(${1:AVCaptureDevice* device}, error:${2:NSError** outError})"
    },
    {
      "trigger": "AVCaptureDevicePositionBack (1)",
      "contents": "AVCaptureDevicePositionBack"
    },
    {
      "trigger": "AVCaptureDevicePositionFront (2)",
      "contents": "AVCaptureDevicePositionFront"
    },
    {
      "trigger": "AVCaptureDeviceSubjectAreaDidChangeNotification (NSString*)",
      "contents": "AVCaptureDeviceSubjectAreaDidChangeNotification"
    },
    {
      "trigger": "AVCaptureDeviceWasConnectedNotification (NSString*)",
      "contents": "AVCaptureDeviceWasConnectedNotification"
    },
    {
      "trigger": "AVCaptureDeviceWasDisconnectedNotification (NSString*)",
      "contents": "AVCaptureDeviceWasDisconnectedNotification"
    },
    {
      "trigger": "AVCaptureExposureModeAutoExpose (1)",
      "contents": "AVCaptureExposureModeAutoExpose"
    },
    {
      "trigger": "AVCaptureExposureModeContinuousAutoExposure (2)",
      "contents": "AVCaptureExposureModeContinuousAutoExposure"
    },
    {
      "trigger": "AVCaptureExposureModeLocked (0)",
      "contents": "AVCaptureExposureModeLocked"
    },
    {
      "trigger": "AVCaptureFlashModeAuto (2)",
      "contents": "AVCaptureFlashModeAuto"
    },
    {
      "trigger": "AVCaptureFlashModeOff (0)",
      "contents": "AVCaptureFlashModeOff"
    },
    {
      "trigger": "AVCaptureFlashModeOn (1)",
      "contents": "AVCaptureFlashModeOn"
    },
    {
      "trigger": "AVCaptureFocusModeAutoFocus (1)",
      "contents": "AVCaptureFocusModeAutoFocus"
    },
    {
      "trigger": "AVCaptureFocusModeContinuousAutoFocus (2)",
      "contents": "AVCaptureFocusModeContinuousAutoFocus"
    },
    {
      "trigger": "AVCaptureFocusModeLocked (0)",
      "contents": "AVCaptureFocusModeLocked"
    },
    {
      "trigger": "AVCaptureInputPortFormatDescriptionDidChangeNotification (NSString*)",
      "contents": "AVCaptureInputPortFormatDescriptionDidChangeNotification"
    },
    {
      "trigger": "AVCaptureSessionDidStartRunningNotification (NSString*)",
      "contents": "AVCaptureSessionDidStartRunningNotification"
    },
    {
      "trigger": "AVCaptureSessionDidStopRunningNotification (NSString*)",
      "contents": "AVCaptureSessionDidStopRunningNotification"
    },
    {
      "trigger": "AVCaptureSessionErrorKey (NSString*)",
      "contents": "AVCaptureSessionErrorKey"
    },
    {
      "trigger": "AVCaptureSessionInterruptionEndedNotification (NSString*)",
      "contents": "AVCaptureSessionInterruptionEndedNotification"
    },
    {
      "trigger": "AVCaptureSessionPreset1280x720 (NSString*)",
      "contents": "AVCaptureSessionPreset1280x720"
    },
    {
      "trigger": "AVCaptureSessionPreset1920x1080 (NSString*)",
      "contents": "AVCaptureSessionPreset1920x1080"
    },
    {
      "trigger": "AVCaptureSessionPreset352x288 (NSString*)",
      "contents": "AVCaptureSessionPreset352x288"
    },
    {
      "trigger": "AVCaptureSessionPreset640x480 (NSString*)",
      "contents": "AVCaptureSessionPreset640x480"
    },
    {
      "trigger": "AVCaptureSessionPresetHigh (NSString*)",
      "contents": "AVCaptureSessionPresetHigh"
    },
    {
      "trigger": "AVCaptureSessionPresetLow (NSString*)",
      "contents": "AVCaptureSessionPresetLow"
    },
    {
      "trigger": "AVCaptureSessionPresetMedium (NSString*)",
      "contents": "AVCaptureSessionPresetMedium"
    },
    {
      "trigger": "AVCaptureSessionPresetPhoto (NSString*)",
      "contents": "AVCaptureSessionPresetPhoto"
    },
    {
      "trigger": "AVCaptureSessionPresetiFrame1280x720 (NSString*)",
      "contents": "AVCaptureSessionPresetiFrame1280x720"
    },
    {
      "trigger": "AVCaptureSessionPresetiFrame960x540 (NSString*)",
      "contents": "AVCaptureSessionPresetiFrame960x540"
    },
    {
      "trigger": "AVCaptureSessionRuntimeErrorNotification (NSString*)",
      "contents": "AVCaptureSessionRuntimeErrorNotification"
    },
    {
      "trigger": "AVCaptureSessionWasInterruptedNotification (NSString*)",
      "contents": "AVCaptureSessionWasInterruptedNotification"
    },
    {
      "trigger": "AVCaptureStillImageOutput.jpegStillImageNSDataRepresentation:",
      "contents": "AVCaptureStillImageOutput.jpegStillImageNSDataRepresentation(${1:CMSampleBufferRef jpegSampleBuffer})"
    },
    {
      "trigger": "AVCaptureTorchModeAuto (2)",
      "contents": "AVCaptureTorchModeAuto"
    },
    {
      "trigger": "AVCaptureTorchModeOff (0)",
      "contents": "AVCaptureTorchModeOff"
    },
    {
      "trigger": "AVCaptureTorchModeOn (1)",
      "contents": "AVCaptureTorchModeOn"
    },
    {
      "trigger": "AVCaptureVideoOrientationLandscapeLeft (4)",
      "contents": "AVCaptureVideoOrientationLandscapeLeft"
    },
    {
      "trigger": "AVCaptureVideoOrientationLandscapeRight (3)",
      "contents": "AVCaptureVideoOrientationLandscapeRight"
    },
    {
      "trigger": "AVCaptureVideoOrientationPortrait (1)",
      "contents": "AVCaptureVideoOrientationPortrait"
    },
    {
      "trigger": "AVCaptureVideoOrientationPortraitUpsideDown (2)",
      "contents": "AVCaptureVideoOrientationPortraitUpsideDown"
    },
    {
      "trigger": "AVCaptureVideoPreviewLayer.layerWithSession:",
      "contents": "AVCaptureVideoPreviewLayer.layerWithSession(${1:AVCaptureSession* session})"
    },
    {
      "trigger": "AVCaptureWhiteBalanceModeAutoWhiteBalance (1)",
      "contents": "AVCaptureWhiteBalanceModeAutoWhiteBalance"
    },
    {
      "trigger": "AVCaptureWhiteBalanceModeContinuousAutoWhiteBalance (2)",
      "contents": "AVCaptureWhiteBalanceModeContinuousAutoWhiteBalance"
    },
    {
      "trigger": "AVCaptureWhiteBalanceModeLocked (0)",
      "contents": "AVCaptureWhiteBalanceModeLocked"
    },
    {
      "trigger": "AVChannelLayoutKey (NSString*)",
      "contents": "AVChannelLayoutKey"
    },
    {
      "trigger": "AVCompositionTrackSegment.compositionTrackSegmentWithTimeRange:",
      "contents": "AVCompositionTrackSegment.compositionTrackSegmentWithTimeRange(${1:CMTimeRange timeRange})"
    },
    {
      "trigger": "AVCompositionTrackSegment.compositionTrackSegmentWithURL:trackID:sourceTimeRange:targetTimeRange:",
      "contents": "AVCompositionTrackSegment.compositionTrackSegmentWithURL(${1:NSURL* URL}, trackID:${2:CMPersistentTrackID trackID}, sourceTimeRange:${3:CMTimeRange sourceTimeRange}, targetTimeRange:${4:CMTimeRange targetTimeRange})"
    },
    {
      "trigger": "AVCoreAnimationBeginTimeAtZero (CFTimeInterval)",
      "contents": "AVCoreAnimationBeginTimeAtZero"
    },
    {
      "trigger": "AVEncoderAudioQualityKey (NSString*)",
      "contents": "AVEncoderAudioQualityKey"
    },
    {
      "trigger": "AVEncoderBitDepthHintKey (NSString*)",
      "contents": "AVEncoderBitDepthHintKey"
    },
    {
      "trigger": "AVEncoderBitRateKey (NSString*)",
      "contents": "AVEncoderBitRateKey"
    },
    {
      "trigger": "AVEncoderBitRatePerChannelKey (NSString*)",
      "contents": "AVEncoderBitRatePerChannelKey"
    },
    {
      "trigger": "AVErrorApplicationIsNotAuthorized (-11836)",
      "contents": "AVErrorApplicationIsNotAuthorized"
    },
    {
      "trigger": "AVErrorCompositionTrackSegmentsNotContiguous (-11824)",
      "contents": "AVErrorCompositionTrackSegmentsNotContiguous"
    },
    {
      "trigger": "AVErrorContentIsNotAuthorized (-11835)",
      "contents": "AVErrorContentIsNotAuthorized"
    },
    {
      "trigger": "AVErrorContentIsProtected (-11831)",
      "contents": "AVErrorContentIsProtected"
    },
    {
      "trigger": "AVErrorDecodeFailed (-11821)",
      "contents": "AVErrorDecodeFailed"
    },
    {
      "trigger": "AVErrorDecoderNotFound (-11833)",
      "contents": "AVErrorDecoderNotFound"
    },
    {
      "trigger": "AVErrorDecoderTemporarilyUnavailable (-11839)",
      "contents": "AVErrorDecoderTemporarilyUnavailable"
    },
    {
      "trigger": "AVErrorDeviceAlreadyUsedByAnotherSession (-11804)",
      "contents": "AVErrorDeviceAlreadyUsedByAnotherSession"
    },
    {
      "trigger": "AVErrorDeviceInUseByAnotherApplication (-11815)",
      "contents": "AVErrorDeviceInUseByAnotherApplication"
    },
    {
      "trigger": "AVErrorDeviceIsNotAvailableInBackground (-11837)",
      "contents": "AVErrorDeviceIsNotAvailableInBackground"
    },
    {
      "trigger": "AVErrorDeviceKey (NSString*)",
      "contents": "AVErrorDeviceKey"
    },
    {
      "trigger": "AVErrorDeviceLockedForConfigurationByAnotherProcess (-11817)",
      "contents": "AVErrorDeviceLockedForConfigurationByAnotherProcess"
    },
    {
      "trigger": "AVErrorDeviceNotConnected (-11814)",
      "contents": "AVErrorDeviceNotConnected"
    },
    {
      "trigger": "AVErrorDeviceWasDisconnected (-11808)",
      "contents": "AVErrorDeviceWasDisconnected"
    },
    {
      "trigger": "AVErrorDiskFull (-11807)",
      "contents": "AVErrorDiskFull"
    },
    {
      "trigger": "AVErrorEncoderNotFound (-11834)",
      "contents": "AVErrorEncoderNotFound"
    },
    {
      "trigger": "AVErrorEncoderTemporarilyUnavailable (-11840)",
      "contents": "AVErrorEncoderTemporarilyUnavailable"
    },
    {
      "trigger": "AVErrorExportFailed (-11820)",
      "contents": "AVErrorExportFailed"
    },
    {
      "trigger": "AVErrorFileAlreadyExists (-11823)",
      "contents": "AVErrorFileAlreadyExists"
    },
    {
      "trigger": "AVErrorFileFailedToParse (-11829)",
      "contents": "AVErrorFileFailedToParse"
    },
    {
      "trigger": "AVErrorFileFormatNotRecognized (-11828)",
      "contents": "AVErrorFileFormatNotRecognized"
    },
    {
      "trigger": "AVErrorFileSizeKey (NSString*)",
      "contents": "AVErrorFileSizeKey"
    },
    {
      "trigger": "AVErrorInvalidCompositionTrackSegmentDuration (-11825)",
      "contents": "AVErrorInvalidCompositionTrackSegmentDuration"
    },
    {
      "trigger": "AVErrorInvalidCompositionTrackSegmentSourceDuration (-11827)",
      "contents": "AVErrorInvalidCompositionTrackSegmentSourceDuration"
    },
    {
      "trigger": "AVErrorInvalidCompositionTrackSegmentSourceStartTime (-11826)",
      "contents": "AVErrorInvalidCompositionTrackSegmentSourceStartTime"
    },
    {
      "trigger": "AVErrorInvalidOutputURLPathExtension (-11843)",
      "contents": "AVErrorInvalidOutputURLPathExtension"
    },
    {
      "trigger": "AVErrorInvalidSourceMedia (-11822)",
      "contents": "AVErrorInvalidSourceMedia"
    },
    {
      "trigger": "AVErrorInvalidVideoComposition (-11841)",
      "contents": "AVErrorInvalidVideoComposition"
    },
    {
      "trigger": "AVErrorMaximumDurationReached (-11810)",
      "contents": "AVErrorMaximumDurationReached"
    },
    {
      "trigger": "AVErrorMaximumFileSizeReached (-11811)",
      "contents": "AVErrorMaximumFileSizeReached"
    },
    {
      "trigger": "AVErrorMaximumNumberOfSamplesForFileFormatReached (-11813)",
      "contents": "AVErrorMaximumNumberOfSamplesForFileFormatReached"
    },
    {
      "trigger": "AVErrorMaximumStillImageCaptureRequestsExceeded (-11830)",
      "contents": "AVErrorMaximumStillImageCaptureRequestsExceeded"
    },
    {
      "trigger": "AVErrorMediaChanged (-11809)",
      "contents": "AVErrorMediaChanged"
    },
    {
      "trigger": "AVErrorMediaDiscontinuity (-11812)",
      "contents": "AVErrorMediaDiscontinuity"
    },
    {
      "trigger": "AVErrorMediaServicesWereReset (-11819)",
      "contents": "AVErrorMediaServicesWereReset"
    },
    {
      "trigger": "AVErrorMediaSubTypeKey (NSString*)",
      "contents": "AVErrorMediaSubTypeKey"
    },
    {
      "trigger": "AVErrorMediaTypeKey (NSString*)",
      "contents": "AVErrorMediaTypeKey"
    },
    {
      "trigger": "AVErrorNoDataCaptured (-11805)",
      "contents": "AVErrorNoDataCaptured"
    },
    {
      "trigger": "AVErrorNoImageAtTime (-11832)",
      "contents": "AVErrorNoImageAtTime"
    },
    {
      "trigger": "AVErrorOperationNotSupportedForAsset (-11838)",
      "contents": "AVErrorOperationNotSupportedForAsset"
    },
    {
      "trigger": "AVErrorOutOfMemory (-11801)",
      "contents": "AVErrorOutOfMemory"
    },
    {
      "trigger": "AVErrorPIDKey (NSString*)",
      "contents": "AVErrorPIDKey"
    },
    {
      "trigger": "AVErrorRecordingSuccessfullyFinishedKey (NSString*)",
      "contents": "AVErrorRecordingSuccessfullyFinishedKey"
    },
    {
      "trigger": "AVErrorReferenceForbiddenByReferencePolicy (-11842)",
      "contents": "AVErrorReferenceForbiddenByReferencePolicy"
    },
    {
      "trigger": "AVErrorSessionConfigurationChanged (-11806)",
      "contents": "AVErrorSessionConfigurationChanged"
    },
    {
      "trigger": "AVErrorSessionNotRunning (-11803)",
      "contents": "AVErrorSessionNotRunning"
    },
    {
      "trigger": "AVErrorSessionWasInterrupted (-11818)",
      "contents": "AVErrorSessionWasInterrupted"
    },
    {
      "trigger": "AVErrorTimeKey (NSString*)",
      "contents": "AVErrorTimeKey"
    },
    {
      "trigger": "AVErrorUnknown (-11800)",
      "contents": "AVErrorUnknown"
    },
    {
      "trigger": "AVFileType3GPP (NSString*)",
      "contents": "AVFileType3GPP"
    },
    {
      "trigger": "AVFileTypeAIFC (NSString*)",
      "contents": "AVFileTypeAIFC"
    },
    {
      "trigger": "AVFileTypeAIFF (NSString*)",
      "contents": "AVFileTypeAIFF"
    },
    {
      "trigger": "AVFileTypeAMR (NSString*)",
      "contents": "AVFileTypeAMR"
    },
    {
      "trigger": "AVFileTypeAppleM4A (NSString*)",
      "contents": "AVFileTypeAppleM4A"
    },
    {
      "trigger": "AVFileTypeAppleM4V (NSString*)",
      "contents": "AVFileTypeAppleM4V"
    },
    {
      "trigger": "AVFileTypeCoreAudioFormat (NSString*)",
      "contents": "AVFileTypeCoreAudioFormat"
    },
    {
      "trigger": "AVFileTypeMPEG4 (NSString*)",
      "contents": "AVFileTypeMPEG4"
    },
    {
      "trigger": "AVFileTypeQuickTimeMovie (NSString*)",
      "contents": "AVFileTypeQuickTimeMovie"
    },
    {
      "trigger": "AVFileTypeWAVE (NSString*)",
      "contents": "AVFileTypeWAVE"
    },
    {
      "trigger": "AVFormatIDKey (NSString*)",
      "contents": "AVFormatIDKey"
    },
    {
      "trigger": "AVFoundationErrorDomain (NSString*)",
      "contents": "AVFoundationErrorDomain"
    },
    {
      "trigger": "AVKeyValueStatusCancelled (4)",
      "contents": "AVKeyValueStatusCancelled"
    },
    {
      "trigger": "AVKeyValueStatusFailed (3)",
      "contents": "AVKeyValueStatusFailed"
    },
    {
      "trigger": "AVKeyValueStatusLoaded (2)",
      "contents": "AVKeyValueStatusLoaded"
    },
    {
      "trigger": "AVKeyValueStatusLoading (1)",
      "contents": "AVKeyValueStatusLoading"
    },
    {
      "trigger": "AVKeyValueStatusUnknown (0)",
      "contents": "AVKeyValueStatusUnknown"
    },
    {
      "trigger": "AVLayerVideoGravityResize (NSString*)",
      "contents": "AVLayerVideoGravityResize"
    },
    {
      "trigger": "AVLayerVideoGravityResizeAspect (NSString*)",
      "contents": "AVLayerVideoGravityResizeAspect"
    },
    {
      "trigger": "AVLayerVideoGravityResizeAspectFill (NSString*)",
      "contents": "AVLayerVideoGravityResizeAspectFill"
    },
    {
      "trigger": "AVLinearPCMBitDepthKey (NSString*)",
      "contents": "AVLinearPCMBitDepthKey"
    },
    {
      "trigger": "AVLinearPCMIsBigEndianKey (NSString*)",
      "contents": "AVLinearPCMIsBigEndianKey"
    },
    {
      "trigger": "AVLinearPCMIsFloatKey (NSString*)",
      "contents": "AVLinearPCMIsFloatKey"
    },
    {
      "trigger": "AVLinearPCMIsNonInterleaved (NSString*)",
      "contents": "AVLinearPCMIsNonInterleaved"
    },
    {
      "trigger": "AVMakeRectWithAspectRatioInsideRect",
      "contents": "AVMakeRectWithAspectRatioInsideRect(${1:CGSize aspectRatio}, ${2:CGRect boundingRect})"
    },
    {
      "trigger": "AVMediaCharacteristicAudible (NSString*)",
      "contents": "AVMediaCharacteristicAudible"
    },
    {
      "trigger": "AVMediaCharacteristicContainsOnlyForcedSubtitles (NSString*)",
      "contents": "AVMediaCharacteristicContainsOnlyForcedSubtitles"
    },
    {
      "trigger": "AVMediaCharacteristicDescribesMusicAndSoundForAccessibility (NSString*)",
      "contents": "AVMediaCharacteristicDescribesMusicAndSoundForAccessibility"
    },
    {
      "trigger": "AVMediaCharacteristicDescribesVideoForAccessibility (NSString*)",
      "contents": "AVMediaCharacteristicDescribesVideoForAccessibility"
    },
    {
      "trigger": "AVMediaCharacteristicFrameBased (NSString*)",
      "contents": "AVMediaCharacteristicFrameBased"
    },
    {
      "trigger": "AVMediaCharacteristicIsAuxiliaryContent (NSString*)",
      "contents": "AVMediaCharacteristicIsAuxiliaryContent"
    },
    {
      "trigger": "AVMediaCharacteristicIsMainProgramContent (NSString*)",
      "contents": "AVMediaCharacteristicIsMainProgramContent"
    },
    {
      "trigger": "AVMediaCharacteristicLegible (NSString*)",
      "contents": "AVMediaCharacteristicLegible"
    },
    {
      "trigger": "AVMediaCharacteristicTranscribesSpokenDialogForAccessibility (NSString*)",
      "contents": "AVMediaCharacteristicTranscribesSpokenDialogForAccessibility"
    },
    {
      "trigger": "AVMediaCharacteristicVisual (NSString*)",
      "contents": "AVMediaCharacteristicVisual"
    },
    {
      "trigger": "AVMediaSelectionGroup.mediaSelectionOptionsFromArray:withLocale:",
      "contents": "AVMediaSelectionGroup.mediaSelectionOptionsFromArray(${1:NSArray* array}, withLocale:${2:NSLocale* locale})"
    },
    {
      "trigger": "AVMediaSelectionGroup.mediaSelectionOptionsFromArray:withMediaCharacteristics:",
      "contents": "AVMediaSelectionGroup.mediaSelectionOptionsFromArray(${1:NSArray* array}, withMediaCharacteristics:${2:NSArray* mediaCharacteristics})"
    },
    {
      "trigger": "AVMediaSelectionGroup.mediaSelectionOptionsFromArray:withoutMediaCharacteristics:",
      "contents": "AVMediaSelectionGroup.mediaSelectionOptionsFromArray(${1:NSArray* array}, withoutMediaCharacteristics:${2:NSArray* mediaCharacteristics})"
    },
    {
      "trigger": "AVMediaSelectionGroup.playableMediaSelectionOptionsFromArray:",
      "contents": "AVMediaSelectionGroup.playableMediaSelectionOptionsFromArray(${1:NSArray* array})"
    },
    {
      "trigger": "AVMediaTypeAudio (NSString*)",
      "contents": "AVMediaTypeAudio"
    },
    {
      "trigger": "AVMediaTypeClosedCaption (NSString*)",
      "contents": "AVMediaTypeClosedCaption"
    },
    {
      "trigger": "AVMediaTypeMuxed (NSString*)",
      "contents": "AVMediaTypeMuxed"
    },
    {
      "trigger": "AVMediaTypeSubtitle (NSString*)",
      "contents": "AVMediaTypeSubtitle"
    },
    {
      "trigger": "AVMediaTypeText (NSString*)",
      "contents": "AVMediaTypeText"
    },
    {
      "trigger": "AVMediaTypeTimecode (NSString*)",
      "contents": "AVMediaTypeTimecode"
    },
    {
      "trigger": "AVMediaTypeTimedMetadata (NSString*)",
      "contents": "AVMediaTypeTimedMetadata"
    },
    {
      "trigger": "AVMediaTypeVideo (NSString*)",
      "contents": "AVMediaTypeVideo"
    },
    {
      "trigger": "AVMetadata3GPUserDataKeyAuthor (NSString*)",
      "contents": "AVMetadata3GPUserDataKeyAuthor"
    },
    {
      "trigger": "AVMetadata3GPUserDataKeyCopyright (NSString*)",
      "contents": "AVMetadata3GPUserDataKeyCopyright"
    },
    {
      "trigger": "AVMetadata3GPUserDataKeyDescription (NSString*)",
      "contents": "AVMetadata3GPUserDataKeyDescription"
    },
    {
      "trigger": "AVMetadata3GPUserDataKeyGenre (NSString*)",
      "contents": "AVMetadata3GPUserDataKeyGenre"
    },
    {
      "trigger": "AVMetadata3GPUserDataKeyLocation (NSString*)",
      "contents": "AVMetadata3GPUserDataKeyLocation"
    },
    {
      "trigger": "AVMetadata3GPUserDataKeyPerformer (NSString*)",
      "contents": "AVMetadata3GPUserDataKeyPerformer"
    },
    {
      "trigger": "AVMetadata3GPUserDataKeyRecordingYear (NSString*)",
      "contents": "AVMetadata3GPUserDataKeyRecordingYear"
    },
    {
      "trigger": "AVMetadata3GPUserDataKeyTitle (NSString*)",
      "contents": "AVMetadata3GPUserDataKeyTitle"
    },
    {
      "trigger": "AVMetadataCommonKeyAlbumName (NSString*)",
      "contents": "AVMetadataCommonKeyAlbumName"
    },
    {
      "trigger": "AVMetadataCommonKeyArtist (NSString*)",
      "contents": "AVMetadataCommonKeyArtist"
    },
    {
      "trigger": "AVMetadataCommonKeyArtwork (NSString*)",
      "contents": "AVMetadataCommonKeyArtwork"
    },
    {
      "trigger": "AVMetadataCommonKeyAuthor (NSString*)",
      "contents": "AVMetadataCommonKeyAuthor"
    },
    {
      "trigger": "AVMetadataCommonKeyContributor (NSString*)",
      "contents": "AVMetadataCommonKeyContributor"
    },
    {
      "trigger": "AVMetadataCommonKeyCopyrights (NSString*)",
      "contents": "AVMetadataCommonKeyCopyrights"
    },
    {
      "trigger": "AVMetadataCommonKeyCreationDate (NSString*)",
      "contents": "AVMetadataCommonKeyCreationDate"
    },
    {
      "trigger": "AVMetadataCommonKeyCreator (NSString*)",
      "contents": "AVMetadataCommonKeyCreator"
    },
    {
      "trigger": "AVMetadataCommonKeyDescription (NSString*)",
      "contents": "AVMetadataCommonKeyDescription"
    },
    {
      "trigger": "AVMetadataCommonKeyFormat (NSString*)",
      "contents": "AVMetadataCommonKeyFormat"
    },
    {
      "trigger": "AVMetadataCommonKeyIdentifier (NSString*)",
      "contents": "AVMetadataCommonKeyIdentifier"
    },
    {
      "trigger": "AVMetadataCommonKeyLanguage (NSString*)",
      "contents": "AVMetadataCommonKeyLanguage"
    },
    {
      "trigger": "AVMetadataCommonKeyLastModifiedDate (NSString*)",
      "contents": "AVMetadataCommonKeyLastModifiedDate"
    },
    {
      "trigger": "AVMetadataCommonKeyLocation (NSString*)",
      "contents": "AVMetadataCommonKeyLocation"
    },
    {
      "trigger": "AVMetadataCommonKeyMake (NSString*)",
      "contents": "AVMetadataCommonKeyMake"
    },
    {
      "trigger": "AVMetadataCommonKeyModel (NSString*)",
      "contents": "AVMetadataCommonKeyModel"
    },
    {
      "trigger": "AVMetadataCommonKeyPublisher (NSString*)",
      "contents": "AVMetadataCommonKeyPublisher"
    },
    {
      "trigger": "AVMetadataCommonKeyRelation (NSString*)",
      "contents": "AVMetadataCommonKeyRelation"
    },
    {
      "trigger": "AVMetadataCommonKeySoftware (NSString*)",
      "contents": "AVMetadataCommonKeySoftware"
    },
    {
      "trigger": "AVMetadataCommonKeySource (NSString*)",
      "contents": "AVMetadataCommonKeySource"
    },
    {
      "trigger": "AVMetadataCommonKeySubject (NSString*)",
      "contents": "AVMetadataCommonKeySubject"
    },
    {
      "trigger": "AVMetadataCommonKeyTitle (NSString*)",
      "contents": "AVMetadataCommonKeyTitle"
    },
    {
      "trigger": "AVMetadataCommonKeyType (NSString*)",
      "contents": "AVMetadataCommonKeyType"
    },
    {
      "trigger": "AVMetadataFormatID3Metadata (NSString*)",
      "contents": "AVMetadataFormatID3Metadata"
    },
    {
      "trigger": "AVMetadataFormatQuickTimeMetadata (NSString*)",
      "contents": "AVMetadataFormatQuickTimeMetadata"
    },
    {
      "trigger": "AVMetadataFormatQuickTimeUserData (NSString*)",
      "contents": "AVMetadataFormatQuickTimeUserData"
    },
    {
      "trigger": "AVMetadataFormatiTunesMetadata (NSString*)",
      "contents": "AVMetadataFormatiTunesMetadata"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyAlbumSortOrder (NSString*)",
      "contents": "AVMetadataID3MetadataKeyAlbumSortOrder"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyAlbumTitle (NSString*)",
      "contents": "AVMetadataID3MetadataKeyAlbumTitle"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyAttachedPicture (NSString*)",
      "contents": "AVMetadataID3MetadataKeyAttachedPicture"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyAudioEncryption (NSString*)",
      "contents": "AVMetadataID3MetadataKeyAudioEncryption"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyAudioSeekPointIndex (NSString*)",
      "contents": "AVMetadataID3MetadataKeyAudioSeekPointIndex"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyBand (NSString*)",
      "contents": "AVMetadataID3MetadataKeyBand"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyBeatsPerMinute (NSString*)",
      "contents": "AVMetadataID3MetadataKeyBeatsPerMinute"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyComments (NSString*)",
      "contents": "AVMetadataID3MetadataKeyComments"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyCommercialInformation (NSString*)",
      "contents": "AVMetadataID3MetadataKeyCommercialInformation"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyCommerical (NSString*)",
      "contents": "AVMetadataID3MetadataKeyCommerical"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyComposer (NSString*)",
      "contents": "AVMetadataID3MetadataKeyComposer"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyConductor (NSString*)",
      "contents": "AVMetadataID3MetadataKeyConductor"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyContentGroupDescription (NSString*)",
      "contents": "AVMetadataID3MetadataKeyContentGroupDescription"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyContentType (NSString*)",
      "contents": "AVMetadataID3MetadataKeyContentType"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyCopyright (NSString*)",
      "contents": "AVMetadataID3MetadataKeyCopyright"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyCopyrightInformation (NSString*)",
      "contents": "AVMetadataID3MetadataKeyCopyrightInformation"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyDate (NSString*)",
      "contents": "AVMetadataID3MetadataKeyDate"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyEncodedBy (NSString*)",
      "contents": "AVMetadataID3MetadataKeyEncodedBy"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyEncodedWith (NSString*)",
      "contents": "AVMetadataID3MetadataKeyEncodedWith"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyEncodingTime (NSString*)",
      "contents": "AVMetadataID3MetadataKeyEncodingTime"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyEncryption (NSString*)",
      "contents": "AVMetadataID3MetadataKeyEncryption"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyEqualization (NSString*)",
      "contents": "AVMetadataID3MetadataKeyEqualization"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyEqualization2 (NSString*)",
      "contents": "AVMetadataID3MetadataKeyEqualization2"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyEventTimingCodes (NSString*)",
      "contents": "AVMetadataID3MetadataKeyEventTimingCodes"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyFileOwner (NSString*)",
      "contents": "AVMetadataID3MetadataKeyFileOwner"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyFileType (NSString*)",
      "contents": "AVMetadataID3MetadataKeyFileType"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyGeneralEncapsulatedObject (NSString*)",
      "contents": "AVMetadataID3MetadataKeyGeneralEncapsulatedObject"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyGroupIdentifier (NSString*)",
      "contents": "AVMetadataID3MetadataKeyGroupIdentifier"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyInitialKey (NSString*)",
      "contents": "AVMetadataID3MetadataKeyInitialKey"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyInternationalStandardRecordingCode (NSString*)",
      "contents": "AVMetadataID3MetadataKeyInternationalStandardRecordingCode"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyInternetRadioStationName (NSString*)",
      "contents": "AVMetadataID3MetadataKeyInternetRadioStationName"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyInternetRadioStationOwner (NSString*)",
      "contents": "AVMetadataID3MetadataKeyInternetRadioStationOwner"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyInvolvedPeopleList_v23 (NSString*)",
      "contents": "AVMetadataID3MetadataKeyInvolvedPeopleList_v23"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyInvolvedPeopleList_v24 (NSString*)",
      "contents": "AVMetadataID3MetadataKeyInvolvedPeopleList_v24"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyLanguage (NSString*)",
      "contents": "AVMetadataID3MetadataKeyLanguage"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyLeadPerformer (NSString*)",
      "contents": "AVMetadataID3MetadataKeyLeadPerformer"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyLength (NSString*)",
      "contents": "AVMetadataID3MetadataKeyLength"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyLink (NSString*)",
      "contents": "AVMetadataID3MetadataKeyLink"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyLyricist (NSString*)",
      "contents": "AVMetadataID3MetadataKeyLyricist"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyMPEGLocationLookupTable (NSString*)",
      "contents": "AVMetadataID3MetadataKeyMPEGLocationLookupTable"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyMediaType (NSString*)",
      "contents": "AVMetadataID3MetadataKeyMediaType"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyModifiedBy (NSString*)",
      "contents": "AVMetadataID3MetadataKeyModifiedBy"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyMood (NSString*)",
      "contents": "AVMetadataID3MetadataKeyMood"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyMusicCDIdentifier (NSString*)",
      "contents": "AVMetadataID3MetadataKeyMusicCDIdentifier"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyMusicianCreditsList (NSString*)",
      "contents": "AVMetadataID3MetadataKeyMusicianCreditsList"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyOfficialArtistWebpage (NSString*)",
      "contents": "AVMetadataID3MetadataKeyOfficialArtistWebpage"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyOfficialAudioFileWebpage (NSString*)",
      "contents": "AVMetadataID3MetadataKeyOfficialAudioFileWebpage"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyOfficialAudioSourceWebpage (NSString*)",
      "contents": "AVMetadataID3MetadataKeyOfficialAudioSourceWebpage"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyOfficialInternetRadioStationHomepage (NSString*)",
      "contents": "AVMetadataID3MetadataKeyOfficialInternetRadioStationHomepage"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyOfficialPublisherWebpage (NSString*)",
      "contents": "AVMetadataID3MetadataKeyOfficialPublisherWebpage"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyOriginalAlbumTitle (NSString*)",
      "contents": "AVMetadataID3MetadataKeyOriginalAlbumTitle"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyOriginalArtist (NSString*)",
      "contents": "AVMetadataID3MetadataKeyOriginalArtist"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyOriginalFilename (NSString*)",
      "contents": "AVMetadataID3MetadataKeyOriginalFilename"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyOriginalLyricist (NSString*)",
      "contents": "AVMetadataID3MetadataKeyOriginalLyricist"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyOriginalReleaseTime (NSString*)",
      "contents": "AVMetadataID3MetadataKeyOriginalReleaseTime"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyOriginalReleaseYear (NSString*)",
      "contents": "AVMetadataID3MetadataKeyOriginalReleaseYear"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyOwnership (NSString*)",
      "contents": "AVMetadataID3MetadataKeyOwnership"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyPartOfASet (NSString*)",
      "contents": "AVMetadataID3MetadataKeyPartOfASet"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyPayment (NSString*)",
      "contents": "AVMetadataID3MetadataKeyPayment"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyPerformerSortOrder (NSString*)",
      "contents": "AVMetadataID3MetadataKeyPerformerSortOrder"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyPlayCounter (NSString*)",
      "contents": "AVMetadataID3MetadataKeyPlayCounter"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyPlaylistDelay (NSString*)",
      "contents": "AVMetadataID3MetadataKeyPlaylistDelay"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyPopularimeter (NSString*)",
      "contents": "AVMetadataID3MetadataKeyPopularimeter"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyPositionSynchronization (NSString*)",
      "contents": "AVMetadataID3MetadataKeyPositionSynchronization"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyPrivate (NSString*)",
      "contents": "AVMetadataID3MetadataKeyPrivate"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyProducedNotice (NSString*)",
      "contents": "AVMetadataID3MetadataKeyProducedNotice"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyPublisher (NSString*)",
      "contents": "AVMetadataID3MetadataKeyPublisher"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyRecommendedBufferSize (NSString*)",
      "contents": "AVMetadataID3MetadataKeyRecommendedBufferSize"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyRecordingDates (NSString*)",
      "contents": "AVMetadataID3MetadataKeyRecordingDates"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyRecordingTime (NSString*)",
      "contents": "AVMetadataID3MetadataKeyRecordingTime"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyRelativeVolumeAdjustment (NSString*)",
      "contents": "AVMetadataID3MetadataKeyRelativeVolumeAdjustment"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyRelativeVolumeAdjustment2 (NSString*)",
      "contents": "AVMetadataID3MetadataKeyRelativeVolumeAdjustment2"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyReleaseTime (NSString*)",
      "contents": "AVMetadataID3MetadataKeyReleaseTime"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyReverb (NSString*)",
      "contents": "AVMetadataID3MetadataKeyReverb"
    },
    {
      "trigger": "AVMetadataID3MetadataKeySeek (NSString*)",
      "contents": "AVMetadataID3MetadataKeySeek"
    },
    {
      "trigger": "AVMetadataID3MetadataKeySetSubtitle (NSString*)",
      "contents": "AVMetadataID3MetadataKeySetSubtitle"
    },
    {
      "trigger": "AVMetadataID3MetadataKeySignature (NSString*)",
      "contents": "AVMetadataID3MetadataKeySignature"
    },
    {
      "trigger": "AVMetadataID3MetadataKeySize (NSString*)",
      "contents": "AVMetadataID3MetadataKeySize"
    },
    {
      "trigger": "AVMetadataID3MetadataKeySubTitle (NSString*)",
      "contents": "AVMetadataID3MetadataKeySubTitle"
    },
    {
      "trigger": "AVMetadataID3MetadataKeySynchronizedLyric (NSString*)",
      "contents": "AVMetadataID3MetadataKeySynchronizedLyric"
    },
    {
      "trigger": "AVMetadataID3MetadataKeySynchronizedTempoCodes (NSString*)",
      "contents": "AVMetadataID3MetadataKeySynchronizedTempoCodes"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyTaggingTime (NSString*)",
      "contents": "AVMetadataID3MetadataKeyTaggingTime"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyTermsOfUse (NSString*)",
      "contents": "AVMetadataID3MetadataKeyTermsOfUse"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyTime (NSString*)",
      "contents": "AVMetadataID3MetadataKeyTime"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyTitleDescription (NSString*)",
      "contents": "AVMetadataID3MetadataKeyTitleDescription"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyTitleSortOrder (NSString*)",
      "contents": "AVMetadataID3MetadataKeyTitleSortOrder"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyTrackNumber (NSString*)",
      "contents": "AVMetadataID3MetadataKeyTrackNumber"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyUniqueFileIdentifier (NSString*)",
      "contents": "AVMetadataID3MetadataKeyUniqueFileIdentifier"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyUnsynchronizedLyric (NSString*)",
      "contents": "AVMetadataID3MetadataKeyUnsynchronizedLyric"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyUserText (NSString*)",
      "contents": "AVMetadataID3MetadataKeyUserText"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyUserURL (NSString*)",
      "contents": "AVMetadataID3MetadataKeyUserURL"
    },
    {
      "trigger": "AVMetadataID3MetadataKeyYear (NSString*)",
      "contents": "AVMetadataID3MetadataKeyYear"
    },
    {
      "trigger": "AVMetadataISOUserDataKeyCopyright (NSString*)",
      "contents": "AVMetadataISOUserDataKeyCopyright"
    },
    {
      "trigger": "AVMetadataItem.metadataItemsFromArray:withKey:keySpace:",
      "contents": "AVMetadataItem.metadataItemsFromArray(${1:NSArray* array}, withKey:${2:id key}, keySpace:${3:NSString* keySpace})"
    },
    {
      "trigger": "AVMetadataItem.metadataItemsFromArray:withLocale:",
      "contents": "AVMetadataItem.metadataItemsFromArray(${1:NSArray* array}, withLocale:${2:NSLocale* locale})"
    },
    {
      "trigger": "AVMetadataKeySpaceCommon (NSString*)",
      "contents": "AVMetadataKeySpaceCommon"
    },
    {
      "trigger": "AVMetadataKeySpaceID3 (NSString*)",
      "contents": "AVMetadataKeySpaceID3"
    },
    {
      "trigger": "AVMetadataKeySpaceQuickTimeMetadata (NSString*)",
      "contents": "AVMetadataKeySpaceQuickTimeMetadata"
    },
    {
      "trigger": "AVMetadataKeySpaceQuickTimeUserData (NSString*)",
      "contents": "AVMetadataKeySpaceQuickTimeUserData"
    },
    {
      "trigger": "AVMetadataKeySpaceiTunes (NSString*)",
      "contents": "AVMetadataKeySpaceiTunes"
    },
    {
      "trigger": "AVMetadataQuickTimeMetadataKeyAlbum (NSString*)",
      "contents": "AVMetadataQuickTimeMetadataKeyAlbum"
    },
    {
      "trigger": "AVMetadataQuickTimeMetadataKeyArranger (NSString*)",
      "contents": "AVMetadataQuickTimeMetadataKeyArranger"
    },
    {
      "trigger": "AVMetadataQuickTimeMetadataKeyArtist (NSString*)",
      "contents": "AVMetadataQuickTimeMetadataKeyArtist"
    },
    {
      "trigger": "AVMetadataQuickTimeMetadataKeyArtwork (NSString*)",
      "contents": "AVMetadataQuickTimeMetadataKeyArtwork"
    },
    {
      "trigger": "AVMetadataQuickTimeMetadataKeyAuthor (NSString*)",
      "contents": "AVMetadataQuickTimeMetadataKeyAuthor"
    },
    {
      "trigger": "AVMetadataQuickTimeMetadataKeyCameraFrameReadoutTime (NSString*)",
      "contents": "AVMetadataQuickTimeMetadataKeyCameraFrameReadoutTime"
    },
    {
      "trigger": "AVMetadataQuickTimeMetadataKeyCameraIdentifier (NSString*)",
      "contents": "AVMetadataQuickTimeMetadataKeyCameraIdentifier"
    },
    {
      "trigger": "AVMetadataQuickTimeMetadataKeyCollectionUser (NSString*)",
      "contents": "AVMetadataQuickTimeMetadataKeyCollectionUser"
    },
    {
      "trigger": "AVMetadataQuickTimeMetadataKeyComment (NSString*)",
      "contents": "AVMetadataQuickTimeMetadataKeyComment"
    },
    {
      "trigger": "AVMetadataQuickTimeMetadataKeyComposer (NSString*)",
      "contents": "AVMetadataQuickTimeMetadataKeyComposer"
    },
    {
      "trigger": "AVMetadataQuickTimeMetadataKeyCopyright (NSString*)",
      "contents": "AVMetadataQuickTimeMetadataKeyCopyright"
    },
    {
      "trigger": "AVMetadataQuickTimeMetadataKeyCreationDate (NSString*)",
      "contents": "AVMetadataQuickTimeMetadataKeyCreationDate"
    },
    {
      "trigger": "AVMetadataQuickTimeMetadataKeyCredits (NSString*)",
      "contents": "AVMetadataQuickTimeMetadataKeyCredits"
    },
    {
      "trigger": "AVMetadataQuickTimeMetadataKeyDescription (NSString*)",
      "contents": "AVMetadataQuickTimeMetadataKeyDescription"
    },
    {
      "trigger": "AVMetadataQuickTimeMetadataKeyDirectionFacing (NSString*)",
      "contents": "AVMetadataQuickTimeMetadataKeyDirectionFacing"
    },
    {
      "trigger": "AVMetadataQuickTimeMetadataKeyDirectionMotion (NSString*)",
      "contents": "AVMetadataQuickTimeMetadataKeyDirectionMotion"
    },
    {
      "trigger": "AVMetadataQuickTimeMetadataKeyDirector (NSString*)",
      "contents": "AVMetadataQuickTimeMetadataKeyDirector"
    },
    {
      "trigger": "AVMetadataQuickTimeMetadataKeyDisplayName (NSString*)",
      "contents": "AVMetadataQuickTimeMetadataKeyDisplayName"
    },
    {
      "trigger": "AVMetadataQuickTimeMetadataKeyEncodedBy (NSString*)",
      "contents": "AVMetadataQuickTimeMetadataKeyEncodedBy"
    },
    {
      "trigger": "AVMetadataQuickTimeMetadataKeyGenre (NSString*)",
      "contents": "AVMetadataQuickTimeMetadataKeyGenre"
    },
    {
      "trigger": "AVMetadataQuickTimeMetadataKeyInformation (NSString*)",
      "contents": "AVMetadataQuickTimeMetadataKeyInformation"
    },
    {
      "trigger": "AVMetadataQuickTimeMetadataKeyKeywords (NSString*)",
      "contents": "AVMetadataQuickTimeMetadataKeyKeywords"
    },
    {
      "trigger": "AVMetadataQuickTimeMetadataKeyLocationBody (NSString*)",
      "contents": "AVMetadataQuickTimeMetadataKeyLocationBody"
    },
    {
      "trigger": "AVMetadataQuickTimeMetadataKeyLocationDate (NSString*)",
      "contents": "AVMetadataQuickTimeMetadataKeyLocationDate"
    },
    {
      "trigger": "AVMetadataQuickTimeMetadataKeyLocationISO6709 (NSString*)",
      "contents": "AVMetadataQuickTimeMetadataKeyLocationISO6709"
    },
    {
      "trigger": "AVMetadataQuickTimeMetadataKeyLocationName (NSString*)",
      "contents": "AVMetadataQuickTimeMetadataKeyLocationName"
    },
    {
      "trigger": "AVMetadataQuickTimeMetadataKeyLocationNote (NSString*)",
      "contents": "AVMetadataQuickTimeMetadataKeyLocationNote"
    },
    {
      "trigger": "AVMetadataQuickTimeMetadataKeyLocationRole (NSString*)",
      "contents": "AVMetadataQuickTimeMetadataKeyLocationRole"
    },
    {
      "trigger": "AVMetadataQuickTimeMetadataKeyMake (NSString*)",
      "contents": "AVMetadataQuickTimeMetadataKeyMake"
    },
    {
      "trigger": "AVMetadataQuickTimeMetadataKeyModel (NSString*)",
      "contents": "AVMetadataQuickTimeMetadataKeyModel"
    },
    {
      "trigger": "AVMetadataQuickTimeMetadataKeyOriginalArtist (NSString*)",
      "contents": "AVMetadataQuickTimeMetadataKeyOriginalArtist"
    },
    {
      "trigger": "AVMetadataQuickTimeMetadataKeyPerformer (NSString*)",
      "contents": "AVMetadataQuickTimeMetadataKeyPerformer"
    },
    {
      "trigger": "AVMetadataQuickTimeMetadataKeyPhonogramRights (NSString*)",
      "contents": "AVMetadataQuickTimeMetadataKeyPhonogramRights"
    },
    {
      "trigger": "AVMetadataQuickTimeMetadataKeyProducer (NSString*)",
      "contents": "AVMetadataQuickTimeMetadataKeyProducer"
    },
    {
      "trigger": "AVMetadataQuickTimeMetadataKeyPublisher (NSString*)",
      "contents": "AVMetadataQuickTimeMetadataKeyPublisher"
    },
    {
      "trigger": "AVMetadataQuickTimeMetadataKeyRatingUser (NSString*)",
      "contents": "AVMetadataQuickTimeMetadataKeyRatingUser"
    },
    {
      "trigger": "AVMetadataQuickTimeMetadataKeySoftware (NSString*)",
      "contents": "AVMetadataQuickTimeMetadataKeySoftware"
    },
    {
      "trigger": "AVMetadataQuickTimeMetadataKeyTitle (NSString*)",
      "contents": "AVMetadataQuickTimeMetadataKeyTitle"
    },
    {
      "trigger": "AVMetadataQuickTimeMetadataKeyYear (NSString*)",
      "contents": "AVMetadataQuickTimeMetadataKeyYear"
    },
    {
      "trigger": "AVMetadataQuickTimeMetadataKeyiXML (NSString*)",
      "contents": "AVMetadataQuickTimeMetadataKeyiXML"
    },
    {
      "trigger": "AVMetadataQuickTimeUserDataKeyAlbum (NSString*)",
      "contents": "AVMetadataQuickTimeUserDataKeyAlbum"
    },
    {
      "trigger": "AVMetadataQuickTimeUserDataKeyArranger (NSString*)",
      "contents": "AVMetadataQuickTimeUserDataKeyArranger"
    },
    {
      "trigger": "AVMetadataQuickTimeUserDataKeyArtist (NSString*)",
      "contents": "AVMetadataQuickTimeUserDataKeyArtist"
    },
    {
      "trigger": "AVMetadataQuickTimeUserDataKeyAuthor (NSString*)",
      "contents": "AVMetadataQuickTimeUserDataKeyAuthor"
    },
    {
      "trigger": "AVMetadataQuickTimeUserDataKeyChapter (NSString*)",
      "contents": "AVMetadataQuickTimeUserDataKeyChapter"
    },
    {
      "trigger": "AVMetadataQuickTimeUserDataKeyComment (NSString*)",
      "contents": "AVMetadataQuickTimeUserDataKeyComment"
    },
    {
      "trigger": "AVMetadataQuickTimeUserDataKeyComposer (NSString*)",
      "contents": "AVMetadataQuickTimeUserDataKeyComposer"
    },
    {
      "trigger": "AVMetadataQuickTimeUserDataKeyCopyright (NSString*)",
      "contents": "AVMetadataQuickTimeUserDataKeyCopyright"
    },
    {
      "trigger": "AVMetadataQuickTimeUserDataKeyCreationDate (NSString*)",
      "contents": "AVMetadataQuickTimeUserDataKeyCreationDate"
    },
    {
      "trigger": "AVMetadataQuickTimeUserDataKeyCredits (NSString*)",
      "contents": "AVMetadataQuickTimeUserDataKeyCredits"
    },
    {
      "trigger": "AVMetadataQuickTimeUserDataKeyDescription (NSString*)",
      "contents": "AVMetadataQuickTimeUserDataKeyDescription"
    },
    {
      "trigger": "AVMetadataQuickTimeUserDataKeyDirector (NSString*)",
      "contents": "AVMetadataQuickTimeUserDataKeyDirector"
    },
    {
      "trigger": "AVMetadataQuickTimeUserDataKeyDisclaimer (NSString*)",
      "contents": "AVMetadataQuickTimeUserDataKeyDisclaimer"
    },
    {
      "trigger": "AVMetadataQuickTimeUserDataKeyEncodedBy (NSString*)",
      "contents": "AVMetadataQuickTimeUserDataKeyEncodedBy"
    },
    {
      "trigger": "AVMetadataQuickTimeUserDataKeyFullName (NSString*)",
      "contents": "AVMetadataQuickTimeUserDataKeyFullName"
    },
    {
      "trigger": "AVMetadataQuickTimeUserDataKeyGenre (NSString*)",
      "contents": "AVMetadataQuickTimeUserDataKeyGenre"
    },
    {
      "trigger": "AVMetadataQuickTimeUserDataKeyHostComputer (NSString*)",
      "contents": "AVMetadataQuickTimeUserDataKeyHostComputer"
    },
    {
      "trigger": "AVMetadataQuickTimeUserDataKeyInformation (NSString*)",
      "contents": "AVMetadataQuickTimeUserDataKeyInformation"
    },
    {
      "trigger": "AVMetadataQuickTimeUserDataKeyKeywords (NSString*)",
      "contents": "AVMetadataQuickTimeUserDataKeyKeywords"
    },
    {
      "trigger": "AVMetadataQuickTimeUserDataKeyLocationISO6709 (NSString*)",
      "contents": "AVMetadataQuickTimeUserDataKeyLocationISO6709"
    },
    {
      "trigger": "AVMetadataQuickTimeUserDataKeyMake (NSString*)",
      "contents": "AVMetadataQuickTimeUserDataKeyMake"
    },
    {
      "trigger": "AVMetadataQuickTimeUserDataKeyModel (NSString*)",
      "contents": "AVMetadataQuickTimeUserDataKeyModel"
    },
    {
      "trigger": "AVMetadataQuickTimeUserDataKeyOriginalArtist (NSString*)",
      "contents": "AVMetadataQuickTimeUserDataKeyOriginalArtist"
    },
    {
      "trigger": "AVMetadataQuickTimeUserDataKeyOriginalFormat (NSString*)",
      "contents": "AVMetadataQuickTimeUserDataKeyOriginalFormat"
    },
    {
      "trigger": "AVMetadataQuickTimeUserDataKeyOriginalSource (NSString*)",
      "contents": "AVMetadataQuickTimeUserDataKeyOriginalSource"
    },
    {
      "trigger": "AVMetadataQuickTimeUserDataKeyPerformers (NSString*)",
      "contents": "AVMetadataQuickTimeUserDataKeyPerformers"
    },
    {
      "trigger": "AVMetadataQuickTimeUserDataKeyPhonogramRights (NSString*)",
      "contents": "AVMetadataQuickTimeUserDataKeyPhonogramRights"
    },
    {
      "trigger": "AVMetadataQuickTimeUserDataKeyProducer (NSString*)",
      "contents": "AVMetadataQuickTimeUserDataKeyProducer"
    },
    {
      "trigger": "AVMetadataQuickTimeUserDataKeyProduct (NSString*)",
      "contents": "AVMetadataQuickTimeUserDataKeyProduct"
    },
    {
      "trigger": "AVMetadataQuickTimeUserDataKeyPublisher (NSString*)",
      "contents": "AVMetadataQuickTimeUserDataKeyPublisher"
    },
    {
      "trigger": "AVMetadataQuickTimeUserDataKeySoftware (NSString*)",
      "contents": "AVMetadataQuickTimeUserDataKeySoftware"
    },
    {
      "trigger": "AVMetadataQuickTimeUserDataKeySpecialPlaybackRequirements (NSString*)",
      "contents": "AVMetadataQuickTimeUserDataKeySpecialPlaybackRequirements"
    },
    {
      "trigger": "AVMetadataQuickTimeUserDataKeyTaggedCharacteristic (NSString*)",
      "contents": "AVMetadataQuickTimeUserDataKeyTaggedCharacteristic"
    },
    {
      "trigger": "AVMetadataQuickTimeUserDataKeyTrack (NSString*)",
      "contents": "AVMetadataQuickTimeUserDataKeyTrack"
    },
    {
      "trigger": "AVMetadataQuickTimeUserDataKeyTrackName (NSString*)",
      "contents": "AVMetadataQuickTimeUserDataKeyTrackName"
    },
    {
      "trigger": "AVMetadataQuickTimeUserDataKeyURLLink (NSString*)",
      "contents": "AVMetadataQuickTimeUserDataKeyURLLink"
    },
    {
      "trigger": "AVMetadataQuickTimeUserDataKeyWarning (NSString*)",
      "contents": "AVMetadataQuickTimeUserDataKeyWarning"
    },
    {
      "trigger": "AVMetadataQuickTimeUserDataKeyWriter (NSString*)",
      "contents": "AVMetadataQuickTimeUserDataKeyWriter"
    },
    {
      "trigger": "AVMetadataiTunesMetadataKeyAccountKind (NSString*)",
      "contents": "AVMetadataiTunesMetadataKeyAccountKind"
    },
    {
      "trigger": "AVMetadataiTunesMetadataKeyAcknowledgement (NSString*)",
      "contents": "AVMetadataiTunesMetadataKeyAcknowledgement"
    },
    {
      "trigger": "AVMetadataiTunesMetadataKeyAlbum (NSString*)",
      "contents": "AVMetadataiTunesMetadataKeyAlbum"
    },
    {
      "trigger": "AVMetadataiTunesMetadataKeyAlbumArtist (NSString*)",
      "contents": "AVMetadataiTunesMetadataKeyAlbumArtist"
    },
    {
      "trigger": "AVMetadataiTunesMetadataKeyAppleID (NSString*)",
      "contents": "AVMetadataiTunesMetadataKeyAppleID"
    },
    {
      "trigger": "AVMetadataiTunesMetadataKeyArranger (NSString*)",
      "contents": "AVMetadataiTunesMetadataKeyArranger"
    },
    {
      "trigger": "AVMetadataiTunesMetadataKeyArtDirector (NSString*)",
      "contents": "AVMetadataiTunesMetadataKeyArtDirector"
    },
    {
      "trigger": "AVMetadataiTunesMetadataKeyArtist (NSString*)",
      "contents": "AVMetadataiTunesMetadataKeyArtist"
    },
    {
      "trigger": "AVMetadataiTunesMetadataKeyArtistID (NSString*)",
      "contents": "AVMetadataiTunesMetadataKeyArtistID"
    },
    {
      "trigger": "AVMetadataiTunesMetadataKeyAuthor (NSString*)",
      "contents": "AVMetadataiTunesMetadataKeyAuthor"
    },
    {
      "trigger": "AVMetadataiTunesMetadataKeyBeatsPerMin (NSString*)",
      "contents": "AVMetadataiTunesMetadataKeyBeatsPerMin"
    },
    {
      "trigger": "AVMetadataiTunesMetadataKeyComposer (NSString*)",
      "contents": "AVMetadataiTunesMetadataKeyComposer"
    },
    {
      "trigger": "AVMetadataiTunesMetadataKeyConductor (NSString*)",
      "contents": "AVMetadataiTunesMetadataKeyConductor"
    },
    {
      "trigger": "AVMetadataiTunesMetadataKeyContentRating (NSString*)",
      "contents": "AVMetadataiTunesMetadataKeyContentRating"
    },
    {
      "trigger": "AVMetadataiTunesMetadataKeyCopyright (NSString*)",
      "contents": "AVMetadataiTunesMetadataKeyCopyright"
    },
    {
      "trigger": "AVMetadataiTunesMetadataKeyCoverArt (NSString*)",
      "contents": "AVMetadataiTunesMetadataKeyCoverArt"
    },
    {
      "trigger": "AVMetadataiTunesMetadataKeyCredits (NSString*)",
      "contents": "AVMetadataiTunesMetadataKeyCredits"
    },
    {
      "trigger": "AVMetadataiTunesMetadataKeyDescription (NSString*)",
      "contents": "AVMetadataiTunesMetadataKeyDescription"
    },
    {
      "trigger": "AVMetadataiTunesMetadataKeyDirector (NSString*)",
      "contents": "AVMetadataiTunesMetadataKeyDirector"
    },
    {
      "trigger": "AVMetadataiTunesMetadataKeyDiscCompilation (NSString*)",
      "contents": "AVMetadataiTunesMetadataKeyDiscCompilation"
    },
    {
      "trigger": "AVMetadataiTunesMetadataKeyDiscNumber (NSString*)",
      "contents": "AVMetadataiTunesMetadataKeyDiscNumber"
    },
    {
      "trigger": "AVMetadataiTunesMetadataKeyEQ (NSString*)",
      "contents": "AVMetadataiTunesMetadataKeyEQ"
    },
    {
      "trigger": "AVMetadataiTunesMetadataKeyEncodedBy (NSString*)",
      "contents": "AVMetadataiTunesMetadataKeyEncodedBy"
    },
    {
      "trigger": "AVMetadataiTunesMetadataKeyEncodingTool (NSString*)",
      "contents": "AVMetadataiTunesMetadataKeyEncodingTool"
    },
    {
      "trigger": "AVMetadataiTunesMetadataKeyExecProducer (NSString*)",
      "contents": "AVMetadataiTunesMetadataKeyExecProducer"
    },
    {
      "trigger": "AVMetadataiTunesMetadataKeyGenreID (NSString*)",
      "contents": "AVMetadataiTunesMetadataKeyGenreID"
    },
    {
      "trigger": "AVMetadataiTunesMetadataKeyGrouping (NSString*)",
      "contents": "AVMetadataiTunesMetadataKeyGrouping"
    },
    {
      "trigger": "AVMetadataiTunesMetadataKeyLinerNotes (NSString*)",
      "contents": "AVMetadataiTunesMetadataKeyLinerNotes"
    },
    {
      "trigger": "AVMetadataiTunesMetadataKeyLyrics (NSString*)",
      "contents": "AVMetadataiTunesMetadataKeyLyrics"
    },
    {
      "trigger": "AVMetadataiTunesMetadataKeyOnlineExtras (NSString*)",
      "contents": "AVMetadataiTunesMetadataKeyOnlineExtras"
    },
    {
      "trigger": "AVMetadataiTunesMetadataKeyOriginalArtist (NSString*)",
      "contents": "AVMetadataiTunesMetadataKeyOriginalArtist"
    },
    {
      "trigger": "AVMetadataiTunesMetadataKeyPerformer (NSString*)",
      "contents": "AVMetadataiTunesMetadataKeyPerformer"
    },
    {
      "trigger": "AVMetadataiTunesMetadataKeyPhonogramRights (NSString*)",
      "contents": "AVMetadataiTunesMetadataKeyPhonogramRights"
    },
    {
      "trigger": "AVMetadataiTunesMetadataKeyPlaylistID (NSString*)",
      "contents": "AVMetadataiTunesMetadataKeyPlaylistID"
    },
    {
      "trigger": "AVMetadataiTunesMetadataKeyPredefinedGenre (NSString*)",
      "contents": "AVMetadataiTunesMetadataKeyPredefinedGenre"
    },
    {
      "trigger": "AVMetadataiTunesMetadataKeyProducer (NSString*)",
      "contents": "AVMetadataiTunesMetadataKeyProducer"
    },
    {
      "trigger": "AVMetadataiTunesMetadataKeyPublisher (NSString*)",
      "contents": "AVMetadataiTunesMetadataKeyPublisher"
    },
    {
      "trigger": "AVMetadataiTunesMetadataKeyRecordCompany (NSString*)",
      "contents": "AVMetadataiTunesMetadataKeyRecordCompany"
    },
    {
      "trigger": "AVMetadataiTunesMetadataKeyReleaseDate (NSString*)",
      "contents": "AVMetadataiTunesMetadataKeyReleaseDate"
    },
    {
      "trigger": "AVMetadataiTunesMetadataKeySoloist (NSString*)",
      "contents": "AVMetadataiTunesMetadataKeySoloist"
    },
    {
      "trigger": "AVMetadataiTunesMetadataKeySongID (NSString*)",
      "contents": "AVMetadataiTunesMetadataKeySongID"
    },
    {
      "trigger": "AVMetadataiTunesMetadataKeySongName (NSString*)",
      "contents": "AVMetadataiTunesMetadataKeySongName"
    },
    {
      "trigger": "AVMetadataiTunesMetadataKeySoundEngineer (NSString*)",
      "contents": "AVMetadataiTunesMetadataKeySoundEngineer"
    },
    {
      "trigger": "AVMetadataiTunesMetadataKeyThanks (NSString*)",
      "contents": "AVMetadataiTunesMetadataKeyThanks"
    },
    {
      "trigger": "AVMetadataiTunesMetadataKeyTrackNumber (NSString*)",
      "contents": "AVMetadataiTunesMetadataKeyTrackNumber"
    },
    {
      "trigger": "AVMetadataiTunesMetadataKeyTrackSubTitle (NSString*)",
      "contents": "AVMetadataiTunesMetadataKeyTrackSubTitle"
    },
    {
      "trigger": "AVMetadataiTunesMetadataKeyUserComment (NSString*)",
      "contents": "AVMetadataiTunesMetadataKeyUserComment"
    },
    {
      "trigger": "AVMetadataiTunesMetadataKeyUserGenre (NSString*)",
      "contents": "AVMetadataiTunesMetadataKeyUserGenre"
    },
    {
      "trigger": "AVMutableAudioMixInputParameters.audioMixInputParametersWithTrack:",
      "contents": "AVMutableAudioMixInputParameters.audioMixInputParametersWithTrack(${1:AVAssetTrack* track})"
    },
    {
      "trigger": "AVMutableVideoCompositionLayerInstruction.videoCompositionLayerInstructionWithAssetTrack:",
      "contents": "AVMutableVideoCompositionLayerInstruction.videoCompositionLayerInstructionWithAssetTrack(${1:AVAssetTrack* track})"
    },
    {
      "trigger": "AVNumberOfChannelsKey (NSString*)",
      "contents": "AVNumberOfChannelsKey"
    },
    {
      "trigger": "AVPlayer.playerWithPlayerItem:",
      "contents": "AVPlayer.playerWithPlayerItem(${1:AVPlayerItem* item})"
    },
    {
      "trigger": "AVPlayer.playerWithURL:",
      "contents": "AVPlayer.playerWithURL(${1:NSURL* URL})"
    },
    {
      "trigger": "AVPlayerActionAtItemEndAdvance (0)",
      "contents": "AVPlayerActionAtItemEndAdvance"
    },
    {
      "trigger": "AVPlayerActionAtItemEndNone (2)",
      "contents": "AVPlayerActionAtItemEndNone"
    },
    {
      "trigger": "AVPlayerActionAtItemEndPause (1)",
      "contents": "AVPlayerActionAtItemEndPause"
    },
    {
      "trigger": "AVPlayerItem.playerItemWithAsset:",
      "contents": "AVPlayerItem.playerItemWithAsset(${1:AVAsset* asset})"
    },
    {
      "trigger": "AVPlayerItem.playerItemWithURL:",
      "contents": "AVPlayerItem.playerItemWithURL(${1:NSURL* URL})"
    },
    {
      "trigger": "AVPlayerItemDidPlayToEndTimeNotification (NSString*)",
      "contents": "AVPlayerItemDidPlayToEndTimeNotification"
    },
    {
      "trigger": "AVPlayerItemFailedToPlayToEndTimeErrorKey (NSString*)",
      "contents": "AVPlayerItemFailedToPlayToEndTimeErrorKey"
    },
    {
      "trigger": "AVPlayerItemFailedToPlayToEndTimeNotification (NSString*)",
      "contents": "AVPlayerItemFailedToPlayToEndTimeNotification"
    },
    {
      "trigger": "AVPlayerItemStatusFailed (2)",
      "contents": "AVPlayerItemStatusFailed"
    },
    {
      "trigger": "AVPlayerItemStatusReadyToPlay (1)",
      "contents": "AVPlayerItemStatusReadyToPlay"
    },
    {
      "trigger": "AVPlayerItemStatusUnknown (0)",
      "contents": "AVPlayerItemStatusUnknown"
    },
    {
      "trigger": "AVPlayerItemTimeJumpedNotification (NSString*)",
      "contents": "AVPlayerItemTimeJumpedNotification"
    },
    {
      "trigger": "AVPlayerLayer.playerLayerWithPlayer:",
      "contents": "AVPlayerLayer.playerLayerWithPlayer(${1:AVPlayer* player})"
    },
    {
      "trigger": "AVPlayerStatusFailed (2)",
      "contents": "AVPlayerStatusFailed"
    },
    {
      "trigger": "AVPlayerStatusReadyToPlay (1)",
      "contents": "AVPlayerStatusReadyToPlay"
    },
    {
      "trigger": "AVPlayerStatusUnknown (0)",
      "contents": "AVPlayerStatusUnknown"
    },
    {
      "trigger": "AVQueuePlayer.queuePlayerWithItems:",
      "contents": "AVQueuePlayer.queuePlayerWithItems(${1:NSArray* items})"
    },
    {
      "trigger": "AVSampleRateConverterAudioQualityKey (NSString*)",
      "contents": "AVSampleRateConverterAudioQualityKey"
    },
    {
      "trigger": "AVSampleRateKey (NSString*)",
      "contents": "AVSampleRateKey"
    },
    {
      "trigger": "AVSynchronizedLayer.synchronizedLayerWithPlayerItem:",
      "contents": "AVSynchronizedLayer.synchronizedLayerWithPlayerItem(${1:AVPlayerItem* playerItem})"
    },
    {
      "trigger": "AVURLAsset.URLAssetWithURL:options:",
      "contents": "AVURLAsset.URLAssetWithURL(${1:NSURL* URL}, options:${2:NSDictionary* options})"
    },
    {
      "trigger": "AVURLAsset.isPlayableExtendedMIMEType:",
      "contents": "AVURLAsset.isPlayableExtendedMIMEType(${1:NSString* extendedMIMEType})"
    },
    {
      "trigger": "AVURLAssetPreferPreciseDurationAndTimingKey (NSString*)",
      "contents": "AVURLAssetPreferPreciseDurationAndTimingKey"
    },
    {
      "trigger": "AVURLAssetReferenceRestrictionsKey (NSString*)",
      "contents": "AVURLAssetReferenceRestrictionsKey"
    },
    {
      "trigger": "AVVideoAverageBitRateKey (NSString*)",
      "contents": "AVVideoAverageBitRateKey"
    },
    {
      "trigger": "AVVideoCleanApertureHeightKey (NSString*)",
      "contents": "AVVideoCleanApertureHeightKey"
    },
    {
      "trigger": "AVVideoCleanApertureHorizontalOffsetKey (NSString*)",
      "contents": "AVVideoCleanApertureHorizontalOffsetKey"
    },
    {
      "trigger": "AVVideoCleanApertureKey (NSString*)",
      "contents": "AVVideoCleanApertureKey"
    },
    {
      "trigger": "AVVideoCleanApertureVerticalOffsetKey (NSString*)",
      "contents": "AVVideoCleanApertureVerticalOffsetKey"
    },
    {
      "trigger": "AVVideoCleanApertureWidthKey (NSString*)",
      "contents": "AVVideoCleanApertureWidthKey"
    },
    {
      "trigger": "AVVideoCodecH264 (NSString*)",
      "contents": "AVVideoCodecH264"
    },
    {
      "trigger": "AVVideoCodecJPEG (NSString*)",
      "contents": "AVVideoCodecJPEG"
    },
    {
      "trigger": "AVVideoCodecKey (NSString*)",
      "contents": "AVVideoCodecKey"
    },
    {
      "trigger": "AVVideoCompositionCoreAnimationTool.videoCompositionCoreAnimationToolWithAdditionalLayer:asTrackID:",
      "contents": "AVVideoCompositionCoreAnimationTool.videoCompositionCoreAnimationToolWithAdditionalLayer(${1:CALayer* layer}, asTrackID:${2:CMPersistentTrackID trackID})"
    },
    {
      "trigger": "AVVideoCompositionCoreAnimationTool.videoCompositionCoreAnimationToolWithPostProcessingAsVideoLayer:inLayer:",
      "contents": "AVVideoCompositionCoreAnimationTool.videoCompositionCoreAnimationToolWithPostProcessingAsVideoLayer(${1:CALayer* videoLayer}, inLayer:${2:CALayer* animationLayer})"
    },
    {
      "trigger": "AVVideoCompressionPropertiesKey (NSString*)",
      "contents": "AVVideoCompressionPropertiesKey"
    },
    {
      "trigger": "AVVideoHeightKey (NSString*)",
      "contents": "AVVideoHeightKey"
    },
    {
      "trigger": "AVVideoMaxKeyFrameIntervalKey (NSString*)",
      "contents": "AVVideoMaxKeyFrameIntervalKey"
    },
    {
      "trigger": "AVVideoPixelAspectRatioHorizontalSpacingKey (NSString*)",
      "contents": "AVVideoPixelAspectRatioHorizontalSpacingKey"
    },
    {
      "trigger": "AVVideoPixelAspectRatioKey (NSString*)",
      "contents": "AVVideoPixelAspectRatioKey"
    },
    {
      "trigger": "AVVideoPixelAspectRatioVerticalSpacingKey (NSString*)",
      "contents": "AVVideoPixelAspectRatioVerticalSpacingKey"
    },
    {
      "trigger": "AVVideoProfileLevelH264Baseline30 (NSString*)",
      "contents": "AVVideoProfileLevelH264Baseline30"
    },
    {
      "trigger": "AVVideoProfileLevelH264Baseline31 (NSString*)",
      "contents": "AVVideoProfileLevelH264Baseline31"
    },
    {
      "trigger": "AVVideoProfileLevelH264Baseline41 (NSString*)",
      "contents": "AVVideoProfileLevelH264Baseline41"
    },
    {
      "trigger": "AVVideoProfileLevelH264Main30 (NSString*)",
      "contents": "AVVideoProfileLevelH264Main30"
    },
    {
      "trigger": "AVVideoProfileLevelH264Main31 (NSString*)",
      "contents": "AVVideoProfileLevelH264Main31"
    },
    {
      "trigger": "AVVideoProfileLevelH264Main32 (NSString*)",
      "contents": "AVVideoProfileLevelH264Main32"
    },
    {
      "trigger": "AVVideoProfileLevelH264Main41 (NSString*)",
      "contents": "AVVideoProfileLevelH264Main41"
    },
    {
      "trigger": "AVVideoProfileLevelKey (NSString*)",
      "contents": "AVVideoProfileLevelKey"
    },
    {
      "trigger": "AVVideoQualityKey (NSString*)",
      "contents": "AVVideoQualityKey"
    },
    {
      "trigger": "AVVideoScalingModeFit (NSString*)",
      "contents": "AVVideoScalingModeFit"
    },
    {
      "trigger": "AVVideoScalingModeKey (NSString*)",
      "contents": "AVVideoScalingModeKey"
    },
    {
      "trigger": "AVVideoScalingModeResize (NSString*)",
      "contents": "AVVideoScalingModeResize"
    },
    {
      "trigger": "AVVideoScalingModeResizeAspect (NSString*)",
      "contents": "AVVideoScalingModeResizeAspect"
    },
    {
      "trigger": "AVVideoScalingModeResizeAspectFill (NSString*)",
      "contents": "AVVideoScalingModeResizeAspectFill"
    },
    {
      "trigger": "AVVideoWidthKey (NSString*)",
      "contents": "AVVideoWidthKey"
    },
    {
      "trigger": "AudioConverterConvertBuffer",
      "contents": "AudioConverterConvertBuffer(${1:AudioConverterRef inAudioConverter}, ${2:UInt32 inInputDataSize}, ${3:void* inInputData}, ${4:UInt32* ioOutputDataSize}, ${5:void* outOutputData})"
    },
    {
      "trigger": "AudioConverterConvertComplexBuffer",
      "contents": "AudioConverterConvertComplexBuffer(${1:AudioConverterRef inAudioConverter}, ${2:UInt32 inNumberPCMFrames}, ${3:AudioBufferList* inInputData}, ${4:AudioBufferList* outOutputData})"
    },
    {
      "trigger": "AudioConverterDispose",
      "contents": "AudioConverterDispose(${1:AudioConverterRef inAudioConverter})"
    },
    {
      "trigger": "AudioConverterFillComplexBuffer",
      "contents": "AudioConverterFillComplexBuffer(${1:AudioConverterRef inAudioConverter}, ${2:AudioConverterComplexInputDataProc inInputDataProc}, ${3:void* inInputDataProcUserData}, ${4:UInt32* ioOutputDataPacketSize}, ${5:AudioBufferList* outOutputData}, ${6:AudioStreamPacketDescription* outPacketDescription})"
    },
    {
      "trigger": "AudioConverterGetProperty",
      "contents": "AudioConverterGetProperty(${1:AudioConverterRef inAudioConverter}, ${2:AudioConverterPropertyID inPropertyID}, ${3:UInt32* ioPropertyDataSize}, ${4:void* outPropertyData})"
    },
    {
      "trigger": "AudioConverterGetPropertyInfo",
      "contents": "AudioConverterGetPropertyInfo(${1:AudioConverterRef inAudioConverter}, ${2:AudioConverterPropertyID inPropertyID}, ${3:UInt32* outSize}, ${4:Boolean* outWritable})"
    },
    {
      "trigger": "AudioConverterNew",
      "contents": "AudioConverterNew(${1:AudioStreamBasicDescription* inSourceFormat}, ${2:AudioStreamBasicDescription* inDestinationFormat}, ${3:AudioConverterRef* outAudioConverter})"
    },
    {
      "trigger": "AudioConverterNewSpecific",
      "contents": "AudioConverterNewSpecific(${1:AudioStreamBasicDescription* inSourceFormat}, ${2:AudioStreamBasicDescription* inDestinationFormat}, ${3:UInt32 inNumberClassDescriptions}, ${4:AudioClassDescription* inClassDescriptions}, ${5:AudioConverterRef* outAudioConverter})"
    },
    {
      "trigger": "AudioConverterReset",
      "contents": "AudioConverterReset(${1:AudioConverterRef inAudioConverter})"
    },
    {
      "trigger": "AudioConverterSetProperty",
      "contents": "AudioConverterSetProperty(${1:AudioConverterRef inAudioConverter}, ${2:AudioConverterPropertyID inPropertyID}, ${3:UInt32 inPropertyDataSize}, ${4:void* inPropertyData})"
    },
    {
      "trigger": "AudioFileClose",
      "contents": "AudioFileClose(${1:AudioFileID inAudioFile})"
    },
    {
      "trigger": "AudioFileCountUserData",
      "contents": "AudioFileCountUserData(${1:AudioFileID inAudioFile}, ${2:UInt32 inUserDataID}, ${3:UInt32* outNumberItems})"
    },
    {
      "trigger": "AudioFileCreateWithURL",
      "contents": "AudioFileCreateWithURL(${1:CFURLRef inFileRef}, ${2:AudioFileTypeID inFileType}, ${3:AudioStreamBasicDescription* inFormat}, ${4:UInt32 inFlags}, ${5:AudioFileID* outAudioFile})"
    },
    {
      "trigger": "AudioFileGetGlobalInfo",
      "contents": "AudioFileGetGlobalInfo(${1:AudioFilePropertyID inPropertyID}, ${2:UInt32 inSpecifierSize}, ${3:void* inSpecifier}, ${4:UInt32* ioDataSize}, ${5:void* outPropertyData})"
    },
    {
      "trigger": "AudioFileGetGlobalInfoSize",
      "contents": "AudioFileGetGlobalInfoSize(${1:AudioFilePropertyID inPropertyID}, ${2:UInt32 inSpecifierSize}, ${3:void* inSpecifier}, ${4:UInt32* outDataSize})"
    },
    {
      "trigger": "AudioFileGetProperty",
      "contents": "AudioFileGetProperty(${1:AudioFileID inAudioFile}, ${2:AudioFilePropertyID inPropertyID}, ${3:UInt32* ioDataSize}, ${4:void* outPropertyData})"
    },
    {
      "trigger": "AudioFileGetPropertyInfo",
      "contents": "AudioFileGetPropertyInfo(${1:AudioFileID inAudioFile}, ${2:AudioFilePropertyID inPropertyID}, ${3:UInt32* outDataSize}, ${4:UInt32* isWritable})"
    },
    {
      "trigger": "AudioFileGetUserData",
      "contents": "AudioFileGetUserData(${1:AudioFileID inAudioFile}, ${2:UInt32 inUserDataID}, ${3:UInt32 inIndex}, ${4:UInt32* ioUserDataSize}, ${5:void* outUserData})"
    },
    {
      "trigger": "AudioFileGetUserDataSize",
      "contents": "AudioFileGetUserDataSize(${1:AudioFileID inAudioFile}, ${2:UInt32 inUserDataID}, ${3:UInt32 inIndex}, ${4:UInt32* outUserDataSize})"
    },
    {
      "trigger": "AudioFileInitializeWithCallbacks",
      "contents": "AudioFileInitializeWithCallbacks(${1:void* inClientData}, ${2:AudioFile_ReadProc inReadFunc}, ${3:AudioFile_WriteProc inWriteFunc}, ${4:AudioFile_GetSizeProc inGetSizeFunc}, ${5:AudioFile_SetSizeProc inSetSizeFunc}, ${6:AudioFileTypeID inFileType}, ${7:AudioStreamBasicDescription* inFormat}, ${8:UInt32 inFlags}, ${9:AudioFileID* outAudioFile})"
    },
    {
      "trigger": "AudioFileOpenURL",
      "contents": "AudioFileOpenURL(${1:CFURLRef inFileRef}, ${2:SInt8 inPermissions}, ${3:AudioFileTypeID inFileTypeHint}, ${4:AudioFileID* outAudioFile})"
    },
    {
      "trigger": "AudioFileOpenWithCallbacks",
      "contents": "AudioFileOpenWithCallbacks(${1:void* inClientData}, ${2:AudioFile_ReadProc inReadFunc}, ${3:AudioFile_WriteProc inWriteFunc}, ${4:AudioFile_GetSizeProc inGetSizeFunc}, ${5:AudioFile_SetSizeProc inSetSizeFunc}, ${6:AudioFileTypeID inFileTypeHint}, ${7:AudioFileID* outAudioFile})"
    },
    {
      "trigger": "AudioFileOptimize",
      "contents": "AudioFileOptimize(${1:AudioFileID inAudioFile})"
    },
    {
      "trigger": "AudioFileReadBytes",
      "contents": "AudioFileReadBytes(${1:AudioFileID inAudioFile}, ${2:Boolean inUseCache}, ${3:SInt64 inStartingByte}, ${4:UInt32* ioNumBytes}, ${5:void* outBuffer})"
    },
    {
      "trigger": "AudioFileReadPacketData",
      "contents": "AudioFileReadPacketData(${1:AudioFileID inAudioFile}, ${2:Boolean inUseCache}, ${3:UInt32* ioNumBytes}, ${4:AudioStreamPacketDescription* outPacketDescriptions}, ${5:SInt64 inStartingPacket}, ${6:UInt32* ioNumPackets}, ${7:void* outBuffer})"
    },
    {
      "trigger": "AudioFileReadPackets",
      "contents": "AudioFileReadPackets(${1:AudioFileID inAudioFile}, ${2:Boolean inUseCache}, ${3:UInt32* outNumBytes}, ${4:AudioStreamPacketDescription* outPacketDescriptions}, ${5:SInt64 inStartingPacket}, ${6:UInt32* ioNumPackets}, ${7:void* outBuffer})"
    },
    {
      "trigger": "AudioFileRemoveUserData",
      "contents": "AudioFileRemoveUserData(${1:AudioFileID inAudioFile}, ${2:UInt32 inUserDataID}, ${3:UInt32 inIndex})"
    },
    {
      "trigger": "AudioFileSetProperty",
      "contents": "AudioFileSetProperty(${1:AudioFileID inAudioFile}, ${2:AudioFilePropertyID inPropertyID}, ${3:UInt32 inDataSize}, ${4:void* inPropertyData})"
    },
    {
      "trigger": "AudioFileSetUserData",
      "contents": "AudioFileSetUserData(${1:AudioFileID inAudioFile}, ${2:UInt32 inUserDataID}, ${3:UInt32 inIndex}, ${4:UInt32 inUserDataSize}, ${5:void* inUserData})"
    },
    {
      "trigger": "AudioFileStreamClose",
      "contents": "AudioFileStreamClose(${1:AudioFileStreamID inAudioFileStream})"
    },
    {
      "trigger": "AudioFileStreamGetProperty",
      "contents": "AudioFileStreamGetProperty(${1:AudioFileStreamID inAudioFileStream}, ${2:AudioFileStreamPropertyID inPropertyID}, ${3:UInt32* ioPropertyDataSize}, ${4:void* outPropertyData})"
    },
    {
      "trigger": "AudioFileStreamGetPropertyInfo",
      "contents": "AudioFileStreamGetPropertyInfo(${1:AudioFileStreamID inAudioFileStream}, ${2:AudioFileStreamPropertyID inPropertyID}, ${3:UInt32* outPropertyDataSize}, ${4:Boolean* outWritable})"
    },
    {
      "trigger": "AudioFileStreamOpen",
      "contents": "AudioFileStreamOpen(${1:void* inClientData}, ${2:AudioFileStream_PropertyListenerProc inPropertyListenerProc}, ${3:AudioFileStream_PacketsProc inPacketsProc}, ${4:AudioFileTypeID inFileTypeHint}, ${5:AudioFileStreamID* outAudioFileStream})"
    },
    {
      "trigger": "AudioFileStreamParseBytes",
      "contents": "AudioFileStreamParseBytes(${1:AudioFileStreamID inAudioFileStream}, ${2:UInt32 inDataByteSize}, ${3:void* inData}, ${4:UInt32 inFlags})"
    },
    {
      "trigger": "AudioFileStreamSeek",
      "contents": "AudioFileStreamSeek(${1:AudioFileStreamID inAudioFileStream}, ${2:SInt64 inPacketOffset}, ${3:SInt64* outDataByteOffset}, ${4:UInt32* ioFlags})"
    },
    {
      "trigger": "AudioFileStreamSetProperty",
      "contents": "AudioFileStreamSetProperty(${1:AudioFileStreamID inAudioFileStream}, ${2:AudioFileStreamPropertyID inPropertyID}, ${3:UInt32 inPropertyDataSize}, ${4:void* inPropertyData})"
    },
    {
      "trigger": "AudioFileWriteBytes",
      "contents": "AudioFileWriteBytes(${1:AudioFileID inAudioFile}, ${2:Boolean inUseCache}, ${3:SInt64 inStartingByte}, ${4:UInt32* ioNumBytes}, ${5:void* inBuffer})"
    },
    {
      "trigger": "AudioFileWritePackets",
      "contents": "AudioFileWritePackets(${1:AudioFileID inAudioFile}, ${2:Boolean inUseCache}, ${3:UInt32 inNumBytes}, ${4:AudioStreamPacketDescription* inPacketDescriptions}, ${5:SInt64 inStartingPacket}, ${6:UInt32* ioNumPackets}, ${7:void* inBuffer})"
    },
    {
      "trigger": "AudioFormatGetProperty",
      "contents": "AudioFormatGetProperty(${1:AudioFormatPropertyID inPropertyID}, ${2:UInt32 inSpecifierSize}, ${3:void* inSpecifier}, ${4:UInt32* ioPropertyDataSize}, ${5:void* outPropertyData})"
    },
    {
      "trigger": "AudioFormatGetPropertyInfo",
      "contents": "AudioFormatGetPropertyInfo(${1:AudioFormatPropertyID inPropertyID}, ${2:UInt32 inSpecifierSize}, ${3:void* inSpecifier}, ${4:UInt32* outPropertyDataSize})"
    },
    {
      "trigger": "AudioQueueAddPropertyListener",
      "contents": "AudioQueueAddPropertyListener(${1:AudioQueueRef inAQ}, ${2:AudioQueuePropertyID inID}, ${3:AudioQueuePropertyListenerProc inProc}, ${4:void* inUserData})"
    },
    {
      "trigger": "AudioQueueAllocateBuffer",
      "contents": "AudioQueueAllocateBuffer(${1:AudioQueueRef inAQ}, ${2:UInt32 inBufferByteSize}, ${3:AudioQueueBufferRef* outBuffer})"
    },
    {
      "trigger": "AudioQueueAllocateBufferWithPacketDescriptions",
      "contents": "AudioQueueAllocateBufferWithPacketDescriptions(${1:AudioQueueRef inAQ}, ${2:UInt32 inBufferByteSize}, ${3:UInt32 inNumberPacketDescriptions}, ${4:AudioQueueBufferRef* outBuffer})"
    },
    {
      "trigger": "AudioQueueCreateTimeline",
      "contents": "AudioQueueCreateTimeline(${1:AudioQueueRef inAQ}, ${2:AudioQueueTimelineRef* outTimeline})"
    },
    {
      "trigger": "AudioQueueDeviceGetCurrentTime",
      "contents": "AudioQueueDeviceGetCurrentTime(${1:AudioQueueRef inAQ}, ${2:AudioTimeStamp* outTimeStamp})"
    },
    {
      "trigger": "AudioQueueDeviceGetNearestStartTime",
      "contents": "AudioQueueDeviceGetNearestStartTime(${1:AudioQueueRef inAQ}, ${2:AudioTimeStamp* ioRequestedStartTime}, ${3:UInt32 inFlags})"
    },
    {
      "trigger": "AudioQueueDeviceTranslateTime",
      "contents": "AudioQueueDeviceTranslateTime(${1:AudioQueueRef inAQ}, ${2:AudioTimeStamp* inTime}, ${3:AudioTimeStamp* outTime})"
    },
    {
      "trigger": "AudioQueueDispose",
      "contents": "AudioQueueDispose(${1:AudioQueueRef inAQ}, ${2:Boolean inImmediate})"
    },
    {
      "trigger": "AudioQueueDisposeTimeline",
      "contents": "AudioQueueDisposeTimeline(${1:AudioQueueRef inAQ}, ${2:AudioQueueTimelineRef inTimeline})"
    },
    {
      "trigger": "AudioQueueEnqueueBuffer",
      "contents": "AudioQueueEnqueueBuffer(${1:AudioQueueRef inAQ}, ${2:AudioQueueBufferRef inBuffer}, ${3:UInt32 inNumPacketDescs}, ${4:AudioStreamPacketDescription* inPacketDescs})"
    },
    {
      "trigger": "AudioQueueEnqueueBufferWithParameters",
      "contents": "AudioQueueEnqueueBufferWithParameters(${1:AudioQueueRef inAQ}, ${2:AudioQueueBufferRef inBuffer}, ${3:UInt32 inNumPacketDescs}, ${4:AudioStreamPacketDescription* inPacketDescs}, ${5:UInt32 inTrimFramesAtStart}, ${6:UInt32 inTrimFramesAtEnd}, ${7:UInt32 inNumParamValues}, ${8:AudioQueueParameterEvent* inParamValues}, ${9:AudioTimeStamp* inStartTime}, ${10:AudioTimeStamp* outActualStartTime})"
    },
    {
      "trigger": "AudioQueueFlush",
      "contents": "AudioQueueFlush(${1:AudioQueueRef inAQ})"
    },
    {
      "trigger": "AudioQueueFreeBuffer",
      "contents": "AudioQueueFreeBuffer(${1:AudioQueueRef inAQ}, ${2:AudioQueueBufferRef inBuffer})"
    },
    {
      "trigger": "AudioQueueGetCurrentTime",
      "contents": "AudioQueueGetCurrentTime(${1:AudioQueueRef inAQ}, ${2:AudioQueueTimelineRef inTimeline}, ${3:AudioTimeStamp* outTimeStamp}, ${4:Boolean* outTimelineDiscontinuity})"
    },
    {
      "trigger": "AudioQueueGetParameter",
      "contents": "AudioQueueGetParameter(${1:AudioQueueRef inAQ}, ${2:AudioQueueParameterID inParamID}, ${3:AudioQueueParameterValue* outValue})"
    },
    {
      "trigger": "AudioQueueGetProperty",
      "contents": "AudioQueueGetProperty(${1:AudioQueueRef inAQ}, ${2:AudioQueuePropertyID inID}, ${3:void* outData}, ${4:UInt32* ioDataSize})"
    },
    {
      "trigger": "AudioQueueGetPropertySize",
      "contents": "AudioQueueGetPropertySize(${1:AudioQueueRef inAQ}, ${2:AudioQueuePropertyID inID}, ${3:UInt32* outDataSize})"
    },
    {
      "trigger": "AudioQueueNewInput",
      "contents": "AudioQueueNewInput(${1:AudioStreamBasicDescription* inFormat}, ${2:AudioQueueInputCallback inCallbackProc}, ${3:void* inUserData}, ${4:CFRunLoopRef inCallbackRunLoop}, ${5:CFStringRef inCallbackRunLoopMode}, ${6:UInt32 inFlags}, ${7:AudioQueueRef* outAQ})"
    },
    {
      "trigger": "AudioQueueNewOutput",
      "contents": "AudioQueueNewOutput(${1:AudioStreamBasicDescription* inFormat}, ${2:AudioQueueOutputCallback inCallbackProc}, ${3:void* inUserData}, ${4:CFRunLoopRef inCallbackRunLoop}, ${5:CFStringRef inCallbackRunLoopMode}, ${6:UInt32 inFlags}, ${7:AudioQueueRef* outAQ})"
    },
    {
      "trigger": "AudioQueueOfflineRender",
      "contents": "AudioQueueOfflineRender(${1:AudioQueueRef inAQ}, ${2:AudioTimeStamp* inTimestamp}, ${3:AudioQueueBufferRef ioBuffer}, ${4:UInt32 inNumberFrames})"
    },
    {
      "trigger": "AudioQueuePause",
      "contents": "AudioQueuePause(${1:AudioQueueRef inAQ})"
    },
    {
      "trigger": "AudioQueuePrime",
      "contents": "AudioQueuePrime(${1:AudioQueueRef inAQ}, ${2:UInt32 inNumberOfFramesToPrepare}, ${3:UInt32* outNumberOfFramesPrepared})"
    },
    {
      "trigger": "AudioQueueRemovePropertyListener",
      "contents": "AudioQueueRemovePropertyListener(${1:AudioQueueRef inAQ}, ${2:AudioQueuePropertyID inID}, ${3:AudioQueuePropertyListenerProc inProc}, ${4:void* inUserData})"
    },
    {
      "trigger": "AudioQueueReset",
      "contents": "AudioQueueReset(${1:AudioQueueRef inAQ})"
    },
    {
      "trigger": "AudioQueueSetOfflineRenderFormat",
      "contents": "AudioQueueSetOfflineRenderFormat(${1:AudioQueueRef inAQ}, ${2:AudioStreamBasicDescription* inFormat}, ${3:AudioChannelLayout* inLayout})"
    },
    {
      "trigger": "AudioQueueSetParameter",
      "contents": "AudioQueueSetParameter(${1:AudioQueueRef inAQ}, ${2:AudioQueueParameterID inParamID}, ${3:AudioQueueParameterValue inValue})"
    },
    {
      "trigger": "AudioQueueSetProperty",
      "contents": "AudioQueueSetProperty(${1:AudioQueueRef inAQ}, ${2:AudioQueuePropertyID inID}, ${3:void* inData}, ${4:UInt32 inDataSize})"
    },
    {
      "trigger": "AudioQueueStart",
      "contents": "AudioQueueStart(${1:AudioQueueRef inAQ}, ${2:AudioTimeStamp* inStartTime})"
    },
    {
      "trigger": "AudioQueueStop",
      "contents": "AudioQueueStop(${1:AudioQueueRef inAQ}, ${2:Boolean inImmediate})"
    },
    {
      "trigger": "AudioServicesAddSystemSoundCompletion",
      "contents": "AudioServicesAddSystemSoundCompletion(${1:SystemSoundID inSystemSoundID}, ${2:CFRunLoopRef inRunLoop}, ${3:CFStringRef inRunLoopMode}, ${4:AudioServicesSystemSoundCompletionProc inCompletionRoutine}, ${5:void* inClientData})"
    },
    {
      "trigger": "AudioServicesCreateSystemSoundID",
      "contents": "AudioServicesCreateSystemSoundID(${1:CFURLRef inFileURL}, ${2:SystemSoundID* outSystemSoundID})"
    },
    {
      "trigger": "AudioServicesDisposeSystemSoundID",
      "contents": "AudioServicesDisposeSystemSoundID(${1:SystemSoundID inSystemSoundID})"
    },
    {
      "trigger": "AudioServicesGetProperty",
      "contents": "AudioServicesGetProperty(${1:AudioServicesPropertyID inPropertyID}, ${2:UInt32 inSpecifierSize}, ${3:void* inSpecifier}, ${4:UInt32* ioPropertyDataSize}, ${5:void* outPropertyData})"
    },
    {
      "trigger": "AudioServicesGetPropertyInfo",
      "contents": "AudioServicesGetPropertyInfo(${1:AudioServicesPropertyID inPropertyID}, ${2:UInt32 inSpecifierSize}, ${3:void* inSpecifier}, ${4:UInt32* outPropertyDataSize}, ${5:Boolean* outWritable})"
    },
    {
      "trigger": "AudioServicesPlayAlertSound",
      "contents": "AudioServicesPlayAlertSound(${1:SystemSoundID inSystemSoundID})"
    },
    {
      "trigger": "AudioServicesPlaySystemSound",
      "contents": "AudioServicesPlaySystemSound(${1:SystemSoundID inSystemSoundID})"
    },
    {
      "trigger": "AudioServicesRemoveSystemSoundCompletion",
      "contents": "AudioServicesRemoveSystemSoundCompletion(${1:SystemSoundID inSystemSoundID})"
    },
    {
      "trigger": "AudioServicesSetProperty",
      "contents": "AudioServicesSetProperty(${1:AudioServicesPropertyID inPropertyID}, ${2:UInt32 inSpecifierSize}, ${3:void* inSpecifier}, ${4:UInt32 inPropertyDataSize}, ${5:void* inPropertyData})"
    },
    {
      "trigger": "AudioSessionAddPropertyListener",
      "contents": "AudioSessionAddPropertyListener(${1:AudioSessionPropertyID inID}, ${2:AudioSessionPropertyListener inProc}, ${3:void* inClientData})"
    },
    {
      "trigger": "AudioSessionGetProperty",
      "contents": "AudioSessionGetProperty(${1:AudioSessionPropertyID inID}, ${2:UInt32* ioDataSize}, ${3:void* outData})"
    },
    {
      "trigger": "AudioSessionGetPropertySize",
      "contents": "AudioSessionGetPropertySize(${1:AudioSessionPropertyID inID}, ${2:UInt32* outDataSize})"
    },
    {
      "trigger": "AudioSessionInitialize",
      "contents": "AudioSessionInitialize(${1:CFRunLoopRef inRunLoop}, ${2:CFStringRef inRunLoopMode}, ${3:AudioSessionInterruptionListener inInterruptionListener}, ${4:void* inClientData})"
    },
    {
      "trigger": "AudioSessionRemovePropertyListener",
      "contents": "AudioSessionRemovePropertyListener(${1:AudioSessionPropertyID inID})"
    },
    {
      "trigger": "AudioSessionRemovePropertyListenerWithUserData",
      "contents": "AudioSessionRemovePropertyListenerWithUserData(${1:AudioSessionPropertyID inID}, ${2:AudioSessionPropertyListener inProc}, ${3:void* inClientData})"
    },
    {
      "trigger": "AudioSessionSetActive",
      "contents": "AudioSessionSetActive(${1:Boolean active})"
    },
    {
      "trigger": "AudioSessionSetActiveWithFlags",
      "contents": "AudioSessionSetActiveWithFlags(${1:Boolean active}, ${2:UInt32 inFlags})"
    },
    {
      "trigger": "AudioSessionSetProperty",
      "contents": "AudioSessionSetProperty(${1:AudioSessionPropertyID inID}, ${2:UInt32 inDataSize}, ${3:void* inData})"
    },
    {
      "trigger": "CAAnimation.defaultValueForKey:",
      "contents": "CAAnimation.defaultValueForKey(${1:NSString* key})"
    },
    {
      "trigger": "CADisplayLink.displayLinkWithTarget:selector:",
      "contents": "CADisplayLink.displayLinkWithTarget(${1:id target}, selector:${2:SEL sel})"
    },
    {
      "trigger": "CAEmitterCell.defaultValueForKey:",
      "contents": "CAEmitterCell.defaultValueForKey(${1:NSString* key})"
    },
    {
      "trigger": "CALayer.defaultActionForKey:",
      "contents": "CALayer.defaultActionForKey(${1:NSString* event})"
    },
    {
      "trigger": "CALayer.defaultValueForKey:",
      "contents": "CALayer.defaultValueForKey(${1:NSString* key})"
    },
    {
      "trigger": "CALayer.needsDisplayForKey:",
      "contents": "CALayer.needsDisplayForKey(${1:NSString* key})"
    },
    {
      "trigger": "CAMediaTimingFunction.functionWithControlPoints::::",
      "contents": "CAMediaTimingFunction.functionWithControlPoints(${1:float c1x}, ${2:float c1y}, ${3:float c2x}, ${4:float c2y})"
    },
    {
      "trigger": "CAMediaTimingFunction.functionWithName:",
      "contents": "CAMediaTimingFunction.functionWithName(${1:NSString* name})"
    },
    {
      "trigger": "CAPropertyAnimation.animationWithKeyPath:",
      "contents": "CAPropertyAnimation.animationWithKeyPath(${1:NSString* path})"
    },
    {
      "trigger": "CAShow",
      "contents": "CAShow(${1:void* inObject})"
    },
    {
      "trigger": "CAShowFile",
      "contents": "CAShowFile(${1:void* inObject}, ${2:FILE* inFile})"
    },
    {
      "trigger": "CATransaction.setAnimationDuration:",
      "contents": "CATransaction.setAnimationDuration(${1:CFTimeInterval dur})"
    },
    {
      "trigger": "CATransaction.setAnimationTimingFunction:",
      "contents": "CATransaction.setAnimationTimingFunction(${1:CAMediaTimingFunction* function})"
    },
    {
      "trigger": "CATransaction.setCompletionBlock:",
      "contents": "CATransaction.setCompletionBlock(${1:void (^)(void) block})"
    },
    {
      "trigger": "CATransaction.setDisableActions:",
      "contents": "CATransaction.setDisableActions(${1:BOOL flag})"
    },
    {
      "trigger": "CATransaction.setValue:forKey:",
      "contents": "CATransaction.setValue(${1:id anObject}, forKey:${2:NSString* key})"
    },
    {
      "trigger": "CATransaction.valueForKey:",
      "contents": "CATransaction.valueForKey(${1:NSString* key})"
    },
    {
      "trigger": "CATransform3DConcat",
      "contents": "CATransform3DConcat(${1:CATransform3D a}, ${2:CATransform3D b})"
    },
    {
      "trigger": "CATransform3DEqualToTransform",
      "contents": "CATransform3DEqualToTransform(${1:CATransform3D a}, ${2:CATransform3D b})"
    },
    {
      "trigger": "CATransform3DGetAffineTransform",
      "contents": "CATransform3DGetAffineTransform(${1:CATransform3D t})"
    },
    {
      "trigger": "CATransform3DIdentity (CATransform3D)",
      "contents": "CATransform3DIdentity"
    },
    {
      "trigger": "CATransform3DInvert",
      "contents": "CATransform3DInvert(${1:CATransform3D t})"
    },
    {
      "trigger": "CATransform3DIsAffine",
      "contents": "CATransform3DIsAffine(${1:CATransform3D t})"
    },
    {
      "trigger": "CATransform3DIsIdentity",
      "contents": "CATransform3DIsIdentity(${1:CATransform3D t})"
    },
    {
      "trigger": "CATransform3DMakeAffineTransform",
      "contents": "CATransform3DMakeAffineTransform(${1:CGAffineTransform m})"
    },
    {
      "trigger": "CATransform3DMakeRotation",
      "contents": "CATransform3DMakeRotation(${1:CGFloat angle}, ${2:CGFloat x}, ${3:CGFloat y}, ${4:CGFloat z})"
    },
    {
      "trigger": "CATransform3DMakeScale",
      "contents": "CATransform3DMakeScale(${1:CGFloat sx}, ${2:CGFloat sy}, ${3:CGFloat sz})"
    },
    {
      "trigger": "CATransform3DMakeTranslation",
      "contents": "CATransform3DMakeTranslation(${1:CGFloat tx}, ${2:CGFloat ty}, ${3:CGFloat tz})"
    },
    {
      "trigger": "CATransform3DRotate",
      "contents": "CATransform3DRotate(${1:CATransform3D t}, ${2:CGFloat angle}, ${3:CGFloat x}, ${4:CGFloat y}, ${5:CGFloat z})"
    },
    {
      "trigger": "CATransform3DScale",
      "contents": "CATransform3DScale(${1:CATransform3D t}, ${2:CGFloat sx}, ${3:CGFloat sy}, ${4:CGFloat sz})"
    },
    {
      "trigger": "CATransform3DTranslate",
      "contents": "CATransform3DTranslate(${1:CATransform3D t}, ${2:CGFloat tx}, ${3:CGFloat ty}, ${4:CGFloat tz})"
    },
    {
      "trigger": "CAValueFunction.functionWithName:",
      "contents": "CAValueFunction.functionWithName(${1:NSString* name})"
    },
    {
      "trigger": "CA_PREFER_FIXED_POINT (1)",
      "contents": "CA_PREFER_FIXED_POINT"
    },
    {
      "trigger": "CA_WARN_DEPRECATED (1)",
      "contents": "CA_WARN_DEPRECATED"
    },
    {
      "trigger": "CBATTErrorAttributeNotFound (10)",
      "contents": "CBATTErrorAttributeNotFound"
    },
    {
      "trigger": "CBATTErrorAttributeNotLong (11)",
      "contents": "CBATTErrorAttributeNotLong"
    },
    {
      "trigger": "CBATTErrorDomain (NSString*)",
      "contents": "CBATTErrorDomain"
    },
    {
      "trigger": "CBATTErrorInsufficientAuthentication (5)",
      "contents": "CBATTErrorInsufficientAuthentication"
    },
    {
      "trigger": "CBATTErrorInsufficientAuthorization (8)",
      "contents": "CBATTErrorInsufficientAuthorization"
    },
    {
      "trigger": "CBATTErrorInsufficientEncryption (15)",
      "contents": "CBATTErrorInsufficientEncryption"
    },
    {
      "trigger": "CBATTErrorInsufficientEncryptionKeySize (12)",
      "contents": "CBATTErrorInsufficientEncryptionKeySize"
    },
    {
      "trigger": "CBATTErrorInsufficientResources (17)",
      "contents": "CBATTErrorInsufficientResources"
    },
    {
      "trigger": "CBATTErrorInvalidAttributeValueLength (13)",
      "contents": "CBATTErrorInvalidAttributeValueLength"
    },
    {
      "trigger": "CBATTErrorInvalidHandle (1)",
      "contents": "CBATTErrorInvalidHandle"
    },
    {
      "trigger": "CBATTErrorInvalidOffset (7)",
      "contents": "CBATTErrorInvalidOffset"
    },
    {
      "trigger": "CBATTErrorInvalidPdu (4)",
      "contents": "CBATTErrorInvalidPdu"
    },
    {
      "trigger": "CBATTErrorPrepareQueueFull (9)",
      "contents": "CBATTErrorPrepareQueueFull"
    },
    {
      "trigger": "CBATTErrorReadNotPermitted (2)",
      "contents": "CBATTErrorReadNotPermitted"
    },
    {
      "trigger": "CBATTErrorRequestNotSupported (6)",
      "contents": "CBATTErrorRequestNotSupported"
    },
    {
      "trigger": "CBATTErrorUnlikelyError (14)",
      "contents": "CBATTErrorUnlikelyError"
    },
    {
      "trigger": "CBATTErrorUnsupportedGroupType (16)",
      "contents": "CBATTErrorUnsupportedGroupType"
    },
    {
      "trigger": "CBATTErrorWriteNotPermitted (3)",
      "contents": "CBATTErrorWriteNotPermitted"
    },
    {
      "trigger": "CBAdvertisementDataLocalNameKey (NSString*)",
      "contents": "CBAdvertisementDataLocalNameKey"
    },
    {
      "trigger": "CBAdvertisementDataManufacturerDataKey (NSString*)",
      "contents": "CBAdvertisementDataManufacturerDataKey"
    },
    {
      "trigger": "CBAdvertisementDataServiceDataKey (NSString*)",
      "contents": "CBAdvertisementDataServiceDataKey"
    },
    {
      "trigger": "CBAdvertisementDataServiceUUIDsKey (NSString*)",
      "contents": "CBAdvertisementDataServiceUUIDsKey"
    },
    {
      "trigger": "CBAdvertisementDataTxPowerLevelKey (NSString*)",
      "contents": "CBAdvertisementDataTxPowerLevelKey"
    },
    {
      "trigger": "CBCentralManagerScanOptionAllowDuplicatesKey (NSString*)",
      "contents": "CBCentralManagerScanOptionAllowDuplicatesKey"
    },
    {
      "trigger": "CBCentralManagerStatePoweredOff (4)",
      "contents": "CBCentralManagerStatePoweredOff"
    },
    {
      "trigger": "CBCentralManagerStatePoweredOn (5)",
      "contents": "CBCentralManagerStatePoweredOn"
    },
    {
      "trigger": "CBCentralManagerStateResetting (1)",
      "contents": "CBCentralManagerStateResetting"
    },
    {
      "trigger": "CBCentralManagerStateUnauthorized (3)",
      "contents": "CBCentralManagerStateUnauthorized"
    },
    {
      "trigger": "CBCentralManagerStateUnknown (0)",
      "contents": "CBCentralManagerStateUnknown"
    },
    {
      "trigger": "CBCentralManagerStateUnsupported (2)",
      "contents": "CBCentralManagerStateUnsupported"
    },
    {
      "trigger": "CBCharacteristicPropertyAuthenticatedSignedWrites (64)",
      "contents": "CBCharacteristicPropertyAuthenticatedSignedWrites"
    },
    {
      "trigger": "CBCharacteristicPropertyBroadcast (1)",
      "contents": "CBCharacteristicPropertyBroadcast"
    },
    {
      "trigger": "CBCharacteristicPropertyExtendedProperties (128)",
      "contents": "CBCharacteristicPropertyExtendedProperties"
    },
    {
      "trigger": "CBCharacteristicPropertyIndicate (32)",
      "contents": "CBCharacteristicPropertyIndicate"
    },
    {
      "trigger": "CBCharacteristicPropertyNotify (16)",
      "contents": "CBCharacteristicPropertyNotify"
    },
    {
      "trigger": "CBCharacteristicPropertyRead (2)",
      "contents": "CBCharacteristicPropertyRead"
    },
    {
      "trigger": "CBCharacteristicPropertyWrite (8)",
      "contents": "CBCharacteristicPropertyWrite"
    },
    {
      "trigger": "CBCharacteristicPropertyWriteWithoutResponse (4)",
      "contents": "CBCharacteristicPropertyWriteWithoutResponse"
    },
    {
      "trigger": "CBCharacteristicWriteWithResponse (0)",
      "contents": "CBCharacteristicWriteWithResponse"
    },
    {
      "trigger": "CBCharacteristicWriteWithoutResponse (1)",
      "contents": "CBCharacteristicWriteWithoutResponse"
    },
    {
      "trigger": "CBConnectPeripheralOptionNotifyOnDisconnectionKey (NSString*)",
      "contents": "CBConnectPeripheralOptionNotifyOnDisconnectionKey"
    },
    {
      "trigger": "CBErrorDomain (NSString*)",
      "contents": "CBErrorDomain"
    },
    {
      "trigger": "CBErrorUnknown (0)",
      "contents": "CBErrorUnknown"
    },
    {
      "trigger": "CBUUID.UUIDWithCFUUID:",
      "contents": "CBUUID.UUIDWithCFUUID(${1:CFUUIDRef theUUID})"
    },
    {
      "trigger": "CBUUID.UUIDWithData:",
      "contents": "CBUUID.UUIDWithData(${1:NSData* theData})"
    },
    {
      "trigger": "CBUUID.UUIDWithString:",
      "contents": "CBUUID.UUIDWithString(${1:NSString* theString})"
    },
    {
      "trigger": "CBUUIDAppearanceString (NSString*)",
      "contents": "CBUUIDAppearanceString"
    },
    {
      "trigger": "CBUUIDCharacteristicAggregateFormatString (NSString*)",
      "contents": "CBUUIDCharacteristicAggregateFormatString"
    },
    {
      "trigger": "CBUUIDCharacteristicExtendedPropertiesString (NSString*)",
      "contents": "CBUUIDCharacteristicExtendedPropertiesString"
    },
    {
      "trigger": "CBUUIDCharacteristicFormatString (NSString*)",
      "contents": "CBUUIDCharacteristicFormatString"
    },
    {
      "trigger": "CBUUIDCharacteristicUserDescriptionString (NSString*)",
      "contents": "CBUUIDCharacteristicUserDescriptionString"
    },
    {
      "trigger": "CBUUIDClientCharacteristicConfigurationString (NSString*)",
      "contents": "CBUUIDClientCharacteristicConfigurationString"
    },
    {
      "trigger": "CBUUIDDeviceNameString (NSString*)",
      "contents": "CBUUIDDeviceNameString"
    },
    {
      "trigger": "CBUUIDGenericAccessProfileString (NSString*)",
      "contents": "CBUUIDGenericAccessProfileString"
    },
    {
      "trigger": "CBUUIDGenericAttributeProfileString (NSString*)",
      "contents": "CBUUIDGenericAttributeProfileString"
    },
    {
      "trigger": "CBUUIDPeripheralPreferredConnectionParametersString (NSString*)",
      "contents": "CBUUIDPeripheralPreferredConnectionParametersString"
    },
    {
      "trigger": "CBUUIDPeripheralPrivacyFlagString (NSString*)",
      "contents": "CBUUIDPeripheralPrivacyFlagString"
    },
    {
      "trigger": "CBUUIDReconnectionAddressString (NSString*)",
      "contents": "CBUUIDReconnectionAddressString"
    },
    {
      "trigger": "CBUUIDServerCharacteristicConfigurationString (NSString*)",
      "contents": "CBUUIDServerCharacteristicConfigurationString"
    },
    {
      "trigger": "CBUUIDServiceChangedString (NSString*)",
      "contents": "CBUUIDServiceChangedString"
    },
    {
      "trigger": "CFAbsoluteTimeAddGregorianUnits",
      "contents": "CFAbsoluteTimeAddGregorianUnits(${1:CFAbsoluteTime at}, ${2:CFTimeZoneRef tz}, ${3:CFGregorianUnits units})"
    },
    {
      "trigger": "CFAbsoluteTimeGetDayOfWeek",
      "contents": "CFAbsoluteTimeGetDayOfWeek(${1:CFAbsoluteTime at}, ${2:CFTimeZoneRef tz})"
    },
    {
      "trigger": "CFAbsoluteTimeGetDayOfYear",
      "contents": "CFAbsoluteTimeGetDayOfYear(${1:CFAbsoluteTime at}, ${2:CFTimeZoneRef tz})"
    },
    {
      "trigger": "CFAbsoluteTimeGetDifferenceAsGregorianUnits",
      "contents": "CFAbsoluteTimeGetDifferenceAsGregorianUnits(${1:CFAbsoluteTime at1}, ${2:CFAbsoluteTime at2}, ${3:CFTimeZoneRef tz}, ${4:CFOptionFlags unitFlags})"
    },
    {
      "trigger": "CFAbsoluteTimeGetGregorianDate",
      "contents": "CFAbsoluteTimeGetGregorianDate(${1:CFAbsoluteTime at}, ${2:CFTimeZoneRef tz})"
    },
    {
      "trigger": "CFAbsoluteTimeGetWeekOfYear",
      "contents": "CFAbsoluteTimeGetWeekOfYear(${1:CFAbsoluteTime at}, ${2:CFTimeZoneRef tz})"
    },
    {
      "trigger": "CFAllocatorAllocate",
      "contents": "CFAllocatorAllocate(${1:CFAllocatorRef allocator}, ${2:CFIndex size}, ${3:CFOptionFlags hint})"
    },
    {
      "trigger": "CFAllocatorCreate",
      "contents": "CFAllocatorCreate(${1:CFAllocatorRef allocator}, ${2:CFAllocatorContext* context})"
    },
    {
      "trigger": "CFAllocatorDeallocate",
      "contents": "CFAllocatorDeallocate(${1:CFAllocatorRef allocator}, ${2:void* ptr})"
    },
    {
      "trigger": "CFAllocatorGetContext",
      "contents": "CFAllocatorGetContext(${1:CFAllocatorRef allocator}, ${2:CFAllocatorContext* context})"
    },
    {
      "trigger": "CFAllocatorGetPreferredSizeForSize",
      "contents": "CFAllocatorGetPreferredSizeForSize(${1:CFAllocatorRef allocator}, ${2:CFIndex size}, ${3:CFOptionFlags hint})"
    },
    {
      "trigger": "CFAllocatorReallocate",
      "contents": "CFAllocatorReallocate(${1:CFAllocatorRef allocator}, ${2:void* ptr}, ${3:CFIndex newsize}, ${4:CFOptionFlags hint})"
    },
    {
      "trigger": "CFAllocatorSetDefault",
      "contents": "CFAllocatorSetDefault(${1:CFAllocatorRef allocator})"
    },
    {
      "trigger": "CFArrayAppendArray",
      "contents": "CFArrayAppendArray(${1:CFMutableArrayRef theArray}, ${2:CFArrayRef otherArray}, ${3:CFRange otherRange})"
    },
    {
      "trigger": "CFArrayAppendValue",
      "contents": "CFArrayAppendValue(${1:CFMutableArrayRef theArray}, ${2:void* value})"
    },
    {
      "trigger": "CFArrayApplyFunction",
      "contents": "CFArrayApplyFunction(${1:CFArrayRef theArray}, ${2:CFRange range}, ${3:CFArrayApplierFunction applier}, ${4:void* context})"
    },
    {
      "trigger": "CFArrayBSearchValues",
      "contents": "CFArrayBSearchValues(${1:CFArrayRef theArray}, ${2:CFRange range}, ${3:void* value}, ${4:CFComparatorFunction comparator}, ${5:void* context})"
    },
    {
      "trigger": "CFArrayContainsValue",
      "contents": "CFArrayContainsValue(${1:CFArrayRef theArray}, ${2:CFRange range}, ${3:void* value})"
    },
    {
      "trigger": "CFArrayCreate",
      "contents": "CFArrayCreate(${1:CFAllocatorRef allocator}, ${2:void** values}, ${3:CFIndex numValues}, ${4:CFArrayCallBacks* callBacks})"
    },
    {
      "trigger": "CFArrayCreateCopy",
      "contents": "CFArrayCreateCopy(${1:CFAllocatorRef allocator}, ${2:CFArrayRef theArray})"
    },
    {
      "trigger": "CFArrayCreateMutable",
      "contents": "CFArrayCreateMutable(${1:CFAllocatorRef allocator}, ${2:CFIndex capacity}, ${3:CFArrayCallBacks* callBacks})"
    },
    {
      "trigger": "CFArrayCreateMutableCopy",
      "contents": "CFArrayCreateMutableCopy(${1:CFAllocatorRef allocator}, ${2:CFIndex capacity}, ${3:CFArrayRef theArray})"
    },
    {
      "trigger": "CFArrayExchangeValuesAtIndices",
      "contents": "CFArrayExchangeValuesAtIndices(${1:CFMutableArrayRef theArray}, ${2:CFIndex idx1}, ${3:CFIndex idx2})"
    },
    {
      "trigger": "CFArrayGetCount",
      "contents": "CFArrayGetCount(${1:CFArrayRef theArray})"
    },
    {
      "trigger": "CFArrayGetCountOfValue",
      "contents": "CFArrayGetCountOfValue(${1:CFArrayRef theArray}, ${2:CFRange range}, ${3:void* value})"
    },
    {
      "trigger": "CFArrayGetFirstIndexOfValue",
      "contents": "CFArrayGetFirstIndexOfValue(${1:CFArrayRef theArray}, ${2:CFRange range}, ${3:void* value})"
    },
    {
      "trigger": "CFArrayGetLastIndexOfValue",
      "contents": "CFArrayGetLastIndexOfValue(${1:CFArrayRef theArray}, ${2:CFRange range}, ${3:void* value})"
    },
    {
      "trigger": "CFArrayGetValueAtIndex",
      "contents": "CFArrayGetValueAtIndex(${1:CFArrayRef theArray}, ${2:CFIndex idx})"
    },
    {
      "trigger": "CFArrayGetValues",
      "contents": "CFArrayGetValues(${1:CFArrayRef theArray}, ${2:CFRange range}, ${3:void** values})"
    },
    {
      "trigger": "CFArrayInsertValueAtIndex",
      "contents": "CFArrayInsertValueAtIndex(${1:CFMutableArrayRef theArray}, ${2:CFIndex idx}, ${3:void* value})"
    },
    {
      "trigger": "CFArrayRemoveAllValues",
      "contents": "CFArrayRemoveAllValues(${1:CFMutableArrayRef theArray})"
    },
    {
      "trigger": "CFArrayRemoveValueAtIndex",
      "contents": "CFArrayRemoveValueAtIndex(${1:CFMutableArrayRef theArray}, ${2:CFIndex idx})"
    },
    {
      "trigger": "CFArrayReplaceValues",
      "contents": "CFArrayReplaceValues(${1:CFMutableArrayRef theArray}, ${2:CFRange range}, ${3:void** newValues}, ${4:CFIndex newCount})"
    },
    {
      "trigger": "CFArraySetValueAtIndex",
      "contents": "CFArraySetValueAtIndex(${1:CFMutableArrayRef theArray}, ${2:CFIndex idx}, ${3:void* value})"
    },
    {
      "trigger": "CFArraySortValues",
      "contents": "CFArraySortValues(${1:CFMutableArrayRef theArray}, ${2:CFRange range}, ${3:CFComparatorFunction comparator}, ${4:void* context})"
    },
    {
      "trigger": "CFAttributedStringBeginEditing",
      "contents": "CFAttributedStringBeginEditing(${1:CFMutableAttributedStringRef aStr})"
    },
    {
      "trigger": "CFAttributedStringCreate",
      "contents": "CFAttributedStringCreate(${1:CFAllocatorRef alloc}, ${2:CFStringRef str}, ${3:CFDictionaryRef attributes})"
    },
    {
      "trigger": "CFAttributedStringCreateCopy",
      "contents": "CFAttributedStringCreateCopy(${1:CFAllocatorRef alloc}, ${2:CFAttributedStringRef aStr})"
    },
    {
      "trigger": "CFAttributedStringCreateMutable",
      "contents": "CFAttributedStringCreateMutable(${1:CFAllocatorRef alloc}, ${2:CFIndex maxLength})"
    },
    {
      "trigger": "CFAttributedStringCreateMutableCopy",
      "contents": "CFAttributedStringCreateMutableCopy(${1:CFAllocatorRef alloc}, ${2:CFIndex maxLength}, ${3:CFAttributedStringRef aStr})"
    },
    {
      "trigger": "CFAttributedStringCreateWithSubstring",
      "contents": "CFAttributedStringCreateWithSubstring(${1:CFAllocatorRef alloc}, ${2:CFAttributedStringRef aStr}, ${3:CFRange range})"
    },
    {
      "trigger": "CFAttributedStringEndEditing",
      "contents": "CFAttributedStringEndEditing(${1:CFMutableAttributedStringRef aStr})"
    },
    {
      "trigger": "CFAttributedStringGetAttribute",
      "contents": "CFAttributedStringGetAttribute(${1:CFAttributedStringRef aStr}, ${2:CFIndex loc}, ${3:CFStringRef attrName}, ${4:CFRange* effectiveRange})"
    },
    {
      "trigger": "CFAttributedStringGetAttributeAndLongestEffectiveRange",
      "contents": "CFAttributedStringGetAttributeAndLongestEffectiveRange(${1:CFAttributedStringRef aStr}, ${2:CFIndex loc}, ${3:CFStringRef attrName}, ${4:CFRange inRange}, ${5:CFRange* longestEffectiveRange})"
    },
    {
      "trigger": "CFAttributedStringGetAttributes",
      "contents": "CFAttributedStringGetAttributes(${1:CFAttributedStringRef aStr}, ${2:CFIndex loc}, ${3:CFRange* effectiveRange})"
    },
    {
      "trigger": "CFAttributedStringGetAttributesAndLongestEffectiveRange",
      "contents": "CFAttributedStringGetAttributesAndLongestEffectiveRange(${1:CFAttributedStringRef aStr}, ${2:CFIndex loc}, ${3:CFRange inRange}, ${4:CFRange* longestEffectiveRange})"
    },
    {
      "trigger": "CFAttributedStringGetLength",
      "contents": "CFAttributedStringGetLength(${1:CFAttributedStringRef aStr})"
    },
    {
      "trigger": "CFAttributedStringGetMutableString",
      "contents": "CFAttributedStringGetMutableString(${1:CFMutableAttributedStringRef aStr})"
    },
    {
      "trigger": "CFAttributedStringGetString",
      "contents": "CFAttributedStringGetString(${1:CFAttributedStringRef aStr})"
    },
    {
      "trigger": "CFAttributedStringRemoveAttribute",
      "contents": "CFAttributedStringRemoveAttribute(${1:CFMutableAttributedStringRef aStr}, ${2:CFRange range}, ${3:CFStringRef attrName})"
    },
    {
      "trigger": "CFAttributedStringReplaceAttributedString",
      "contents": "CFAttributedStringReplaceAttributedString(${1:CFMutableAttributedStringRef aStr}, ${2:CFRange range}, ${3:CFAttributedStringRef replacement})"
    },
    {
      "trigger": "CFAttributedStringReplaceString",
      "contents": "CFAttributedStringReplaceString(${1:CFMutableAttributedStringRef aStr}, ${2:CFRange range}, ${3:CFStringRef replacement})"
    },
    {
      "trigger": "CFAttributedStringSetAttribute",
      "contents": "CFAttributedStringSetAttribute(${1:CFMutableAttributedStringRef aStr}, ${2:CFRange range}, ${3:CFStringRef attrName}, ${4:CFTypeRef value})"
    },
    {
      "trigger": "CFAttributedStringSetAttributes",
      "contents": "CFAttributedStringSetAttributes(${1:CFMutableAttributedStringRef aStr}, ${2:CFRange range}, ${3:CFDictionaryRef replacement}, ${4:Boolean clearOtherAttributes})"
    },
    {
      "trigger": "CFBagAddValue",
      "contents": "CFBagAddValue(${1:CFMutableBagRef theBag}, ${2:void* value})"
    },
    {
      "trigger": "CFBagApplyFunction",
      "contents": "CFBagApplyFunction(${1:CFBagRef theBag}, ${2:CFBagApplierFunction applier}, ${3:void* context})"
    },
    {
      "trigger": "CFBagContainsValue",
      "contents": "CFBagContainsValue(${1:CFBagRef theBag}, ${2:void* value})"
    },
    {
      "trigger": "CFBagCreate",
      "contents": "CFBagCreate(${1:CFAllocatorRef allocator}, ${2:void** values}, ${3:CFIndex numValues}, ${4:CFBagCallBacks* callBacks})"
    },
    {
      "trigger": "CFBagCreateCopy",
      "contents": "CFBagCreateCopy(${1:CFAllocatorRef allocator}, ${2:CFBagRef theBag})"
    },
    {
      "trigger": "CFBagCreateMutable",
      "contents": "CFBagCreateMutable(${1:CFAllocatorRef allocator}, ${2:CFIndex capacity}, ${3:CFBagCallBacks* callBacks})"
    },
    {
      "trigger": "CFBagCreateMutableCopy",
      "contents": "CFBagCreateMutableCopy(${1:CFAllocatorRef allocator}, ${2:CFIndex capacity}, ${3:CFBagRef theBag})"
    },
    {
      "trigger": "CFBagGetCount",
      "contents": "CFBagGetCount(${1:CFBagRef theBag})"
    },
    {
      "trigger": "CFBagGetCountOfValue",
      "contents": "CFBagGetCountOfValue(${1:CFBagRef theBag}, ${2:void* value})"
    },
    {
      "trigger": "CFBagGetValue",
      "contents": "CFBagGetValue(${1:CFBagRef theBag}, ${2:void* value})"
    },
    {
      "trigger": "CFBagGetValueIfPresent",
      "contents": "CFBagGetValueIfPresent(${1:CFBagRef theBag}, ${2:void* candidate}, ${3:void** value})"
    },
    {
      "trigger": "CFBagGetValues",
      "contents": "CFBagGetValues(${1:CFBagRef theBag}, ${2:void** values})"
    },
    {
      "trigger": "CFBagRemoveAllValues",
      "contents": "CFBagRemoveAllValues(${1:CFMutableBagRef theBag})"
    },
    {
      "trigger": "CFBagRemoveValue",
      "contents": "CFBagRemoveValue(${1:CFMutableBagRef theBag}, ${2:void* value})"
    },
    {
      "trigger": "CFBagReplaceValue",
      "contents": "CFBagReplaceValue(${1:CFMutableBagRef theBag}, ${2:void* value})"
    },
    {
      "trigger": "CFBagSetValue",
      "contents": "CFBagSetValue(${1:CFMutableBagRef theBag}, ${2:void* value})"
    },
    {
      "trigger": "CFBinaryHeapAddValue",
      "contents": "CFBinaryHeapAddValue(${1:CFBinaryHeapRef heap}, ${2:void* value})"
    },
    {
      "trigger": "CFBinaryHeapApplyFunction",
      "contents": "CFBinaryHeapApplyFunction(${1:CFBinaryHeapRef heap}, ${2:CFBinaryHeapApplierFunction applier}, ${3:void* context})"
    },
    {
      "trigger": "CFBinaryHeapContainsValue",
      "contents": "CFBinaryHeapContainsValue(${1:CFBinaryHeapRef heap}, ${2:void* value})"
    },
    {
      "trigger": "CFBinaryHeapCreate",
      "contents": "CFBinaryHeapCreate(${1:CFAllocatorRef allocator}, ${2:CFIndex capacity}, ${3:CFBinaryHeapCallBacks* callBacks}, ${4:CFBinaryHeapCompareContext* compareContext})"
    },
    {
      "trigger": "CFBinaryHeapCreateCopy",
      "contents": "CFBinaryHeapCreateCopy(${1:CFAllocatorRef allocator}, ${2:CFIndex capacity}, ${3:CFBinaryHeapRef heap})"
    },
    {
      "trigger": "CFBinaryHeapGetCount",
      "contents": "CFBinaryHeapGetCount(${1:CFBinaryHeapRef heap})"
    },
    {
      "trigger": "CFBinaryHeapGetCountOfValue",
      "contents": "CFBinaryHeapGetCountOfValue(${1:CFBinaryHeapRef heap}, ${2:void* value})"
    },
    {
      "trigger": "CFBinaryHeapGetMinimum",
      "contents": "CFBinaryHeapGetMinimum(${1:CFBinaryHeapRef heap})"
    },
    {
      "trigger": "CFBinaryHeapGetMinimumIfPresent",
      "contents": "CFBinaryHeapGetMinimumIfPresent(${1:CFBinaryHeapRef heap}, ${2:void** value})"
    },
    {
      "trigger": "CFBinaryHeapGetValues",
      "contents": "CFBinaryHeapGetValues(${1:CFBinaryHeapRef heap}, ${2:void** values})"
    },
    {
      "trigger": "CFBinaryHeapRemoveAllValues",
      "contents": "CFBinaryHeapRemoveAllValues(${1:CFBinaryHeapRef heap})"
    },
    {
      "trigger": "CFBinaryHeapRemoveMinimumValue",
      "contents": "CFBinaryHeapRemoveMinimumValue(${1:CFBinaryHeapRef heap})"
    },
    {
      "trigger": "CFBitVectorContainsBit",
      "contents": "CFBitVectorContainsBit(${1:CFBitVectorRef bv}, ${2:CFRange range}, ${3:CFBit value})"
    },
    {
      "trigger": "CFBitVectorCreate",
      "contents": "CFBitVectorCreate(${1:CFAllocatorRef allocator}, ${2:UInt8* bytes}, ${3:CFIndex numBits})"
    },
    {
      "trigger": "CFBitVectorCreateCopy",
      "contents": "CFBitVectorCreateCopy(${1:CFAllocatorRef allocator}, ${2:CFBitVectorRef bv})"
    },
    {
      "trigger": "CFBitVectorCreateMutable",
      "contents": "CFBitVectorCreateMutable(${1:CFAllocatorRef allocator}, ${2:CFIndex capacity})"
    },
    {
      "trigger": "CFBitVectorCreateMutableCopy",
      "contents": "CFBitVectorCreateMutableCopy(${1:CFAllocatorRef allocator}, ${2:CFIndex capacity}, ${3:CFBitVectorRef bv})"
    },
    {
      "trigger": "CFBitVectorFlipBitAtIndex",
      "contents": "CFBitVectorFlipBitAtIndex(${1:CFMutableBitVectorRef bv}, ${2:CFIndex idx})"
    },
    {
      "trigger": "CFBitVectorFlipBits",
      "contents": "CFBitVectorFlipBits(${1:CFMutableBitVectorRef bv}, ${2:CFRange range})"
    },
    {
      "trigger": "CFBitVectorGetBitAtIndex",
      "contents": "CFBitVectorGetBitAtIndex(${1:CFBitVectorRef bv}, ${2:CFIndex idx})"
    },
    {
      "trigger": "CFBitVectorGetBits",
      "contents": "CFBitVectorGetBits(${1:CFBitVectorRef bv}, ${2:CFRange range}, ${3:UInt8* bytes})"
    },
    {
      "trigger": "CFBitVectorGetCount",
      "contents": "CFBitVectorGetCount(${1:CFBitVectorRef bv})"
    },
    {
      "trigger": "CFBitVectorGetCountOfBit",
      "contents": "CFBitVectorGetCountOfBit(${1:CFBitVectorRef bv}, ${2:CFRange range}, ${3:CFBit value})"
    },
    {
      "trigger": "CFBitVectorGetFirstIndexOfBit",
      "contents": "CFBitVectorGetFirstIndexOfBit(${1:CFBitVectorRef bv}, ${2:CFRange range}, ${3:CFBit value})"
    },
    {
      "trigger": "CFBitVectorGetLastIndexOfBit",
      "contents": "CFBitVectorGetLastIndexOfBit(${1:CFBitVectorRef bv}, ${2:CFRange range}, ${3:CFBit value})"
    },
    {
      "trigger": "CFBitVectorSetAllBits",
      "contents": "CFBitVectorSetAllBits(${1:CFMutableBitVectorRef bv}, ${2:CFBit value})"
    },
    {
      "trigger": "CFBitVectorSetBitAtIndex",
      "contents": "CFBitVectorSetBitAtIndex(${1:CFMutableBitVectorRef bv}, ${2:CFIndex idx}, ${3:CFBit value})"
    },
    {
      "trigger": "CFBitVectorSetBits",
      "contents": "CFBitVectorSetBits(${1:CFMutableBitVectorRef bv}, ${2:CFRange range}, ${3:CFBit value})"
    },
    {
      "trigger": "CFBitVectorSetCount",
      "contents": "CFBitVectorSetCount(${1:CFMutableBitVectorRef bv}, ${2:CFIndex count})"
    },
    {
      "trigger": "CFBooleanGetValue",
      "contents": "CFBooleanGetValue(${1:CFBooleanRef boolean})"
    },
    {
      "trigger": "CFBridgingRelease",
      "contents": "CFBridgingRelease(${1:CFTypeRef X})"
    },
    {
      "trigger": "CFBridgingRetain",
      "contents": "CFBridgingRetain(${1:id X})"
    },
    {
      "trigger": "CFBundleCloseBundleResourceMap",
      "contents": "CFBundleCloseBundleResourceMap(${1:CFBundleRef bundle}, ${2:CFBundleRefNum refNum})"
    },
    {
      "trigger": "CFBundleCopyAuxiliaryExecutableURL",
      "contents": "CFBundleCopyAuxiliaryExecutableURL(${1:CFBundleRef bundle}, ${2:CFStringRef executableName})"
    },
    {
      "trigger": "CFBundleCopyBuiltInPlugInsURL",
      "contents": "CFBundleCopyBuiltInPlugInsURL(${1:CFBundleRef bundle})"
    },
    {
      "trigger": "CFBundleCopyBundleLocalizations",
      "contents": "CFBundleCopyBundleLocalizations(${1:CFBundleRef bundle})"
    },
    {
      "trigger": "CFBundleCopyBundleURL",
      "contents": "CFBundleCopyBundleURL(${1:CFBundleRef bundle})"
    },
    {
      "trigger": "CFBundleCopyExecutableArchitectures",
      "contents": "CFBundleCopyExecutableArchitectures(${1:CFBundleRef bundle})"
    },
    {
      "trigger": "CFBundleCopyExecutableArchitecturesForURL",
      "contents": "CFBundleCopyExecutableArchitecturesForURL(${1:CFURLRef url})"
    },
    {
      "trigger": "CFBundleCopyExecutableURL",
      "contents": "CFBundleCopyExecutableURL(${1:CFBundleRef bundle})"
    },
    {
      "trigger": "CFBundleCopyInfoDictionaryForURL",
      "contents": "CFBundleCopyInfoDictionaryForURL(${1:CFURLRef url})"
    },
    {
      "trigger": "CFBundleCopyInfoDictionaryInDirectory",
      "contents": "CFBundleCopyInfoDictionaryInDirectory(${1:CFURLRef bundleURL})"
    },
    {
      "trigger": "CFBundleCopyLocalizationsForPreferences",
      "contents": "CFBundleCopyLocalizationsForPreferences(${1:CFArrayRef locArray}, ${2:CFArrayRef prefArray})"
    },
    {
      "trigger": "CFBundleCopyLocalizationsForURL",
      "contents": "CFBundleCopyLocalizationsForURL(${1:CFURLRef url})"
    },
    {
      "trigger": "CFBundleCopyLocalizedString",
      "contents": "CFBundleCopyLocalizedString(${1:CFBundleRef bundle}, ${2:CFStringRef key}, ${3:CFStringRef value}, ${4:CFStringRef tableName})"
    },
    {
      "trigger": "CFBundleCopyPreferredLocalizationsFromArray",
      "contents": "CFBundleCopyPreferredLocalizationsFromArray(${1:CFArrayRef locArray})"
    },
    {
      "trigger": "CFBundleCopyPrivateFrameworksURL",
      "contents": "CFBundleCopyPrivateFrameworksURL(${1:CFBundleRef bundle})"
    },
    {
      "trigger": "CFBundleCopyResourceURL",
      "contents": "CFBundleCopyResourceURL(${1:CFBundleRef bundle}, ${2:CFStringRef resourceName}, ${3:CFStringRef resourceType}, ${4:CFStringRef subDirName})"
    },
    {
      "trigger": "CFBundleCopyResourceURLForLocalization",
      "contents": "CFBundleCopyResourceURLForLocalization(${1:CFBundleRef bundle}, ${2:CFStringRef resourceName}, ${3:CFStringRef resourceType}, ${4:CFStringRef subDirName}, ${5:CFStringRef localizationName})"
    },
    {
      "trigger": "CFBundleCopyResourceURLInDirectory",
      "contents": "CFBundleCopyResourceURLInDirectory(${1:CFURLRef bundleURL}, ${2:CFStringRef resourceName}, ${3:CFStringRef resourceType}, ${4:CFStringRef subDirName})"
    },
    {
      "trigger": "CFBundleCopyResourceURLsOfType",
      "contents": "CFBundleCopyResourceURLsOfType(${1:CFBundleRef bundle}, ${2:CFStringRef resourceType}, ${3:CFStringRef subDirName})"
    },
    {
      "trigger": "CFBundleCopyResourceURLsOfTypeForLocalization",
      "contents": "CFBundleCopyResourceURLsOfTypeForLocalization(${1:CFBundleRef bundle}, ${2:CFStringRef resourceType}, ${3:CFStringRef subDirName}, ${4:CFStringRef localizationName})"
    },
    {
      "trigger": "CFBundleCopyResourceURLsOfTypeInDirectory",
      "contents": "CFBundleCopyResourceURLsOfTypeInDirectory(${1:CFURLRef bundleURL}, ${2:CFStringRef resourceType}, ${3:CFStringRef subDirName})"
    },
    {
      "trigger": "CFBundleCopyResourcesDirectoryURL",
      "contents": "CFBundleCopyResourcesDirectoryURL(${1:CFBundleRef bundle})"
    },
    {
      "trigger": "CFBundleCopySharedFrameworksURL",
      "contents": "CFBundleCopySharedFrameworksURL(${1:CFBundleRef bundle})"
    },
    {
      "trigger": "CFBundleCopySharedSupportURL",
      "contents": "CFBundleCopySharedSupportURL(${1:CFBundleRef bundle})"
    },
    {
      "trigger": "CFBundleCopySupportFilesDirectoryURL",
      "contents": "CFBundleCopySupportFilesDirectoryURL(${1:CFBundleRef bundle})"
    },
    {
      "trigger": "CFBundleCreate",
      "contents": "CFBundleCreate(${1:CFAllocatorRef allocator}, ${2:CFURLRef bundleURL})"
    },
    {
      "trigger": "CFBundleCreateBundlesFromDirectory",
      "contents": "CFBundleCreateBundlesFromDirectory(${1:CFAllocatorRef allocator}, ${2:CFURLRef directoryURL}, ${3:CFStringRef bundleType})"
    },
    {
      "trigger": "CFBundleGetBundleWithIdentifier",
      "contents": "CFBundleGetBundleWithIdentifier(${1:CFStringRef bundleID})"
    },
    {
      "trigger": "CFBundleGetDataPointerForName",
      "contents": "CFBundleGetDataPointerForName(${1:CFBundleRef bundle}, ${2:CFStringRef symbolName})"
    },
    {
      "trigger": "CFBundleGetDataPointersForNames",
      "contents": "CFBundleGetDataPointersForNames(${1:CFBundleRef bundle}, ${2:CFArrayRef symbolNames}, ${3:void** stbl})"
    },
    {
      "trigger": "CFBundleGetDevelopmentRegion",
      "contents": "CFBundleGetDevelopmentRegion(${1:CFBundleRef bundle})"
    },
    {
      "trigger": "CFBundleGetFunctionPointerForName",
      "contents": "CFBundleGetFunctionPointerForName(${1:CFBundleRef bundle}, ${2:CFStringRef functionName})"
    },
    {
      "trigger": "CFBundleGetFunctionPointersForNames",
      "contents": "CFBundleGetFunctionPointersForNames(${1:CFBundleRef bundle}, ${2:CFArrayRef functionNames}, ${3:void** ftbl})"
    },
    {
      "trigger": "CFBundleGetIdentifier",
      "contents": "CFBundleGetIdentifier(${1:CFBundleRef bundle})"
    },
    {
      "trigger": "CFBundleGetInfoDictionary",
      "contents": "CFBundleGetInfoDictionary(${1:CFBundleRef bundle})"
    },
    {
      "trigger": "CFBundleGetLocalInfoDictionary",
      "contents": "CFBundleGetLocalInfoDictionary(${1:CFBundleRef bundle})"
    },
    {
      "trigger": "CFBundleGetPackageInfo",
      "contents": "CFBundleGetPackageInfo(${1:CFBundleRef bundle}, ${2:UInt32* packageType}, ${3:UInt32* packageCreator})"
    },
    {
      "trigger": "CFBundleGetPackageInfoInDirectory",
      "contents": "CFBundleGetPackageInfoInDirectory(${1:CFURLRef url}, ${2:UInt32* packageType}, ${3:UInt32* packageCreator})"
    },
    {
      "trigger": "CFBundleGetPlugIn",
      "contents": "CFBundleGetPlugIn(${1:CFBundleRef bundle})"
    },
    {
      "trigger": "CFBundleGetValueForInfoDictionaryKey",
      "contents": "CFBundleGetValueForInfoDictionaryKey(${1:CFBundleRef bundle}, ${2:CFStringRef key})"
    },
    {
      "trigger": "CFBundleGetVersionNumber",
      "contents": "CFBundleGetVersionNumber(${1:CFBundleRef bundle})"
    },
    {
      "trigger": "CFBundleIsExecutableLoaded",
      "contents": "CFBundleIsExecutableLoaded(${1:CFBundleRef bundle})"
    },
    {
      "trigger": "CFBundleLoadExecutable",
      "contents": "CFBundleLoadExecutable(${1:CFBundleRef bundle})"
    },
    {
      "trigger": "CFBundleLoadExecutableAndReturnError",
      "contents": "CFBundleLoadExecutableAndReturnError(${1:CFBundleRef bundle}, ${2:CFErrorRef* error})"
    },
    {
      "trigger": "CFBundleOpenBundleResourceFiles",
      "contents": "CFBundleOpenBundleResourceFiles(${1:CFBundleRef bundle}, ${2:CFBundleRefNum* refNum}, ${3:CFBundleRefNum* localizedRefNum})"
    },
    {
      "trigger": "CFBundleOpenBundleResourceMap",
      "contents": "CFBundleOpenBundleResourceMap(${1:CFBundleRef bundle})"
    },
    {
      "trigger": "CFBundlePreflightExecutable",
      "contents": "CFBundlePreflightExecutable(${1:CFBundleRef bundle}, ${2:CFErrorRef* error})"
    },
    {
      "trigger": "CFBundleUnloadExecutable",
      "contents": "CFBundleUnloadExecutable(${1:CFBundleRef bundle})"
    },
    {
      "trigger": "CFByteOrderBigEndian (2)",
      "contents": "CFByteOrderBigEndian"
    },
    {
      "trigger": "CFByteOrderLittleEndian (1)",
      "contents": "CFByteOrderLittleEndian"
    },
    {
      "trigger": "CFByteOrderUnknown (0)",
      "contents": "CFByteOrderUnknown"
    },
    {
      "trigger": "CFCalendarAddComponents",
      "contents": "CFCalendarAddComponents(${1:CFCalendarRef calendar}, ${2:CFAbsoluteTime* at}, ${3:CFOptionFlags options}, ${4:char* componentDesc})"
    },
    {
      "trigger": "CFCalendarComposeAbsoluteTime",
      "contents": "CFCalendarComposeAbsoluteTime(${1:CFCalendarRef calendar}, ${2:CFAbsoluteTime* at}, ${3:char* componentDesc})"
    },
    {
      "trigger": "CFCalendarCopyLocale",
      "contents": "CFCalendarCopyLocale(${1:CFCalendarRef calendar})"
    },
    {
      "trigger": "CFCalendarCopyTimeZone",
      "contents": "CFCalendarCopyTimeZone(${1:CFCalendarRef calendar})"
    },
    {
      "trigger": "CFCalendarCreateWithIdentifier",
      "contents": "CFCalendarCreateWithIdentifier(${1:CFAllocatorRef allocator}, ${2:CFStringRef identifier})"
    },
    {
      "trigger": "CFCalendarDecomposeAbsoluteTime",
      "contents": "CFCalendarDecomposeAbsoluteTime(${1:CFCalendarRef calendar}, ${2:CFAbsoluteTime at}, ${3:char* componentDesc})"
    },
    {
      "trigger": "CFCalendarGetComponentDifference",
      "contents": "CFCalendarGetComponentDifference(${1:CFCalendarRef calendar}, ${2:CFAbsoluteTime startingAT}, ${3:CFAbsoluteTime resultAT}, ${4:CFOptionFlags options}, ${5:char* componentDesc})"
    },
    {
      "trigger": "CFCalendarGetFirstWeekday",
      "contents": "CFCalendarGetFirstWeekday(${1:CFCalendarRef calendar})"
    },
    {
      "trigger": "CFCalendarGetIdentifier",
      "contents": "CFCalendarGetIdentifier(${1:CFCalendarRef calendar})"
    },
    {
      "trigger": "CFCalendarGetMaximumRangeOfUnit",
      "contents": "CFCalendarGetMaximumRangeOfUnit(${1:CFCalendarRef calendar}, ${2:CFCalendarUnit unit})"
    },
    {
      "trigger": "CFCalendarGetMinimumDaysInFirstWeek",
      "contents": "CFCalendarGetMinimumDaysInFirstWeek(${1:CFCalendarRef calendar})"
    },
    {
      "trigger": "CFCalendarGetMinimumRangeOfUnit",
      "contents": "CFCalendarGetMinimumRangeOfUnit(${1:CFCalendarRef calendar}, ${2:CFCalendarUnit unit})"
    },
    {
      "trigger": "CFCalendarGetOrdinalityOfUnit",
      "contents": "CFCalendarGetOrdinalityOfUnit(${1:CFCalendarRef calendar}, ${2:CFCalendarUnit smallerUnit}, ${3:CFCalendarUnit biggerUnit}, ${4:CFAbsoluteTime at})"
    },
    {
      "trigger": "CFCalendarGetRangeOfUnit",
      "contents": "CFCalendarGetRangeOfUnit(${1:CFCalendarRef calendar}, ${2:CFCalendarUnit smallerUnit}, ${3:CFCalendarUnit biggerUnit}, ${4:CFAbsoluteTime at})"
    },
    {
      "trigger": "CFCalendarGetTimeRangeOfUnit",
      "contents": "CFCalendarGetTimeRangeOfUnit(${1:CFCalendarRef calendar}, ${2:CFCalendarUnit unit}, ${3:CFAbsoluteTime at}, ${4:CFAbsoluteTime* startp}, ${5:CFTimeInterval* tip})"
    },
    {
      "trigger": "CFCalendarSetFirstWeekday",
      "contents": "CFCalendarSetFirstWeekday(${1:CFCalendarRef calendar}, ${2:CFIndex wkdy})"
    },
    {
      "trigger": "CFCalendarSetLocale",
      "contents": "CFCalendarSetLocale(${1:CFCalendarRef calendar}, ${2:CFLocaleRef locale})"
    },
    {
      "trigger": "CFCalendarSetMinimumDaysInFirstWeek",
      "contents": "CFCalendarSetMinimumDaysInFirstWeek(${1:CFCalendarRef calendar}, ${2:CFIndex mwd})"
    },
    {
      "trigger": "CFCalendarSetTimeZone",
      "contents": "CFCalendarSetTimeZone(${1:CFCalendarRef calendar}, ${2:CFTimeZoneRef tz})"
    },
    {
      "trigger": "CFCharacterSetAddCharactersInRange",
      "contents": "CFCharacterSetAddCharactersInRange(${1:CFMutableCharacterSetRef theSet}, ${2:CFRange theRange})"
    },
    {
      "trigger": "CFCharacterSetAddCharactersInString",
      "contents": "CFCharacterSetAddCharactersInString(${1:CFMutableCharacterSetRef theSet}, ${2:CFStringRef theString})"
    },
    {
      "trigger": "CFCharacterSetCreateBitmapRepresentation",
      "contents": "CFCharacterSetCreateBitmapRepresentation(${1:CFAllocatorRef alloc}, ${2:CFCharacterSetRef theSet})"
    },
    {
      "trigger": "CFCharacterSetCreateCopy",
      "contents": "CFCharacterSetCreateCopy(${1:CFAllocatorRef alloc}, ${2:CFCharacterSetRef theSet})"
    },
    {
      "trigger": "CFCharacterSetCreateInvertedSet",
      "contents": "CFCharacterSetCreateInvertedSet(${1:CFAllocatorRef alloc}, ${2:CFCharacterSetRef theSet})"
    },
    {
      "trigger": "CFCharacterSetCreateMutable",
      "contents": "CFCharacterSetCreateMutable(${1:CFAllocatorRef alloc})"
    },
    {
      "trigger": "CFCharacterSetCreateMutableCopy",
      "contents": "CFCharacterSetCreateMutableCopy(${1:CFAllocatorRef alloc}, ${2:CFCharacterSetRef theSet})"
    },
    {
      "trigger": "CFCharacterSetCreateWithBitmapRepresentation",
      "contents": "CFCharacterSetCreateWithBitmapRepresentation(${1:CFAllocatorRef alloc}, ${2:CFDataRef theData})"
    },
    {
      "trigger": "CFCharacterSetCreateWithCharactersInRange",
      "contents": "CFCharacterSetCreateWithCharactersInRange(${1:CFAllocatorRef alloc}, ${2:CFRange theRange})"
    },
    {
      "trigger": "CFCharacterSetCreateWithCharactersInString",
      "contents": "CFCharacterSetCreateWithCharactersInString(${1:CFAllocatorRef alloc}, ${2:CFStringRef theString})"
    },
    {
      "trigger": "CFCharacterSetGetPredefined",
      "contents": "CFCharacterSetGetPredefined(${1:CFCharacterSetPredefinedSet theSetIdentifier})"
    },
    {
      "trigger": "CFCharacterSetHasMemberInPlane",
      "contents": "CFCharacterSetHasMemberInPlane(${1:CFCharacterSetRef theSet}, ${2:CFIndex thePlane})"
    },
    {
      "trigger": "CFCharacterSetIntersect",
      "contents": "CFCharacterSetIntersect(${1:CFMutableCharacterSetRef theSet}, ${2:CFCharacterSetRef theOtherSet})"
    },
    {
      "trigger": "CFCharacterSetInvert",
      "contents": "CFCharacterSetInvert(${1:CFMutableCharacterSetRef theSet})"
    },
    {
      "trigger": "CFCharacterSetIsCharacterMember",
      "contents": "CFCharacterSetIsCharacterMember(${1:CFCharacterSetRef theSet}, ${2:UniChar theChar})"
    },
    {
      "trigger": "CFCharacterSetIsLongCharacterMember",
      "contents": "CFCharacterSetIsLongCharacterMember(${1:CFCharacterSetRef theSet}, ${2:UTF32Char theChar})"
    },
    {
      "trigger": "CFCharacterSetIsSupersetOfSet",
      "contents": "CFCharacterSetIsSupersetOfSet(${1:CFCharacterSetRef theSet}, ${2:CFCharacterSetRef theOtherset})"
    },
    {
      "trigger": "CFCharacterSetRemoveCharactersInRange",
      "contents": "CFCharacterSetRemoveCharactersInRange(${1:CFMutableCharacterSetRef theSet}, ${2:CFRange theRange})"
    },
    {
      "trigger": "CFCharacterSetRemoveCharactersInString",
      "contents": "CFCharacterSetRemoveCharactersInString(${1:CFMutableCharacterSetRef theSet}, ${2:CFStringRef theString})"
    },
    {
      "trigger": "CFCharacterSetUnion",
      "contents": "CFCharacterSetUnion(${1:CFMutableCharacterSetRef theSet}, ${2:CFCharacterSetRef theOtherSet})"
    },
    {
      "trigger": "CFConvertDoubleHostToSwapped",
      "contents": "CFConvertDoubleHostToSwapped(${1:double arg})"
    },
    {
      "trigger": "CFConvertDoubleSwappedToHost",
      "contents": "CFConvertDoubleSwappedToHost(${1:CFSwappedFloat64 arg})"
    },
    {
      "trigger": "CFConvertFloat32HostToSwapped",
      "contents": "CFConvertFloat32HostToSwapped(${1:Float32 arg})"
    },
    {
      "trigger": "CFConvertFloat32SwappedToHost",
      "contents": "CFConvertFloat32SwappedToHost(${1:CFSwappedFloat32 arg})"
    },
    {
      "trigger": "CFConvertFloat64HostToSwapped",
      "contents": "CFConvertFloat64HostToSwapped(${1:Float64 arg})"
    },
    {
      "trigger": "CFConvertFloat64SwappedToHost",
      "contents": "CFConvertFloat64SwappedToHost(${1:CFSwappedFloat64 arg})"
    },
    {
      "trigger": "CFConvertFloatHostToSwapped",
      "contents": "CFConvertFloatHostToSwapped(${1:float arg})"
    },
    {
      "trigger": "CFConvertFloatSwappedToHost",
      "contents": "CFConvertFloatSwappedToHost(${1:CFSwappedFloat32 arg})"
    },
    {
      "trigger": "CFCopyDescription",
      "contents": "CFCopyDescription(${1:CFTypeRef cf})"
    },
    {
      "trigger": "CFCopyTypeIDDescription",
      "contents": "CFCopyTypeIDDescription(${1:CFTypeID type_id})"
    },
    {
      "trigger": "CFDataAppendBytes",
      "contents": "CFDataAppendBytes(${1:CFMutableDataRef theData}, ${2:UInt8* bytes}, ${3:CFIndex length})"
    },
    {
      "trigger": "CFDataCreate",
      "contents": "CFDataCreate(${1:CFAllocatorRef allocator}, ${2:UInt8* bytes}, ${3:CFIndex length})"
    },
    {
      "trigger": "CFDataCreateCopy",
      "contents": "CFDataCreateCopy(${1:CFAllocatorRef allocator}, ${2:CFDataRef theData})"
    },
    {
      "trigger": "CFDataCreateMutable",
      "contents": "CFDataCreateMutable(${1:CFAllocatorRef allocator}, ${2:CFIndex capacity})"
    },
    {
      "trigger": "CFDataCreateMutableCopy",
      "contents": "CFDataCreateMutableCopy(${1:CFAllocatorRef allocator}, ${2:CFIndex capacity}, ${3:CFDataRef theData})"
    },
    {
      "trigger": "CFDataCreateWithBytesNoCopy",
      "contents": "CFDataCreateWithBytesNoCopy(${1:CFAllocatorRef allocator}, ${2:UInt8* bytes}, ${3:CFIndex length}, ${4:CFAllocatorRef bytesDeallocator})"
    },
    {
      "trigger": "CFDataDeleteBytes",
      "contents": "CFDataDeleteBytes(${1:CFMutableDataRef theData}, ${2:CFRange range})"
    },
    {
      "trigger": "CFDataFind",
      "contents": "CFDataFind(${1:CFDataRef theData}, ${2:CFDataRef dataToFind}, ${3:CFRange searchRange}, ${4:CFDataSearchFlags compareOptions})"
    },
    {
      "trigger": "CFDataGetBytePtr",
      "contents": "CFDataGetBytePtr(${1:CFDataRef theData})"
    },
    {
      "trigger": "CFDataGetBytes",
      "contents": "CFDataGetBytes(${1:CFDataRef theData}, ${2:CFRange range}, ${3:UInt8* buffer})"
    },
    {
      "trigger": "CFDataGetLength",
      "contents": "CFDataGetLength(${1:CFDataRef theData})"
    },
    {
      "trigger": "CFDataGetMutableBytePtr",
      "contents": "CFDataGetMutableBytePtr(${1:CFMutableDataRef theData})"
    },
    {
      "trigger": "CFDataIncreaseLength",
      "contents": "CFDataIncreaseLength(${1:CFMutableDataRef theData}, ${2:CFIndex extraLength})"
    },
    {
      "trigger": "CFDataReplaceBytes",
      "contents": "CFDataReplaceBytes(${1:CFMutableDataRef theData}, ${2:CFRange range}, ${3:UInt8* newBytes}, ${4:CFIndex newLength})"
    },
    {
      "trigger": "CFDataSetLength",
      "contents": "CFDataSetLength(${1:CFMutableDataRef theData}, ${2:CFIndex length})"
    },
    {
      "trigger": "CFDateCompare",
      "contents": "CFDateCompare(${1:CFDateRef theDate}, ${2:CFDateRef otherDate}, ${3:void* context})"
    },
    {
      "trigger": "CFDateCreate",
      "contents": "CFDateCreate(${1:CFAllocatorRef allocator}, ${2:CFAbsoluteTime at})"
    },
    {
      "trigger": "CFDateFormatterCopyProperty",
      "contents": "CFDateFormatterCopyProperty(${1:CFDateFormatterRef formatter}, ${2:CFStringRef key})"
    },
    {
      "trigger": "CFDateFormatterCreate",
      "contents": "CFDateFormatterCreate(${1:CFAllocatorRef allocator}, ${2:CFLocaleRef locale}, ${3:CFDateFormatterStyle dateStyle}, ${4:CFDateFormatterStyle timeStyle})"
    },
    {
      "trigger": "CFDateFormatterCreateDateFormatFromTemplate",
      "contents": "CFDateFormatterCreateDateFormatFromTemplate(${1:CFAllocatorRef allocator}, ${2:CFStringRef tmplate}, ${3:CFOptionFlags options}, ${4:CFLocaleRef locale})"
    },
    {
      "trigger": "CFDateFormatterCreateDateFromString",
      "contents": "CFDateFormatterCreateDateFromString(${1:CFAllocatorRef allocator}, ${2:CFDateFormatterRef formatter}, ${3:CFStringRef string}, ${4:CFRange* rangep})"
    },
    {
      "trigger": "CFDateFormatterCreateStringWithAbsoluteTime",
      "contents": "CFDateFormatterCreateStringWithAbsoluteTime(${1:CFAllocatorRef allocator}, ${2:CFDateFormatterRef formatter}, ${3:CFAbsoluteTime at})"
    },
    {
      "trigger": "CFDateFormatterCreateStringWithDate",
      "contents": "CFDateFormatterCreateStringWithDate(${1:CFAllocatorRef allocator}, ${2:CFDateFormatterRef formatter}, ${3:CFDateRef date})"
    },
    {
      "trigger": "CFDateFormatterGetAbsoluteTimeFromString",
      "contents": "CFDateFormatterGetAbsoluteTimeFromString(${1:CFDateFormatterRef formatter}, ${2:CFStringRef string}, ${3:CFRange* rangep}, ${4:CFAbsoluteTime* atp})"
    },
    {
      "trigger": "CFDateFormatterGetDateStyle",
      "contents": "CFDateFormatterGetDateStyle(${1:CFDateFormatterRef formatter})"
    },
    {
      "trigger": "CFDateFormatterGetFormat",
      "contents": "CFDateFormatterGetFormat(${1:CFDateFormatterRef formatter})"
    },
    {
      "trigger": "CFDateFormatterGetLocale",
      "contents": "CFDateFormatterGetLocale(${1:CFDateFormatterRef formatter})"
    },
    {
      "trigger": "CFDateFormatterGetTimeStyle",
      "contents": "CFDateFormatterGetTimeStyle(${1:CFDateFormatterRef formatter})"
    },
    {
      "trigger": "CFDateFormatterSetFormat",
      "contents": "CFDateFormatterSetFormat(${1:CFDateFormatterRef formatter}, ${2:CFStringRef formatString})"
    },
    {
      "trigger": "CFDateFormatterSetProperty",
      "contents": "CFDateFormatterSetProperty(${1:CFDateFormatterRef formatter}, ${2:CFStringRef key}, ${3:CFTypeRef value})"
    },
    {
      "trigger": "CFDateGetAbsoluteTime",
      "contents": "CFDateGetAbsoluteTime(${1:CFDateRef theDate})"
    },
    {
      "trigger": "CFDateGetTimeIntervalSinceDate",
      "contents": "CFDateGetTimeIntervalSinceDate(${1:CFDateRef theDate}, ${2:CFDateRef otherDate})"
    },
    {
      "trigger": "CFDictionaryAddValue",
      "contents": "CFDictionaryAddValue(${1:CFMutableDictionaryRef theDict}, ${2:void* key}, ${3:void* value})"
    },
    {
      "trigger": "CFDictionaryApplyFunction",
      "contents": "CFDictionaryApplyFunction(${1:CFDictionaryRef theDict}, ${2:CFDictionaryApplierFunction applier}, ${3:void* context})"
    },
    {
      "trigger": "CFDictionaryContainsKey",
      "contents": "CFDictionaryContainsKey(${1:CFDictionaryRef theDict}, ${2:void* key})"
    },
    {
      "trigger": "CFDictionaryContainsValue",
      "contents": "CFDictionaryContainsValue(${1:CFDictionaryRef theDict}, ${2:void* value})"
    },
    {
      "trigger": "CFDictionaryCreate",
      "contents": "CFDictionaryCreate(${1:CFAllocatorRef allocator}, ${2:void** keys}, ${3:void** values}, ${4:CFIndex numValues}, ${5:CFDictionaryKeyCallBacks* keyCallBacks}, ${6:CFDictionaryValueCallBacks* valueCallBacks})"
    },
    {
      "trigger": "CFDictionaryCreateCopy",
      "contents": "CFDictionaryCreateCopy(${1:CFAllocatorRef allocator}, ${2:CFDictionaryRef theDict})"
    },
    {
      "trigger": "CFDictionaryCreateMutable",
      "contents": "CFDictionaryCreateMutable(${1:CFAllocatorRef allocator}, ${2:CFIndex capacity}, ${3:CFDictionaryKeyCallBacks* keyCallBacks}, ${4:CFDictionaryValueCallBacks* valueCallBacks})"
    },
    {
      "trigger": "CFDictionaryCreateMutableCopy",
      "contents": "CFDictionaryCreateMutableCopy(${1:CFAllocatorRef allocator}, ${2:CFIndex capacity}, ${3:CFDictionaryRef theDict})"
    },
    {
      "trigger": "CFDictionaryGetCount",
      "contents": "CFDictionaryGetCount(${1:CFDictionaryRef theDict})"
    },
    {
      "trigger": "CFDictionaryGetCountOfKey",
      "contents": "CFDictionaryGetCountOfKey(${1:CFDictionaryRef theDict}, ${2:void* key})"
    },
    {
      "trigger": "CFDictionaryGetCountOfValue",
      "contents": "CFDictionaryGetCountOfValue(${1:CFDictionaryRef theDict}, ${2:void* value})"
    },
    {
      "trigger": "CFDictionaryGetKeysAndValues",
      "contents": "CFDictionaryGetKeysAndValues(${1:CFDictionaryRef theDict}, ${2:void** keys}, ${3:void** values})"
    },
    {
      "trigger": "CFDictionaryGetValue",
      "contents": "CFDictionaryGetValue(${1:CFDictionaryRef theDict}, ${2:void* key})"
    },
    {
      "trigger": "CFDictionaryGetValueIfPresent",
      "contents": "CFDictionaryGetValueIfPresent(${1:CFDictionaryRef theDict}, ${2:void* key}, ${3:void** value})"
    },
    {
      "trigger": "CFDictionaryRemoveAllValues",
      "contents": "CFDictionaryRemoveAllValues(${1:CFMutableDictionaryRef theDict})"
    },
    {
      "trigger": "CFDictionaryRemoveValue",
      "contents": "CFDictionaryRemoveValue(${1:CFMutableDictionaryRef theDict}, ${2:void* key})"
    },
    {
      "trigger": "CFDictionaryReplaceValue",
      "contents": "CFDictionaryReplaceValue(${1:CFMutableDictionaryRef theDict}, ${2:void* key}, ${3:void* value})"
    },
    {
      "trigger": "CFDictionarySetValue",
      "contents": "CFDictionarySetValue(${1:CFMutableDictionaryRef theDict}, ${2:void* key}, ${3:void* value})"
    },
    {
      "trigger": "CFEqual",
      "contents": "CFEqual(${1:CFTypeRef cf1}, ${2:CFTypeRef cf2})"
    },
    {
      "trigger": "CFErrorCopyDescription",
      "contents": "CFErrorCopyDescription(${1:CFErrorRef err})"
    },
    {
      "trigger": "CFErrorCopyFailureReason",
      "contents": "CFErrorCopyFailureReason(${1:CFErrorRef err})"
    },
    {
      "trigger": "CFErrorCopyRecoverySuggestion",
      "contents": "CFErrorCopyRecoverySuggestion(${1:CFErrorRef err})"
    },
    {
      "trigger": "CFErrorCopyUserInfo",
      "contents": "CFErrorCopyUserInfo(${1:CFErrorRef err})"
    },
    {
      "trigger": "CFErrorCreate",
      "contents": "CFErrorCreate(${1:CFAllocatorRef allocator}, ${2:CFStringRef domain}, ${3:CFIndex code}, ${4:CFDictionaryRef userInfo})"
    },
    {
      "trigger": "CFErrorCreateWithUserInfoKeysAndValues",
      "contents": "CFErrorCreateWithUserInfoKeysAndValues(${1:CFAllocatorRef allocator}, ${2:CFStringRef domain}, ${3:CFIndex code}, ${4:void ** userInfoKeys}, ${5:void ** userInfoValues}, ${6:CFIndex numUserInfoValues})"
    },
    {
      "trigger": "CFErrorGetCode",
      "contents": "CFErrorGetCode(${1:CFErrorRef err})"
    },
    {
      "trigger": "CFErrorGetDomain",
      "contents": "CFErrorGetDomain(${1:CFErrorRef err})"
    },
    {
      "trigger": "CFFTPCreateParsedResourceListing",
      "contents": "CFFTPCreateParsedResourceListing(${1:CFAllocatorRef alloc}, ${2:UInt8* buffer}, ${3:CFIndex bufferLength}, ${4:CFDictionaryRef* parsed})"
    },
    {
      "trigger": "CFFileDescriptorCreate",
      "contents": "CFFileDescriptorCreate(${1:CFAllocatorRef allocator}, ${2:CFFileDescriptorNativeDescriptor fd}, ${3:Boolean closeOnInvalidate}, ${4:CFFileDescriptorCallBack callout}, ${5:CFFileDescriptorContext* context})"
    },
    {
      "trigger": "CFFileDescriptorCreateRunLoopSource",
      "contents": "CFFileDescriptorCreateRunLoopSource(${1:CFAllocatorRef allocator}, ${2:CFFileDescriptorRef f}, ${3:CFIndex order})"
    },
    {
      "trigger": "CFFileDescriptorDisableCallBacks",
      "contents": "CFFileDescriptorDisableCallBacks(${1:CFFileDescriptorRef f}, ${2:CFOptionFlags callBackTypes})"
    },
    {
      "trigger": "CFFileDescriptorEnableCallBacks",
      "contents": "CFFileDescriptorEnableCallBacks(${1:CFFileDescriptorRef f}, ${2:CFOptionFlags callBackTypes})"
    },
    {
      "trigger": "CFFileDescriptorGetContext",
      "contents": "CFFileDescriptorGetContext(${1:CFFileDescriptorRef f}, ${2:CFFileDescriptorContext* context})"
    },
    {
      "trigger": "CFFileDescriptorGetNativeDescriptor",
      "contents": "CFFileDescriptorGetNativeDescriptor(${1:CFFileDescriptorRef f})"
    },
    {
      "trigger": "CFFileDescriptorInvalidate",
      "contents": "CFFileDescriptorInvalidate(${1:CFFileDescriptorRef f})"
    },
    {
      "trigger": "CFFileDescriptorIsValid",
      "contents": "CFFileDescriptorIsValid(${1:CFFileDescriptorRef f})"
    },
    {
      "trigger": "CFFileSecurityCopyAccessControlList",
      "contents": "CFFileSecurityCopyAccessControlList(${1:CFFileSecurityRef fileSec}, ${2:acl_t* accessControlList})"
    },
    {
      "trigger": "CFFileSecurityCopyGroupUUID",
      "contents": "CFFileSecurityCopyGroupUUID(${1:CFFileSecurityRef fileSec}, ${2:CFUUIDRef* groupUUID})"
    },
    {
      "trigger": "CFFileSecurityCopyOwnerUUID",
      "contents": "CFFileSecurityCopyOwnerUUID(${1:CFFileSecurityRef fileSec}, ${2:CFUUIDRef* ownerUUID})"
    },
    {
      "trigger": "CFFileSecurityCreate",
      "contents": "CFFileSecurityCreate(${1:CFAllocatorRef allocator})"
    },
    {
      "trigger": "CFFileSecurityCreateCopy",
      "contents": "CFFileSecurityCreateCopy(${1:CFAllocatorRef allocator}, ${2:CFFileSecurityRef fileSec})"
    },
    {
      "trigger": "CFFileSecurityGetGroup",
      "contents": "CFFileSecurityGetGroup(${1:CFFileSecurityRef fileSec}, ${2:gid_t* group})"
    },
    {
      "trigger": "CFFileSecurityGetMode",
      "contents": "CFFileSecurityGetMode(${1:CFFileSecurityRef fileSec}, ${2:mode_t* mode})"
    },
    {
      "trigger": "CFFileSecurityGetOwner",
      "contents": "CFFileSecurityGetOwner(${1:CFFileSecurityRef fileSec}, ${2:uid_t* owner})"
    },
    {
      "trigger": "CFFileSecuritySetAccessControlList",
      "contents": "CFFileSecuritySetAccessControlList(${1:CFFileSecurityRef fileSec}, ${2:acl_t accessControlList})"
    },
    {
      "trigger": "CFFileSecuritySetGroup",
      "contents": "CFFileSecuritySetGroup(${1:CFFileSecurityRef fileSec}, ${2:gid_t group})"
    },
    {
      "trigger": "CFFileSecuritySetGroupUUID",
      "contents": "CFFileSecuritySetGroupUUID(${1:CFFileSecurityRef fileSec}, ${2:CFUUIDRef groupUUID})"
    },
    {
      "trigger": "CFFileSecuritySetMode",
      "contents": "CFFileSecuritySetMode(${1:CFFileSecurityRef fileSec}, ${2:mode_t mode})"
    },
    {
      "trigger": "CFFileSecuritySetOwner",
      "contents": "CFFileSecuritySetOwner(${1:CFFileSecurityRef fileSec}, ${2:uid_t owner})"
    },
    {
      "trigger": "CFFileSecuritySetOwnerUUID",
      "contents": "CFFileSecuritySetOwnerUUID(${1:CFFileSecurityRef fileSec}, ${2:CFUUIDRef ownerUUID})"
    },
    {
      "trigger": "CFGetAllocator",
      "contents": "CFGetAllocator(${1:CFTypeRef cf})"
    },
    {
      "trigger": "CFGetRetainCount",
      "contents": "CFGetRetainCount(${1:CFTypeRef cf})"
    },
    {
      "trigger": "CFGetTypeID",
      "contents": "CFGetTypeID(${1:CFTypeRef cf})"
    },
    {
      "trigger": "CFGregorianDateGetAbsoluteTime",
      "contents": "CFGregorianDateGetAbsoluteTime(${1:CFGregorianDate gdate}, ${2:CFTimeZoneRef tz})"
    },
    {
      "trigger": "CFGregorianDateIsValid",
      "contents": "CFGregorianDateIsValid(${1:CFGregorianDate gdate}, ${2:CFOptionFlags unitFlags})"
    },
    {
      "trigger": "CFHTTPAuthenticationAppliesToRequest",
      "contents": "CFHTTPAuthenticationAppliesToRequest(${1:CFHTTPAuthenticationRef auth}, ${2:CFHTTPMessageRef request})"
    },
    {
      "trigger": "CFHTTPAuthenticationCopyDomains",
      "contents": "CFHTTPAuthenticationCopyDomains(${1:CFHTTPAuthenticationRef auth})"
    },
    {
      "trigger": "CFHTTPAuthenticationCopyMethod",
      "contents": "CFHTTPAuthenticationCopyMethod(${1:CFHTTPAuthenticationRef auth})"
    },
    {
      "trigger": "CFHTTPAuthenticationCopyRealm",
      "contents": "CFHTTPAuthenticationCopyRealm(${1:CFHTTPAuthenticationRef auth})"
    },
    {
      "trigger": "CFHTTPAuthenticationCreateFromResponse",
      "contents": "CFHTTPAuthenticationCreateFromResponse(${1:CFAllocatorRef alloc}, ${2:CFHTTPMessageRef response})"
    },
    {
      "trigger": "CFHTTPAuthenticationIsValid",
      "contents": "CFHTTPAuthenticationIsValid(${1:CFHTTPAuthenticationRef auth}, ${2:CFStreamError* error})"
    },
    {
      "trigger": "CFHTTPAuthenticationRequiresAccountDomain",
      "contents": "CFHTTPAuthenticationRequiresAccountDomain(${1:CFHTTPAuthenticationRef auth})"
    },
    {
      "trigger": "CFHTTPAuthenticationRequiresOrderedRequests",
      "contents": "CFHTTPAuthenticationRequiresOrderedRequests(${1:CFHTTPAuthenticationRef auth})"
    },
    {
      "trigger": "CFHTTPAuthenticationRequiresUserNameAndPassword",
      "contents": "CFHTTPAuthenticationRequiresUserNameAndPassword(${1:CFHTTPAuthenticationRef auth})"
    },
    {
      "trigger": "CFHTTPMessageAddAuthentication",
      "contents": "CFHTTPMessageAddAuthentication(${1:CFHTTPMessageRef request}, ${2:CFHTTPMessageRef authenticationFailureResponse}, ${3:CFStringRef username}, ${4:CFStringRef password}, ${5:CFStringRef authenticationScheme}, ${6:Boolean forProxy})"
    },
    {
      "trigger": "CFHTTPMessageAppendBytes",
      "contents": "CFHTTPMessageAppendBytes(${1:CFHTTPMessageRef message}, ${2:UInt8* newBytes}, ${3:CFIndex numBytes})"
    },
    {
      "trigger": "CFHTTPMessageApplyCredentialDictionary",
      "contents": "CFHTTPMessageApplyCredentialDictionary(${1:CFHTTPMessageRef request}, ${2:CFHTTPAuthenticationRef auth}, ${3:CFDictionaryRef dict}, ${4:CFStreamError* error})"
    },
    {
      "trigger": "CFHTTPMessageApplyCredentials",
      "contents": "CFHTTPMessageApplyCredentials(${1:CFHTTPMessageRef request}, ${2:CFHTTPAuthenticationRef auth}, ${3:CFStringRef username}, ${4:CFStringRef password}, ${5:CFStreamError* error})"
    },
    {
      "trigger": "CFHTTPMessageCopyAllHeaderFields",
      "contents": "CFHTTPMessageCopyAllHeaderFields(${1:CFHTTPMessageRef message})"
    },
    {
      "trigger": "CFHTTPMessageCopyBody",
      "contents": "CFHTTPMessageCopyBody(${1:CFHTTPMessageRef message})"
    },
    {
      "trigger": "CFHTTPMessageCopyHeaderFieldValue",
      "contents": "CFHTTPMessageCopyHeaderFieldValue(${1:CFHTTPMessageRef message}, ${2:CFStringRef headerField})"
    },
    {
      "trigger": "CFHTTPMessageCopyRequestMethod",
      "contents": "CFHTTPMessageCopyRequestMethod(${1:CFHTTPMessageRef request})"
    },
    {
      "trigger": "CFHTTPMessageCopyRequestURL",
      "contents": "CFHTTPMessageCopyRequestURL(${1:CFHTTPMessageRef request})"
    },
    {
      "trigger": "CFHTTPMessageCopyResponseStatusLine",
      "contents": "CFHTTPMessageCopyResponseStatusLine(${1:CFHTTPMessageRef response})"
    },
    {
      "trigger": "CFHTTPMessageCopySerializedMessage",
      "contents": "CFHTTPMessageCopySerializedMessage(${1:CFHTTPMessageRef request})"
    },
    {
      "trigger": "CFHTTPMessageCopyVersion",
      "contents": "CFHTTPMessageCopyVersion(${1:CFHTTPMessageRef message})"
    },
    {
      "trigger": "CFHTTPMessageCreateCopy",
      "contents": "CFHTTPMessageCreateCopy(${1:CFAllocatorRef alloc}, ${2:CFHTTPMessageRef message})"
    },
    {
      "trigger": "CFHTTPMessageCreateEmpty",
      "contents": "CFHTTPMessageCreateEmpty(${1:CFAllocatorRef alloc}, ${2:Boolean isRequest})"
    },
    {
      "trigger": "CFHTTPMessageCreateRequest",
      "contents": "CFHTTPMessageCreateRequest(${1:CFAllocatorRef alloc}, ${2:CFStringRef requestMethod}, ${3:CFURLRef url}, ${4:CFStringRef httpVersion})"
    },
    {
      "trigger": "CFHTTPMessageCreateResponse",
      "contents": "CFHTTPMessageCreateResponse(${1:CFAllocatorRef alloc}, ${2:CFIndex statusCode}, ${3:CFStringRef statusDescription}, ${4:CFStringRef httpVersion})"
    },
    {
      "trigger": "CFHTTPMessageGetResponseStatusCode",
      "contents": "CFHTTPMessageGetResponseStatusCode(${1:CFHTTPMessageRef response})"
    },
    {
      "trigger": "CFHTTPMessageIsHeaderComplete",
      "contents": "CFHTTPMessageIsHeaderComplete(${1:CFHTTPMessageRef message})"
    },
    {
      "trigger": "CFHTTPMessageIsRequest",
      "contents": "CFHTTPMessageIsRequest(${1:CFHTTPMessageRef message})"
    },
    {
      "trigger": "CFHTTPMessageSetBody",
      "contents": "CFHTTPMessageSetBody(${1:CFHTTPMessageRef message}, ${2:CFDataRef bodyData})"
    },
    {
      "trigger": "CFHTTPMessageSetHeaderFieldValue",
      "contents": "CFHTTPMessageSetHeaderFieldValue(${1:CFHTTPMessageRef message}, ${2:CFStringRef headerField}, ${3:CFStringRef value})"
    },
    {
      "trigger": "CFHash",
      "contents": "CFHash(${1:CFTypeRef cf})"
    },
    {
      "trigger": "CFHostCancelInfoResolution",
      "contents": "CFHostCancelInfoResolution(${1:CFHostRef theHost}, ${2:CFHostInfoType info})"
    },
    {
      "trigger": "CFHostCreateCopy",
      "contents": "CFHostCreateCopy(${1:CFAllocatorRef alloc}, ${2:CFHostRef host})"
    },
    {
      "trigger": "CFHostCreateWithAddress",
      "contents": "CFHostCreateWithAddress(${1:CFAllocatorRef allocator}, ${2:CFDataRef addr})"
    },
    {
      "trigger": "CFHostCreateWithName",
      "contents": "CFHostCreateWithName(${1:CFAllocatorRef allocator}, ${2:CFStringRef hostname})"
    },
    {
      "trigger": "CFHostGetAddressing",
      "contents": "CFHostGetAddressing(${1:CFHostRef theHost}, ${2:Boolean* hasBeenResolved})"
    },
    {
      "trigger": "CFHostGetNames",
      "contents": "CFHostGetNames(${1:CFHostRef theHost}, ${2:Boolean* hasBeenResolved})"
    },
    {
      "trigger": "CFHostGetReachability",
      "contents": "CFHostGetReachability(${1:CFHostRef theHost}, ${2:Boolean* hasBeenResolved})"
    },
    {
      "trigger": "CFHostScheduleWithRunLoop",
      "contents": "CFHostScheduleWithRunLoop(${1:CFHostRef theHost}, ${2:CFRunLoopRef runLoop}, ${3:CFStringRef runLoopMode})"
    },
    {
      "trigger": "CFHostSetClient",
      "contents": "CFHostSetClient(${1:CFHostRef theHost}, ${2:CFHostClientCallBack clientCB}, ${3:CFHostClientContext* clientContext})"
    },
    {
      "trigger": "CFHostStartInfoResolution",
      "contents": "CFHostStartInfoResolution(${1:CFHostRef theHost}, ${2:CFHostInfoType info}, ${3:CFStreamError* error})"
    },
    {
      "trigger": "CFHostUnscheduleFromRunLoop",
      "contents": "CFHostUnscheduleFromRunLoop(${1:CFHostRef theHost}, ${2:CFRunLoopRef runLoop}, ${3:CFStringRef runLoopMode})"
    },
    {
      "trigger": "CFLocaleCopyDisplayNameForPropertyValue",
      "contents": "CFLocaleCopyDisplayNameForPropertyValue(${1:CFLocaleRef displayLocale}, ${2:CFStringRef key}, ${3:CFStringRef value})"
    },
    {
      "trigger": "CFLocaleCreate",
      "contents": "CFLocaleCreate(${1:CFAllocatorRef allocator}, ${2:CFStringRef localeIdentifier})"
    },
    {
      "trigger": "CFLocaleCreateCanonicalLanguageIdentifierFromString",
      "contents": "CFLocaleCreateCanonicalLanguageIdentifierFromString(${1:CFAllocatorRef allocator}, ${2:CFStringRef localeIdentifier})"
    },
    {
      "trigger": "CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes",
      "contents": "CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes(${1:CFAllocatorRef allocator}, ${2:LangCode lcode}, ${3:RegionCode rcode})"
    },
    {
      "trigger": "CFLocaleCreateCanonicalLocaleIdentifierFromString",
      "contents": "CFLocaleCreateCanonicalLocaleIdentifierFromString(${1:CFAllocatorRef allocator}, ${2:CFStringRef localeIdentifier})"
    },
    {
      "trigger": "CFLocaleCreateComponentsFromLocaleIdentifier",
      "contents": "CFLocaleCreateComponentsFromLocaleIdentifier(${1:CFAllocatorRef allocator}, ${2:CFStringRef localeID})"
    },
    {
      "trigger": "CFLocaleCreateCopy",
      "contents": "CFLocaleCreateCopy(${1:CFAllocatorRef allocator}, ${2:CFLocaleRef locale})"
    },
    {
      "trigger": "CFLocaleCreateLocaleIdentifierFromComponents",
      "contents": "CFLocaleCreateLocaleIdentifierFromComponents(${1:CFAllocatorRef allocator}, ${2:CFDictionaryRef dictionary})"
    },
    {
      "trigger": "CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode",
      "contents": "CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode(${1:CFAllocatorRef allocator}, ${2:uint32_t lcid})"
    },
    {
      "trigger": "CFLocaleGetIdentifier",
      "contents": "CFLocaleGetIdentifier(${1:CFLocaleRef locale})"
    },
    {
      "trigger": "CFLocaleGetLanguageCharacterDirection",
      "contents": "CFLocaleGetLanguageCharacterDirection(${1:CFStringRef isoLangCode})"
    },
    {
      "trigger": "CFLocaleGetLanguageLineDirection",
      "contents": "CFLocaleGetLanguageLineDirection(${1:CFStringRef isoLangCode})"
    },
    {
      "trigger": "CFLocaleGetValue",
      "contents": "CFLocaleGetValue(${1:CFLocaleRef locale}, ${2:CFStringRef key})"
    },
    {
      "trigger": "CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier",
      "contents": "CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier(${1:CFStringRef localeIdentifier})"
    },
    {
      "trigger": "CFMachPortCreate",
      "contents": "CFMachPortCreate(${1:CFAllocatorRef allocator}, ${2:CFMachPortCallBack callout}, ${3:CFMachPortContext* context}, ${4:Boolean* shouldFreeInfo})"
    },
    {
      "trigger": "CFMachPortCreateRunLoopSource",
      "contents": "CFMachPortCreateRunLoopSource(${1:CFAllocatorRef allocator}, ${2:CFMachPortRef port}, ${3:CFIndex order})"
    },
    {
      "trigger": "CFMachPortCreateWithPort",
      "contents": "CFMachPortCreateWithPort(${1:CFAllocatorRef allocator}, ${2:mach_port_t portNum}, ${3:CFMachPortCallBack callout}, ${4:CFMachPortContext* context}, ${5:Boolean* shouldFreeInfo})"
    },
    {
      "trigger": "CFMachPortGetContext",
      "contents": "CFMachPortGetContext(${1:CFMachPortRef port}, ${2:CFMachPortContext* context})"
    },
    {
      "trigger": "CFMachPortGetInvalidationCallBack",
      "contents": "CFMachPortGetInvalidationCallBack(${1:CFMachPortRef port})"
    },
    {
      "trigger": "CFMachPortGetPort",
      "contents": "CFMachPortGetPort(${1:CFMachPortRef port})"
    },
    {
      "trigger": "CFMachPortInvalidate",
      "contents": "CFMachPortInvalidate(${1:CFMachPortRef port})"
    },
    {
      "trigger": "CFMachPortIsValid",
      "contents": "CFMachPortIsValid(${1:CFMachPortRef port})"
    },
    {
      "trigger": "CFMachPortSetInvalidationCallBack",
      "contents": "CFMachPortSetInvalidationCallBack(${1:CFMachPortRef port}, ${2:CFMachPortInvalidationCallBack callout})"
    },
    {
      "trigger": "CFMakeCollectable",
      "contents": "CFMakeCollectable(${1:CFTypeRef cf})"
    },
    {
      "trigger": "CFMessagePortCreateLocal",
      "contents": "CFMessagePortCreateLocal(${1:CFAllocatorRef allocator}, ${2:CFStringRef name}, ${3:CFMessagePortCallBack callout}, ${4:CFMessagePortContext* context}, ${5:Boolean* shouldFreeInfo})"
    },
    {
      "trigger": "CFMessagePortCreateRemote",
      "contents": "CFMessagePortCreateRemote(${1:CFAllocatorRef allocator}, ${2:CFStringRef name})"
    },
    {
      "trigger": "CFMessagePortCreateRunLoopSource",
      "contents": "CFMessagePortCreateRunLoopSource(${1:CFAllocatorRef allocator}, ${2:CFMessagePortRef local}, ${3:CFIndex order})"
    },
    {
      "trigger": "CFMessagePortGetContext",
      "contents": "CFMessagePortGetContext(${1:CFMessagePortRef ms}, ${2:CFMessagePortContext* context})"
    },
    {
      "trigger": "CFMessagePortGetInvalidationCallBack",
      "contents": "CFMessagePortGetInvalidationCallBack(${1:CFMessagePortRef ms})"
    },
    {
      "trigger": "CFMessagePortGetName",
      "contents": "CFMessagePortGetName(${1:CFMessagePortRef ms})"
    },
    {
      "trigger": "CFMessagePortInvalidate",
      "contents": "CFMessagePortInvalidate(${1:CFMessagePortRef ms})"
    },
    {
      "trigger": "CFMessagePortIsRemote",
      "contents": "CFMessagePortIsRemote(${1:CFMessagePortRef ms})"
    },
    {
      "trigger": "CFMessagePortIsValid",
      "contents": "CFMessagePortIsValid(${1:CFMessagePortRef ms})"
    },
    {
      "trigger": "CFMessagePortSendRequest",
      "contents": "CFMessagePortSendRequest(${1:CFMessagePortRef remote}, ${2:SInt32 msgid}, ${3:CFDataRef data}, ${4:CFTimeInterval sendTimeout}, ${5:CFTimeInterval rcvTimeout}, ${6:CFStringRef replyMode}, ${7:CFDataRef* returnData})"
    },
    {
      "trigger": "CFMessagePortSetDispatchQueue",
      "contents": "CFMessagePortSetDispatchQueue(${1:CFMessagePortRef ms}, ${2:dispatch_queue_t queue})"
    },
    {
      "trigger": "CFMessagePortSetInvalidationCallBack",
      "contents": "CFMessagePortSetInvalidationCallBack(${1:CFMessagePortRef ms}, ${2:CFMessagePortInvalidationCallBack callout})"
    },
    {
      "trigger": "CFMessagePortSetName",
      "contents": "CFMessagePortSetName(${1:CFMessagePortRef ms}, ${2:CFStringRef newName})"
    },
    {
      "trigger": "CFNetDiagnosticCopyNetworkStatusPassively",
      "contents": "CFNetDiagnosticCopyNetworkStatusPassively(${1:CFNetDiagnosticRef details}, ${2:CFStringRef* description})"
    },
    {
      "trigger": "CFNetDiagnosticCreateWithStreams",
      "contents": "CFNetDiagnosticCreateWithStreams(${1:CFAllocatorRef alloc}, ${2:CFReadStreamRef readStream}, ${3:CFWriteStreamRef writeStream})"
    },
    {
      "trigger": "CFNetDiagnosticCreateWithURL",
      "contents": "CFNetDiagnosticCreateWithURL(${1:CFAllocatorRef alloc}, ${2:CFURLRef url})"
    },
    {
      "trigger": "CFNetDiagnosticDiagnoseProblemInteractively",
      "contents": "CFNetDiagnosticDiagnoseProblemInteractively(${1:CFNetDiagnosticRef details})"
    },
    {
      "trigger": "CFNetDiagnosticSetName",
      "contents": "CFNetDiagnosticSetName(${1:CFNetDiagnosticRef details}, ${2:CFStringRef name})"
    },
    {
      "trigger": "CFNetServiceBrowserCreate",
      "contents": "CFNetServiceBrowserCreate(${1:CFAllocatorRef alloc}, ${2:CFNetServiceBrowserClientCallBack clientCB}, ${3:CFNetServiceClientContext* clientContext})"
    },
    {
      "trigger": "CFNetServiceBrowserInvalidate",
      "contents": "CFNetServiceBrowserInvalidate(${1:CFNetServiceBrowserRef browser})"
    },
    {
      "trigger": "CFNetServiceBrowserScheduleWithRunLoop",
      "contents": "CFNetServiceBrowserScheduleWithRunLoop(${1:CFNetServiceBrowserRef browser}, ${2:CFRunLoopRef runLoop}, ${3:CFStringRef runLoopMode})"
    },
    {
      "trigger": "CFNetServiceBrowserSearchForDomains",
      "contents": "CFNetServiceBrowserSearchForDomains(${1:CFNetServiceBrowserRef browser}, ${2:Boolean registrationDomains}, ${3:CFStreamError* error})"
    },
    {
      "trigger": "CFNetServiceBrowserSearchForServices",
      "contents": "CFNetServiceBrowserSearchForServices(${1:CFNetServiceBrowserRef browser}, ${2:CFStringRef domain}, ${3:CFStringRef serviceType}, ${4:CFStreamError* error})"
    },
    {
      "trigger": "CFNetServiceBrowserStopSearch",
      "contents": "CFNetServiceBrowserStopSearch(${1:CFNetServiceBrowserRef browser}, ${2:CFStreamError* error})"
    },
    {
      "trigger": "CFNetServiceBrowserUnscheduleFromRunLoop",
      "contents": "CFNetServiceBrowserUnscheduleFromRunLoop(${1:CFNetServiceBrowserRef browser}, ${2:CFRunLoopRef runLoop}, ${3:CFStringRef runLoopMode})"
    },
    {
      "trigger": "CFNetServiceCancel",
      "contents": "CFNetServiceCancel(${1:CFNetServiceRef theService})"
    },
    {
      "trigger": "CFNetServiceCreate",
      "contents": "CFNetServiceCreate(${1:CFAllocatorRef alloc}, ${2:CFStringRef domain}, ${3:CFStringRef serviceType}, ${4:CFStringRef name}, ${5:SInt32 port})"
    },
    {
      "trigger": "CFNetServiceCreateCopy",
      "contents": "CFNetServiceCreateCopy(${1:CFAllocatorRef alloc}, ${2:CFNetServiceRef service})"
    },
    {
      "trigger": "CFNetServiceCreateDictionaryWithTXTData",
      "contents": "CFNetServiceCreateDictionaryWithTXTData(${1:CFAllocatorRef alloc}, ${2:CFDataRef txtRecord})"
    },
    {
      "trigger": "CFNetServiceCreateTXTDataWithDictionary",
      "contents": "CFNetServiceCreateTXTDataWithDictionary(${1:CFAllocatorRef alloc}, ${2:CFDictionaryRef keyValuePairs})"
    },
    {
      "trigger": "CFNetServiceGetAddressing",
      "contents": "CFNetServiceGetAddressing(${1:CFNetServiceRef theService})"
    },
    {
      "trigger": "CFNetServiceGetDomain",
      "contents": "CFNetServiceGetDomain(${1:CFNetServiceRef theService})"
    },
    {
      "trigger": "CFNetServiceGetName",
      "contents": "CFNetServiceGetName(${1:CFNetServiceRef theService})"
    },
    {
      "trigger": "CFNetServiceGetPortNumber",
      "contents": "CFNetServiceGetPortNumber(${1:CFNetServiceRef theService})"
    },
    {
      "trigger": "CFNetServiceGetTXTData",
      "contents": "CFNetServiceGetTXTData(${1:CFNetServiceRef theService})"
    },
    {
      "trigger": "CFNetServiceGetTargetHost",
      "contents": "CFNetServiceGetTargetHost(${1:CFNetServiceRef theService})"
    },
    {
      "trigger": "CFNetServiceGetType",
      "contents": "CFNetServiceGetType(${1:CFNetServiceRef theService})"
    },
    {
      "trigger": "CFNetServiceMonitorCreate",
      "contents": "CFNetServiceMonitorCreate(${1:CFAllocatorRef alloc}, ${2:CFNetServiceRef theService}, ${3:CFNetServiceMonitorClientCallBack clientCB}, ${4:CFNetServiceClientContext* clientContext})"
    },
    {
      "trigger": "CFNetServiceMonitorInvalidate",
      "contents": "CFNetServiceMonitorInvalidate(${1:CFNetServiceMonitorRef monitor})"
    },
    {
      "trigger": "CFNetServiceMonitorScheduleWithRunLoop",
      "contents": "CFNetServiceMonitorScheduleWithRunLoop(${1:CFNetServiceMonitorRef monitor}, ${2:CFRunLoopRef runLoop}, ${3:CFStringRef runLoopMode})"
    },
    {
      "trigger": "CFNetServiceMonitorStart",
      "contents": "CFNetServiceMonitorStart(${1:CFNetServiceMonitorRef monitor}, ${2:CFNetServiceMonitorType recordType}, ${3:CFStreamError* error})"
    },
    {
      "trigger": "CFNetServiceMonitorStop",
      "contents": "CFNetServiceMonitorStop(${1:CFNetServiceMonitorRef monitor}, ${2:CFStreamError* error})"
    },
    {
      "trigger": "CFNetServiceMonitorUnscheduleFromRunLoop",
      "contents": "CFNetServiceMonitorUnscheduleFromRunLoop(${1:CFNetServiceMonitorRef monitor}, ${2:CFRunLoopRef runLoop}, ${3:CFStringRef runLoopMode})"
    },
    {
      "trigger": "CFNetServiceRegisterWithOptions",
      "contents": "CFNetServiceRegisterWithOptions(${1:CFNetServiceRef theService}, ${2:CFOptionFlags options}, ${3:CFStreamError* error})"
    },
    {
      "trigger": "CFNetServiceResolveWithTimeout",
      "contents": "CFNetServiceResolveWithTimeout(${1:CFNetServiceRef theService}, ${2:CFTimeInterval timeout}, ${3:CFStreamError* error})"
    },
    {
      "trigger": "CFNetServiceScheduleWithRunLoop",
      "contents": "CFNetServiceScheduleWithRunLoop(${1:CFNetServiceRef theService}, ${2:CFRunLoopRef runLoop}, ${3:CFStringRef runLoopMode})"
    },
    {
      "trigger": "CFNetServiceSetClient",
      "contents": "CFNetServiceSetClient(${1:CFNetServiceRef theService}, ${2:CFNetServiceClientCallBack clientCB}, ${3:CFNetServiceClientContext* clientContext})"
    },
    {
      "trigger": "CFNetServiceSetTXTData",
      "contents": "CFNetServiceSetTXTData(${1:CFNetServiceRef theService}, ${2:CFDataRef txtRecord})"
    },
    {
      "trigger": "CFNetServiceUnscheduleFromRunLoop",
      "contents": "CFNetServiceUnscheduleFromRunLoop(${1:CFNetServiceRef theService}, ${2:CFRunLoopRef runLoop}, ${3:CFStringRef runLoopMode})"
    },
    {
      "trigger": "CFNetworkCopyProxiesForAutoConfigurationScript",
      "contents": "CFNetworkCopyProxiesForAutoConfigurationScript(${1:CFStringRef proxyAutoConfigurationScript}, ${2:CFURLRef targetURL}, ${3:CFErrorRef* error})"
    },
    {
      "trigger": "CFNetworkCopyProxiesForURL",
      "contents": "CFNetworkCopyProxiesForURL(${1:CFURLRef url}, ${2:CFDictionaryRef proxySettings})"
    },
    {
      "trigger": "CFNetworkExecuteProxyAutoConfigurationScript",
      "contents": "CFNetworkExecuteProxyAutoConfigurationScript(${1:CFStringRef proxyAutoConfigurationScript}, ${2:CFURLRef targetURL}, ${3:CFProxyAutoConfigurationResultCallback cb}, ${4:CFStreamClientContext* clientContext})"
    },
    {
      "trigger": "CFNetworkExecuteProxyAutoConfigurationURL",
      "contents": "CFNetworkExecuteProxyAutoConfigurationURL(${1:CFURLRef proxyAutoConfigURL}, ${2:CFURLRef targetURL}, ${3:CFProxyAutoConfigurationResultCallback cb}, ${4:CFStreamClientContext* clientContext})"
    },
    {
      "trigger": "CFNotificationCenterAddObserver",
      "contents": "CFNotificationCenterAddObserver(${1:CFNotificationCenterRef center}, ${2:void* observer}, ${3:CFNotificationCallback callBack}, ${4:CFStringRef name}, ${5:void* object}, ${6:CFNotificationSuspensionBehavior suspensionBehavior})"
    },
    {
      "trigger": "CFNotificationCenterPostNotification",
      "contents": "CFNotificationCenterPostNotification(${1:CFNotificationCenterRef center}, ${2:CFStringRef name}, ${3:void* object}, ${4:CFDictionaryRef userInfo}, ${5:Boolean deliverImmediately})"
    },
    {
      "trigger": "CFNotificationCenterPostNotificationWithOptions",
      "contents": "CFNotificationCenterPostNotificationWithOptions(${1:CFNotificationCenterRef center}, ${2:CFStringRef name}, ${3:void* object}, ${4:CFDictionaryRef userInfo}, ${5:CFOptionFlags options})"
    },
    {
      "trigger": "CFNotificationCenterRemoveEveryObserver",
      "contents": "CFNotificationCenterRemoveEveryObserver(${1:CFNotificationCenterRef center}, ${2:void* observer})"
    },
    {
      "trigger": "CFNotificationCenterRemoveObserver",
      "contents": "CFNotificationCenterRemoveObserver(${1:CFNotificationCenterRef center}, ${2:void* observer}, ${3:CFStringRef name}, ${4:void* object})"
    },
    {
      "trigger": "CFNotificationSuspensionBehaviorCoalesce (2)",
      "contents": "CFNotificationSuspensionBehaviorCoalesce"
    },
    {
      "trigger": "CFNotificationSuspensionBehaviorDeliverImmediately (4)",
      "contents": "CFNotificationSuspensionBehaviorDeliverImmediately"
    },
    {
      "trigger": "CFNotificationSuspensionBehaviorDrop (1)",
      "contents": "CFNotificationSuspensionBehaviorDrop"
    },
    {
      "trigger": "CFNotificationSuspensionBehaviorHold (3)",
      "contents": "CFNotificationSuspensionBehaviorHold"
    },
    {
      "trigger": "CFNumberCompare",
      "contents": "CFNumberCompare(${1:CFNumberRef number}, ${2:CFNumberRef otherNumber}, ${3:void* context})"
    },
    {
      "trigger": "CFNumberCreate",
      "contents": "CFNumberCreate(${1:CFAllocatorRef allocator}, ${2:CFNumberType theType}, ${3:void* valuePtr})"
    },
    {
      "trigger": "CFNumberFormatterCopyProperty",
      "contents": "CFNumberFormatterCopyProperty(${1:CFNumberFormatterRef formatter}, ${2:CFStringRef key})"
    },
    {
      "trigger": "CFNumberFormatterCreate",
      "contents": "CFNumberFormatterCreate(${1:CFAllocatorRef allocator}, ${2:CFLocaleRef locale}, ${3:CFNumberFormatterStyle style})"
    },
    {
      "trigger": "CFNumberFormatterCreateNumberFromString",
      "contents": "CFNumberFormatterCreateNumberFromString(${1:CFAllocatorRef allocator}, ${2:CFNumberFormatterRef formatter}, ${3:CFStringRef string}, ${4:CFRange* rangep}, ${5:CFOptionFlags options})"
    },
    {
      "trigger": "CFNumberFormatterCreateStringWithNumber",
      "contents": "CFNumberFormatterCreateStringWithNumber(${1:CFAllocatorRef allocator}, ${2:CFNumberFormatterRef formatter}, ${3:CFNumberRef number})"
    },
    {
      "trigger": "CFNumberFormatterCreateStringWithValue",
      "contents": "CFNumberFormatterCreateStringWithValue(${1:CFAllocatorRef allocator}, ${2:CFNumberFormatterRef formatter}, ${3:CFNumberType numberType}, ${4:void* valuePtr})"
    },
    {
      "trigger": "CFNumberFormatterGetDecimalInfoForCurrencyCode",
      "contents": "CFNumberFormatterGetDecimalInfoForCurrencyCode(${1:CFStringRef currencyCode}, ${2:int32_t* defaultFractionDigits}, ${3:double* roundingIncrement})"
    },
    {
      "trigger": "CFNumberFormatterGetFormat",
      "contents": "CFNumberFormatterGetFormat(${1:CFNumberFormatterRef formatter})"
    },
    {
      "trigger": "CFNumberFormatterGetLocale",
      "contents": "CFNumberFormatterGetLocale(${1:CFNumberFormatterRef formatter})"
    },
    {
      "trigger": "CFNumberFormatterGetStyle",
      "contents": "CFNumberFormatterGetStyle(${1:CFNumberFormatterRef formatter})"
    },
    {
      "trigger": "CFNumberFormatterGetValueFromString",
      "contents": "CFNumberFormatterGetValueFromString(${1:CFNumberFormatterRef formatter}, ${2:CFStringRef string}, ${3:CFRange* rangep}, ${4:CFNumberType numberType}, ${5:void* valuePtr})"
    },
    {
      "trigger": "CFNumberFormatterSetFormat",
      "contents": "CFNumberFormatterSetFormat(${1:CFNumberFormatterRef formatter}, ${2:CFStringRef formatString})"
    },
    {
      "trigger": "CFNumberFormatterSetProperty",
      "contents": "CFNumberFormatterSetProperty(${1:CFNumberFormatterRef formatter}, ${2:CFStringRef key}, ${3:CFTypeRef value})"
    },
    {
      "trigger": "CFNumberGetByteSize",
      "contents": "CFNumberGetByteSize(${1:CFNumberRef number})"
    },
    {
      "trigger": "CFNumberGetType",
      "contents": "CFNumberGetType(${1:CFNumberRef number})"
    },
    {
      "trigger": "CFNumberGetValue",
      "contents": "CFNumberGetValue(${1:CFNumberRef number}, ${2:CFNumberType theType}, ${3:void* valuePtr})"
    },
    {
      "trigger": "CFNumberIsFloatType",
      "contents": "CFNumberIsFloatType(${1:CFNumberRef number})"
    },
    {
      "trigger": "CFPlugInAddInstanceForFactory",
      "contents": "CFPlugInAddInstanceForFactory(${1:CFUUIDRef factoryID})"
    },
    {
      "trigger": "CFPlugInCreate",
      "contents": "CFPlugInCreate(${1:CFAllocatorRef allocator}, ${2:CFURLRef plugInURL})"
    },
    {
      "trigger": "CFPlugInFindFactoriesForPlugInType",
      "contents": "CFPlugInFindFactoriesForPlugInType(${1:CFUUIDRef typeUUID})"
    },
    {
      "trigger": "CFPlugInFindFactoriesForPlugInTypeInPlugIn",
      "contents": "CFPlugInFindFactoriesForPlugInTypeInPlugIn(${1:CFUUIDRef typeUUID}, ${2:CFPlugInRef plugIn})"
    },
    {
      "trigger": "CFPlugInGetBundle",
      "contents": "CFPlugInGetBundle(${1:CFPlugInRef plugIn})"
    },
    {
      "trigger": "CFPlugInInstanceCreate",
      "contents": "CFPlugInInstanceCreate(${1:CFAllocatorRef allocator}, ${2:CFUUIDRef factoryUUID}, ${3:CFUUIDRef typeUUID})"
    },
    {
      "trigger": "CFPlugInInstanceCreateWithInstanceDataSize",
      "contents": "CFPlugInInstanceCreateWithInstanceDataSize(${1:CFAllocatorRef allocator}, ${2:CFIndex instanceDataSize}, ${3:CFPlugInInstanceDeallocateInstanceDataFunction deallocateInstanceFunction}, ${4:CFStringRef factoryName}, ${5:CFPlugInInstanceGetInterfaceFunction getInterfaceFunction})"
    },
    {
      "trigger": "CFPlugInInstanceGetFactoryName",
      "contents": "CFPlugInInstanceGetFactoryName(${1:CFPlugInInstanceRef instance})"
    },
    {
      "trigger": "CFPlugInInstanceGetInstanceData",
      "contents": "CFPlugInInstanceGetInstanceData(${1:CFPlugInInstanceRef instance})"
    },
    {
      "trigger": "CFPlugInInstanceGetInterfaceFunctionTable",
      "contents": "CFPlugInInstanceGetInterfaceFunctionTable(${1:CFPlugInInstanceRef instance}, ${2:CFStringRef interfaceName}, ${3:void** ftbl})"
    },
    {
      "trigger": "CFPlugInIsLoadOnDemand",
      "contents": "CFPlugInIsLoadOnDemand(${1:CFPlugInRef plugIn})"
    },
    {
      "trigger": "CFPlugInRegisterFactoryFunction",
      "contents": "CFPlugInRegisterFactoryFunction(${1:CFUUIDRef factoryUUID}, ${2:CFPlugInFactoryFunction func})"
    },
    {
      "trigger": "CFPlugInRegisterFactoryFunctionByName",
      "contents": "CFPlugInRegisterFactoryFunctionByName(${1:CFUUIDRef factoryUUID}, ${2:CFPlugInRef plugIn}, ${3:CFStringRef functionName})"
    },
    {
      "trigger": "CFPlugInRegisterPlugInType",
      "contents": "CFPlugInRegisterPlugInType(${1:CFUUIDRef factoryUUID}, ${2:CFUUIDRef typeUUID})"
    },
    {
      "trigger": "CFPlugInRemoveInstanceForFactory",
      "contents": "CFPlugInRemoveInstanceForFactory(${1:CFUUIDRef factoryID})"
    },
    {
      "trigger": "CFPlugInSetLoadOnDemand",
      "contents": "CFPlugInSetLoadOnDemand(${1:CFPlugInRef plugIn}, ${2:Boolean flag})"
    },
    {
      "trigger": "CFPlugInUnregisterFactory",
      "contents": "CFPlugInUnregisterFactory(${1:CFUUIDRef factoryUUID})"
    },
    {
      "trigger": "CFPlugInUnregisterPlugInType",
      "contents": "CFPlugInUnregisterPlugInType(${1:CFUUIDRef factoryUUID}, ${2:CFUUIDRef typeUUID})"
    },
    {
      "trigger": "CFPreferencesAddSuitePreferencesToApp",
      "contents": "CFPreferencesAddSuitePreferencesToApp(${1:CFStringRef applicationID}, ${2:CFStringRef suiteID})"
    },
    {
      "trigger": "CFPreferencesAppSynchronize",
      "contents": "CFPreferencesAppSynchronize(${1:CFStringRef applicationID})"
    },
    {
      "trigger": "CFPreferencesAppValueIsForced",
      "contents": "CFPreferencesAppValueIsForced(${1:CFStringRef key}, ${2:CFStringRef applicationID})"
    },
    {
      "trigger": "CFPreferencesCopyAppValue",
      "contents": "CFPreferencesCopyAppValue(${1:CFStringRef key}, ${2:CFStringRef applicationID})"
    },
    {
      "trigger": "CFPreferencesCopyApplicationList",
      "contents": "CFPreferencesCopyApplicationList(${1:CFStringRef userName}, ${2:CFStringRef hostName})"
    },
    {
      "trigger": "CFPreferencesCopyKeyList",
      "contents": "CFPreferencesCopyKeyList(${1:CFStringRef applicationID}, ${2:CFStringRef userName}, ${3:CFStringRef hostName})"
    },
    {
      "trigger": "CFPreferencesCopyMultiple",
      "contents": "CFPreferencesCopyMultiple(${1:CFArrayRef keysToFetch}, ${2:CFStringRef applicationID}, ${3:CFStringRef userName}, ${4:CFStringRef hostName})"
    },
    {
      "trigger": "CFPreferencesCopyValue",
      "contents": "CFPreferencesCopyValue(${1:CFStringRef key}, ${2:CFStringRef applicationID}, ${3:CFStringRef userName}, ${4:CFStringRef hostName})"
    },
    {
      "trigger": "CFPreferencesGetAppBooleanValue",
      "contents": "CFPreferencesGetAppBooleanValue(${1:CFStringRef key}, ${2:CFStringRef applicationID}, ${3:Boolean* keyExistsAndHasValidFormat})"
    },
    {
      "trigger": "CFPreferencesGetAppIntegerValue",
      "contents": "CFPreferencesGetAppIntegerValue(${1:CFStringRef key}, ${2:CFStringRef applicationID}, ${3:Boolean* keyExistsAndHasValidFormat})"
    },
    {
      "trigger": "CFPreferencesRemoveSuitePreferencesFromApp",
      "contents": "CFPreferencesRemoveSuitePreferencesFromApp(${1:CFStringRef applicationID}, ${2:CFStringRef suiteID})"
    },
    {
      "trigger": "CFPreferencesSetAppValue",
      "contents": "CFPreferencesSetAppValue(${1:CFStringRef key}, ${2:CFPropertyListRef value}, ${3:CFStringRef applicationID})"
    },
    {
      "trigger": "CFPreferencesSetMultiple",
      "contents": "CFPreferencesSetMultiple(${1:CFDictionaryRef keysToSet}, ${2:CFArrayRef keysToRemove}, ${3:CFStringRef applicationID}, ${4:CFStringRef userName}, ${5:CFStringRef hostName})"
    },
    {
      "trigger": "CFPreferencesSetValue",
      "contents": "CFPreferencesSetValue(${1:CFStringRef key}, ${2:CFPropertyListRef value}, ${3:CFStringRef applicationID}, ${4:CFStringRef userName}, ${5:CFStringRef hostName})"
    },
    {
      "trigger": "CFPreferencesSynchronize",
      "contents": "CFPreferencesSynchronize(${1:CFStringRef applicationID}, ${2:CFStringRef userName}, ${3:CFStringRef hostName})"
    },
    {
      "trigger": "CFPropertyListCreateData",
      "contents": "CFPropertyListCreateData(${1:CFAllocatorRef allocator}, ${2:CFPropertyListRef propertyList}, ${3:CFPropertyListFormat format}, ${4:CFOptionFlags options}, ${5:CFErrorRef* error})"
    },
    {
      "trigger": "CFPropertyListCreateDeepCopy",
      "contents": "CFPropertyListCreateDeepCopy(${1:CFAllocatorRef allocator}, ${2:CFPropertyListRef propertyList}, ${3:CFOptionFlags mutabilityOption})"
    },
    {
      "trigger": "CFPropertyListCreateFromStream",
      "contents": "CFPropertyListCreateFromStream(${1:CFAllocatorRef allocator}, ${2:CFReadStreamRef stream}, ${3:CFIndex streamLength}, ${4:CFOptionFlags mutabilityOption}, ${5:CFPropertyListFormat* format}, ${6:CFStringRef* errorString})"
    },
    {
      "trigger": "CFPropertyListCreateFromXMLData",
      "contents": "CFPropertyListCreateFromXMLData(${1:CFAllocatorRef allocator}, ${2:CFDataRef xmlData}, ${3:CFOptionFlags mutabilityOption}, ${4:CFStringRef* errorString})"
    },
    {
      "trigger": "CFPropertyListCreateWithData",
      "contents": "CFPropertyListCreateWithData(${1:CFAllocatorRef allocator}, ${2:CFDataRef data}, ${3:CFOptionFlags options}, ${4:CFPropertyListFormat* format}, ${5:CFErrorRef* error})"
    },
    {
      "trigger": "CFPropertyListCreateWithStream",
      "contents": "CFPropertyListCreateWithStream(${1:CFAllocatorRef allocator}, ${2:CFReadStreamRef stream}, ${3:CFIndex streamLength}, ${4:CFOptionFlags options}, ${5:CFPropertyListFormat* format}, ${6:CFErrorRef* error})"
    },
    {
      "trigger": "CFPropertyListCreateXMLData",
      "contents": "CFPropertyListCreateXMLData(${1:CFAllocatorRef allocator}, ${2:CFPropertyListRef propertyList})"
    },
    {
      "trigger": "CFPropertyListIsValid",
      "contents": "CFPropertyListIsValid(${1:CFPropertyListRef plist}, ${2:CFPropertyListFormat format})"
    },
    {
      "trigger": "CFPropertyListWrite",
      "contents": "CFPropertyListWrite(${1:CFPropertyListRef propertyList}, ${2:CFWriteStreamRef stream}, ${3:CFPropertyListFormat format}, ${4:CFOptionFlags options}, ${5:CFErrorRef* error})"
    },
    {
      "trigger": "CFPropertyListWriteToStream",
      "contents": "CFPropertyListWriteToStream(${1:CFPropertyListRef propertyList}, ${2:CFWriteStreamRef stream}, ${3:CFPropertyListFormat format}, ${4:CFStringRef* errorString})"
    },
    {
      "trigger": "CFRangeMake",
      "contents": "CFRangeMake(${1:CFIndex loc}, ${2:CFIndex len})"
    },
    {
      "trigger": "CFReadStreamClose",
      "contents": "CFReadStreamClose(${1:CFReadStreamRef stream})"
    },
    {
      "trigger": "CFReadStreamCopyError",
      "contents": "CFReadStreamCopyError(${1:CFReadStreamRef stream})"
    },
    {
      "trigger": "CFReadStreamCopyProperty",
      "contents": "CFReadStreamCopyProperty(${1:CFReadStreamRef stream}, ${2:CFStringRef propertyName})"
    },
    {
      "trigger": "CFReadStreamCreateForHTTPRequest",
      "contents": "CFReadStreamCreateForHTTPRequest(${1:CFAllocatorRef alloc}, ${2:CFHTTPMessageRef request})"
    },
    {
      "trigger": "CFReadStreamCreateForStreamedHTTPRequest",
      "contents": "CFReadStreamCreateForStreamedHTTPRequest(${1:CFAllocatorRef alloc}, ${2:CFHTTPMessageRef requestHeaders}, ${3:CFReadStreamRef requestBody})"
    },
    {
      "trigger": "CFReadStreamCreateWithBytesNoCopy",
      "contents": "CFReadStreamCreateWithBytesNoCopy(${1:CFAllocatorRef alloc}, ${2:UInt8* bytes}, ${3:CFIndex length}, ${4:CFAllocatorRef bytesDeallocator})"
    },
    {
      "trigger": "CFReadStreamCreateWithFTPURL",
      "contents": "CFReadStreamCreateWithFTPURL(${1:CFAllocatorRef alloc}, ${2:CFURLRef ftpURL})"
    },
    {
      "trigger": "CFReadStreamCreateWithFile",
      "contents": "CFReadStreamCreateWithFile(${1:CFAllocatorRef alloc}, ${2:CFURLRef fileURL})"
    },
    {
      "trigger": "CFReadStreamGetBuffer",
      "contents": "CFReadStreamGetBuffer(${1:CFReadStreamRef stream}, ${2:CFIndex maxBytesToRead}, ${3:CFIndex* numBytesRead})"
    },
    {
      "trigger": "CFReadStreamGetError",
      "contents": "CFReadStreamGetError(${1:CFReadStreamRef stream})"
    },
    {
      "trigger": "CFReadStreamGetStatus",
      "contents": "CFReadStreamGetStatus(${1:CFReadStreamRef stream})"
    },
    {
      "trigger": "CFReadStreamHasBytesAvailable",
      "contents": "CFReadStreamHasBytesAvailable(${1:CFReadStreamRef stream})"
    },
    {
      "trigger": "CFReadStreamOpen",
      "contents": "CFReadStreamOpen(${1:CFReadStreamRef stream})"
    },
    {
      "trigger": "CFReadStreamRead",
      "contents": "CFReadStreamRead(${1:CFReadStreamRef stream}, ${2:UInt8* buffer}, ${3:CFIndex bufferLength})"
    },
    {
      "trigger": "CFReadStreamScheduleWithRunLoop",
      "contents": "CFReadStreamScheduleWithRunLoop(${1:CFReadStreamRef stream}, ${2:CFRunLoopRef runLoop}, ${3:CFStringRef runLoopMode})"
    },
    {
      "trigger": "CFReadStreamSetClient",
      "contents": "CFReadStreamSetClient(${1:CFReadStreamRef stream}, ${2:CFOptionFlags streamEvents}, ${3:CFReadStreamClientCallBack clientCB}, ${4:CFStreamClientContext* clientContext})"
    },
    {
      "trigger": "CFReadStreamSetProperty",
      "contents": "CFReadStreamSetProperty(${1:CFReadStreamRef stream}, ${2:CFStringRef propertyName}, ${3:CFTypeRef propertyValue})"
    },
    {
      "trigger": "CFReadStreamUnscheduleFromRunLoop",
      "contents": "CFReadStreamUnscheduleFromRunLoop(${1:CFReadStreamRef stream}, ${2:CFRunLoopRef runLoop}, ${3:CFStringRef runLoopMode})"
    },
    {
      "trigger": "CFRelease",
      "contents": "CFRelease(${1:CFTypeRef cf})"
    },
    {
      "trigger": "CFRetain",
      "contents": "CFRetain(${1:CFTypeRef cf})"
    },
    {
      "trigger": "CFRunLoopAddCommonMode",
      "contents": "CFRunLoopAddCommonMode(${1:CFRunLoopRef rl}, ${2:CFStringRef mode})"
    },
    {
      "trigger": "CFRunLoopAddObserver",
      "contents": "CFRunLoopAddObserver(${1:CFRunLoopRef rl}, ${2:CFRunLoopObserverRef observer}, ${3:CFStringRef mode})"
    },
    {
      "trigger": "CFRunLoopAddSource",
      "contents": "CFRunLoopAddSource(${1:CFRunLoopRef rl}, ${2:CFRunLoopSourceRef source}, ${3:CFStringRef mode})"
    },
    {
      "trigger": "CFRunLoopAddTimer",
      "contents": "CFRunLoopAddTimer(${1:CFRunLoopRef rl}, ${2:CFRunLoopTimerRef timer}, ${3:CFStringRef mode})"
    },
    {
      "trigger": "CFRunLoopContainsObserver",
      "contents": "CFRunLoopContainsObserver(${1:CFRunLoopRef rl}, ${2:CFRunLoopObserverRef observer}, ${3:CFStringRef mode})"
    },
    {
      "trigger": "CFRunLoopContainsSource",
      "contents": "CFRunLoopContainsSource(${1:CFRunLoopRef rl}, ${2:CFRunLoopSourceRef source}, ${3:CFStringRef mode})"
    },
    {
      "trigger": "CFRunLoopContainsTimer",
      "contents": "CFRunLoopContainsTimer(${1:CFRunLoopRef rl}, ${2:CFRunLoopTimerRef timer}, ${3:CFStringRef mode})"
    },
    {
      "trigger": "CFRunLoopCopyAllModes",
      "contents": "CFRunLoopCopyAllModes(${1:CFRunLoopRef rl})"
    },
    {
      "trigger": "CFRunLoopCopyCurrentMode",
      "contents": "CFRunLoopCopyCurrentMode(${1:CFRunLoopRef rl})"
    },
    {
      "trigger": "CFRunLoopGetNextTimerFireDate",
      "contents": "CFRunLoopGetNextTimerFireDate(${1:CFRunLoopRef rl}, ${2:CFStringRef mode})"
    },
    {
      "trigger": "CFRunLoopIsWaiting",
      "contents": "CFRunLoopIsWaiting(${1:CFRunLoopRef rl})"
    },
    {
      "trigger": "CFRunLoopObserverCreate",
      "contents": "CFRunLoopObserverCreate(${1:CFAllocatorRef allocator}, ${2:CFOptionFlags activities}, ${3:Boolean repeats}, ${4:CFIndex order}, ${5:CFRunLoopObserverCallBack callout}, ${6:CFRunLoopObserverContext* context})"
    },
    {
      "trigger": "CFRunLoopObserverCreateWithHandler",
      "contents": "CFRunLoopObserverCreateWithHandler(${1:CFAllocatorRef allocator}, ${2:CFOptionFlags activities}, ${3:Boolean repeats}, ${4:CFIndex order}, ${5:void (^)(CFRunLoopObserverRef, CFRunLoopActivity) block})"
    },
    {
      "trigger": "CFRunLoopObserverDoesRepeat",
      "contents": "CFRunLoopObserverDoesRepeat(${1:CFRunLoopObserverRef observer})"
    },
    {
      "trigger": "CFRunLoopObserverGetActivities",
      "contents": "CFRunLoopObserverGetActivities(${1:CFRunLoopObserverRef observer})"
    },
    {
      "trigger": "CFRunLoopObserverGetContext",
      "contents": "CFRunLoopObserverGetContext(${1:CFRunLoopObserverRef observer}, ${2:CFRunLoopObserverContext* context})"
    },
    {
      "trigger": "CFRunLoopObserverGetOrder",
      "contents": "CFRunLoopObserverGetOrder(${1:CFRunLoopObserverRef observer})"
    },
    {
      "trigger": "CFRunLoopObserverInvalidate",
      "contents": "CFRunLoopObserverInvalidate(${1:CFRunLoopObserverRef observer})"
    },
    {
      "trigger": "CFRunLoopObserverIsValid",
      "contents": "CFRunLoopObserverIsValid(${1:CFRunLoopObserverRef observer})"
    },
    {
      "trigger": "CFRunLoopPerformBlock",
      "contents": "CFRunLoopPerformBlock(${1:CFRunLoopRef rl}, ${2:CFTypeRef mode}, ${3:void (^)(void) block})"
    },
    {
      "trigger": "CFRunLoopRemoveObserver",
      "contents": "CFRunLoopRemoveObserver(${1:CFRunLoopRef rl}, ${2:CFRunLoopObserverRef observer}, ${3:CFStringRef mode})"
    },
    {
      "trigger": "CFRunLoopRemoveSource",
      "contents": "CFRunLoopRemoveSource(${1:CFRunLoopRef rl}, ${2:CFRunLoopSourceRef source}, ${3:CFStringRef mode})"
    },
    {
      "trigger": "CFRunLoopRemoveTimer",
      "contents": "CFRunLoopRemoveTimer(${1:CFRunLoopRef rl}, ${2:CFRunLoopTimerRef timer}, ${3:CFStringRef mode})"
    },
    {
      "trigger": "CFRunLoopRunInMode",
      "contents": "CFRunLoopRunInMode(${1:CFStringRef mode}, ${2:CFTimeInterval seconds}, ${3:Boolean returnAfterSourceHandled})"
    },
    {
      "trigger": "CFRunLoopSourceCreate",
      "contents": "CFRunLoopSourceCreate(${1:CFAllocatorRef allocator}, ${2:CFIndex order}, ${3:CFRunLoopSourceContext* context})"
    },
    {
      "trigger": "CFRunLoopSourceGetContext",
      "contents": "CFRunLoopSourceGetContext(${1:CFRunLoopSourceRef source}, ${2:CFRunLoopSourceContext* context})"
    },
    {
      "trigger": "CFRunLoopSourceGetOrder",
      "contents": "CFRunLoopSourceGetOrder(${1:CFRunLoopSourceRef source})"
    },
    {
      "trigger": "CFRunLoopSourceInvalidate",
      "contents": "CFRunLoopSourceInvalidate(${1:CFRunLoopSourceRef source})"
    },
    {
      "trigger": "CFRunLoopSourceIsValid",
      "contents": "CFRunLoopSourceIsValid(${1:CFRunLoopSourceRef source})"
    },
    {
      "trigger": "CFRunLoopSourceSignal",
      "contents": "CFRunLoopSourceSignal(${1:CFRunLoopSourceRef source})"
    },
    {
      "trigger": "CFRunLoopStop",
      "contents": "CFRunLoopStop(${1:CFRunLoopRef rl})"
    },
    {
      "trigger": "CFRunLoopTimerCreate",
      "contents": "CFRunLoopTimerCreate(${1:CFAllocatorRef allocator}, ${2:CFAbsoluteTime fireDate}, ${3:CFTimeInterval interval}, ${4:CFOptionFlags flags}, ${5:CFIndex order}, ${6:CFRunLoopTimerCallBack callout}, ${7:CFRunLoopTimerContext* context})"
    },
    {
      "trigger": "CFRunLoopTimerCreateWithHandler",
      "contents": "CFRunLoopTimerCreateWithHandler(${1:CFAllocatorRef allocator}, ${2:CFAbsoluteTime fireDate}, ${3:CFTimeInterval interval}, ${4:CFOptionFlags flags}, ${5:CFIndex order}, ${6:void (^)(CFRunLoopTimerRef) block})"
    },
    {
      "trigger": "CFRunLoopTimerDoesRepeat",
      "contents": "CFRunLoopTimerDoesRepeat(${1:CFRunLoopTimerRef timer})"
    },
    {
      "trigger": "CFRunLoopTimerGetContext",
      "contents": "CFRunLoopTimerGetContext(${1:CFRunLoopTimerRef timer}, ${2:CFRunLoopTimerContext* context})"
    },
    {
      "trigger": "CFRunLoopTimerGetInterval",
      "contents": "CFRunLoopTimerGetInterval(${1:CFRunLoopTimerRef timer})"
    },
    {
      "trigger": "CFRunLoopTimerGetNextFireDate",
      "contents": "CFRunLoopTimerGetNextFireDate(${1:CFRunLoopTimerRef timer})"
    },
    {
      "trigger": "CFRunLoopTimerGetOrder",
      "contents": "CFRunLoopTimerGetOrder(${1:CFRunLoopTimerRef timer})"
    },
    {
      "trigger": "CFRunLoopTimerInvalidate",
      "contents": "CFRunLoopTimerInvalidate(${1:CFRunLoopTimerRef timer})"
    },
    {
      "trigger": "CFRunLoopTimerIsValid",
      "contents": "CFRunLoopTimerIsValid(${1:CFRunLoopTimerRef timer})"
    },
    {
      "trigger": "CFRunLoopTimerSetNextFireDate",
      "contents": "CFRunLoopTimerSetNextFireDate(${1:CFRunLoopTimerRef timer}, ${2:CFAbsoluteTime fireDate})"
    },
    {
      "trigger": "CFRunLoopWakeUp",
      "contents": "CFRunLoopWakeUp(${1:CFRunLoopRef rl})"
    },
    {
      "trigger": "CFSetAddValue",
      "contents": "CFSetAddValue(${1:CFMutableSetRef theSet}, ${2:void* value})"
    },
    {
      "trigger": "CFSetApplyFunction",
      "contents": "CFSetApplyFunction(${1:CFSetRef theSet}, ${2:CFSetApplierFunction applier}, ${3:void* context})"
    },
    {
      "trigger": "CFSetContainsValue",
      "contents": "CFSetContainsValue(${1:CFSetRef theSet}, ${2:void* value})"
    },
    {
      "trigger": "CFSetCreate",
      "contents": "CFSetCreate(${1:CFAllocatorRef allocator}, ${2:void** values}, ${3:CFIndex numValues}, ${4:CFSetCallBacks* callBacks})"
    },
    {
      "trigger": "CFSetCreateCopy",
      "contents": "CFSetCreateCopy(${1:CFAllocatorRef allocator}, ${2:CFSetRef theSet})"
    },
    {
      "trigger": "CFSetCreateMutable",
      "contents": "CFSetCreateMutable(${1:CFAllocatorRef allocator}, ${2:CFIndex capacity}, ${3:CFSetCallBacks* callBacks})"
    },
    {
      "trigger": "CFSetCreateMutableCopy",
      "contents": "CFSetCreateMutableCopy(${1:CFAllocatorRef allocator}, ${2:CFIndex capacity}, ${3:CFSetRef theSet})"
    },
    {
      "trigger": "CFSetGetCount",
      "contents": "CFSetGetCount(${1:CFSetRef theSet})"
    },
    {
      "trigger": "CFSetGetCountOfValue",
      "contents": "CFSetGetCountOfValue(${1:CFSetRef theSet}, ${2:void* value})"
    },
    {
      "trigger": "CFSetGetValue",
      "contents": "CFSetGetValue(${1:CFSetRef theSet}, ${2:void* value})"
    },
    {
      "trigger": "CFSetGetValueIfPresent",
      "contents": "CFSetGetValueIfPresent(${1:CFSetRef theSet}, ${2:void* candidate}, ${3:void** value})"
    },
    {
      "trigger": "CFSetGetValues",
      "contents": "CFSetGetValues(${1:CFSetRef theSet}, ${2:void** values})"
    },
    {
      "trigger": "CFSetRemoveAllValues",
      "contents": "CFSetRemoveAllValues(${1:CFMutableSetRef theSet})"
    },
    {
      "trigger": "CFSetRemoveValue",
      "contents": "CFSetRemoveValue(${1:CFMutableSetRef theSet}, ${2:void* value})"
    },
    {
      "trigger": "CFSetReplaceValue",
      "contents": "CFSetReplaceValue(${1:CFMutableSetRef theSet}, ${2:void* value})"
    },
    {
      "trigger": "CFSetSetValue",
      "contents": "CFSetSetValue(${1:CFMutableSetRef theSet}, ${2:void* value})"
    },
    {
      "trigger": "CFShow",
      "contents": "CFShow(${1:CFTypeRef obj})"
    },
    {
      "trigger": "CFShowStr",
      "contents": "CFShowStr(${1:CFStringRef str})"
    },
    {
      "trigger": "CFSocketConnectToAddress",
      "contents": "CFSocketConnectToAddress(${1:CFSocketRef s}, ${2:CFDataRef address}, ${3:CFTimeInterval timeout})"
    },
    {
      "trigger": "CFSocketCopyAddress",
      "contents": "CFSocketCopyAddress(${1:CFSocketRef s})"
    },
    {
      "trigger": "CFSocketCopyPeerAddress",
      "contents": "CFSocketCopyPeerAddress(${1:CFSocketRef s})"
    },
    {
      "trigger": "CFSocketCopyRegisteredSocketSignature",
      "contents": "CFSocketCopyRegisteredSocketSignature(${1:CFSocketSignature* nameServerSignature}, ${2:CFTimeInterval timeout}, ${3:CFStringRef name}, ${4:CFSocketSignature* signature}, ${5:CFDataRef* nameServerAddress})"
    },
    {
      "trigger": "CFSocketCopyRegisteredValue",
      "contents": "CFSocketCopyRegisteredValue(${1:CFSocketSignature* nameServerSignature}, ${2:CFTimeInterval timeout}, ${3:CFStringRef name}, ${4:CFPropertyListRef* value}, ${5:CFDataRef* nameServerAddress})"
    },
    {
      "trigger": "CFSocketCreate",
      "contents": "CFSocketCreate(${1:CFAllocatorRef allocator}, ${2:SInt32 protocolFamily}, ${3:SInt32 socketType}, ${4:SInt32 protocol}, ${5:CFOptionFlags callBackTypes}, ${6:CFSocketCallBack callout}, ${7:CFSocketContext* context})"
    },
    {
      "trigger": "CFSocketCreateConnectedToSocketSignature",
      "contents": "CFSocketCreateConnectedToSocketSignature(${1:CFAllocatorRef allocator}, ${2:CFSocketSignature* signature}, ${3:CFOptionFlags callBackTypes}, ${4:CFSocketCallBack callout}, ${5:CFSocketContext* context}, ${6:CFTimeInterval timeout})"
    },
    {
      "trigger": "CFSocketCreateRunLoopSource",
      "contents": "CFSocketCreateRunLoopSource(${1:CFAllocatorRef allocator}, ${2:CFSocketRef s}, ${3:CFIndex order})"
    },
    {
      "trigger": "CFSocketCreateWithNative",
      "contents": "CFSocketCreateWithNative(${1:CFAllocatorRef allocator}, ${2:CFSocketNativeHandle sock}, ${3:CFOptionFlags callBackTypes}, ${4:CFSocketCallBack callout}, ${5:CFSocketContext* context})"
    },
    {
      "trigger": "CFSocketCreateWithSocketSignature",
      "contents": "CFSocketCreateWithSocketSignature(${1:CFAllocatorRef allocator}, ${2:CFSocketSignature* signature}, ${3:CFOptionFlags callBackTypes}, ${4:CFSocketCallBack callout}, ${5:CFSocketContext* context})"
    },
    {
      "trigger": "CFSocketDisableCallBacks",
      "contents": "CFSocketDisableCallBacks(${1:CFSocketRef s}, ${2:CFOptionFlags callBackTypes})"
    },
    {
      "trigger": "CFSocketEnableCallBacks",
      "contents": "CFSocketEnableCallBacks(${1:CFSocketRef s}, ${2:CFOptionFlags callBackTypes})"
    },
    {
      "trigger": "CFSocketGetContext",
      "contents": "CFSocketGetContext(${1:CFSocketRef s}, ${2:CFSocketContext* context})"
    },
    {
      "trigger": "CFSocketGetNative",
      "contents": "CFSocketGetNative(${1:CFSocketRef s})"
    },
    {
      "trigger": "CFSocketGetSocketFlags",
      "contents": "CFSocketGetSocketFlags(${1:CFSocketRef s})"
    },
    {
      "trigger": "CFSocketInvalidate",
      "contents": "CFSocketInvalidate(${1:CFSocketRef s})"
    },
    {
      "trigger": "CFSocketIsValid",
      "contents": "CFSocketIsValid(${1:CFSocketRef s})"
    },
    {
      "trigger": "CFSocketRegisterSocketSignature",
      "contents": "CFSocketRegisterSocketSignature(${1:CFSocketSignature* nameServerSignature}, ${2:CFTimeInterval timeout}, ${3:CFStringRef name}, ${4:CFSocketSignature* signature})"
    },
    {
      "trigger": "CFSocketRegisterValue",
      "contents": "CFSocketRegisterValue(${1:CFSocketSignature* nameServerSignature}, ${2:CFTimeInterval timeout}, ${3:CFStringRef name}, ${4:CFPropertyListRef value})"
    },
    {
      "trigger": "CFSocketSendData",
      "contents": "CFSocketSendData(${1:CFSocketRef s}, ${2:CFDataRef address}, ${3:CFDataRef data}, ${4:CFTimeInterval timeout})"
    },
    {
      "trigger": "CFSocketSetAddress",
      "contents": "CFSocketSetAddress(${1:CFSocketRef s}, ${2:CFDataRef address})"
    },
    {
      "trigger": "CFSocketSetDefaultNameRegistryPortNumber",
      "contents": "CFSocketSetDefaultNameRegistryPortNumber(${1:UInt16 port})"
    },
    {
      "trigger": "CFSocketSetSocketFlags",
      "contents": "CFSocketSetSocketFlags(${1:CFSocketRef s}, ${2:CFOptionFlags flags})"
    },
    {
      "trigger": "CFSocketStreamSOCKSGetError",
      "contents": "CFSocketStreamSOCKSGetError(${1:CFStreamError* error})"
    },
    {
      "trigger": "CFSocketStreamSOCKSGetErrorSubdomain",
      "contents": "CFSocketStreamSOCKSGetErrorSubdomain(${1:CFStreamError* error})"
    },
    {
      "trigger": "CFSocketUnregister",
      "contents": "CFSocketUnregister(${1:CFSocketSignature* nameServerSignature}, ${2:CFTimeInterval timeout}, ${3:CFStringRef name})"
    },
    {
      "trigger": "CFStreamCreateBoundPair",
      "contents": "CFStreamCreateBoundPair(${1:CFAllocatorRef alloc}, ${2:CFReadStreamRef* readStream}, ${3:CFWriteStreamRef* writeStream}, ${4:CFIndex transferBufferSize})"
    },
    {
      "trigger": "CFStreamCreatePairWithPeerSocketSignature",
      "contents": "CFStreamCreatePairWithPeerSocketSignature(${1:CFAllocatorRef alloc}, ${2:CFSocketSignature* signature}, ${3:CFReadStreamRef* readStream}, ${4:CFWriteStreamRef* writeStream})"
    },
    {
      "trigger": "CFStreamCreatePairWithSocket",
      "contents": "CFStreamCreatePairWithSocket(${1:CFAllocatorRef alloc}, ${2:CFSocketNativeHandle sock}, ${3:CFReadStreamRef* readStream}, ${4:CFWriteStreamRef* writeStream})"
    },
    {
      "trigger": "CFStreamCreatePairWithSocketToCFHost",
      "contents": "CFStreamCreatePairWithSocketToCFHost(${1:CFAllocatorRef alloc}, ${2:CFHostRef host}, ${3:SInt32 port}, ${4:CFReadStreamRef* readStream}, ${5:CFWriteStreamRef* writeStream})"
    },
    {
      "trigger": "CFStreamCreatePairWithSocketToHost",
      "contents": "CFStreamCreatePairWithSocketToHost(${1:CFAllocatorRef alloc}, ${2:CFStringRef host}, ${3:UInt32 port}, ${4:CFReadStreamRef* readStream}, ${5:CFWriteStreamRef* writeStream})"
    },
    {
      "trigger": "CFStreamCreatePairWithSocketToNetService",
      "contents": "CFStreamCreatePairWithSocketToNetService(${1:CFAllocatorRef alloc}, ${2:CFNetServiceRef service}, ${3:CFReadStreamRef* readStream}, ${4:CFWriteStreamRef* writeStream})"
    },
    {
      "trigger": "CFStringAppend",
      "contents": "CFStringAppend(${1:CFMutableStringRef theString}, ${2:CFStringRef appendedString})"
    },
    {
      "trigger": "CFStringAppendCString",
      "contents": "CFStringAppendCString(${1:CFMutableStringRef theString}, ${2:char* cStr}, ${3:CFStringEncoding encoding})"
    },
    {
      "trigger": "CFStringAppendCharacters",
      "contents": "CFStringAppendCharacters(${1:CFMutableStringRef theString}, ${2:UniChar* chars}, ${3:CFIndex numChars})"
    },
    {
      "trigger": "CFStringAppendFormat",
      "contents": "CFStringAppendFormat(${1:CFMutableStringRef theString}, ${2:CFDictionaryRef formatOptions}, ${3:CFStringRef format})"
    },
    {
      "trigger": "CFStringAppendFormatAndArguments",
      "contents": "CFStringAppendFormatAndArguments(${1:CFMutableStringRef theString}, ${2:CFDictionaryRef formatOptions}, ${3:CFStringRef format}, ${4:va_list arguments})"
    },
    {
      "trigger": "CFStringAppendPascalString",
      "contents": "CFStringAppendPascalString(${1:CFMutableStringRef theString}, ${2:ConstStr255Param pStr}, ${3:CFStringEncoding encoding})"
    },
    {
      "trigger": "CFStringCapitalize",
      "contents": "CFStringCapitalize(${1:CFMutableStringRef theString}, ${2:CFLocaleRef locale})"
    },
    {
      "trigger": "CFStringCompare",
      "contents": "CFStringCompare(${1:CFStringRef theString1}, ${2:CFStringRef theString2}, ${3:CFStringCompareFlags compareOptions})"
    },
    {
      "trigger": "CFStringCompareWithOptions",
      "contents": "CFStringCompareWithOptions(${1:CFStringRef theString1}, ${2:CFStringRef theString2}, ${3:CFRange rangeToCompare}, ${4:CFStringCompareFlags compareOptions})"
    },
    {
      "trigger": "CFStringCompareWithOptionsAndLocale",
      "contents": "CFStringCompareWithOptionsAndLocale(${1:CFStringRef theString1}, ${2:CFStringRef theString2}, ${3:CFRange rangeToCompare}, ${4:CFStringCompareFlags compareOptions}, ${5:CFLocaleRef locale})"
    },
    {
      "trigger": "CFStringConvertEncodingToIANACharSetName",
      "contents": "CFStringConvertEncodingToIANACharSetName(${1:CFStringEncoding encoding})"
    },
    {
      "trigger": "CFStringConvertEncodingToNSStringEncoding",
      "contents": "CFStringConvertEncodingToNSStringEncoding(${1:CFStringEncoding encoding})"
    },
    {
      "trigger": "CFStringConvertEncodingToWindowsCodepage",
      "contents": "CFStringConvertEncodingToWindowsCodepage(${1:CFStringEncoding encoding})"
    },
    {
      "trigger": "CFStringConvertIANACharSetNameToEncoding",
      "contents": "CFStringConvertIANACharSetNameToEncoding(${1:CFStringRef theString})"
    },
    {
      "trigger": "CFStringConvertNSStringEncodingToEncoding",
      "contents": "CFStringConvertNSStringEncodingToEncoding(${1:unsigned long encoding})"
    },
    {
      "trigger": "CFStringConvertWindowsCodepageToEncoding",
      "contents": "CFStringConvertWindowsCodepageToEncoding(${1:UInt32 codepage})"
    },
    {
      "trigger": "CFStringCreateArrayBySeparatingStrings",
      "contents": "CFStringCreateArrayBySeparatingStrings(${1:CFAllocatorRef alloc}, ${2:CFStringRef theString}, ${3:CFStringRef separatorString})"
    },
    {
      "trigger": "CFStringCreateArrayWithFindResults",
      "contents": "CFStringCreateArrayWithFindResults(${1:CFAllocatorRef alloc}, ${2:CFStringRef theString}, ${3:CFStringRef stringToFind}, ${4:CFRange rangeToSearch}, ${5:CFStringCompareFlags compareOptions})"
    },
    {
      "trigger": "CFStringCreateByCombiningStrings",
      "contents": "CFStringCreateByCombiningStrings(${1:CFAllocatorRef alloc}, ${2:CFArrayRef theArray}, ${3:CFStringRef separatorString})"
    },
    {
      "trigger": "CFStringCreateCopy",
      "contents": "CFStringCreateCopy(${1:CFAllocatorRef alloc}, ${2:CFStringRef theString})"
    },
    {
      "trigger": "CFStringCreateExternalRepresentation",
      "contents": "CFStringCreateExternalRepresentation(${1:CFAllocatorRef alloc}, ${2:CFStringRef theString}, ${3:CFStringEncoding encoding}, ${4:UInt8 lossByte})"
    },
    {
      "trigger": "CFStringCreateFromExternalRepresentation",
      "contents": "CFStringCreateFromExternalRepresentation(${1:CFAllocatorRef alloc}, ${2:CFDataRef data}, ${3:CFStringEncoding encoding})"
    },
    {
      "trigger": "CFStringCreateMutable",
      "contents": "CFStringCreateMutable(${1:CFAllocatorRef alloc}, ${2:CFIndex maxLength})"
    },
    {
      "trigger": "CFStringCreateMutableCopy",
      "contents": "CFStringCreateMutableCopy(${1:CFAllocatorRef alloc}, ${2:CFIndex maxLength}, ${3:CFStringRef theString})"
    },
    {
      "trigger": "CFStringCreateMutableWithExternalCharactersNoCopy",
      "contents": "CFStringCreateMutableWithExternalCharactersNoCopy(${1:CFAllocatorRef alloc}, ${2:UniChar* chars}, ${3:CFIndex numChars}, ${4:CFIndex capacity}, ${5:CFAllocatorRef externalCharactersAllocator})"
    },
    {
      "trigger": "CFStringCreateWithBytes",
      "contents": "CFStringCreateWithBytes(${1:CFAllocatorRef alloc}, ${2:UInt8* bytes}, ${3:CFIndex numBytes}, ${4:CFStringEncoding encoding}, ${5:Boolean isExternalRepresentation})"
    },
    {
      "trigger": "CFStringCreateWithBytesNoCopy",
      "contents": "CFStringCreateWithBytesNoCopy(${1:CFAllocatorRef alloc}, ${2:UInt8* bytes}, ${3:CFIndex numBytes}, ${4:CFStringEncoding encoding}, ${5:Boolean isExternalRepresentation}, ${6:CFAllocatorRef contentsDeallocator})"
    },
    {
      "trigger": "CFStringCreateWithCString",
      "contents": "CFStringCreateWithCString(${1:CFAllocatorRef alloc}, ${2:char* cStr}, ${3:CFStringEncoding encoding})"
    },
    {
      "trigger": "CFStringCreateWithCStringNoCopy",
      "contents": "CFStringCreateWithCStringNoCopy(${1:CFAllocatorRef alloc}, ${2:char* cStr}, ${3:CFStringEncoding encoding}, ${4:CFAllocatorRef contentsDeallocator})"
    },
    {
      "trigger": "CFStringCreateWithCharacters",
      "contents": "CFStringCreateWithCharacters(${1:CFAllocatorRef alloc}, ${2:UniChar* chars}, ${3:CFIndex numChars})"
    },
    {
      "trigger": "CFStringCreateWithCharactersNoCopy",
      "contents": "CFStringCreateWithCharactersNoCopy(${1:CFAllocatorRef alloc}, ${2:UniChar* chars}, ${3:CFIndex numChars}, ${4:CFAllocatorRef contentsDeallocator})"
    },
    {
      "trigger": "CFStringCreateWithFileSystemRepresentation",
      "contents": "CFStringCreateWithFileSystemRepresentation(${1:CFAllocatorRef alloc}, ${2:char* buffer})"
    },
    {
      "trigger": "CFStringCreateWithFormat",
      "contents": "CFStringCreateWithFormat(${1:CFAllocatorRef alloc}, ${2:CFDictionaryRef formatOptions}, ${3:CFStringRef format})"
    },
    {
      "trigger": "CFStringCreateWithFormatAndArguments",
      "contents": "CFStringCreateWithFormatAndArguments(${1:CFAllocatorRef alloc}, ${2:CFDictionaryRef formatOptions}, ${3:CFStringRef format}, ${4:va_list arguments})"
    },
    {
      "trigger": "CFStringCreateWithPascalString",
      "contents": "CFStringCreateWithPascalString(${1:CFAllocatorRef alloc}, ${2:ConstStr255Param pStr}, ${3:CFStringEncoding encoding})"
    },
    {
      "trigger": "CFStringCreateWithPascalStringNoCopy",
      "contents": "CFStringCreateWithPascalStringNoCopy(${1:CFAllocatorRef alloc}, ${2:ConstStr255Param pStr}, ${3:CFStringEncoding encoding}, ${4:CFAllocatorRef contentsDeallocator})"
    },
    {
      "trigger": "CFStringCreateWithSubstring",
      "contents": "CFStringCreateWithSubstring(${1:CFAllocatorRef alloc}, ${2:CFStringRef str}, ${3:CFRange range})"
    },
    {
      "trigger": "CFStringDelete",
      "contents": "CFStringDelete(${1:CFMutableStringRef theString}, ${2:CFRange range})"
    },
    {
      "trigger": "CFStringFind",
      "contents": "CFStringFind(${1:CFStringRef theString}, ${2:CFStringRef stringToFind}, ${3:CFStringCompareFlags compareOptions})"
    },
    {
      "trigger": "CFStringFindAndReplace",
      "contents": "CFStringFindAndReplace(${1:CFMutableStringRef theString}, ${2:CFStringRef stringToFind}, ${3:CFStringRef replacementString}, ${4:CFRange rangeToSearch}, ${5:CFStringCompareFlags compareOptions})"
    },
    {
      "trigger": "CFStringFindCharacterFromSet",
      "contents": "CFStringFindCharacterFromSet(${1:CFStringRef theString}, ${2:CFCharacterSetRef theSet}, ${3:CFRange rangeToSearch}, ${4:CFStringCompareFlags searchOptions}, ${5:CFRange* result})"
    },
    {
      "trigger": "CFStringFindWithOptions",
      "contents": "CFStringFindWithOptions(${1:CFStringRef theString}, ${2:CFStringRef stringToFind}, ${3:CFRange rangeToSearch}, ${4:CFStringCompareFlags searchOptions}, ${5:CFRange* result})"
    },
    {
      "trigger": "CFStringFindWithOptionsAndLocale",
      "contents": "CFStringFindWithOptionsAndLocale(${1:CFStringRef theString}, ${2:CFStringRef stringToFind}, ${3:CFRange rangeToSearch}, ${4:CFStringCompareFlags searchOptions}, ${5:CFLocaleRef locale}, ${6:CFRange* result})"
    },
    {
      "trigger": "CFStringFold",
      "contents": "CFStringFold(${1:CFMutableStringRef theString}, ${2:CFOptionFlags theFlags}, ${3:CFLocaleRef theLocale})"
    },
    {
      "trigger": "CFStringGetBytes",
      "contents": "CFStringGetBytes(${1:CFStringRef theString}, ${2:CFRange range}, ${3:CFStringEncoding encoding}, ${4:UInt8 lossByte}, ${5:Boolean isExternalRepresentation}, ${6:UInt8* buffer}, ${7:CFIndex maxBufLen}, ${8:CFIndex* usedBufLen})"
    },
    {
      "trigger": "CFStringGetCString",
      "contents": "CFStringGetCString(${1:CFStringRef theString}, ${2:char* buffer}, ${3:CFIndex bufferSize}, ${4:CFStringEncoding encoding})"
    },
    {
      "trigger": "CFStringGetCStringPtr",
      "contents": "CFStringGetCStringPtr(${1:CFStringRef theString}, ${2:CFStringEncoding encoding})"
    },
    {
      "trigger": "CFStringGetCharacterAtIndex",
      "contents": "CFStringGetCharacterAtIndex(${1:CFStringRef theString}, ${2:CFIndex idx})"
    },
    {
      "trigger": "CFStringGetCharacterFromInlineBuffer",
      "contents": "CFStringGetCharacterFromInlineBuffer(${1:CFStringInlineBuffer* buf}, ${2:CFIndex idx})"
    },
    {
      "trigger": "CFStringGetCharacters",
      "contents": "CFStringGetCharacters(${1:CFStringRef theString}, ${2:CFRange range}, ${3:UniChar* buffer})"
    },
    {
      "trigger": "CFStringGetCharactersPtr",
      "contents": "CFStringGetCharactersPtr(${1:CFStringRef theString})"
    },
    {
      "trigger": "CFStringGetDoubleValue",
      "contents": "CFStringGetDoubleValue(${1:CFStringRef str})"
    },
    {
      "trigger": "CFStringGetFastestEncoding",
      "contents": "CFStringGetFastestEncoding(${1:CFStringRef theString})"
    },
    {
      "trigger": "CFStringGetFileSystemRepresentation",
      "contents": "CFStringGetFileSystemRepresentation(${1:CFStringRef string}, ${2:char* buffer}, ${3:CFIndex maxBufLen})"
    },
    {
      "trigger": "CFStringGetHyphenationLocationBeforeIndex",
      "contents": "CFStringGetHyphenationLocationBeforeIndex(${1:CFStringRef string}, ${2:CFIndex location}, ${3:CFRange limitRange}, ${4:CFOptionFlags options}, ${5:CFLocaleRef locale}, ${6:UTF32Char* character})"
    },
    {
      "trigger": "CFStringGetIntValue",
      "contents": "CFStringGetIntValue(${1:CFStringRef str})"
    },
    {
      "trigger": "CFStringGetLength",
      "contents": "CFStringGetLength(${1:CFStringRef theString})"
    },
    {
      "trigger": "CFStringGetLineBounds",
      "contents": "CFStringGetLineBounds(${1:CFStringRef theString}, ${2:CFRange range}, ${3:CFIndex* lineBeginIndex}, ${4:CFIndex* lineEndIndex}, ${5:CFIndex* contentsEndIndex})"
    },
    {
      "trigger": "CFStringGetLongCharacterForSurrogatePair",
      "contents": "CFStringGetLongCharacterForSurrogatePair(${1:UniChar surrogateHigh}, ${2:UniChar surrogateLow})"
    },
    {
      "trigger": "CFStringGetMaximumSizeForEncoding",
      "contents": "CFStringGetMaximumSizeForEncoding(${1:CFIndex length}, ${2:CFStringEncoding encoding})"
    },
    {
      "trigger": "CFStringGetMaximumSizeOfFileSystemRepresentation",
      "contents": "CFStringGetMaximumSizeOfFileSystemRepresentation(${1:CFStringRef string})"
    },
    {
      "trigger": "CFStringGetMostCompatibleMacStringEncoding",
      "contents": "CFStringGetMostCompatibleMacStringEncoding(${1:CFStringEncoding encoding})"
    },
    {
      "trigger": "CFStringGetNameOfEncoding",
      "contents": "CFStringGetNameOfEncoding(${1:CFStringEncoding encoding})"
    },
    {
      "trigger": "CFStringGetParagraphBounds",
      "contents": "CFStringGetParagraphBounds(${1:CFStringRef string}, ${2:CFRange range}, ${3:CFIndex* parBeginIndex}, ${4:CFIndex* parEndIndex}, ${5:CFIndex* contentsEndIndex})"
    },
    {
      "trigger": "CFStringGetPascalString",
      "contents": "CFStringGetPascalString(${1:CFStringRef theString}, ${2:StringPtr buffer}, ${3:CFIndex bufferSize}, ${4:CFStringEncoding encoding})"
    },
    {
      "trigger": "CFStringGetPascalStringPtr",
      "contents": "CFStringGetPascalStringPtr(${1:CFStringRef theString}, ${2:CFStringEncoding encoding})"
    },
    {
      "trigger": "CFStringGetRangeOfComposedCharactersAtIndex",
      "contents": "CFStringGetRangeOfComposedCharactersAtIndex(${1:CFStringRef theString}, ${2:CFIndex theIndex})"
    },
    {
      "trigger": "CFStringGetSmallestEncoding",
      "contents": "CFStringGetSmallestEncoding(${1:CFStringRef theString})"
    },
    {
      "trigger": "CFStringGetSurrogatePairForLongCharacter",
      "contents": "CFStringGetSurrogatePairForLongCharacter(${1:UTF32Char character}, ${2:UniChar* surrogates})"
    },
    {
      "trigger": "CFStringHasPrefix",
      "contents": "CFStringHasPrefix(${1:CFStringRef theString}, ${2:CFStringRef prefix})"
    },
    {
      "trigger": "CFStringHasSuffix",
      "contents": "CFStringHasSuffix(${1:CFStringRef theString}, ${2:CFStringRef suffix})"
    },
    {
      "trigger": "CFStringInitInlineBuffer",
      "contents": "CFStringInitInlineBuffer(${1:CFStringRef str}, ${2:CFStringInlineBuffer* buf}, ${3:CFRange range})"
    },
    {
      "trigger": "CFStringInsert",
      "contents": "CFStringInsert(${1:CFMutableStringRef str}, ${2:CFIndex idx}, ${3:CFStringRef insertedStr})"
    },
    {
      "trigger": "CFStringIsEncodingAvailable",
      "contents": "CFStringIsEncodingAvailable(${1:CFStringEncoding encoding})"
    },
    {
      "trigger": "CFStringIsHyphenationAvailableForLocale",
      "contents": "CFStringIsHyphenationAvailableForLocale(${1:CFLocaleRef locale})"
    },
    {
      "trigger": "CFStringIsSurrogateHighCharacter",
      "contents": "CFStringIsSurrogateHighCharacter(${1:UniChar character})"
    },
    {
      "trigger": "CFStringIsSurrogateLowCharacter",
      "contents": "CFStringIsSurrogateLowCharacter(${1:UniChar character})"
    },
    {
      "trigger": "CFStringLowercase",
      "contents": "CFStringLowercase(${1:CFMutableStringRef theString}, ${2:CFLocaleRef locale})"
    },
    {
      "trigger": "CFStringNormalize",
      "contents": "CFStringNormalize(${1:CFMutableStringRef theString}, ${2:CFStringNormalizationForm theForm})"
    },
    {
      "trigger": "CFStringPad",
      "contents": "CFStringPad(${1:CFMutableStringRef theString}, ${2:CFStringRef padString}, ${3:CFIndex length}, ${4:CFIndex indexIntoPad})"
    },
    {
      "trigger": "CFStringReplace",
      "contents": "CFStringReplace(${1:CFMutableStringRef theString}, ${2:CFRange range}, ${3:CFStringRef replacement})"
    },
    {
      "trigger": "CFStringReplaceAll",
      "contents": "CFStringReplaceAll(${1:CFMutableStringRef theString}, ${2:CFStringRef replacement})"
    },
    {
      "trigger": "CFStringSetExternalCharactersNoCopy",
      "contents": "CFStringSetExternalCharactersNoCopy(${1:CFMutableStringRef theString}, ${2:UniChar* chars}, ${3:CFIndex length}, ${4:CFIndex capacity})"
    },
    {
      "trigger": "CFStringTokenizerAdvanceToNextToken",
      "contents": "CFStringTokenizerAdvanceToNextToken(${1:CFStringTokenizerRef tokenizer})"
    },
    {
      "trigger": "CFStringTokenizerCopyBestStringLanguage",
      "contents": "CFStringTokenizerCopyBestStringLanguage(${1:CFStringRef string}, ${2:CFRange range})"
    },
    {
      "trigger": "CFStringTokenizerCopyCurrentTokenAttribute",
      "contents": "CFStringTokenizerCopyCurrentTokenAttribute(${1:CFStringTokenizerRef tokenizer}, ${2:CFOptionFlags attribute})"
    },
    {
      "trigger": "CFStringTokenizerCreate",
      "contents": "CFStringTokenizerCreate(${1:CFAllocatorRef alloc}, ${2:CFStringRef string}, ${3:CFRange range}, ${4:CFOptionFlags options}, ${5:CFLocaleRef locale})"
    },
    {
      "trigger": "CFStringTokenizerGetCurrentSubTokens",
      "contents": "CFStringTokenizerGetCurrentSubTokens(${1:CFStringTokenizerRef tokenizer}, ${2:CFRange* ranges}, ${3:CFIndex maxRangeLength}, ${4:CFMutableArrayRef derivedSubTokens})"
    },
    {
      "trigger": "CFStringTokenizerGetCurrentTokenRange",
      "contents": "CFStringTokenizerGetCurrentTokenRange(${1:CFStringTokenizerRef tokenizer})"
    },
    {
      "trigger": "CFStringTokenizerGoToTokenAtIndex",
      "contents": "CFStringTokenizerGoToTokenAtIndex(${1:CFStringTokenizerRef tokenizer}, ${2:CFIndex index})"
    },
    {
      "trigger": "CFStringTokenizerSetString",
      "contents": "CFStringTokenizerSetString(${1:CFStringTokenizerRef tokenizer}, ${2:CFStringRef string}, ${3:CFRange range})"
    },
    {
      "trigger": "CFStringTransform",
      "contents": "CFStringTransform(${1:CFMutableStringRef string}, ${2:CFRange* range}, ${3:CFStringRef transform}, ${4:Boolean reverse})"
    },
    {
      "trigger": "CFStringTrim",
      "contents": "CFStringTrim(${1:CFMutableStringRef theString}, ${2:CFStringRef trimString})"
    },
    {
      "trigger": "CFStringTrimWhitespace",
      "contents": "CFStringTrimWhitespace(${1:CFMutableStringRef theString})"
    },
    {
      "trigger": "CFStringUppercase",
      "contents": "CFStringUppercase(${1:CFMutableStringRef theString}, ${2:CFLocaleRef locale})"
    },
    {
      "trigger": "CFSwapInt16",
      "contents": "CFSwapInt16(${1:uint16_t arg})"
    },
    {
      "trigger": "CFSwapInt16BigToHost",
      "contents": "CFSwapInt16BigToHost(${1:uint16_t arg})"
    },
    {
      "trigger": "CFSwapInt16HostToBig",
      "contents": "CFSwapInt16HostToBig(${1:uint16_t arg})"
    },
    {
      "trigger": "CFSwapInt16HostToLittle",
      "contents": "CFSwapInt16HostToLittle(${1:uint16_t arg})"
    },
    {
      "trigger": "CFSwapInt16LittleToHost",
      "contents": "CFSwapInt16LittleToHost(${1:uint16_t arg})"
    },
    {
      "trigger": "CFSwapInt32",
      "contents": "CFSwapInt32(${1:uint32_t arg})"
    },
    {
      "trigger": "CFSwapInt32BigToHost",
      "contents": "CFSwapInt32BigToHost(${1:uint32_t arg})"
    },
    {
      "trigger": "CFSwapInt32HostToBig",
      "contents": "CFSwapInt32HostToBig(${1:uint32_t arg})"
    },
    {
      "trigger": "CFSwapInt32HostToLittle",
      "contents": "CFSwapInt32HostToLittle(${1:uint32_t arg})"
    },
    {
      "trigger": "CFSwapInt32LittleToHost",
      "contents": "CFSwapInt32LittleToHost(${1:uint32_t arg})"
    },
    {
      "trigger": "CFSwapInt64",
      "contents": "CFSwapInt64(${1:uint64_t arg})"
    },
    {
      "trigger": "CFSwapInt64BigToHost",
      "contents": "CFSwapInt64BigToHost(${1:uint64_t arg})"
    },
    {
      "trigger": "CFSwapInt64HostToBig",
      "contents": "CFSwapInt64HostToBig(${1:uint64_t arg})"
    },
    {
      "trigger": "CFSwapInt64HostToLittle",
      "contents": "CFSwapInt64HostToLittle(${1:uint64_t arg})"
    },
    {
      "trigger": "CFSwapInt64LittleToHost",
      "contents": "CFSwapInt64LittleToHost(${1:uint64_t arg})"
    },
    {
      "trigger": "CFTimeZoneCopyAbbreviation",
      "contents": "CFTimeZoneCopyAbbreviation(${1:CFTimeZoneRef tz}, ${2:CFAbsoluteTime at})"
    },
    {
      "trigger": "CFTimeZoneCopyLocalizedName",
      "contents": "CFTimeZoneCopyLocalizedName(${1:CFTimeZoneRef tz}, ${2:CFTimeZoneNameStyle style}, ${3:CFLocaleRef locale})"
    },
    {
      "trigger": "CFTimeZoneCreate",
      "contents": "CFTimeZoneCreate(${1:CFAllocatorRef allocator}, ${2:CFStringRef name}, ${3:CFDataRef data})"
    },
    {
      "trigger": "CFTimeZoneCreateWithName",
      "contents": "CFTimeZoneCreateWithName(${1:CFAllocatorRef allocator}, ${2:CFStringRef name}, ${3:Boolean tryAbbrev})"
    },
    {
      "trigger": "CFTimeZoneCreateWithTimeIntervalFromGMT",
      "contents": "CFTimeZoneCreateWithTimeIntervalFromGMT(${1:CFAllocatorRef allocator}, ${2:CFTimeInterval ti})"
    },
    {
      "trigger": "CFTimeZoneGetData",
      "contents": "CFTimeZoneGetData(${1:CFTimeZoneRef tz})"
    },
    {
      "trigger": "CFTimeZoneGetDaylightSavingTimeOffset",
      "contents": "CFTimeZoneGetDaylightSavingTimeOffset(${1:CFTimeZoneRef tz}, ${2:CFAbsoluteTime at})"
    },
    {
      "trigger": "CFTimeZoneGetName",
      "contents": "CFTimeZoneGetName(${1:CFTimeZoneRef tz})"
    },
    {
      "trigger": "CFTimeZoneGetNextDaylightSavingTimeTransition",
      "contents": "CFTimeZoneGetNextDaylightSavingTimeTransition(${1:CFTimeZoneRef tz}, ${2:CFAbsoluteTime at})"
    },
    {
      "trigger": "CFTimeZoneGetSecondsFromGMT",
      "contents": "CFTimeZoneGetSecondsFromGMT(${1:CFTimeZoneRef tz}, ${2:CFAbsoluteTime at})"
    },
    {
      "trigger": "CFTimeZoneIsDaylightSavingTime",
      "contents": "CFTimeZoneIsDaylightSavingTime(${1:CFTimeZoneRef tz}, ${2:CFAbsoluteTime at})"
    },
    {
      "trigger": "CFTimeZoneSetAbbreviationDictionary",
      "contents": "CFTimeZoneSetAbbreviationDictionary(${1:CFDictionaryRef dict})"
    },
    {
      "trigger": "CFTimeZoneSetDefault",
      "contents": "CFTimeZoneSetDefault(${1:CFTimeZoneRef tz})"
    },
    {
      "trigger": "CFTreeAppendChild",
      "contents": "CFTreeAppendChild(${1:CFTreeRef tree}, ${2:CFTreeRef newChild})"
    },
    {
      "trigger": "CFTreeApplyFunctionToChildren",
      "contents": "CFTreeApplyFunctionToChildren(${1:CFTreeRef tree}, ${2:CFTreeApplierFunction applier}, ${3:void* context})"
    },
    {
      "trigger": "CFTreeCreate",
      "contents": "CFTreeCreate(${1:CFAllocatorRef allocator}, ${2:CFTreeContext* context})"
    },
    {
      "trigger": "CFTreeFindRoot",
      "contents": "CFTreeFindRoot(${1:CFTreeRef tree})"
    },
    {
      "trigger": "CFTreeGetChildAtIndex",
      "contents": "CFTreeGetChildAtIndex(${1:CFTreeRef tree}, ${2:CFIndex idx})"
    },
    {
      "trigger": "CFTreeGetChildCount",
      "contents": "CFTreeGetChildCount(${1:CFTreeRef tree})"
    },
    {
      "trigger": "CFTreeGetChildren",
      "contents": "CFTreeGetChildren(${1:CFTreeRef tree}, ${2:CFTreeRef* children})"
    },
    {
      "trigger": "CFTreeGetContext",
      "contents": "CFTreeGetContext(${1:CFTreeRef tree}, ${2:CFTreeContext* context})"
    },
    {
      "trigger": "CFTreeGetFirstChild",
      "contents": "CFTreeGetFirstChild(${1:CFTreeRef tree})"
    },
    {
      "trigger": "CFTreeGetNextSibling",
      "contents": "CFTreeGetNextSibling(${1:CFTreeRef tree})"
    },
    {
      "trigger": "CFTreeGetParent",
      "contents": "CFTreeGetParent(${1:CFTreeRef tree})"
    },
    {
      "trigger": "CFTreeInsertSibling",
      "contents": "CFTreeInsertSibling(${1:CFTreeRef tree}, ${2:CFTreeRef newSibling})"
    },
    {
      "trigger": "CFTreePrependChild",
      "contents": "CFTreePrependChild(${1:CFTreeRef tree}, ${2:CFTreeRef newChild})"
    },
    {
      "trigger": "CFTreeRemove",
      "contents": "CFTreeRemove(${1:CFTreeRef tree})"
    },
    {
      "trigger": "CFTreeRemoveAllChildren",
      "contents": "CFTreeRemoveAllChildren(${1:CFTreeRef tree})"
    },
    {
      "trigger": "CFTreeSetContext",
      "contents": "CFTreeSetContext(${1:CFTreeRef tree}, ${2:CFTreeContext* context})"
    },
    {
      "trigger": "CFTreeSortChildren",
      "contents": "CFTreeSortChildren(${1:CFTreeRef tree}, ${2:CFComparatorFunction comparator}, ${3:void* context})"
    },
    {
      "trigger": "CFURLCanBeDecomposed",
      "contents": "CFURLCanBeDecomposed(${1:CFURLRef anURL})"
    },
    {
      "trigger": "CFURLClearResourcePropertyCache",
      "contents": "CFURLClearResourcePropertyCache(${1:CFURLRef url})"
    },
    {
      "trigger": "CFURLClearResourcePropertyCacheForKey",
      "contents": "CFURLClearResourcePropertyCacheForKey(${1:CFURLRef url}, ${2:CFStringRef key})"
    },
    {
      "trigger": "CFURLCopyAbsoluteURL",
      "contents": "CFURLCopyAbsoluteURL(${1:CFURLRef relativeURL})"
    },
    {
      "trigger": "CFURLCopyFileSystemPath",
      "contents": "CFURLCopyFileSystemPath(${1:CFURLRef anURL}, ${2:CFURLPathStyle pathStyle})"
    },
    {
      "trigger": "CFURLCopyFragment",
      "contents": "CFURLCopyFragment(${1:CFURLRef anURL}, ${2:CFStringRef charactersToLeaveEscaped})"
    },
    {
      "trigger": "CFURLCopyHostName",
      "contents": "CFURLCopyHostName(${1:CFURLRef anURL})"
    },
    {
      "trigger": "CFURLCopyLastPathComponent",
      "contents": "CFURLCopyLastPathComponent(${1:CFURLRef url})"
    },
    {
      "trigger": "CFURLCopyNetLocation",
      "contents": "CFURLCopyNetLocation(${1:CFURLRef anURL})"
    },
    {
      "trigger": "CFURLCopyParameterString",
      "contents": "CFURLCopyParameterString(${1:CFURLRef anURL}, ${2:CFStringRef charactersToLeaveEscaped})"
    },
    {
      "trigger": "CFURLCopyPassword",
      "contents": "CFURLCopyPassword(${1:CFURLRef anURL})"
    },
    {
      "trigger": "CFURLCopyPath",
      "contents": "CFURLCopyPath(${1:CFURLRef anURL})"
    },
    {
      "trigger": "CFURLCopyPathExtension",
      "contents": "CFURLCopyPathExtension(${1:CFURLRef url})"
    },
    {
      "trigger": "CFURLCopyQueryString",
      "contents": "CFURLCopyQueryString(${1:CFURLRef anURL}, ${2:CFStringRef charactersToLeaveEscaped})"
    },
    {
      "trigger": "CFURLCopyResourcePropertiesForKeys",
      "contents": "CFURLCopyResourcePropertiesForKeys(${1:CFURLRef url}, ${2:CFArrayRef keys}, ${3:CFErrorRef* error})"
    },
    {
      "trigger": "CFURLCopyResourcePropertyForKey",
      "contents": "CFURLCopyResourcePropertyForKey(${1:CFURLRef url}, ${2:CFStringRef key}, ${3:void* propertyValueTypeRefPtr}, ${4:CFErrorRef* error})"
    },
    {
      "trigger": "CFURLCopyResourceSpecifier",
      "contents": "CFURLCopyResourceSpecifier(${1:CFURLRef anURL})"
    },
    {
      "trigger": "CFURLCopyScheme",
      "contents": "CFURLCopyScheme(${1:CFURLRef anURL})"
    },
    {
      "trigger": "CFURLCopyStrictPath",
      "contents": "CFURLCopyStrictPath(${1:CFURLRef anURL}, ${2:Boolean* isAbsolute})"
    },
    {
      "trigger": "CFURLCopyUserName",
      "contents": "CFURLCopyUserName(${1:CFURLRef anURL})"
    },
    {
      "trigger": "CFURLCreateAbsoluteURLWithBytes",
      "contents": "CFURLCreateAbsoluteURLWithBytes(${1:CFAllocatorRef alloc}, ${2:UInt8* relativeURLBytes}, ${3:CFIndex length}, ${4:CFStringEncoding encoding}, ${5:CFURLRef baseURL}, ${6:Boolean useCompatibilityMode})"
    },
    {
      "trigger": "CFURLCreateBookmarkData",
      "contents": "CFURLCreateBookmarkData(${1:CFAllocatorRef allocator}, ${2:CFURLRef url}, ${3:CFURLBookmarkCreationOptions options}, ${4:CFArrayRef resourcePropertiesToInclude}, ${5:CFURLRef relativeToURL}, ${6:CFErrorRef* error})"
    },
    {
      "trigger": "CFURLCreateBookmarkDataFromFile",
      "contents": "CFURLCreateBookmarkDataFromFile(${1:CFAllocatorRef allocator}, ${2:CFURLRef fileURL}, ${3:CFErrorRef* errorRef})"
    },
    {
      "trigger": "CFURLCreateByResolvingBookmarkData",
      "contents": "CFURLCreateByResolvingBookmarkData(${1:CFAllocatorRef allocator}, ${2:CFDataRef bookmark}, ${3:CFURLBookmarkResolutionOptions options}, ${4:CFURLRef relativeToURL}, ${5:CFArrayRef resourcePropertiesToInclude}, ${6:Boolean* isStale}, ${7:CFErrorRef* error})"
    },
    {
      "trigger": "CFURLCreateCopyAppendingPathComponent",
      "contents": "CFURLCreateCopyAppendingPathComponent(${1:CFAllocatorRef allocator}, ${2:CFURLRef url}, ${3:CFStringRef pathComponent}, ${4:Boolean isDirectory})"
    },
    {
      "trigger": "CFURLCreateCopyAppendingPathExtension",
      "contents": "CFURLCreateCopyAppendingPathExtension(${1:CFAllocatorRef allocator}, ${2:CFURLRef url}, ${3:CFStringRef extension})"
    },
    {
      "trigger": "CFURLCreateCopyDeletingLastPathComponent",
      "contents": "CFURLCreateCopyDeletingLastPathComponent(${1:CFAllocatorRef allocator}, ${2:CFURLRef url})"
    },
    {
      "trigger": "CFURLCreateCopyDeletingPathExtension",
      "contents": "CFURLCreateCopyDeletingPathExtension(${1:CFAllocatorRef allocator}, ${2:CFURLRef url})"
    },
    {
      "trigger": "CFURLCreateData",
      "contents": "CFURLCreateData(${1:CFAllocatorRef allocator}, ${2:CFURLRef url}, ${3:CFStringEncoding encoding}, ${4:Boolean escapeWhitespace})"
    },
    {
      "trigger": "CFURLCreateDataAndPropertiesFromResource",
      "contents": "CFURLCreateDataAndPropertiesFromResource(${1:CFAllocatorRef alloc}, ${2:CFURLRef url}, ${3:CFDataRef* resourceData}, ${4:CFDictionaryRef* properties}, ${5:CFArrayRef desiredProperties}, ${6:SInt32* errorCode})"
    },
    {
      "trigger": "CFURLCreateFilePathURL",
      "contents": "CFURLCreateFilePathURL(${1:CFAllocatorRef allocator}, ${2:CFURLRef url}, ${3:CFErrorRef* error})"
    },
    {
      "trigger": "CFURLCreateFileReferenceURL",
      "contents": "CFURLCreateFileReferenceURL(${1:CFAllocatorRef allocator}, ${2:CFURLRef url}, ${3:CFErrorRef* error})"
    },
    {
      "trigger": "CFURLCreateFromFSRef",
      "contents": "CFURLCreateFromFSRef(${1:CFAllocatorRef allocator}, ${2:struct FSRef* fsRef})"
    },
    {
      "trigger": "CFURLCreateFromFileSystemRepresentation",
      "contents": "CFURLCreateFromFileSystemRepresentation(${1:CFAllocatorRef allocator}, ${2:UInt8* buffer}, ${3:CFIndex bufLen}, ${4:Boolean isDirectory})"
    },
    {
      "trigger": "CFURLCreateFromFileSystemRepresentationRelativeToBase",
      "contents": "CFURLCreateFromFileSystemRepresentationRelativeToBase(${1:CFAllocatorRef allocator}, ${2:UInt8* buffer}, ${3:CFIndex bufLen}, ${4:Boolean isDirectory}, ${5:CFURLRef baseURL})"
    },
    {
      "trigger": "CFURLCreatePropertyFromResource",
      "contents": "CFURLCreatePropertyFromResource(${1:CFAllocatorRef alloc}, ${2:CFURLRef url}, ${3:CFStringRef property}, ${4:SInt32* errorCode})"
    },
    {
      "trigger": "CFURLCreateResourcePropertiesForKeysFromBookmarkData",
      "contents": "CFURLCreateResourcePropertiesForKeysFromBookmarkData(${1:CFAllocatorRef allocator}, ${2:CFArrayRef resourcePropertiesToReturn}, ${3:CFDataRef bookmark})"
    },
    {
      "trigger": "CFURLCreateResourcePropertyForKeyFromBookmarkData",
      "contents": "CFURLCreateResourcePropertyForKeyFromBookmarkData(${1:CFAllocatorRef allocator}, ${2:CFStringRef resourcePropertyKey}, ${3:CFDataRef bookmark})"
    },
    {
      "trigger": "CFURLCreateStringByAddingPercentEscapes",
      "contents": "CFURLCreateStringByAddingPercentEscapes(${1:CFAllocatorRef allocator}, ${2:CFStringRef originalString}, ${3:CFStringRef charactersToLeaveUnescaped}, ${4:CFStringRef legalURLCharactersToBeEscaped}, ${5:CFStringEncoding encoding})"
    },
    {
      "trigger": "CFURLCreateStringByReplacingPercentEscapes",
      "contents": "CFURLCreateStringByReplacingPercentEscapes(${1:CFAllocatorRef allocator}, ${2:CFStringRef originalString}, ${3:CFStringRef charactersToLeaveEscaped})"
    },
    {
      "trigger": "CFURLCreateStringByReplacingPercentEscapesUsingEncoding",
      "contents": "CFURLCreateStringByReplacingPercentEscapesUsingEncoding(${1:CFAllocatorRef allocator}, ${2:CFStringRef origString}, ${3:CFStringRef charsToLeaveEscaped}, ${4:CFStringEncoding encoding})"
    },
    {
      "trigger": "CFURLCreateWithBytes",
      "contents": "CFURLCreateWithBytes(${1:CFAllocatorRef allocator}, ${2:UInt8* URLBytes}, ${3:CFIndex length}, ${4:CFStringEncoding encoding}, ${5:CFURLRef baseURL})"
    },
    {
      "trigger": "CFURLCreateWithFileSystemPath",
      "contents": "CFURLCreateWithFileSystemPath(${1:CFAllocatorRef allocator}, ${2:CFStringRef filePath}, ${3:CFURLPathStyle pathStyle}, ${4:Boolean isDirectory})"
    },
    {
      "trigger": "CFURLCreateWithFileSystemPathRelativeToBase",
      "contents": "CFURLCreateWithFileSystemPathRelativeToBase(${1:CFAllocatorRef allocator}, ${2:CFStringRef filePath}, ${3:CFURLPathStyle pathStyle}, ${4:Boolean isDirectory}, ${5:CFURLRef baseURL})"
    },
    {
      "trigger": "CFURLCreateWithString",
      "contents": "CFURLCreateWithString(${1:CFAllocatorRef allocator}, ${2:CFStringRef URLString}, ${3:CFURLRef baseURL})"
    },
    {
      "trigger": "CFURLDestroyResource",
      "contents": "CFURLDestroyResource(${1:CFURLRef url}, ${2:SInt32* errorCode})"
    },
    {
      "trigger": "CFURLEnumeratorCreateForDirectoryURL",
      "contents": "CFURLEnumeratorCreateForDirectoryURL(${1:CFAllocatorRef alloc}, ${2:CFURLRef directoryURL}, ${3:CFURLEnumeratorOptions option}, ${4:CFArrayRef propertyKeys})"
    },
    {
      "trigger": "CFURLEnumeratorCreateForMountedVolumes",
      "contents": "CFURLEnumeratorCreateForMountedVolumes(${1:CFAllocatorRef alloc}, ${2:CFURLEnumeratorOptions option}, ${3:CFArrayRef propertyKeys})"
    },
    {
      "trigger": "CFURLEnumeratorGetDescendentLevel",
      "contents": "CFURLEnumeratorGetDescendentLevel(${1:CFURLEnumeratorRef enumerator})"
    },
    {
      "trigger": "CFURLEnumeratorGetNextURL",
      "contents": "CFURLEnumeratorGetNextURL(${1:CFURLEnumeratorRef enumerator}, ${2:CFURLRef* url}, ${3:CFErrorRef* error})"
    },
    {
      "trigger": "CFURLEnumeratorGetSourceDidChange",
      "contents": "CFURLEnumeratorGetSourceDidChange(${1:CFURLEnumeratorRef enumerator})"
    },
    {
      "trigger": "CFURLEnumeratorSkipDescendents",
      "contents": "CFURLEnumeratorSkipDescendents(${1:CFURLEnumeratorRef enumerator})"
    },
    {
      "trigger": "CFURLGetBaseURL",
      "contents": "CFURLGetBaseURL(${1:CFURLRef anURL})"
    },
    {
      "trigger": "CFURLGetByteRangeForComponent",
      "contents": "CFURLGetByteRangeForComponent(${1:CFURLRef url}, ${2:CFURLComponentType component}, ${3:CFRange* rangeIncludingSeparators})"
    },
    {
      "trigger": "CFURLGetBytes",
      "contents": "CFURLGetBytes(${1:CFURLRef url}, ${2:UInt8* buffer}, ${3:CFIndex bufferLength})"
    },
    {
      "trigger": "CFURLGetFSRef",
      "contents": "CFURLGetFSRef(${1:CFURLRef url}, ${2:struct FSRef* fsRef})"
    },
    {
      "trigger": "CFURLGetFileSystemRepresentation",
      "contents": "CFURLGetFileSystemRepresentation(${1:CFURLRef url}, ${2:Boolean resolveAgainstBase}, ${3:UInt8* buffer}, ${4:CFIndex maxBufLen})"
    },
    {
      "trigger": "CFURLGetPortNumber",
      "contents": "CFURLGetPortNumber(${1:CFURLRef anURL})"
    },
    {
      "trigger": "CFURLGetString",
      "contents": "CFURLGetString(${1:CFURLRef anURL})"
    },
    {
      "trigger": "CFURLHasDirectoryPath",
      "contents": "CFURLHasDirectoryPath(${1:CFURLRef anURL})"
    },
    {
      "trigger": "CFURLResourceIsReachable",
      "contents": "CFURLResourceIsReachable(${1:CFURLRef url}, ${2:CFErrorRef* error})"
    },
    {
      "trigger": "CFURLSetResourcePropertiesForKeys",
      "contents": "CFURLSetResourcePropertiesForKeys(${1:CFURLRef url}, ${2:CFDictionaryRef keyedPropertyValues}, ${3:CFErrorRef* error})"
    },
    {
      "trigger": "CFURLSetResourcePropertyForKey",
      "contents": "CFURLSetResourcePropertyForKey(${1:CFURLRef url}, ${2:CFStringRef key}, ${3:CFTypeRef propertyValue}, ${4:CFErrorRef* error})"
    },
    {
      "trigger": "CFURLSetTemporaryResourcePropertyForKey",
      "contents": "CFURLSetTemporaryResourcePropertyForKey(${1:CFURLRef url}, ${2:CFStringRef key}, ${3:CFTypeRef propertyValue})"
    },
    {
      "trigger": "CFURLWriteBookmarkDataToFile",
      "contents": "CFURLWriteBookmarkDataToFile(${1:CFDataRef bookmarkRef}, ${2:CFURLRef fileURL}, ${3:CFURLBookmarkFileCreationOptions options}, ${4:CFErrorRef* errorRef})"
    },
    {
      "trigger": "CFURLWriteDataAndPropertiesToResource",
      "contents": "CFURLWriteDataAndPropertiesToResource(${1:CFURLRef url}, ${2:CFDataRef dataToWrite}, ${3:CFDictionaryRef propertiesToWrite}, ${4:SInt32* errorCode})"
    },
    {
      "trigger": "CFUUIDCreate",
      "contents": "CFUUIDCreate(${1:CFAllocatorRef alloc})"
    },
    {
      "trigger": "CFUUIDCreateFromString",
      "contents": "CFUUIDCreateFromString(${1:CFAllocatorRef alloc}, ${2:CFStringRef uuidStr})"
    },
    {
      "trigger": "CFUUIDCreateFromUUIDBytes",
      "contents": "CFUUIDCreateFromUUIDBytes(${1:CFAllocatorRef alloc}, ${2:CFUUIDBytes bytes})"
    },
    {
      "trigger": "CFUUIDCreateString",
      "contents": "CFUUIDCreateString(${1:CFAllocatorRef alloc}, ${2:CFUUIDRef uuid})"
    },
    {
      "trigger": "CFUUIDCreateWithBytes",
      "contents": "CFUUIDCreateWithBytes(${1:CFAllocatorRef alloc}, ${2:UInt8 byte0}, ${3:UInt8 byte1}, ${4:UInt8 byte2}, ${5:UInt8 byte3}, ${6:UInt8 byte4}, ${7:UInt8 byte5}, ${8:UInt8 byte6}, ${9:UInt8 byte7}, ${10:UInt8 byte8}, ${11:UInt8 byte9}, ${12:UInt8 byte10}, ${13:UInt8 byte11}, ${14:UInt8 byte12}, ${15:UInt8 byte13}, ${16:UInt8 byte14}, ${17:UInt8 byte15})"
    },
    {
      "trigger": "CFUUIDGetConstantUUIDWithBytes",
      "contents": "CFUUIDGetConstantUUIDWithBytes(${1:CFAllocatorRef alloc}, ${2:UInt8 byte0}, ${3:UInt8 byte1}, ${4:UInt8 byte2}, ${5:UInt8 byte3}, ${6:UInt8 byte4}, ${7:UInt8 byte5}, ${8:UInt8 byte6}, ${9:UInt8 byte7}, ${10:UInt8 byte8}, ${11:UInt8 byte9}, ${12:UInt8 byte10}, ${13:UInt8 byte11}, ${14:UInt8 byte12}, ${15:UInt8 byte13}, ${16:UInt8 byte14}, ${17:UInt8 byte15})"
    },
    {
      "trigger": "CFUUIDGetUUIDBytes",
      "contents": "CFUUIDGetUUIDBytes(${1:CFUUIDRef uuid})"
    },
    {
      "trigger": "CFWriteStreamCanAcceptBytes",
      "contents": "CFWriteStreamCanAcceptBytes(${1:CFWriteStreamRef stream})"
    },
    {
      "trigger": "CFWriteStreamClose",
      "contents": "CFWriteStreamClose(${1:CFWriteStreamRef stream})"
    },
    {
      "trigger": "CFWriteStreamCopyError",
      "contents": "CFWriteStreamCopyError(${1:CFWriteStreamRef stream})"
    },
    {
      "trigger": "CFWriteStreamCopyProperty",
      "contents": "CFWriteStreamCopyProperty(${1:CFWriteStreamRef stream}, ${2:CFStringRef propertyName})"
    },
    {
      "trigger": "CFWriteStreamCreateWithAllocatedBuffers",
      "contents": "CFWriteStreamCreateWithAllocatedBuffers(${1:CFAllocatorRef alloc}, ${2:CFAllocatorRef bufferAllocator})"
    },
    {
      "trigger": "CFWriteStreamCreateWithBuffer",
      "contents": "CFWriteStreamCreateWithBuffer(${1:CFAllocatorRef alloc}, ${2:UInt8* buffer}, ${3:CFIndex bufferCapacity})"
    },
    {
      "trigger": "CFWriteStreamCreateWithFTPURL",
      "contents": "CFWriteStreamCreateWithFTPURL(${1:CFAllocatorRef alloc}, ${2:CFURLRef ftpURL})"
    },
    {
      "trigger": "CFWriteStreamCreateWithFile",
      "contents": "CFWriteStreamCreateWithFile(${1:CFAllocatorRef alloc}, ${2:CFURLRef fileURL})"
    },
    {
      "trigger": "CFWriteStreamGetError",
      "contents": "CFWriteStreamGetError(${1:CFWriteStreamRef stream})"
    },
    {
      "trigger": "CFWriteStreamGetStatus",
      "contents": "CFWriteStreamGetStatus(${1:CFWriteStreamRef stream})"
    },
    {
      "trigger": "CFWriteStreamOpen",
      "contents": "CFWriteStreamOpen(${1:CFWriteStreamRef stream})"
    },
    {
      "trigger": "CFWriteStreamScheduleWithRunLoop",
      "contents": "CFWriteStreamScheduleWithRunLoop(${1:CFWriteStreamRef stream}, ${2:CFRunLoopRef runLoop}, ${3:CFStringRef runLoopMode})"
    },
    {
      "trigger": "CFWriteStreamSetClient",
      "contents": "CFWriteStreamSetClient(${1:CFWriteStreamRef stream}, ${2:CFOptionFlags streamEvents}, ${3:CFWriteStreamClientCallBack clientCB}, ${4:CFStreamClientContext* clientContext})"
    },
    {
      "trigger": "CFWriteStreamSetProperty",
      "contents": "CFWriteStreamSetProperty(${1:CFWriteStreamRef stream}, ${2:CFStringRef propertyName}, ${3:CFTypeRef propertyValue})"
    },
    {
      "trigger": "CFWriteStreamUnscheduleFromRunLoop",
      "contents": "CFWriteStreamUnscheduleFromRunLoop(${1:CFWriteStreamRef stream}, ${2:CFRunLoopRef runLoop}, ${3:CFStringRef runLoopMode})"
    },
    {
      "trigger": "CFWriteStreamWrite",
      "contents": "CFWriteStreamWrite(${1:CFWriteStreamRef stream}, ${2:UInt8* buffer}, ${3:CFIndex bufferLength})"
    },
    {
      "trigger": "CF_USE_OSBYTEORDER_H (1)",
      "contents": "CF_USE_OSBYTEORDER_H"
    },
    {
      "trigger": "CGAffineTransformConcat",
      "contents": "CGAffineTransformConcat(${1:CGAffineTransform t1}, ${2:CGAffineTransform t2})"
    },
    {
      "trigger": "CGAffineTransformEqualToTransform",
      "contents": "CGAffineTransformEqualToTransform(${1:CGAffineTransform t1}, ${2:CGAffineTransform t2})"
    },
    {
      "trigger": "CGAffineTransformFromString",
      "contents": "CGAffineTransformFromString(${1:NSString* string})"
    },
    {
      "trigger": "CGAffineTransformIdentity (CGAffineTransform)",
      "contents": "CGAffineTransformIdentity"
    },
    {
      "trigger": "CGAffineTransformInvert",
      "contents": "CGAffineTransformInvert(${1:CGAffineTransform t})"
    },
    {
      "trigger": "CGAffineTransformIsIdentity",
      "contents": "CGAffineTransformIsIdentity(${1:CGAffineTransform t})"
    },
    {
      "trigger": "CGAffineTransformMake (__CGAffineTransformMake)",
      "contents": "CGAffineTransformMake"
    },
    {
      "trigger": "CGAffineTransformMake",
      "contents": "CGAffineTransformMake(${1:CGFloat a}, ${2:CGFloat b}, ${3:CGFloat c}, ${4:CGFloat d}, ${5:CGFloat tx}, ${6:CGFloat ty})"
    },
    {
      "trigger": "CGAffineTransformMakeRotation",
      "contents": "CGAffineTransformMakeRotation(${1:CGFloat angle})"
    },
    {
      "trigger": "CGAffineTransformMakeScale",
      "contents": "CGAffineTransformMakeScale(${1:CGFloat sx}, ${2:CGFloat sy})"
    },
    {
      "trigger": "CGAffineTransformMakeTranslation",
      "contents": "CGAffineTransformMakeTranslation(${1:CGFloat tx}, ${2:CGFloat ty})"
    },
    {
      "trigger": "CGAffineTransformRotate",
      "contents": "CGAffineTransformRotate(${1:CGAffineTransform t}, ${2:CGFloat angle})"
    },
    {
      "trigger": "CGAffineTransformScale",
      "contents": "CGAffineTransformScale(${1:CGAffineTransform t}, ${2:CGFloat sx}, ${3:CGFloat sy})"
    },
    {
      "trigger": "CGAffineTransformTranslate",
      "contents": "CGAffineTransformTranslate(${1:CGAffineTransform t}, ${2:CGFloat tx}, ${3:CGFloat ty})"
    },
    {
      "trigger": "CGBitmapContextCreate",
      "contents": "CGBitmapContextCreate(${1:void* data}, ${2:size_t width}, ${3:size_t height}, ${4:size_t bitsPerComponent}, ${5:size_t bytesPerRow}, ${6:CGColorSpaceRef space}, ${7:CGBitmapInfo bitmapInfo})"
    },
    {
      "trigger": "CGBitmapContextCreateImage",
      "contents": "CGBitmapContextCreateImage(${1:CGContextRef context})"
    },
    {
      "trigger": "CGBitmapContextCreateWithData",
      "contents": "CGBitmapContextCreateWithData(${1:void* data}, ${2:size_t width}, ${3:size_t height}, ${4:size_t bitsPerComponent}, ${5:size_t bytesPerRow}, ${6:CGColorSpaceRef space}, ${7:CGBitmapInfo bitmapInfo}, ${8:CGBitmapContextReleaseDataCallback releaseCallback}, ${9:void* releaseInfo})"
    },
    {
      "trigger": "CGBitmapContextGetAlphaInfo",
      "contents": "CGBitmapContextGetAlphaInfo(${1:CGContextRef context})"
    },
    {
      "trigger": "CGBitmapContextGetBitmapInfo",
      "contents": "CGBitmapContextGetBitmapInfo(${1:CGContextRef context})"
    },
    {
      "trigger": "CGBitmapContextGetBitsPerComponent",
      "contents": "CGBitmapContextGetBitsPerComponent(${1:CGContextRef context})"
    },
    {
      "trigger": "CGBitmapContextGetBitsPerPixel",
      "contents": "CGBitmapContextGetBitsPerPixel(${1:CGContextRef context})"
    },
    {
      "trigger": "CGBitmapContextGetBytesPerRow",
      "contents": "CGBitmapContextGetBytesPerRow(${1:CGContextRef context})"
    },
    {
      "trigger": "CGBitmapContextGetColorSpace",
      "contents": "CGBitmapContextGetColorSpace(${1:CGContextRef context})"
    },
    {
      "trigger": "CGBitmapContextGetData",
      "contents": "CGBitmapContextGetData(${1:CGContextRef context})"
    },
    {
      "trigger": "CGBitmapContextGetHeight",
      "contents": "CGBitmapContextGetHeight(${1:CGContextRef context})"
    },
    {
      "trigger": "CGBitmapContextGetWidth",
      "contents": "CGBitmapContextGetWidth(${1:CGContextRef context})"
    },
    {
      "trigger": "CGColorCreate",
      "contents": "CGColorCreate(${1:CGColorSpaceRef space}, ${2:CGFloat* components})"
    },
    {
      "trigger": "CGColorCreateCopy",
      "contents": "CGColorCreateCopy(${1:CGColorRef color})"
    },
    {
      "trigger": "CGColorCreateCopyWithAlpha",
      "contents": "CGColorCreateCopyWithAlpha(${1:CGColorRef color}, ${2:CGFloat alpha})"
    },
    {
      "trigger": "CGColorCreateWithPattern",
      "contents": "CGColorCreateWithPattern(${1:CGColorSpaceRef space}, ${2:CGPatternRef pattern}, ${3:CGFloat* components})"
    },
    {
      "trigger": "CGColorEqualToColor",
      "contents": "CGColorEqualToColor(${1:CGColorRef color1}, ${2:CGColorRef color2})"
    },
    {
      "trigger": "CGColorGetAlpha",
      "contents": "CGColorGetAlpha(${1:CGColorRef color})"
    },
    {
      "trigger": "CGColorGetColorSpace",
      "contents": "CGColorGetColorSpace(${1:CGColorRef color})"
    },
    {
      "trigger": "CGColorGetComponents",
      "contents": "CGColorGetComponents(${1:CGColorRef color})"
    },
    {
      "trigger": "CGColorGetNumberOfComponents",
      "contents": "CGColorGetNumberOfComponents(${1:CGColorRef color})"
    },
    {
      "trigger": "CGColorGetPattern",
      "contents": "CGColorGetPattern(${1:CGColorRef color})"
    },
    {
      "trigger": "CGColorRelease",
      "contents": "CGColorRelease(${1:CGColorRef color})"
    },
    {
      "trigger": "CGColorRetain",
      "contents": "CGColorRetain(${1:CGColorRef color})"
    },
    {
      "trigger": "CGColorSpaceCreateCalibratedGray",
      "contents": "CGColorSpaceCreateCalibratedGray(${1:CGFloat* whitePoint}, ${2:CGFloat* blackPoint}, ${3:CGFloat gamma})"
    },
    {
      "trigger": "CGColorSpaceCreateCalibratedRGB",
      "contents": "CGColorSpaceCreateCalibratedRGB(${1:CGFloat* whitePoint}, ${2:CGFloat* blackPoint}, ${3:CGFloat* gamma}, ${4:CGFloat* matrix})"
    },
    {
      "trigger": "CGColorSpaceCreateICCBased",
      "contents": "CGColorSpaceCreateICCBased(${1:size_t nComponents}, ${2:CGFloat* range}, ${3:CGDataProviderRef profile}, ${4:CGColorSpaceRef alternate})"
    },
    {
      "trigger": "CGColorSpaceCreateIndexed",
      "contents": "CGColorSpaceCreateIndexed(${1:CGColorSpaceRef baseSpace}, ${2:size_t lastIndex}, ${3:unsigned char* colorTable})"
    },
    {
      "trigger": "CGColorSpaceCreateLab",
      "contents": "CGColorSpaceCreateLab(${1:CGFloat* whitePoint}, ${2:CGFloat* blackPoint}, ${3:CGFloat* range})"
    },
    {
      "trigger": "CGColorSpaceCreatePattern",
      "contents": "CGColorSpaceCreatePattern(${1:CGColorSpaceRef baseSpace})"
    },
    {
      "trigger": "CGColorSpaceCreateWithICCProfile",
      "contents": "CGColorSpaceCreateWithICCProfile(${1:CFDataRef data})"
    },
    {
      "trigger": "CGColorSpaceCreateWithName",
      "contents": "CGColorSpaceCreateWithName(${1:CFStringRef name})"
    },
    {
      "trigger": "CGColorSpaceGetBaseColorSpace",
      "contents": "CGColorSpaceGetBaseColorSpace(${1:CGColorSpaceRef space})"
    },
    {
      "trigger": "CGColorSpaceGetColorTable",
      "contents": "CGColorSpaceGetColorTable(${1:CGColorSpaceRef space}, ${2:uint8_t* table})"
    },
    {
      "trigger": "CGColorSpaceGetColorTableCount",
      "contents": "CGColorSpaceGetColorTableCount(${1:CGColorSpaceRef space})"
    },
    {
      "trigger": "CGColorSpaceGetModel",
      "contents": "CGColorSpaceGetModel(${1:CGColorSpaceRef space})"
    },
    {
      "trigger": "CGColorSpaceGetNumberOfComponents",
      "contents": "CGColorSpaceGetNumberOfComponents(${1:CGColorSpaceRef space})"
    },
    {
      "trigger": "CGColorSpaceRelease",
      "contents": "CGColorSpaceRelease(${1:CGColorSpaceRef space})"
    },
    {
      "trigger": "CGColorSpaceRetain",
      "contents": "CGColorSpaceRetain(${1:CGColorSpaceRef space})"
    },
    {
      "trigger": "CGContextAddArc",
      "contents": "CGContextAddArc(${1:CGContextRef c}, ${2:CGFloat x}, ${3:CGFloat y}, ${4:CGFloat radius}, ${5:CGFloat startAngle}, ${6:CGFloat endAngle}, ${7:int clockwise})"
    },
    {
      "trigger": "CGContextAddArcToPoint",
      "contents": "CGContextAddArcToPoint(${1:CGContextRef c}, ${2:CGFloat x1}, ${3:CGFloat y1}, ${4:CGFloat x2}, ${5:CGFloat y2}, ${6:CGFloat radius})"
    },
    {
      "trigger": "CGContextAddCurveToPoint",
      "contents": "CGContextAddCurveToPoint(${1:CGContextRef c}, ${2:CGFloat cp1x}, ${3:CGFloat cp1y}, ${4:CGFloat cp2x}, ${5:CGFloat cp2y}, ${6:CGFloat x}, ${7:CGFloat y})"
    },
    {
      "trigger": "CGContextAddEllipseInRect",
      "contents": "CGContextAddEllipseInRect(${1:CGContextRef context}, ${2:CGRect rect})"
    },
    {
      "trigger": "CGContextAddLineToPoint",
      "contents": "CGContextAddLineToPoint(${1:CGContextRef c}, ${2:CGFloat x}, ${3:CGFloat y})"
    },
    {
      "trigger": "CGContextAddLines",
      "contents": "CGContextAddLines(${1:CGContextRef c}, ${2:CGPoint* points}, ${3:size_t count})"
    },
    {
      "trigger": "CGContextAddPath",
      "contents": "CGContextAddPath(${1:CGContextRef context}, ${2:CGPathRef path})"
    },
    {
      "trigger": "CGContextAddQuadCurveToPoint",
      "contents": "CGContextAddQuadCurveToPoint(${1:CGContextRef c}, ${2:CGFloat cpx}, ${3:CGFloat cpy}, ${4:CGFloat x}, ${5:CGFloat y})"
    },
    {
      "trigger": "CGContextAddRect",
      "contents": "CGContextAddRect(${1:CGContextRef c}, ${2:CGRect rect})"
    },
    {
      "trigger": "CGContextAddRects",
      "contents": "CGContextAddRects(${1:CGContextRef c}, ${2:CGRect* rects}, ${3:size_t count})"
    },
    {
      "trigger": "CGContextBeginPage",
      "contents": "CGContextBeginPage(${1:CGContextRef c}, ${2:CGRect* mediaBox})"
    },
    {
      "trigger": "CGContextBeginPath",
      "contents": "CGContextBeginPath(${1:CGContextRef c})"
    },
    {
      "trigger": "CGContextBeginTransparencyLayer",
      "contents": "CGContextBeginTransparencyLayer(${1:CGContextRef context}, ${2:CFDictionaryRef auxiliaryInfo})"
    },
    {
      "trigger": "CGContextBeginTransparencyLayerWithRect",
      "contents": "CGContextBeginTransparencyLayerWithRect(${1:CGContextRef context}, ${2:CGRect rect}, ${3:CFDictionaryRef auxiliaryInfo})"
    },
    {
      "trigger": "CGContextClearRect",
      "contents": "CGContextClearRect(${1:CGContextRef c}, ${2:CGRect rect})"
    },
    {
      "trigger": "CGContextClip",
      "contents": "CGContextClip(${1:CGContextRef c})"
    },
    {
      "trigger": "CGContextClipToMask",
      "contents": "CGContextClipToMask(${1:CGContextRef c}, ${2:CGRect rect}, ${3:CGImageRef mask})"
    },
    {
      "trigger": "CGContextClipToRect",
      "contents": "CGContextClipToRect(${1:CGContextRef c}, ${2:CGRect rect})"
    },
    {
      "trigger": "CGContextClipToRects",
      "contents": "CGContextClipToRects(${1:CGContextRef c}, ${2:CGRect* rects}, ${3:size_t count})"
    },
    {
      "trigger": "CGContextClosePath",
      "contents": "CGContextClosePath(${1:CGContextRef c})"
    },
    {
      "trigger": "CGContextConcatCTM",
      "contents": "CGContextConcatCTM(${1:CGContextRef c}, ${2:CGAffineTransform transform})"
    },
    {
      "trigger": "CGContextConvertPointToDeviceSpace",
      "contents": "CGContextConvertPointToDeviceSpace(${1:CGContextRef context}, ${2:CGPoint point})"
    },
    {
      "trigger": "CGContextConvertPointToUserSpace",
      "contents": "CGContextConvertPointToUserSpace(${1:CGContextRef context}, ${2:CGPoint point})"
    },
    {
      "trigger": "CGContextConvertRectToDeviceSpace",
      "contents": "CGContextConvertRectToDeviceSpace(${1:CGContextRef context}, ${2:CGRect rect})"
    },
    {
      "trigger": "CGContextConvertRectToUserSpace",
      "contents": "CGContextConvertRectToUserSpace(${1:CGContextRef context}, ${2:CGRect rect})"
    },
    {
      "trigger": "CGContextConvertSizeToDeviceSpace",
      "contents": "CGContextConvertSizeToDeviceSpace(${1:CGContextRef context}, ${2:CGSize size})"
    },
    {
      "trigger": "CGContextConvertSizeToUserSpace",
      "contents": "CGContextConvertSizeToUserSpace(${1:CGContextRef context}, ${2:CGSize size})"
    },
    {
      "trigger": "CGContextCopyPath",
      "contents": "CGContextCopyPath(${1:CGContextRef context})"
    },
    {
      "trigger": "CGContextDrawImage",
      "contents": "CGContextDrawImage(${1:CGContextRef c}, ${2:CGRect rect}, ${3:CGImageRef image})"
    },
    {
      "trigger": "CGContextDrawLayerAtPoint",
      "contents": "CGContextDrawLayerAtPoint(${1:CGContextRef context}, ${2:CGPoint point}, ${3:CGLayerRef layer})"
    },
    {
      "trigger": "CGContextDrawLayerInRect",
      "contents": "CGContextDrawLayerInRect(${1:CGContextRef context}, ${2:CGRect rect}, ${3:CGLayerRef layer})"
    },
    {
      "trigger": "CGContextDrawLinearGradient",
      "contents": "CGContextDrawLinearGradient(${1:CGContextRef context}, ${2:CGGradientRef gradient}, ${3:CGPoint startPoint}, ${4:CGPoint endPoint}, ${5:CGGradientDrawingOptions options})"
    },
    {
      "trigger": "CGContextDrawPDFPage",
      "contents": "CGContextDrawPDFPage(${1:CGContextRef c}, ${2:CGPDFPageRef page})"
    },
    {
      "trigger": "CGContextDrawPath",
      "contents": "CGContextDrawPath(${1:CGContextRef c}, ${2:CGPathDrawingMode mode})"
    },
    {
      "trigger": "CGContextDrawRadialGradient",
      "contents": "CGContextDrawRadialGradient(${1:CGContextRef context}, ${2:CGGradientRef gradient}, ${3:CGPoint startCenter}, ${4:CGFloat startRadius}, ${5:CGPoint endCenter}, ${6:CGFloat endRadius}, ${7:CGGradientDrawingOptions options})"
    },
    {
      "trigger": "CGContextDrawShading",
      "contents": "CGContextDrawShading(${1:CGContextRef context}, ${2:CGShadingRef shading})"
    },
    {
      "trigger": "CGContextDrawTiledImage",
      "contents": "CGContextDrawTiledImage(${1:CGContextRef c}, ${2:CGRect rect}, ${3:CGImageRef image})"
    },
    {
      "trigger": "CGContextEOClip",
      "contents": "CGContextEOClip(${1:CGContextRef c})"
    },
    {
      "trigger": "CGContextEOFillPath",
      "contents": "CGContextEOFillPath(${1:CGContextRef c})"
    },
    {
      "trigger": "CGContextEndPage",
      "contents": "CGContextEndPage(${1:CGContextRef c})"
    },
    {
      "trigger": "CGContextEndTransparencyLayer",
      "contents": "CGContextEndTransparencyLayer(${1:CGContextRef context})"
    },
    {
      "trigger": "CGContextFillEllipseInRect",
      "contents": "CGContextFillEllipseInRect(${1:CGContextRef context}, ${2:CGRect rect})"
    },
    {
      "trigger": "CGContextFillPath",
      "contents": "CGContextFillPath(${1:CGContextRef c})"
    },
    {
      "trigger": "CGContextFillRect",
      "contents": "CGContextFillRect(${1:CGContextRef c}, ${2:CGRect rect})"
    },
    {
      "trigger": "CGContextFillRects",
      "contents": "CGContextFillRects(${1:CGContextRef c}, ${2:CGRect* rects}, ${3:size_t count})"
    },
    {
      "trigger": "CGContextFlush",
      "contents": "CGContextFlush(${1:CGContextRef c})"
    },
    {
      "trigger": "CGContextGetCTM",
      "contents": "CGContextGetCTM(${1:CGContextRef c})"
    },
    {
      "trigger": "CGContextGetClipBoundingBox",
      "contents": "CGContextGetClipBoundingBox(${1:CGContextRef c})"
    },
    {
      "trigger": "CGContextGetInterpolationQuality",
      "contents": "CGContextGetInterpolationQuality(${1:CGContextRef context})"
    },
    {
      "trigger": "CGContextGetPathBoundingBox",
      "contents": "CGContextGetPathBoundingBox(${1:CGContextRef context})"
    },
    {
      "trigger": "CGContextGetPathCurrentPoint",
      "contents": "CGContextGetPathCurrentPoint(${1:CGContextRef context})"
    },
    {
      "trigger": "CGContextGetTextMatrix",
      "contents": "CGContextGetTextMatrix(${1:CGContextRef c})"
    },
    {
      "trigger": "CGContextGetTextPosition",
      "contents": "CGContextGetTextPosition(${1:CGContextRef context})"
    },
    {
      "trigger": "CGContextGetUserSpaceToDeviceSpaceTransform",
      "contents": "CGContextGetUserSpaceToDeviceSpaceTransform(${1:CGContextRef context})"
    },
    {
      "trigger": "CGContextIsPathEmpty",
      "contents": "CGContextIsPathEmpty(${1:CGContextRef context})"
    },
    {
      "trigger": "CGContextMoveToPoint",
      "contents": "CGContextMoveToPoint(${1:CGContextRef c}, ${2:CGFloat x}, ${3:CGFloat y})"
    },
    {
      "trigger": "CGContextPathContainsPoint",
      "contents": "CGContextPathContainsPoint(${1:CGContextRef context}, ${2:CGPoint point}, ${3:CGPathDrawingMode mode})"
    },
    {
      "trigger": "CGContextRelease",
      "contents": "CGContextRelease(${1:CGContextRef c})"
    },
    {
      "trigger": "CGContextReplacePathWithStrokedPath",
      "contents": "CGContextReplacePathWithStrokedPath(${1:CGContextRef c})"
    },
    {
      "trigger": "CGContextRestoreGState",
      "contents": "CGContextRestoreGState(${1:CGContextRef c})"
    },
    {
      "trigger": "CGContextRetain",
      "contents": "CGContextRetain(${1:CGContextRef c})"
    },
    {
      "trigger": "CGContextRotateCTM",
      "contents": "CGContextRotateCTM(${1:CGContextRef c}, ${2:CGFloat angle})"
    },
    {
      "trigger": "CGContextSaveGState",
      "contents": "CGContextSaveGState(${1:CGContextRef c})"
    },
    {
      "trigger": "CGContextScaleCTM",
      "contents": "CGContextScaleCTM(${1:CGContextRef c}, ${2:CGFloat sx}, ${3:CGFloat sy})"
    },
    {
      "trigger": "CGContextSelectFont",
      "contents": "CGContextSelectFont(${1:CGContextRef c}, ${2:char* name}, ${3:CGFloat size}, ${4:CGTextEncoding textEncoding})"
    },
    {
      "trigger": "CGContextSetAllowsAntialiasing",
      "contents": "CGContextSetAllowsAntialiasing(${1:CGContextRef context}, ${2:_Bool allowsAntialiasing})"
    },
    {
      "trigger": "CGContextSetAllowsFontSmoothing",
      "contents": "CGContextSetAllowsFontSmoothing(${1:CGContextRef context}, ${2:_Bool allowsFontSmoothing})"
    },
    {
      "trigger": "CGContextSetAllowsFontSubpixelPositioning",
      "contents": "CGContextSetAllowsFontSubpixelPositioning(${1:CGContextRef context}, ${2:_Bool allowsFontSubpixelPositioning})"
    },
    {
      "trigger": "CGContextSetAllowsFontSubpixelQuantization",
      "contents": "CGContextSetAllowsFontSubpixelQuantization(${1:CGContextRef context}, ${2:_Bool allowsFontSubpixelQuantization})"
    },
    {
      "trigger": "CGContextSetAlpha",
      "contents": "CGContextSetAlpha(${1:CGContextRef c}, ${2:CGFloat alpha})"
    },
    {
      "trigger": "CGContextSetBlendMode",
      "contents": "CGContextSetBlendMode(${1:CGContextRef context}, ${2:CGBlendMode mode})"
    },
    {
      "trigger": "CGContextSetCMYKFillColor",
      "contents": "CGContextSetCMYKFillColor(${1:CGContextRef context}, ${2:CGFloat cyan}, ${3:CGFloat magenta}, ${4:CGFloat yellow}, ${5:CGFloat black}, ${6:CGFloat alpha})"
    },
    {
      "trigger": "CGContextSetCMYKStrokeColor",
      "contents": "CGContextSetCMYKStrokeColor(${1:CGContextRef context}, ${2:CGFloat cyan}, ${3:CGFloat magenta}, ${4:CGFloat yellow}, ${5:CGFloat black}, ${6:CGFloat alpha})"
    },
    {
      "trigger": "CGContextSetCharacterSpacing",
      "contents": "CGContextSetCharacterSpacing(${1:CGContextRef context}, ${2:CGFloat spacing})"
    },
    {
      "trigger": "CGContextSetFillColor",
      "contents": "CGContextSetFillColor(${1:CGContextRef context}, ${2:CGFloat* components})"
    },
    {
      "trigger": "CGContextSetFillColorSpace",
      "contents": "CGContextSetFillColorSpace(${1:CGContextRef context}, ${2:CGColorSpaceRef space})"
    },
    {
      "trigger": "CGContextSetFillColorWithColor",
      "contents": "CGContextSetFillColorWithColor(${1:CGContextRef c}, ${2:CGColorRef color})"
    },
    {
      "trigger": "CGContextSetFillPattern",
      "contents": "CGContextSetFillPattern(${1:CGContextRef context}, ${2:CGPatternRef pattern}, ${3:CGFloat* components})"
    },
    {
      "trigger": "CGContextSetFlatness",
      "contents": "CGContextSetFlatness(${1:CGContextRef c}, ${2:CGFloat flatness})"
    },
    {
      "trigger": "CGContextSetFont",
      "contents": "CGContextSetFont(${1:CGContextRef c}, ${2:CGFontRef font})"
    },
    {
      "trigger": "CGContextSetFontSize",
      "contents": "CGContextSetFontSize(${1:CGContextRef c}, ${2:CGFloat size})"
    },
    {
      "trigger": "CGContextSetGrayFillColor",
      "contents": "CGContextSetGrayFillColor(${1:CGContextRef context}, ${2:CGFloat gray}, ${3:CGFloat alpha})"
    },
    {
      "trigger": "CGContextSetGrayStrokeColor",
      "contents": "CGContextSetGrayStrokeColor(${1:CGContextRef context}, ${2:CGFloat gray}, ${3:CGFloat alpha})"
    },
    {
      "trigger": "CGContextSetInterpolationQuality",
      "contents": "CGContextSetInterpolationQuality(${1:CGContextRef context}, ${2:CGInterpolationQuality quality})"
    },
    {
      "trigger": "CGContextSetLineCap",
      "contents": "CGContextSetLineCap(${1:CGContextRef c}, ${2:CGLineCap cap})"
    },
    {
      "trigger": "CGContextSetLineDash",
      "contents": "CGContextSetLineDash(${1:CGContextRef c}, ${2:CGFloat phase}, ${3:CGFloat* lengths}, ${4:size_t count})"
    },
    {
      "trigger": "CGContextSetLineJoin",
      "contents": "CGContextSetLineJoin(${1:CGContextRef c}, ${2:CGLineJoin join})"
    },
    {
      "trigger": "CGContextSetLineWidth",
      "contents": "CGContextSetLineWidth(${1:CGContextRef c}, ${2:CGFloat width})"
    },
    {
      "trigger": "CGContextSetMiterLimit",
      "contents": "CGContextSetMiterLimit(${1:CGContextRef c}, ${2:CGFloat limit})"
    },
    {
      "trigger": "CGContextSetPatternPhase",
      "contents": "CGContextSetPatternPhase(${1:CGContextRef context}, ${2:CGSize phase})"
    },
    {
      "trigger": "CGContextSetRGBFillColor",
      "contents": "CGContextSetRGBFillColor(${1:CGContextRef context}, ${2:CGFloat red}, ${3:CGFloat green}, ${4:CGFloat blue}, ${5:CGFloat alpha})"
    },
    {
      "trigger": "CGContextSetRGBStrokeColor",
      "contents": "CGContextSetRGBStrokeColor(${1:CGContextRef context}, ${2:CGFloat red}, ${3:CGFloat green}, ${4:CGFloat blue}, ${5:CGFloat alpha})"
    },
    {
      "trigger": "CGContextSetRenderingIntent",
      "contents": "CGContextSetRenderingIntent(${1:CGContextRef context}, ${2:CGColorRenderingIntent intent})"
    },
    {
      "trigger": "CGContextSetShadow",
      "contents": "CGContextSetShadow(${1:CGContextRef context}, ${2:CGSize offset}, ${3:CGFloat blur})"
    },
    {
      "trigger": "CGContextSetShadowWithColor",
      "contents": "CGContextSetShadowWithColor(${1:CGContextRef context}, ${2:CGSize offset}, ${3:CGFloat blur}, ${4:CGColorRef color})"
    },
    {
      "trigger": "CGContextSetShouldAntialias",
      "contents": "CGContextSetShouldAntialias(${1:CGContextRef context}, ${2:_Bool shouldAntialias})"
    },
    {
      "trigger": "CGContextSetShouldSmoothFonts",
      "contents": "CGContextSetShouldSmoothFonts(${1:CGContextRef context}, ${2:_Bool shouldSmoothFonts})"
    },
    {
      "trigger": "CGContextSetShouldSubpixelPositionFonts",
      "contents": "CGContextSetShouldSubpixelPositionFonts(${1:CGContextRef context}, ${2:_Bool shouldSubpixelPositionFonts})"
    },
    {
      "trigger": "CGContextSetShouldSubpixelQuantizeFonts",
      "contents": "CGContextSetShouldSubpixelQuantizeFonts(${1:CGContextRef context}, ${2:_Bool shouldSubpixelQuantizeFonts})"
    },
    {
      "trigger": "CGContextSetStrokeColor",
      "contents": "CGContextSetStrokeColor(${1:CGContextRef context}, ${2:CGFloat* components})"
    },
    {
      "trigger": "CGContextSetStrokeColorSpace",
      "contents": "CGContextSetStrokeColorSpace(${1:CGContextRef context}, ${2:CGColorSpaceRef space})"
    },
    {
      "trigger": "CGContextSetStrokeColorWithColor",
      "contents": "CGContextSetStrokeColorWithColor(${1:CGContextRef c}, ${2:CGColorRef color})"
    },
    {
      "trigger": "CGContextSetStrokePattern",
      "contents": "CGContextSetStrokePattern(${1:CGContextRef context}, ${2:CGPatternRef pattern}, ${3:CGFloat* components})"
    },
    {
      "trigger": "CGContextSetTextDrawingMode",
      "contents": "CGContextSetTextDrawingMode(${1:CGContextRef c}, ${2:CGTextDrawingMode mode})"
    },
    {
      "trigger": "CGContextSetTextMatrix",
      "contents": "CGContextSetTextMatrix(${1:CGContextRef c}, ${2:CGAffineTransform t})"
    },
    {
      "trigger": "CGContextSetTextPosition",
      "contents": "CGContextSetTextPosition(${1:CGContextRef c}, ${2:CGFloat x}, ${3:CGFloat y})"
    },
    {
      "trigger": "CGContextShowGlyphs",
      "contents": "CGContextShowGlyphs(${1:CGContextRef c}, ${2:CGGlyph* g}, ${3:size_t count})"
    },
    {
      "trigger": "CGContextShowGlyphsAtPoint",
      "contents": "CGContextShowGlyphsAtPoint(${1:CGContextRef context}, ${2:CGFloat x}, ${3:CGFloat y}, ${4:CGGlyph* glyphs}, ${5:size_t count})"
    },
    {
      "trigger": "CGContextShowGlyphsAtPositions",
      "contents": "CGContextShowGlyphsAtPositions(${1:CGContextRef context}, ${2:CGGlyph* glyphs}, ${3:CGPoint* positions}, ${4:size_t count})"
    },
    {
      "trigger": "CGContextShowGlyphsWithAdvances",
      "contents": "CGContextShowGlyphsWithAdvances(${1:CGContextRef c}, ${2:CGGlyph* glyphs}, ${3:CGSize* advances}, ${4:size_t count})"
    },
    {
      "trigger": "CGContextShowText",
      "contents": "CGContextShowText(${1:CGContextRef c}, ${2:char* string}, ${3:size_t length})"
    },
    {
      "trigger": "CGContextShowTextAtPoint",
      "contents": "CGContextShowTextAtPoint(${1:CGContextRef c}, ${2:CGFloat x}, ${3:CGFloat y}, ${4:char* string}, ${5:size_t length})"
    },
    {
      "trigger": "CGContextStrokeEllipseInRect",
      "contents": "CGContextStrokeEllipseInRect(${1:CGContextRef context}, ${2:CGRect rect})"
    },
    {
      "trigger": "CGContextStrokeLineSegments",
      "contents": "CGContextStrokeLineSegments(${1:CGContextRef c}, ${2:CGPoint* points}, ${3:size_t count})"
    },
    {
      "trigger": "CGContextStrokePath",
      "contents": "CGContextStrokePath(${1:CGContextRef c})"
    },
    {
      "trigger": "CGContextStrokeRect",
      "contents": "CGContextStrokeRect(${1:CGContextRef c}, ${2:CGRect rect})"
    },
    {
      "trigger": "CGContextStrokeRectWithWidth",
      "contents": "CGContextStrokeRectWithWidth(${1:CGContextRef c}, ${2:CGRect rect}, ${3:CGFloat width})"
    },
    {
      "trigger": "CGContextSynchronize",
      "contents": "CGContextSynchronize(${1:CGContextRef c})"
    },
    {
      "trigger": "CGContextTranslateCTM",
      "contents": "CGContextTranslateCTM(${1:CGContextRef c}, ${2:CGFloat tx}, ${3:CGFloat ty})"
    },
    {
      "trigger": "CGDataConsumerCreate",
      "contents": "CGDataConsumerCreate(${1:void* info}, ${2:CGDataConsumerCallbacks* callbacks})"
    },
    {
      "trigger": "CGDataConsumerCreateWithCFData",
      "contents": "CGDataConsumerCreateWithCFData(${1:CFMutableDataRef data})"
    },
    {
      "trigger": "CGDataConsumerCreateWithURL",
      "contents": "CGDataConsumerCreateWithURL(${1:CFURLRef url})"
    },
    {
      "trigger": "CGDataConsumerRelease",
      "contents": "CGDataConsumerRelease(${1:CGDataConsumerRef consumer})"
    },
    {
      "trigger": "CGDataConsumerRetain",
      "contents": "CGDataConsumerRetain(${1:CGDataConsumerRef consumer})"
    },
    {
      "trigger": "CGDataProviderCopyData",
      "contents": "CGDataProviderCopyData(${1:CGDataProviderRef provider})"
    },
    {
      "trigger": "CGDataProviderCreateDirect",
      "contents": "CGDataProviderCreateDirect(${1:void* info}, ${2:off_t size}, ${3:CGDataProviderDirectCallbacks* callbacks})"
    },
    {
      "trigger": "CGDataProviderCreateSequential",
      "contents": "CGDataProviderCreateSequential(${1:void* info}, ${2:CGDataProviderSequentialCallbacks* callbacks})"
    },
    {
      "trigger": "CGDataProviderCreateWithCFData",
      "contents": "CGDataProviderCreateWithCFData(${1:CFDataRef data})"
    },
    {
      "trigger": "CGDataProviderCreateWithData",
      "contents": "CGDataProviderCreateWithData(${1:void* info}, ${2:void* data}, ${3:size_t size}, ${4:CGDataProviderReleaseDataCallback releaseData})"
    },
    {
      "trigger": "CGDataProviderCreateWithFilename",
      "contents": "CGDataProviderCreateWithFilename(${1:char* filename})"
    },
    {
      "trigger": "CGDataProviderCreateWithURL",
      "contents": "CGDataProviderCreateWithURL(${1:CFURLRef url})"
    },
    {
      "trigger": "CGDataProviderRelease",
      "contents": "CGDataProviderRelease(${1:CGDataProviderRef provider})"
    },
    {
      "trigger": "CGDataProviderRetain",
      "contents": "CGDataProviderRetain(${1:CGDataProviderRef provider})"
    },
    {
      "trigger": "CGFLOAT_DEFINED (1)",
      "contents": "CGFLOAT_DEFINED"
    },
    {
      "trigger": "CGFLOAT_IS_DOUBLE (0)",
      "contents": "CGFLOAT_IS_DOUBLE"
    },
    {
      "trigger": "CGFontCanCreatePostScriptSubset",
      "contents": "CGFontCanCreatePostScriptSubset(${1:CGFontRef font}, ${2:CGFontPostScriptFormat format})"
    },
    {
      "trigger": "CGFontCopyFullName",
      "contents": "CGFontCopyFullName(${1:CGFontRef font})"
    },
    {
      "trigger": "CGFontCopyGlyphNameForGlyph",
      "contents": "CGFontCopyGlyphNameForGlyph(${1:CGFontRef font}, ${2:CGGlyph glyph})"
    },
    {
      "trigger": "CGFontCopyPostScriptName",
      "contents": "CGFontCopyPostScriptName(${1:CGFontRef font})"
    },
    {
      "trigger": "CGFontCopyTableForTag",
      "contents": "CGFontCopyTableForTag(${1:CGFontRef font}, ${2:uint32_t tag})"
    },
    {
      "trigger": "CGFontCopyTableTags",
      "contents": "CGFontCopyTableTags(${1:CGFontRef font})"
    },
    {
      "trigger": "CGFontCopyVariationAxes",
      "contents": "CGFontCopyVariationAxes(${1:CGFontRef font})"
    },
    {
      "trigger": "CGFontCopyVariations",
      "contents": "CGFontCopyVariations(${1:CGFontRef font})"
    },
    {
      "trigger": "CGFontCreateCopyWithVariations",
      "contents": "CGFontCreateCopyWithVariations(${1:CGFontRef font}, ${2:CFDictionaryRef variations})"
    },
    {
      "trigger": "CGFontCreatePostScriptEncoding",
      "contents": "CGFontCreatePostScriptEncoding(${1:CGFontRef font}, ${2:CGGlyph* encoding})"
    },
    {
      "trigger": "CGFontCreatePostScriptSubset",
      "contents": "CGFontCreatePostScriptSubset(${1:CGFontRef font}, ${2:CFStringRef subsetName}, ${3:CGFontPostScriptFormat format}, ${4:CGGlyph* glyphs}, ${5:size_t count}, ${6:CGGlyph* encoding})"
    },
    {
      "trigger": "CGFontCreateWithDataProvider",
      "contents": "CGFontCreateWithDataProvider(${1:CGDataProviderRef provider})"
    },
    {
      "trigger": "CGFontCreateWithFontName",
      "contents": "CGFontCreateWithFontName(${1:CFStringRef name})"
    },
    {
      "trigger": "CGFontGetAscent",
      "contents": "CGFontGetAscent(${1:CGFontRef font})"
    },
    {
      "trigger": "CGFontGetCapHeight",
      "contents": "CGFontGetCapHeight(${1:CGFontRef font})"
    },
    {
      "trigger": "CGFontGetDescent",
      "contents": "CGFontGetDescent(${1:CGFontRef font})"
    },
    {
      "trigger": "CGFontGetFontBBox",
      "contents": "CGFontGetFontBBox(${1:CGFontRef font})"
    },
    {
      "trigger": "CGFontGetGlyphAdvances",
      "contents": "CGFontGetGlyphAdvances(${1:CGFontRef font}, ${2:CGGlyph* glyphs}, ${3:size_t count}, ${4:int* advances})"
    },
    {
      "trigger": "CGFontGetGlyphBBoxes",
      "contents": "CGFontGetGlyphBBoxes(${1:CGFontRef font}, ${2:CGGlyph* glyphs}, ${3:size_t count}, ${4:CGRect* bboxes})"
    },
    {
      "trigger": "CGFontGetGlyphWithGlyphName",
      "contents": "CGFontGetGlyphWithGlyphName(${1:CGFontRef font}, ${2:CFStringRef name})"
    },
    {
      "trigger": "CGFontGetItalicAngle",
      "contents": "CGFontGetItalicAngle(${1:CGFontRef font})"
    },
    {
      "trigger": "CGFontGetLeading",
      "contents": "CGFontGetLeading(${1:CGFontRef font})"
    },
    {
      "trigger": "CGFontGetNumberOfGlyphs",
      "contents": "CGFontGetNumberOfGlyphs(${1:CGFontRef font})"
    },
    {
      "trigger": "CGFontGetStemV",
      "contents": "CGFontGetStemV(${1:CGFontRef font})"
    },
    {
      "trigger": "CGFontGetUnitsPerEm",
      "contents": "CGFontGetUnitsPerEm(${1:CGFontRef font})"
    },
    {
      "trigger": "CGFontGetXHeight",
      "contents": "CGFontGetXHeight(${1:CGFontRef font})"
    },
    {
      "trigger": "CGFontRelease",
      "contents": "CGFontRelease(${1:CGFontRef font})"
    },
    {
      "trigger": "CGFontRetain",
      "contents": "CGFontRetain(${1:CGFontRef font})"
    },
    {
      "trigger": "CGFunctionCreate",
      "contents": "CGFunctionCreate(${1:void* info}, ${2:size_t domainDimension}, ${3:CGFloat* domain}, ${4:size_t rangeDimension}, ${5:CGFloat* range}, ${6:CGFunctionCallbacks* callbacks})"
    },
    {
      "trigger": "CGFunctionRelease",
      "contents": "CGFunctionRelease(${1:CGFunctionRef function})"
    },
    {
      "trigger": "CGFunctionRetain",
      "contents": "CGFunctionRetain(${1:CGFunctionRef function})"
    },
    {
      "trigger": "CGGlyphMax (65534)",
      "contents": "CGGlyphMax"
    },
    {
      "trigger": "CGGlyphMin (0)",
      "contents": "CGGlyphMin"
    },
    {
      "trigger": "CGGradientCreateWithColorComponents",
      "contents": "CGGradientCreateWithColorComponents(${1:CGColorSpaceRef space}, ${2:CGFloat* components}, ${3:CGFloat* locations}, ${4:size_t count})"
    },
    {
      "trigger": "CGGradientCreateWithColors",
      "contents": "CGGradientCreateWithColors(${1:CGColorSpaceRef space}, ${2:CFArrayRef colors}, ${3:CGFloat* locations})"
    },
    {
      "trigger": "CGGradientRelease",
      "contents": "CGGradientRelease(${1:CGGradientRef gradient})"
    },
    {
      "trigger": "CGGradientRetain",
      "contents": "CGGradientRetain(${1:CGGradientRef gradient})"
    },
    {
      "trigger": "CGImageCreate",
      "contents": "CGImageCreate(${1:size_t width}, ${2:size_t height}, ${3:size_t bitsPerComponent}, ${4:size_t bitsPerPixel}, ${5:size_t bytesPerRow}, ${6:CGColorSpaceRef space}, ${7:CGBitmapInfo bitmapInfo}, ${8:CGDataProviderRef provider}, ${9:CGFloat* decode}, ${10:_Bool shouldInterpolate}, ${11:CGColorRenderingIntent intent})"
    },
    {
      "trigger": "CGImageCreateCopy",
      "contents": "CGImageCreateCopy(${1:CGImageRef image})"
    },
    {
      "trigger": "CGImageCreateCopyWithColorSpace",
      "contents": "CGImageCreateCopyWithColorSpace(${1:CGImageRef image}, ${2:CGColorSpaceRef space})"
    },
    {
      "trigger": "CGImageCreateWithImageInRect",
      "contents": "CGImageCreateWithImageInRect(${1:CGImageRef image}, ${2:CGRect rect})"
    },
    {
      "trigger": "CGImageCreateWithJPEGDataProvider",
      "contents": "CGImageCreateWithJPEGDataProvider(${1:CGDataProviderRef source}, ${2:CGFloat* decode}, ${3:_Bool shouldInterpolate}, ${4:CGColorRenderingIntent intent})"
    },
    {
      "trigger": "CGImageCreateWithMask",
      "contents": "CGImageCreateWithMask(${1:CGImageRef image}, ${2:CGImageRef mask})"
    },
    {
      "trigger": "CGImageCreateWithMaskingColors",
      "contents": "CGImageCreateWithMaskingColors(${1:CGImageRef image}, ${2:CGFloat* components})"
    },
    {
      "trigger": "CGImageCreateWithPNGDataProvider",
      "contents": "CGImageCreateWithPNGDataProvider(${1:CGDataProviderRef source}, ${2:CGFloat* decode}, ${3:_Bool shouldInterpolate}, ${4:CGColorRenderingIntent intent})"
    },
    {
      "trigger": "CGImageDestinationAddImage",
      "contents": "CGImageDestinationAddImage(${1:CGImageDestinationRef idst}, ${2:CGImageRef image}, ${3:CFDictionaryRef properties})"
    },
    {
      "trigger": "CGImageDestinationAddImageFromSource",
      "contents": "CGImageDestinationAddImageFromSource(${1:CGImageDestinationRef idst}, ${2:CGImageSourceRef isrc}, ${3:size_t index}, ${4:CFDictionaryRef properties})"
    },
    {
      "trigger": "CGImageDestinationCreateWithData",
      "contents": "CGImageDestinationCreateWithData(${1:CFMutableDataRef data}, ${2:CFStringRef type}, ${3:size_t count}, ${4:CFDictionaryRef options})"
    },
    {
      "trigger": "CGImageDestinationCreateWithDataConsumer",
      "contents": "CGImageDestinationCreateWithDataConsumer(${1:CGDataConsumerRef consumer}, ${2:CFStringRef type}, ${3:size_t count}, ${4:CFDictionaryRef options})"
    },
    {
      "trigger": "CGImageDestinationCreateWithURL",
      "contents": "CGImageDestinationCreateWithURL(${1:CFURLRef url}, ${2:CFStringRef type}, ${3:size_t count}, ${4:CFDictionaryRef options})"
    },
    {
      "trigger": "CGImageDestinationFinalize",
      "contents": "CGImageDestinationFinalize(${1:CGImageDestinationRef idst})"
    },
    {
      "trigger": "CGImageDestinationSetProperties",
      "contents": "CGImageDestinationSetProperties(${1:CGImageDestinationRef idst}, ${2:CFDictionaryRef properties})"
    },
    {
      "trigger": "CGImageGetAlphaInfo",
      "contents": "CGImageGetAlphaInfo(${1:CGImageRef image})"
    },
    {
      "trigger": "CGImageGetBitmapInfo",
      "contents": "CGImageGetBitmapInfo(${1:CGImageRef image})"
    },
    {
      "trigger": "CGImageGetBitsPerComponent",
      "contents": "CGImageGetBitsPerComponent(${1:CGImageRef image})"
    },
    {
      "trigger": "CGImageGetBitsPerPixel",
      "contents": "CGImageGetBitsPerPixel(${1:CGImageRef image})"
    },
    {
      "trigger": "CGImageGetBytesPerRow",
      "contents": "CGImageGetBytesPerRow(${1:CGImageRef image})"
    },
    {
      "trigger": "CGImageGetColorSpace",
      "contents": "CGImageGetColorSpace(${1:CGImageRef image})"
    },
    {
      "trigger": "CGImageGetDataProvider",
      "contents": "CGImageGetDataProvider(${1:CGImageRef image})"
    },
    {
      "trigger": "CGImageGetDecode",
      "contents": "CGImageGetDecode(${1:CGImageRef image})"
    },
    {
      "trigger": "CGImageGetHeight",
      "contents": "CGImageGetHeight(${1:CGImageRef image})"
    },
    {
      "trigger": "CGImageGetRenderingIntent",
      "contents": "CGImageGetRenderingIntent(${1:CGImageRef image})"
    },
    {
      "trigger": "CGImageGetShouldInterpolate",
      "contents": "CGImageGetShouldInterpolate(${1:CGImageRef image})"
    },
    {
      "trigger": "CGImageGetWidth",
      "contents": "CGImageGetWidth(${1:CGImageRef image})"
    },
    {
      "trigger": "CGImageIsMask",
      "contents": "CGImageIsMask(${1:CGImageRef image})"
    },
    {
      "trigger": "CGImageMaskCreate",
      "contents": "CGImageMaskCreate(${1:size_t width}, ${2:size_t height}, ${3:size_t bitsPerComponent}, ${4:size_t bitsPerPixel}, ${5:size_t bytesPerRow}, ${6:CGDataProviderRef provider}, ${7:CGFloat* decode}, ${8:_Bool shouldInterpolate})"
    },
    {
      "trigger": "CGImageRelease",
      "contents": "CGImageRelease(${1:CGImageRef image})"
    },
    {
      "trigger": "CGImageRetain",
      "contents": "CGImageRetain(${1:CGImageRef image})"
    },
    {
      "trigger": "CGImageSourceCopyProperties",
      "contents": "CGImageSourceCopyProperties(${1:CGImageSourceRef isrc}, ${2:CFDictionaryRef options})"
    },
    {
      "trigger": "CGImageSourceCopyPropertiesAtIndex",
      "contents": "CGImageSourceCopyPropertiesAtIndex(${1:CGImageSourceRef isrc}, ${2:size_t index}, ${3:CFDictionaryRef options})"
    },
    {
      "trigger": "CGImageSourceCreateImageAtIndex",
      "contents": "CGImageSourceCreateImageAtIndex(${1:CGImageSourceRef isrc}, ${2:size_t index}, ${3:CFDictionaryRef options})"
    },
    {
      "trigger": "CGImageSourceCreateIncremental",
      "contents": "CGImageSourceCreateIncremental(${1:CFDictionaryRef options})"
    },
    {
      "trigger": "CGImageSourceCreateThumbnailAtIndex",
      "contents": "CGImageSourceCreateThumbnailAtIndex(${1:CGImageSourceRef isrc}, ${2:size_t index}, ${3:CFDictionaryRef options})"
    },
    {
      "trigger": "CGImageSourceCreateWithData",
      "contents": "CGImageSourceCreateWithData(${1:CFDataRef data}, ${2:CFDictionaryRef options})"
    },
    {
      "trigger": "CGImageSourceCreateWithDataProvider",
      "contents": "CGImageSourceCreateWithDataProvider(${1:CGDataProviderRef provider}, ${2:CFDictionaryRef options})"
    },
    {
      "trigger": "CGImageSourceCreateWithURL",
      "contents": "CGImageSourceCreateWithURL(${1:CFURLRef url}, ${2:CFDictionaryRef options})"
    },
    {
      "trigger": "CGImageSourceGetCount",
      "contents": "CGImageSourceGetCount(${1:CGImageSourceRef isrc})"
    },
    {
      "trigger": "CGImageSourceGetStatus",
      "contents": "CGImageSourceGetStatus(${1:CGImageSourceRef isrc})"
    },
    {
      "trigger": "CGImageSourceGetStatusAtIndex",
      "contents": "CGImageSourceGetStatusAtIndex(${1:CGImageSourceRef isrc}, ${2:size_t index})"
    },
    {
      "trigger": "CGImageSourceGetType",
      "contents": "CGImageSourceGetType(${1:CGImageSourceRef isrc})"
    },
    {
      "trigger": "CGImageSourceUpdateData",
      "contents": "CGImageSourceUpdateData(${1:CGImageSourceRef isrc}, ${2:CFDataRef data}, ${3:_Bool final})"
    },
    {
      "trigger": "CGImageSourceUpdateDataProvider",
      "contents": "CGImageSourceUpdateDataProvider(${1:CGImageSourceRef isrc}, ${2:CGDataProviderRef provider}, ${3:_Bool final})"
    },
    {
      "trigger": "CGImageWithOptions:",
      "contents": "CGImageWithOptions(${1:NSDictionary* options})"
    },
    {
      "trigger": "CGLayerCreateWithContext",
      "contents": "CGLayerCreateWithContext(${1:CGContextRef context}, ${2:CGSize size}, ${3:CFDictionaryRef auxiliaryInfo})"
    },
    {
      "trigger": "CGLayerGetContext",
      "contents": "CGLayerGetContext(${1:CGLayerRef layer})"
    },
    {
      "trigger": "CGLayerGetSize",
      "contents": "CGLayerGetSize(${1:CGLayerRef layer})"
    },
    {
      "trigger": "CGLayerRelease",
      "contents": "CGLayerRelease(${1:CGLayerRef layer})"
    },
    {
      "trigger": "CGLayerRetain",
      "contents": "CGLayerRetain(${1:CGLayerRef layer})"
    },
    {
      "trigger": "CGPDFArrayGetArray",
      "contents": "CGPDFArrayGetArray(${1:CGPDFArrayRef array}, ${2:size_t index}, ${3:CGPDFArrayRef* value})"
    },
    {
      "trigger": "CGPDFArrayGetBoolean",
      "contents": "CGPDFArrayGetBoolean(${1:CGPDFArrayRef array}, ${2:size_t index}, ${3:CGPDFBoolean* value})"
    },
    {
      "trigger": "CGPDFArrayGetCount",
      "contents": "CGPDFArrayGetCount(${1:CGPDFArrayRef array})"
    },
    {
      "trigger": "CGPDFArrayGetDictionary",
      "contents": "CGPDFArrayGetDictionary(${1:CGPDFArrayRef array}, ${2:size_t index}, ${3:CGPDFDictionaryRef* value})"
    },
    {
      "trigger": "CGPDFArrayGetInteger",
      "contents": "CGPDFArrayGetInteger(${1:CGPDFArrayRef array}, ${2:size_t index}, ${3:CGPDFInteger* value})"
    },
    {
      "trigger": "CGPDFArrayGetName",
      "contents": "CGPDFArrayGetName(${1:CGPDFArrayRef array}, ${2:size_t index}, ${3:char** value})"
    },
    {
      "trigger": "CGPDFArrayGetNull",
      "contents": "CGPDFArrayGetNull(${1:CGPDFArrayRef array}, ${2:size_t index})"
    },
    {
      "trigger": "CGPDFArrayGetNumber",
      "contents": "CGPDFArrayGetNumber(${1:CGPDFArrayRef array}, ${2:size_t index}, ${3:CGPDFReal* value})"
    },
    {
      "trigger": "CGPDFArrayGetObject",
      "contents": "CGPDFArrayGetObject(${1:CGPDFArrayRef array}, ${2:size_t index}, ${3:CGPDFObjectRef* value})"
    },
    {
      "trigger": "CGPDFArrayGetStream",
      "contents": "CGPDFArrayGetStream(${1:CGPDFArrayRef array}, ${2:size_t index}, ${3:CGPDFStreamRef* value})"
    },
    {
      "trigger": "CGPDFArrayGetString",
      "contents": "CGPDFArrayGetString(${1:CGPDFArrayRef array}, ${2:size_t index}, ${3:CGPDFStringRef* value})"
    },
    {
      "trigger": "CGPDFContentStreamCreateWithPage",
      "contents": "CGPDFContentStreamCreateWithPage(${1:CGPDFPageRef page})"
    },
    {
      "trigger": "CGPDFContentStreamCreateWithStream",
      "contents": "CGPDFContentStreamCreateWithStream(${1:CGPDFStreamRef stream}, ${2:CGPDFDictionaryRef streamResources}, ${3:CGPDFContentStreamRef parent})"
    },
    {
      "trigger": "CGPDFContentStreamGetResource",
      "contents": "CGPDFContentStreamGetResource(${1:CGPDFContentStreamRef cs}, ${2:char* category}, ${3:char* name})"
    },
    {
      "trigger": "CGPDFContentStreamGetStreams",
      "contents": "CGPDFContentStreamGetStreams(${1:CGPDFContentStreamRef cs})"
    },
    {
      "trigger": "CGPDFContentStreamRelease",
      "contents": "CGPDFContentStreamRelease(${1:CGPDFContentStreamRef cs})"
    },
    {
      "trigger": "CGPDFContentStreamRetain",
      "contents": "CGPDFContentStreamRetain(${1:CGPDFContentStreamRef cs})"
    },
    {
      "trigger": "CGPDFContextAddDestinationAtPoint",
      "contents": "CGPDFContextAddDestinationAtPoint(${1:CGContextRef context}, ${2:CFStringRef name}, ${3:CGPoint point})"
    },
    {
      "trigger": "CGPDFContextAddDocumentMetadata",
      "contents": "CGPDFContextAddDocumentMetadata(${1:CGContextRef context}, ${2:CFDataRef metadata})"
    },
    {
      "trigger": "CGPDFContextBeginPage",
      "contents": "CGPDFContextBeginPage(${1:CGContextRef context}, ${2:CFDictionaryRef pageInfo})"
    },
    {
      "trigger": "CGPDFContextClose",
      "contents": "CGPDFContextClose(${1:CGContextRef context})"
    },
    {
      "trigger": "CGPDFContextCreate",
      "contents": "CGPDFContextCreate(${1:CGDataConsumerRef consumer}, ${2:CGRect* mediaBox}, ${3:CFDictionaryRef auxiliaryInfo})"
    },
    {
      "trigger": "CGPDFContextCreateWithURL",
      "contents": "CGPDFContextCreateWithURL(${1:CFURLRef url}, ${2:CGRect* mediaBox}, ${3:CFDictionaryRef auxiliaryInfo})"
    },
    {
      "trigger": "CGPDFContextEndPage",
      "contents": "CGPDFContextEndPage(${1:CGContextRef context})"
    },
    {
      "trigger": "CGPDFContextSetDestinationForRect",
      "contents": "CGPDFContextSetDestinationForRect(${1:CGContextRef context}, ${2:CFStringRef name}, ${3:CGRect rect})"
    },
    {
      "trigger": "CGPDFContextSetURLForRect",
      "contents": "CGPDFContextSetURLForRect(${1:CGContextRef context}, ${2:CFURLRef url}, ${3:CGRect rect})"
    },
    {
      "trigger": "CGPDFDataFormatJPEG2000 (2)",
      "contents": "CGPDFDataFormatJPEG2000"
    },
    {
      "trigger": "CGPDFDataFormatJPEGEncoded (1)",
      "contents": "CGPDFDataFormatJPEGEncoded"
    },
    {
      "trigger": "CGPDFDataFormatRaw (0)",
      "contents": "CGPDFDataFormatRaw"
    },
    {
      "trigger": "CGPDFDictionaryApplyFunction",
      "contents": "CGPDFDictionaryApplyFunction(${1:CGPDFDictionaryRef dict}, ${2:CGPDFDictionaryApplierFunction function}, ${3:void* info})"
    },
    {
      "trigger": "CGPDFDictionaryGetArray",
      "contents": "CGPDFDictionaryGetArray(${1:CGPDFDictionaryRef dict}, ${2:char* key}, ${3:CGPDFArrayRef* value})"
    },
    {
      "trigger": "CGPDFDictionaryGetBoolean",
      "contents": "CGPDFDictionaryGetBoolean(${1:CGPDFDictionaryRef dict}, ${2:char* key}, ${3:CGPDFBoolean* value})"
    },
    {
      "trigger": "CGPDFDictionaryGetCount",
      "contents": "CGPDFDictionaryGetCount(${1:CGPDFDictionaryRef dict})"
    },
    {
      "trigger": "CGPDFDictionaryGetDictionary",
      "contents": "CGPDFDictionaryGetDictionary(${1:CGPDFDictionaryRef dict}, ${2:char* key}, ${3:CGPDFDictionaryRef* value})"
    },
    {
      "trigger": "CGPDFDictionaryGetInteger",
      "contents": "CGPDFDictionaryGetInteger(${1:CGPDFDictionaryRef dict}, ${2:char* key}, ${3:CGPDFInteger* value})"
    },
    {
      "trigger": "CGPDFDictionaryGetName",
      "contents": "CGPDFDictionaryGetName(${1:CGPDFDictionaryRef dict}, ${2:char* key}, ${3:char** value})"
    },
    {
      "trigger": "CGPDFDictionaryGetNumber",
      "contents": "CGPDFDictionaryGetNumber(${1:CGPDFDictionaryRef dict}, ${2:char* key}, ${3:CGPDFReal* value})"
    },
    {
      "trigger": "CGPDFDictionaryGetObject",
      "contents": "CGPDFDictionaryGetObject(${1:CGPDFDictionaryRef dict}, ${2:char* key}, ${3:CGPDFObjectRef* value})"
    },
    {
      "trigger": "CGPDFDictionaryGetStream",
      "contents": "CGPDFDictionaryGetStream(${1:CGPDFDictionaryRef dict}, ${2:char* key}, ${3:CGPDFStreamRef* value})"
    },
    {
      "trigger": "CGPDFDictionaryGetString",
      "contents": "CGPDFDictionaryGetString(${1:CGPDFDictionaryRef dict}, ${2:char* key}, ${3:CGPDFStringRef* value})"
    },
    {
      "trigger": "CGPDFDocumentAllowsCopying",
      "contents": "CGPDFDocumentAllowsCopying(${1:CGPDFDocumentRef document})"
    },
    {
      "trigger": "CGPDFDocumentAllowsPrinting",
      "contents": "CGPDFDocumentAllowsPrinting(${1:CGPDFDocumentRef document})"
    },
    {
      "trigger": "CGPDFDocumentCreateWithProvider",
      "contents": "CGPDFDocumentCreateWithProvider(${1:CGDataProviderRef provider})"
    },
    {
      "trigger": "CGPDFDocumentCreateWithURL",
      "contents": "CGPDFDocumentCreateWithURL(${1:CFURLRef url})"
    },
    {
      "trigger": "CGPDFDocumentGetCatalog",
      "contents": "CGPDFDocumentGetCatalog(${1:CGPDFDocumentRef document})"
    },
    {
      "trigger": "CGPDFDocumentGetID",
      "contents": "CGPDFDocumentGetID(${1:CGPDFDocumentRef document})"
    },
    {
      "trigger": "CGPDFDocumentGetInfo",
      "contents": "CGPDFDocumentGetInfo(${1:CGPDFDocumentRef document})"
    },
    {
      "trigger": "CGPDFDocumentGetNumberOfPages",
      "contents": "CGPDFDocumentGetNumberOfPages(${1:CGPDFDocumentRef document})"
    },
    {
      "trigger": "CGPDFDocumentGetPage",
      "contents": "CGPDFDocumentGetPage(${1:CGPDFDocumentRef document}, ${2:size_t pageNumber})"
    },
    {
      "trigger": "CGPDFDocumentGetVersion",
      "contents": "CGPDFDocumentGetVersion(${1:CGPDFDocumentRef document}, ${2:int* majorVersion}, ${3:int* minorVersion})"
    },
    {
      "trigger": "CGPDFDocumentIsEncrypted",
      "contents": "CGPDFDocumentIsEncrypted(${1:CGPDFDocumentRef document})"
    },
    {
      "trigger": "CGPDFDocumentIsUnlocked",
      "contents": "CGPDFDocumentIsUnlocked(${1:CGPDFDocumentRef document})"
    },
    {
      "trigger": "CGPDFDocumentRelease",
      "contents": "CGPDFDocumentRelease(${1:CGPDFDocumentRef document})"
    },
    {
      "trigger": "CGPDFDocumentRetain",
      "contents": "CGPDFDocumentRetain(${1:CGPDFDocumentRef document})"
    },
    {
      "trigger": "CGPDFDocumentUnlockWithPassword",
      "contents": "CGPDFDocumentUnlockWithPassword(${1:CGPDFDocumentRef document}, ${2:char* password})"
    },
    {
      "trigger": "CGPDFObjectGetType",
      "contents": "CGPDFObjectGetType(${1:CGPDFObjectRef object})"
    },
    {
      "trigger": "CGPDFObjectGetValue",
      "contents": "CGPDFObjectGetValue(${1:CGPDFObjectRef object}, ${2:CGPDFObjectType type}, ${3:void* value})"
    },
    {
      "trigger": "CGPDFOperatorTableRelease",
      "contents": "CGPDFOperatorTableRelease(${1:CGPDFOperatorTableRef table})"
    },
    {
      "trigger": "CGPDFOperatorTableRetain",
      "contents": "CGPDFOperatorTableRetain(${1:CGPDFOperatorTableRef table})"
    },
    {
      "trigger": "CGPDFOperatorTableSetCallback",
      "contents": "CGPDFOperatorTableSetCallback(${1:CGPDFOperatorTableRef table}, ${2:char* name}, ${3:CGPDFOperatorCallback callback})"
    },
    {
      "trigger": "CGPDFPageGetBoxRect",
      "contents": "CGPDFPageGetBoxRect(${1:CGPDFPageRef page}, ${2:CGPDFBox box})"
    },
    {
      "trigger": "CGPDFPageGetDictionary",
      "contents": "CGPDFPageGetDictionary(${1:CGPDFPageRef page})"
    },
    {
      "trigger": "CGPDFPageGetDocument",
      "contents": "CGPDFPageGetDocument(${1:CGPDFPageRef page})"
    },
    {
      "trigger": "CGPDFPageGetDrawingTransform",
      "contents": "CGPDFPageGetDrawingTransform(${1:CGPDFPageRef page}, ${2:CGPDFBox box}, ${3:CGRect rect}, ${4:int rotate}, ${5:_Bool preserveAspectRatio})"
    },
    {
      "trigger": "CGPDFPageGetPageNumber",
      "contents": "CGPDFPageGetPageNumber(${1:CGPDFPageRef page})"
    },
    {
      "trigger": "CGPDFPageGetRotationAngle",
      "contents": "CGPDFPageGetRotationAngle(${1:CGPDFPageRef page})"
    },
    {
      "trigger": "CGPDFPageRelease",
      "contents": "CGPDFPageRelease(${1:CGPDFPageRef page})"
    },
    {
      "trigger": "CGPDFPageRetain",
      "contents": "CGPDFPageRetain(${1:CGPDFPageRef page})"
    },
    {
      "trigger": "CGPDFScannerCreate",
      "contents": "CGPDFScannerCreate(${1:CGPDFContentStreamRef cs}, ${2:CGPDFOperatorTableRef table}, ${3:void* info})"
    },
    {
      "trigger": "CGPDFScannerGetContentStream",
      "contents": "CGPDFScannerGetContentStream(${1:CGPDFScannerRef scanner})"
    },
    {
      "trigger": "CGPDFScannerPopArray",
      "contents": "CGPDFScannerPopArray(${1:CGPDFScannerRef scanner}, ${2:CGPDFArrayRef* value})"
    },
    {
      "trigger": "CGPDFScannerPopBoolean",
      "contents": "CGPDFScannerPopBoolean(${1:CGPDFScannerRef scanner}, ${2:CGPDFBoolean* value})"
    },
    {
      "trigger": "CGPDFScannerPopDictionary",
      "contents": "CGPDFScannerPopDictionary(${1:CGPDFScannerRef scanner}, ${2:CGPDFDictionaryRef* value})"
    },
    {
      "trigger": "CGPDFScannerPopInteger",
      "contents": "CGPDFScannerPopInteger(${1:CGPDFScannerRef scanner}, ${2:CGPDFInteger* value})"
    },
    {
      "trigger": "CGPDFScannerPopName",
      "contents": "CGPDFScannerPopName(${1:CGPDFScannerRef scanner}, ${2:char** value})"
    },
    {
      "trigger": "CGPDFScannerPopNumber",
      "contents": "CGPDFScannerPopNumber(${1:CGPDFScannerRef scanner}, ${2:CGPDFReal* value})"
    },
    {
      "trigger": "CGPDFScannerPopObject",
      "contents": "CGPDFScannerPopObject(${1:CGPDFScannerRef scanner}, ${2:CGPDFObjectRef* value})"
    },
    {
      "trigger": "CGPDFScannerPopStream",
      "contents": "CGPDFScannerPopStream(${1:CGPDFScannerRef scanner}, ${2:CGPDFStreamRef* value})"
    },
    {
      "trigger": "CGPDFScannerPopString",
      "contents": "CGPDFScannerPopString(${1:CGPDFScannerRef scanner}, ${2:CGPDFStringRef* value})"
    },
    {
      "trigger": "CGPDFScannerRelease",
      "contents": "CGPDFScannerRelease(${1:CGPDFScannerRef scanner})"
    },
    {
      "trigger": "CGPDFScannerRetain",
      "contents": "CGPDFScannerRetain(${1:CGPDFScannerRef scanner})"
    },
    {
      "trigger": "CGPDFScannerScan",
      "contents": "CGPDFScannerScan(${1:CGPDFScannerRef scanner})"
    },
    {
      "trigger": "CGPDFStreamCopyData",
      "contents": "CGPDFStreamCopyData(${1:CGPDFStreamRef stream}, ${2:CGPDFDataFormat* format})"
    },
    {
      "trigger": "CGPDFStreamGetDictionary",
      "contents": "CGPDFStreamGetDictionary(${1:CGPDFStreamRef stream})"
    },
    {
      "trigger": "CGPDFStringCopyDate",
      "contents": "CGPDFStringCopyDate(${1:CGPDFStringRef string})"
    },
    {
      "trigger": "CGPDFStringCopyTextString",
      "contents": "CGPDFStringCopyTextString(${1:CGPDFStringRef string})"
    },
    {
      "trigger": "CGPDFStringGetBytePtr",
      "contents": "CGPDFStringGetBytePtr(${1:CGPDFStringRef string})"
    },
    {
      "trigger": "CGPDFStringGetLength",
      "contents": "CGPDFStringGetLength(${1:CGPDFStringRef string})"
    },
    {
      "trigger": "CGPathAddArc",
      "contents": "CGPathAddArc(${1:CGMutablePathRef path}, ${2:CGAffineTransform* m}, ${3:CGFloat x}, ${4:CGFloat y}, ${5:CGFloat radius}, ${6:CGFloat startAngle}, ${7:CGFloat endAngle}, ${8:_Bool clockwise})"
    },
    {
      "trigger": "CGPathAddArcToPoint",
      "contents": "CGPathAddArcToPoint(${1:CGMutablePathRef path}, ${2:CGAffineTransform* m}, ${3:CGFloat x1}, ${4:CGFloat y1}, ${5:CGFloat x2}, ${6:CGFloat y2}, ${7:CGFloat radius})"
    },
    {
      "trigger": "CGPathAddCurveToPoint",
      "contents": "CGPathAddCurveToPoint(${1:CGMutablePathRef path}, ${2:CGAffineTransform* m}, ${3:CGFloat cp1x}, ${4:CGFloat cp1y}, ${5:CGFloat cp2x}, ${6:CGFloat cp2y}, ${7:CGFloat x}, ${8:CGFloat y})"
    },
    {
      "trigger": "CGPathAddEllipseInRect",
      "contents": "CGPathAddEllipseInRect(${1:CGMutablePathRef path}, ${2:CGAffineTransform* m}, ${3:CGRect rect})"
    },
    {
      "trigger": "CGPathAddLineToPoint",
      "contents": "CGPathAddLineToPoint(${1:CGMutablePathRef path}, ${2:CGAffineTransform* m}, ${3:CGFloat x}, ${4:CGFloat y})"
    },
    {
      "trigger": "CGPathAddLines",
      "contents": "CGPathAddLines(${1:CGMutablePathRef path}, ${2:CGAffineTransform* m}, ${3:CGPoint* points}, ${4:size_t count})"
    },
    {
      "trigger": "CGPathAddPath",
      "contents": "CGPathAddPath(${1:CGMutablePathRef path1}, ${2:CGAffineTransform* m}, ${3:CGPathRef path2})"
    },
    {
      "trigger": "CGPathAddQuadCurveToPoint",
      "contents": "CGPathAddQuadCurveToPoint(${1:CGMutablePathRef path}, ${2:CGAffineTransform* m}, ${3:CGFloat cpx}, ${4:CGFloat cpy}, ${5:CGFloat x}, ${6:CGFloat y})"
    },
    {
      "trigger": "CGPathAddRect",
      "contents": "CGPathAddRect(${1:CGMutablePathRef path}, ${2:CGAffineTransform* m}, ${3:CGRect rect})"
    },
    {
      "trigger": "CGPathAddRects",
      "contents": "CGPathAddRects(${1:CGMutablePathRef path}, ${2:CGAffineTransform* m}, ${3:CGRect* rects}, ${4:size_t count})"
    },
    {
      "trigger": "CGPathAddRelativeArc",
      "contents": "CGPathAddRelativeArc(${1:CGMutablePathRef path}, ${2:CGAffineTransform* matrix}, ${3:CGFloat x}, ${4:CGFloat y}, ${5:CGFloat radius}, ${6:CGFloat startAngle}, ${7:CGFloat delta})"
    },
    {
      "trigger": "CGPathApply",
      "contents": "CGPathApply(${1:CGPathRef path}, ${2:void* info}, ${3:CGPathApplierFunction function})"
    },
    {
      "trigger": "CGPathCloseSubpath",
      "contents": "CGPathCloseSubpath(${1:CGMutablePathRef path})"
    },
    {
      "trigger": "CGPathContainsPoint",
      "contents": "CGPathContainsPoint(${1:CGPathRef path}, ${2:CGAffineTransform* m}, ${3:CGPoint point}, ${4:_Bool eoFill})"
    },
    {
      "trigger": "CGPathCreateCopy",
      "contents": "CGPathCreateCopy(${1:CGPathRef path})"
    },
    {
      "trigger": "CGPathCreateCopyByDashingPath",
      "contents": "CGPathCreateCopyByDashingPath(${1:CGPathRef path}, ${2:CGAffineTransform* transform}, ${3:CGFloat phase}, ${4:CGFloat* lengths}, ${5:size_t count})"
    },
    {
      "trigger": "CGPathCreateCopyByStrokingPath",
      "contents": "CGPathCreateCopyByStrokingPath(${1:CGPathRef path}, ${2:CGAffineTransform* transform}, ${3:CGFloat lineWidth}, ${4:CGLineCap lineCap}, ${5:CGLineJoin lineJoin}, ${6:CGFloat miterLimit})"
    },
    {
      "trigger": "CGPathCreateCopyByTransformingPath",
      "contents": "CGPathCreateCopyByTransformingPath(${1:CGPathRef path}, ${2:CGAffineTransform* transform})"
    },
    {
      "trigger": "CGPathCreateMutableCopy",
      "contents": "CGPathCreateMutableCopy(${1:CGPathRef path})"
    },
    {
      "trigger": "CGPathCreateMutableCopyByTransformingPath",
      "contents": "CGPathCreateMutableCopyByTransformingPath(${1:CGPathRef path}, ${2:CGAffineTransform* transform})"
    },
    {
      "trigger": "CGPathCreateWithEllipseInRect",
      "contents": "CGPathCreateWithEllipseInRect(${1:CGRect rect}, ${2:CGAffineTransform* transform})"
    },
    {
      "trigger": "CGPathCreateWithRect",
      "contents": "CGPathCreateWithRect(${1:CGRect rect}, ${2:CGAffineTransform* transform})"
    },
    {
      "trigger": "CGPathEqualToPath",
      "contents": "CGPathEqualToPath(${1:CGPathRef path1}, ${2:CGPathRef path2})"
    },
    {
      "trigger": "CGPathGetBoundingBox",
      "contents": "CGPathGetBoundingBox(${1:CGPathRef path})"
    },
    {
      "trigger": "CGPathGetCurrentPoint",
      "contents": "CGPathGetCurrentPoint(${1:CGPathRef path})"
    },
    {
      "trigger": "CGPathGetPathBoundingBox",
      "contents": "CGPathGetPathBoundingBox(${1:CGPathRef path})"
    },
    {
      "trigger": "CGPathIsEmpty",
      "contents": "CGPathIsEmpty(${1:CGPathRef path})"
    },
    {
      "trigger": "CGPathIsRect",
      "contents": "CGPathIsRect(${1:CGPathRef path}, ${2:CGRect* rect})"
    },
    {
      "trigger": "CGPathMoveToPoint",
      "contents": "CGPathMoveToPoint(${1:CGMutablePathRef path}, ${2:CGAffineTransform* m}, ${3:CGFloat x}, ${4:CGFloat y})"
    },
    {
      "trigger": "CGPathRelease",
      "contents": "CGPathRelease(${1:CGPathRef path})"
    },
    {
      "trigger": "CGPathRetain",
      "contents": "CGPathRetain(${1:CGPathRef path})"
    },
    {
      "trigger": "CGPatternCreate",
      "contents": "CGPatternCreate(${1:void* info}, ${2:CGRect bounds}, ${3:CGAffineTransform matrix}, ${4:CGFloat xStep}, ${5:CGFloat yStep}, ${6:CGPatternTiling tiling}, ${7:_Bool isColored}, ${8:CGPatternCallbacks* callbacks})"
    },
    {
      "trigger": "CGPatternRelease",
      "contents": "CGPatternRelease(${1:CGPatternRef pattern})"
    },
    {
      "trigger": "CGPatternRetain",
      "contents": "CGPatternRetain(${1:CGPatternRef pattern})"
    },
    {
      "trigger": "CGPointApplyAffineTransform (__CGPointApplyAffineTransform)",
      "contents": "CGPointApplyAffineTransform"
    },
    {
      "trigger": "CGPointApplyAffineTransform",
      "contents": "CGPointApplyAffineTransform(${1:CGPoint point}, ${2:CGAffineTransform t})"
    },
    {
      "trigger": "CGPointCreateDictionaryRepresentation",
      "contents": "CGPointCreateDictionaryRepresentation(${1:CGPoint point})"
    },
    {
      "trigger": "CGPointEqualToPoint (__CGPointEqualToPoint)",
      "contents": "CGPointEqualToPoint"
    },
    {
      "trigger": "CGPointEqualToPoint",
      "contents": "CGPointEqualToPoint(${1:CGPoint point1}, ${2:CGPoint point2})"
    },
    {
      "trigger": "CGPointFromString",
      "contents": "CGPointFromString(${1:NSString* string})"
    },
    {
      "trigger": "CGPointMake",
      "contents": "CGPointMake(${1:CGFloat x}, ${2:CGFloat y})"
    },
    {
      "trigger": "CGPointMakeWithDictionaryRepresentation",
      "contents": "CGPointMakeWithDictionaryRepresentation(${1:CFDictionaryRef dict}, ${2:CGPoint* point})"
    },
    {
      "trigger": "CGPointZero (CGPoint)",
      "contents": "CGPointZero"
    },
    {
      "trigger": "CGRectApplyAffineTransform",
      "contents": "CGRectApplyAffineTransform(${1:CGRect rect}, ${2:CGAffineTransform t})"
    },
    {
      "trigger": "CGRectContainsPoint",
      "contents": "CGRectContainsPoint(${1:CGRect rect}, ${2:CGPoint point})"
    },
    {
      "trigger": "CGRectContainsRect",
      "contents": "CGRectContainsRect(${1:CGRect rect1}, ${2:CGRect rect2})"
    },
    {
      "trigger": "CGRectCreateDictionaryRepresentation",
      "contents": "CGRectCreateDictionaryRepresentation(${1:CGRect })"
    },
    {
      "trigger": "CGRectDivide",
      "contents": "CGRectDivide(${1:CGRect rect}, ${2:CGRect* slice}, ${3:CGRect* remainder}, ${4:CGFloat amount}, ${5:CGRectEdge edge})"
    },
    {
      "trigger": "CGRectEqualToRect",
      "contents": "CGRectEqualToRect(${1:CGRect rect1}, ${2:CGRect rect2})"
    },
    {
      "trigger": "CGRectFromString",
      "contents": "CGRectFromString(${1:NSString* string})"
    },
    {
      "trigger": "CGRectGetHeight",
      "contents": "CGRectGetHeight(${1:CGRect rect})"
    },
    {
      "trigger": "CGRectGetMaxX",
      "contents": "CGRectGetMaxX(${1:CGRect rect})"
    },
    {
      "trigger": "CGRectGetMaxY",
      "contents": "CGRectGetMaxY(${1:CGRect rect})"
    },
    {
      "trigger": "CGRectGetMidX",
      "contents": "CGRectGetMidX(${1:CGRect rect})"
    },
    {
      "trigger": "CGRectGetMidY",
      "contents": "CGRectGetMidY(${1:CGRect rect})"
    },
    {
      "trigger": "CGRectGetMinX",
      "contents": "CGRectGetMinX(${1:CGRect rect})"
    },
    {
      "trigger": "CGRectGetMinY",
      "contents": "CGRectGetMinY(${1:CGRect rect})"
    },
    {
      "trigger": "CGRectGetWidth",
      "contents": "CGRectGetWidth(${1:CGRect rect})"
    },
    {
      "trigger": "CGRectInfinite (CGRect)",
      "contents": "CGRectInfinite"
    },
    {
      "trigger": "CGRectInset",
      "contents": "CGRectInset(${1:CGRect rect}, ${2:CGFloat dx}, ${3:CGFloat dy})"
    },
    {
      "trigger": "CGRectIntegral",
      "contents": "CGRectIntegral(${1:CGRect rect})"
    },
    {
      "trigger": "CGRectIntersection",
      "contents": "CGRectIntersection(${1:CGRect r1}, ${2:CGRect r2})"
    },
    {
      "trigger": "CGRectIntersectsRect",
      "contents": "CGRectIntersectsRect(${1:CGRect rect1}, ${2:CGRect rect2})"
    },
    {
      "trigger": "CGRectIsEmpty",
      "contents": "CGRectIsEmpty(${1:CGRect rect})"
    },
    {
      "trigger": "CGRectIsInfinite",
      "contents": "CGRectIsInfinite(${1:CGRect rect})"
    },
    {
      "trigger": "CGRectIsNull",
      "contents": "CGRectIsNull(${1:CGRect rect})"
    },
    {
      "trigger": "CGRectMake",
      "contents": "CGRectMake(${1:CGFloat x}, ${2:CGFloat y}, ${3:CGFloat width}, ${4:CGFloat height})"
    },
    {
      "trigger": "CGRectMakeWithDictionaryRepresentation",
      "contents": "CGRectMakeWithDictionaryRepresentation(${1:CFDictionaryRef dict}, ${2:CGRect* rect})"
    },
    {
      "trigger": "CGRectMaxXEdge (2)",
      "contents": "CGRectMaxXEdge"
    },
    {
      "trigger": "CGRectMaxYEdge (3)",
      "contents": "CGRectMaxYEdge"
    },
    {
      "trigger": "CGRectMinXEdge (0)",
      "contents": "CGRectMinXEdge"
    },
    {
      "trigger": "CGRectMinYEdge (1)",
      "contents": "CGRectMinYEdge"
    },
    {
      "trigger": "CGRectNull (CGRect)",
      "contents": "CGRectNull"
    },
    {
      "trigger": "CGRectOffset",
      "contents": "CGRectOffset(${1:CGRect rect}, ${2:CGFloat dx}, ${3:CGFloat dy})"
    },
    {
      "trigger": "CGRectStandardize",
      "contents": "CGRectStandardize(${1:CGRect rect})"
    },
    {
      "trigger": "CGRectUnion",
      "contents": "CGRectUnion(${1:CGRect r1}, ${2:CGRect r2})"
    },
    {
      "trigger": "CGRectZero (CGRect)",
      "contents": "CGRectZero"
    },
    {
      "trigger": "CGShadingCreateAxial",
      "contents": "CGShadingCreateAxial(${1:CGColorSpaceRef space}, ${2:CGPoint start}, ${3:CGPoint end}, ${4:CGFunctionRef function}, ${5:_Bool extendStart}, ${6:_Bool extendEnd})"
    },
    {
      "trigger": "CGShadingCreateRadial",
      "contents": "CGShadingCreateRadial(${1:CGColorSpaceRef space}, ${2:CGPoint start}, ${3:CGFloat startRadius}, ${4:CGPoint end}, ${5:CGFloat endRadius}, ${6:CGFunctionRef function}, ${7:_Bool extendStart}, ${8:_Bool extendEnd})"
    },
    {
      "trigger": "CGShadingRelease",
      "contents": "CGShadingRelease(${1:CGShadingRef shading})"
    },
    {
      "trigger": "CGShadingRetain",
      "contents": "CGShadingRetain(${1:CGShadingRef shading})"
    },
    {
      "trigger": "CGSizeApplyAffineTransform (__CGSizeApplyAffineTransform)",
      "contents": "CGSizeApplyAffineTransform"
    },
    {
      "trigger": "CGSizeApplyAffineTransform",
      "contents": "CGSizeApplyAffineTransform(${1:CGSize size}, ${2:CGAffineTransform t})"
    },
    {
      "trigger": "CGSizeCreateDictionaryRepresentation",
      "contents": "CGSizeCreateDictionaryRepresentation(${1:CGSize size})"
    },
    {
      "trigger": "CGSizeEqualToSize (__CGSizeEqualToSize)",
      "contents": "CGSizeEqualToSize"
    },
    {
      "trigger": "CGSizeEqualToSize",
      "contents": "CGSizeEqualToSize(${1:CGSize size1}, ${2:CGSize size2})"
    },
    {
      "trigger": "CGSizeFromString",
      "contents": "CGSizeFromString(${1:NSString* string})"
    },
    {
      "trigger": "CGSizeMake",
      "contents": "CGSizeMake(${1:CGFloat width}, ${2:CGFloat height})"
    },
    {
      "trigger": "CGSizeMakeWithDictionaryRepresentation",
      "contents": "CGSizeMakeWithDictionaryRepresentation(${1:CFDictionaryRef dict}, ${2:CGSize* size})"
    },
    {
      "trigger": "CGSizeZero (CGSize)",
      "contents": "CGSizeZero"
    },
    {
      "trigger": "CIColor.colorWithCGColor:",
      "contents": "CIColor.colorWithCGColor(${1:CGColorRef c})"
    },
    {
      "trigger": "CIColor.colorWithRed:green:blue:",
      "contents": "CIColor.colorWithRed(${1:CGFloat r}, green:${2:CGFloat g}, blue:${3:CGFloat b})"
    },
    {
      "trigger": "CIColor.colorWithRed:green:blue:alpha:",
      "contents": "CIColor.colorWithRed(${1:CGFloat r}, green:${2:CGFloat g}, blue:${3:CGFloat b}, alpha:${4:CGFloat a})"
    },
    {
      "trigger": "CIColor.colorWithString:",
      "contents": "CIColor.colorWithString(${1:NSString* representation})"
    },
    {
      "trigger": "CIContext.contextWithEAGLContext:",
      "contents": "CIContext.contextWithEAGLContext(${1:EAGLContext* eaglContext})"
    },
    {
      "trigger": "CIContext.contextWithEAGLContext:options:",
      "contents": "CIContext.contextWithEAGLContext(${1:EAGLContext* eaglContext}, options:${2:NSDictionary* dict})"
    },
    {
      "trigger": "CIContext.contextWithOptions:",
      "contents": "CIContext.contextWithOptions(${1:NSDictionary* dict})"
    },
    {
      "trigger": "CIDetector.detectorOfType:context:options:",
      "contents": "CIDetector.detectorOfType(${1:NSString* type}, context:${2:CIContext* context}, options:${3:NSDictionary* options})"
    },
    {
      "trigger": "CIDetectorAccuracy (NSString*)",
      "contents": "CIDetectorAccuracy"
    },
    {
      "trigger": "CIDetectorAccuracyHigh (NSString*)",
      "contents": "CIDetectorAccuracyHigh"
    },
    {
      "trigger": "CIDetectorAccuracyLow (NSString*)",
      "contents": "CIDetectorAccuracyLow"
    },
    {
      "trigger": "CIDetectorImageOrientation (NSString*)",
      "contents": "CIDetectorImageOrientation"
    },
    {
      "trigger": "CIDetectorTypeFace (NSString*)",
      "contents": "CIDetectorTypeFace"
    },
    {
      "trigger": "CIFeatureTypeFace (NSString*)",
      "contents": "CIFeatureTypeFace"
    },
    {
      "trigger": "CIFilter.filterNamesInCategories:",
      "contents": "CIFilter.filterNamesInCategories(${1:NSArray* categories})"
    },
    {
      "trigger": "CIFilter.filterNamesInCategory:",
      "contents": "CIFilter.filterNamesInCategory(${1:NSString* category})"
    },
    {
      "trigger": "CIFilter.filterWithName:",
      "contents": "CIFilter.filterWithName(${1:NSString* name})"
    },
    {
      "trigger": "CIFilter.filterWithName:keysAndValues:",
      "contents": "CIFilter.filterWithName(${1:NSString* name}, keysAndValues:${2:id key0})"
    },
    {
      "trigger": "CIImage.imageWithBitmapData:bytesPerRow:size:format:colorSpace:",
      "contents": "CIImage.imageWithBitmapData(${1:NSData* d}, bytesPerRow:${2:size_t bpr}, size:${3:CGSize size}, format:${4:CIFormat f}, colorSpace:${5:CGColorSpaceRef cs})"
    },
    {
      "trigger": "CIImage.imageWithCGImage:",
      "contents": "CIImage.imageWithCGImage(${1:CGImageRef image})"
    },
    {
      "trigger": "CIImage.imageWithCGImage:options:",
      "contents": "CIImage.imageWithCGImage(${1:CGImageRef image}, options:${2:NSDictionary* d})"
    },
    {
      "trigger": "CIImage.imageWithCVPixelBuffer:",
      "contents": "CIImage.imageWithCVPixelBuffer(${1:CVPixelBufferRef buffer})"
    },
    {
      "trigger": "CIImage.imageWithCVPixelBuffer:options:",
      "contents": "CIImage.imageWithCVPixelBuffer(${1:CVPixelBufferRef buffer}, options:${2:NSDictionary* dict})"
    },
    {
      "trigger": "CIImage.imageWithColor:",
      "contents": "CIImage.imageWithColor(${1:CIColor* color})"
    },
    {
      "trigger": "CIImage.imageWithContentsOfURL:",
      "contents": "CIImage.imageWithContentsOfURL(${1:NSURL* url})"
    },
    {
      "trigger": "CIImage.imageWithContentsOfURL:options:",
      "contents": "CIImage.imageWithContentsOfURL(${1:NSURL* url}, options:${2:NSDictionary* d})"
    },
    {
      "trigger": "CIImage.imageWithData:",
      "contents": "CIImage.imageWithData(${1:NSData* data})"
    },
    {
      "trigger": "CIImage.imageWithData:options:",
      "contents": "CIImage.imageWithData(${1:NSData* data}, options:${2:NSDictionary* d})"
    },
    {
      "trigger": "CIVector.vectorWithCGAffineTransform:",
      "contents": "CIVector.vectorWithCGAffineTransform(${1:CGAffineTransform t})"
    },
    {
      "trigger": "CIVector.vectorWithCGPoint:",
      "contents": "CIVector.vectorWithCGPoint(${1:CGPoint p})"
    },
    {
      "trigger": "CIVector.vectorWithCGRect:",
      "contents": "CIVector.vectorWithCGRect(${1:CGRect r})"
    },
    {
      "trigger": "CIVector.vectorWithString:",
      "contents": "CIVector.vectorWithString(${1:NSString* representation})"
    },
    {
      "trigger": "CIVector.vectorWithValues:count:",
      "contents": "CIVector.vectorWithValues(${1:CGFloat* values}, count:${2:size_t count})"
    },
    {
      "trigger": "CIVector.vectorWithX:",
      "contents": "CIVector.vectorWithX(${1:CGFloat x})"
    },
    {
      "trigger": "CIVector.vectorWithX:Y:",
      "contents": "CIVector.vectorWithX(${1:CGFloat x}, Y:${2:CGFloat y})"
    },
    {
      "trigger": "CIVector.vectorWithX:Y:Z:",
      "contents": "CIVector.vectorWithX(${1:CGFloat x}, Y:${2:CGFloat y}, Z:${3:CGFloat z})"
    },
    {
      "trigger": "CIVector.vectorWithX:Y:Z:W:",
      "contents": "CIVector.vectorWithX(${1:CGFloat x}, Y:${2:CGFloat y}, Z:${3:CGFloat z}, W:${4:CGFloat w})"
    },
    {
      "trigger": "CLDeviceOrientationFaceDown (6)",
      "contents": "CLDeviceOrientationFaceDown"
    },
    {
      "trigger": "CLDeviceOrientationFaceUp (5)",
      "contents": "CLDeviceOrientationFaceUp"
    },
    {
      "trigger": "CLDeviceOrientationLandscapeLeft (3)",
      "contents": "CLDeviceOrientationLandscapeLeft"
    },
    {
      "trigger": "CLDeviceOrientationLandscapeRight (4)",
      "contents": "CLDeviceOrientationLandscapeRight"
    },
    {
      "trigger": "CLDeviceOrientationPortrait (1)",
      "contents": "CLDeviceOrientationPortrait"
    },
    {
      "trigger": "CLDeviceOrientationPortraitUpsideDown (2)",
      "contents": "CLDeviceOrientationPortraitUpsideDown"
    },
    {
      "trigger": "CLDeviceOrientationUnknown (0)",
      "contents": "CLDeviceOrientationUnknown"
    },
    {
      "trigger": "CLLocationCoordinate2DIsValid",
      "contents": "CLLocationCoordinate2DIsValid(${1:CLLocationCoordinate2D coord})"
    },
    {
      "trigger": "CLLocationCoordinate2DMake",
      "contents": "CLLocationCoordinate2DMake(${1:CLLocationDegrees latitude}, ${2:CLLocationDegrees longitude})"
    },
    {
      "trigger": "CMAttitudeReferenceFrameXArbitraryCorrectedZVertical (2)",
      "contents": "CMAttitudeReferenceFrameXArbitraryCorrectedZVertical"
    },
    {
      "trigger": "CMAttitudeReferenceFrameXArbitraryZVertical (1)",
      "contents": "CMAttitudeReferenceFrameXArbitraryZVertical"
    },
    {
      "trigger": "CMAttitudeReferenceFrameXMagneticNorthZVertical (4)",
      "contents": "CMAttitudeReferenceFrameXMagneticNorthZVertical"
    },
    {
      "trigger": "CMAttitudeReferenceFrameXTrueNorthZVertical (8)",
      "contents": "CMAttitudeReferenceFrameXTrueNorthZVertical"
    },
    {
      "trigger": "CMAudioFormatDescriptionCreate",
      "contents": "CMAudioFormatDescriptionCreate(${1:CFAllocatorRef allocator}, ${2:AudioStreamBasicDescription* asbd}, ${3:size_t layoutSize}, ${4:AudioChannelLayout* layout}, ${5:size_t magicCookieSize}, ${6:void* magicCookie}, ${7:CFDictionaryRef extensions}, ${8:CMAudioFormatDescriptionRef* outDesc})"
    },
    {
      "trigger": "CMAudioFormatDescriptionCreateSummary",
      "contents": "CMAudioFormatDescriptionCreateSummary(${1:CFAllocatorRef allocator}, ${2:CFArrayRef formatDescriptionArray}, ${3:uint32_t flags}, ${4:CMAudioFormatDescriptionRef* summaryFormatDescriptionOut})"
    },
    {
      "trigger": "CMAudioFormatDescriptionEqual",
      "contents": "CMAudioFormatDescriptionEqual(${1:CMAudioFormatDescriptionRef desc1}, ${2:CMAudioFormatDescriptionRef desc2}, ${3:CMAudioFormatDescriptionMask equalityMask}, ${4:CMAudioFormatDescriptionMask* equalityMaskOut})"
    },
    {
      "trigger": "CMAudioFormatDescriptionGetChannelLayout",
      "contents": "CMAudioFormatDescriptionGetChannelLayout(${1:CMAudioFormatDescriptionRef desc}, ${2:size_t* layoutSize})"
    },
    {
      "trigger": "CMAudioFormatDescriptionGetFormatList",
      "contents": "CMAudioFormatDescriptionGetFormatList(${1:CMAudioFormatDescriptionRef desc}, ${2:size_t* formatListSize})"
    },
    {
      "trigger": "CMAudioFormatDescriptionGetMagicCookie",
      "contents": "CMAudioFormatDescriptionGetMagicCookie(${1:CMAudioFormatDescriptionRef desc}, ${2:size_t* cookieSizeOut})"
    },
    {
      "trigger": "CMAudioFormatDescriptionGetMostCompatibleFormat",
      "contents": "CMAudioFormatDescriptionGetMostCompatibleFormat(${1:CMAudioFormatDescriptionRef desc})"
    },
    {
      "trigger": "CMAudioFormatDescriptionGetRichestDecodableFormat",
      "contents": "CMAudioFormatDescriptionGetRichestDecodableFormat(${1:CMAudioFormatDescriptionRef desc})"
    },
    {
      "trigger": "CMAudioFormatDescriptionGetStreamBasicDescription",
      "contents": "CMAudioFormatDescriptionGetStreamBasicDescription(${1:CMAudioFormatDescriptionRef desc})"
    },
    {
      "trigger": "CMAudioSampleBufferCreateWithPacketDescriptions",
      "contents": "CMAudioSampleBufferCreateWithPacketDescriptions(${1:CFAllocatorRef allocator}, ${2:CMBlockBufferRef dataBuffer}, ${3:Boolean dataReady}, ${4:CMSampleBufferMakeDataReadyCallback makeDataReadyCallback}, ${5:void* makeDataReadyRefcon}, ${6:CMFormatDescriptionRef formatDescription}, ${7:CMItemCount numSamples}, ${8:CMTime sbufPTS}, ${9:AudioStreamPacketDescription* packetDescriptions}, ${10:CMSampleBufferRef* sBufOut})"
    },
    {
      "trigger": "CMBlockBufferAccessDataBytes",
      "contents": "CMBlockBufferAccessDataBytes(${1:CMBlockBufferRef theBuffer}, ${2:size_t offset}, ${3:size_t length}, ${4:void* temporaryBlock}, ${5:char** returnedPointer})"
    },
    {
      "trigger": "CMBlockBufferAppendBufferReference",
      "contents": "CMBlockBufferAppendBufferReference(${1:CMBlockBufferRef theBuffer}, ${2:CMBlockBufferRef targetBBuf}, ${3:size_t offsetToData}, ${4:size_t dataLength}, ${5:CMBlockBufferFlags flags})"
    },
    {
      "trigger": "CMBlockBufferAppendMemoryBlock",
      "contents": "CMBlockBufferAppendMemoryBlock(${1:CMBlockBufferRef theBuffer}, ${2:void* memoryBlock}, ${3:size_t blockLength}, ${4:CFAllocatorRef blockAllocator}, ${5:CMBlockBufferCustomBlockSource* customBlockSource}, ${6:size_t offsetToData}, ${7:size_t dataLength}, ${8:CMBlockBufferFlags flags})"
    },
    {
      "trigger": "CMBlockBufferAssureBlockMemory",
      "contents": "CMBlockBufferAssureBlockMemory(${1:CMBlockBufferRef theBuffer})"
    },
    {
      "trigger": "CMBlockBufferCopyDataBytes",
      "contents": "CMBlockBufferCopyDataBytes(${1:CMBlockBufferRef theSourceBuffer}, ${2:size_t offsetToData}, ${3:size_t dataLength}, ${4:void* destination})"
    },
    {
      "trigger": "CMBlockBufferCreateContiguous",
      "contents": "CMBlockBufferCreateContiguous(${1:CFAllocatorRef structureAllocator}, ${2:CMBlockBufferRef sourceBuffer}, ${3:CFAllocatorRef blockAllocator}, ${4:CMBlockBufferCustomBlockSource* customBlockSource}, ${5:size_t offsetToData}, ${6:size_t dataLength}, ${7:CMBlockBufferFlags flags}, ${8:CMBlockBufferRef* newBBufOut})"
    },
    {
      "trigger": "CMBlockBufferCreateEmpty",
      "contents": "CMBlockBufferCreateEmpty(${1:CFAllocatorRef structureAllocator}, ${2:uint32_t subBlockCapacity}, ${3:CMBlockBufferFlags flags}, ${4:CMBlockBufferRef* newBBufOut})"
    },
    {
      "trigger": "CMBlockBufferCreateWithBufferReference",
      "contents": "CMBlockBufferCreateWithBufferReference(${1:CFAllocatorRef structureAllocator}, ${2:CMBlockBufferRef targetBuffer}, ${3:size_t offsetToData}, ${4:size_t dataLength}, ${5:CMBlockBufferFlags flags}, ${6:CMBlockBufferRef* newBBufOut})"
    },
    {
      "trigger": "CMBlockBufferCreateWithMemoryBlock",
      "contents": "CMBlockBufferCreateWithMemoryBlock(${1:CFAllocatorRef structureAllocator}, ${2:void* memoryBlock}, ${3:size_t blockLength}, ${4:CFAllocatorRef blockAllocator}, ${5:CMBlockBufferCustomBlockSource* customBlockSource}, ${6:size_t offsetToData}, ${7:size_t dataLength}, ${8:CMBlockBufferFlags flags}, ${9:CMBlockBufferRef* newBBufOut})"
    },
    {
      "trigger": "CMBlockBufferFillDataBytes",
      "contents": "CMBlockBufferFillDataBytes(${1:char fillByte}, ${2:CMBlockBufferRef destinationBuffer}, ${3:size_t offsetIntoDestination}, ${4:size_t dataLength})"
    },
    {
      "trigger": "CMBlockBufferGetDataLength",
      "contents": "CMBlockBufferGetDataLength(${1:CMBlockBufferRef theBuffer})"
    },
    {
      "trigger": "CMBlockBufferGetDataPointer",
      "contents": "CMBlockBufferGetDataPointer(${1:CMBlockBufferRef theBuffer}, ${2:size_t offset}, ${3:size_t* lengthAtOffset}, ${4:size_t* totalLength}, ${5:char** dataPointer})"
    },
    {
      "trigger": "CMBlockBufferIsEmpty",
      "contents": "CMBlockBufferIsEmpty(${1:CMBlockBufferRef theBuffer})"
    },
    {
      "trigger": "CMBlockBufferIsRangeContiguous",
      "contents": "CMBlockBufferIsRangeContiguous(${1:CMBlockBufferRef theBuffer}, ${2:size_t offset}, ${3:size_t length})"
    },
    {
      "trigger": "CMBlockBufferReplaceDataBytes",
      "contents": "CMBlockBufferReplaceDataBytes(${1:void* sourceBytes}, ${2:CMBlockBufferRef destinationBuffer}, ${3:size_t offsetIntoDestination}, ${4:size_t dataLength})"
    },
    {
      "trigger": "CMBufferQueueCallForEachBuffer",
      "contents": "CMBufferQueueCallForEachBuffer(${1:CMBufferQueueRef queue}, ${2:OSStatus (*)(CMBufferRef, void *) callback}, ${3:void* refcon})"
    },
    {
      "trigger": "CMBufferQueueContainsEndOfData",
      "contents": "CMBufferQueueContainsEndOfData(${1:CMBufferQueueRef queue})"
    },
    {
      "trigger": "CMBufferQueueCreate",
      "contents": "CMBufferQueueCreate(${1:CFAllocatorRef allocator}, ${2:CMItemCount capacity}, ${3:CMBufferCallbacks* callbacks}, ${4:CMBufferQueueRef* queueOut})"
    },
    {
      "trigger": "CMBufferQueueDequeueAndRetain",
      "contents": "CMBufferQueueDequeueAndRetain(${1:CMBufferQueueRef queue})"
    },
    {
      "trigger": "CMBufferQueueDequeueIfDataReadyAndRetain",
      "contents": "CMBufferQueueDequeueIfDataReadyAndRetain(${1:CMBufferQueueRef queue})"
    },
    {
      "trigger": "CMBufferQueueEnqueue",
      "contents": "CMBufferQueueEnqueue(${1:CMBufferQueueRef queue}, ${2:CMBufferRef buf})"
    },
    {
      "trigger": "CMBufferQueueGetBufferCount",
      "contents": "CMBufferQueueGetBufferCount(${1:CMBufferQueueRef queue})"
    },
    {
      "trigger": "CMBufferQueueGetDuration",
      "contents": "CMBufferQueueGetDuration(${1:CMBufferQueueRef queue})"
    },
    {
      "trigger": "CMBufferQueueGetEndPresentationTimeStamp",
      "contents": "CMBufferQueueGetEndPresentationTimeStamp(${1:CMBufferQueueRef queue})"
    },
    {
      "trigger": "CMBufferQueueGetFirstDecodeTimeStamp",
      "contents": "CMBufferQueueGetFirstDecodeTimeStamp(${1:CMBufferQueueRef queue})"
    },
    {
      "trigger": "CMBufferQueueGetFirstPresentationTimeStamp",
      "contents": "CMBufferQueueGetFirstPresentationTimeStamp(${1:CMBufferQueueRef queue})"
    },
    {
      "trigger": "CMBufferQueueGetHead",
      "contents": "CMBufferQueueGetHead(${1:CMBufferQueueRef queue})"
    },
    {
      "trigger": "CMBufferQueueGetMaxPresentationTimeStamp",
      "contents": "CMBufferQueueGetMaxPresentationTimeStamp(${1:CMBufferQueueRef queue})"
    },
    {
      "trigger": "CMBufferQueueGetMinDecodeTimeStamp",
      "contents": "CMBufferQueueGetMinDecodeTimeStamp(${1:CMBufferQueueRef queue})"
    },
    {
      "trigger": "CMBufferQueueGetMinPresentationTimeStamp",
      "contents": "CMBufferQueueGetMinPresentationTimeStamp(${1:CMBufferQueueRef queue})"
    },
    {
      "trigger": "CMBufferQueueInstallTrigger",
      "contents": "CMBufferQueueInstallTrigger(${1:CMBufferQueueRef queue}, ${2:CMBufferQueueTriggerCallback triggerCallback}, ${3:void* triggerRefcon}, ${4:CMBufferQueueTriggerCondition triggerCondition}, ${5:CMTime triggerTime}, ${6:CMBufferQueueTriggerToken* triggerTokenOut})"
    },
    {
      "trigger": "CMBufferQueueInstallTriggerWithIntegerThreshold",
      "contents": "CMBufferQueueInstallTriggerWithIntegerThreshold(${1:CMBufferQueueRef queue}, ${2:CMBufferQueueTriggerCallback triggerCallback}, ${3:void* triggerRefcon}, ${4:CMBufferQueueTriggerCondition triggerCondition}, ${5:CMItemCount triggerThreshold}, ${6:CMBufferQueueTriggerToken* triggerTokenOut})"
    },
    {
      "trigger": "CMBufferQueueIsAtEndOfData",
      "contents": "CMBufferQueueIsAtEndOfData(${1:CMBufferQueueRef queue})"
    },
    {
      "trigger": "CMBufferQueueIsEmpty",
      "contents": "CMBufferQueueIsEmpty(${1:CMBufferQueueRef queue})"
    },
    {
      "trigger": "CMBufferQueueMarkEndOfData",
      "contents": "CMBufferQueueMarkEndOfData(${1:CMBufferQueueRef queue})"
    },
    {
      "trigger": "CMBufferQueueRemoveTrigger",
      "contents": "CMBufferQueueRemoveTrigger(${1:CMBufferQueueRef queue}, ${2:CMBufferQueueTriggerToken triggerToken})"
    },
    {
      "trigger": "CMBufferQueueReset",
      "contents": "CMBufferQueueReset(${1:CMBufferQueueRef queue})"
    },
    {
      "trigger": "CMBufferQueueResetWithCallback",
      "contents": "CMBufferQueueResetWithCallback(${1:CMBufferQueueRef queue}, ${2:void (*)(CMBufferRef, void *) callback}, ${3:void* refcon})"
    },
    {
      "trigger": "CMBufferQueueSetValidationCallback",
      "contents": "CMBufferQueueSetValidationCallback(${1:CMBufferQueueRef queue}, ${2:CMBufferValidationCallback validationCallback}, ${3:void* validationRefCon})"
    },
    {
      "trigger": "CMBufferQueueTestTrigger",
      "contents": "CMBufferQueueTestTrigger(${1:CMBufferQueueRef queue}, ${2:CMBufferQueueTriggerToken triggerToken})"
    },
    {
      "trigger": "CMCopyDictionaryOfAttachments",
      "contents": "CMCopyDictionaryOfAttachments(${1:CFAllocatorRef allocator}, ${2:CMAttachmentBearerRef target}, ${3:CMAttachmentMode attachmentMode})"
    },
    {
      "trigger": "CMErrorDeviceRequiresMovement (101)",
      "contents": "CMErrorDeviceRequiresMovement"
    },
    {
      "trigger": "CMErrorDomain (NSString*)",
      "contents": "CMErrorDomain"
    },
    {
      "trigger": "CMErrorNULL (100)",
      "contents": "CMErrorNULL"
    },
    {
      "trigger": "CMErrorTrueNorthNotAvailable (102)",
      "contents": "CMErrorTrueNorthNotAvailable"
    },
    {
      "trigger": "CMFormatDescriptionCreate",
      "contents": "CMFormatDescriptionCreate(${1:CFAllocatorRef allocator}, ${2:CMMediaType mediaType}, ${3:FourCharCode mediaSubtype}, ${4:CFDictionaryRef extensions}, ${5:CMFormatDescriptionRef* descOut})"
    },
    {
      "trigger": "CMFormatDescriptionEqual",
      "contents": "CMFormatDescriptionEqual(${1:CMFormatDescriptionRef desc1}, ${2:CMFormatDescriptionRef desc2})"
    },
    {
      "trigger": "CMFormatDescriptionEqualIgnoringExtensionKeys",
      "contents": "CMFormatDescriptionEqualIgnoringExtensionKeys(${1:CMFormatDescriptionRef desc1}, ${2:CMFormatDescriptionRef desc2}, ${3:CFTypeRef formatDescriptionExtensionKeysToIgnore}, ${4:CFTypeRef sampleDescriptionExtensionAtomKeysToIgnore})"
    },
    {
      "trigger": "CMFormatDescriptionGetExtension",
      "contents": "CMFormatDescriptionGetExtension(${1:CMFormatDescriptionRef desc}, ${2:CFStringRef extensionKey})"
    },
    {
      "trigger": "CMFormatDescriptionGetExtensions",
      "contents": "CMFormatDescriptionGetExtensions(${1:CMFormatDescriptionRef desc})"
    },
    {
      "trigger": "CMFormatDescriptionGetMediaSubType",
      "contents": "CMFormatDescriptionGetMediaSubType(${1:CMFormatDescriptionRef desc})"
    },
    {
      "trigger": "CMFormatDescriptionGetMediaType",
      "contents": "CMFormatDescriptionGetMediaType(${1:CMFormatDescriptionRef desc})"
    },
    {
      "trigger": "CMGetAttachment",
      "contents": "CMGetAttachment(${1:CMAttachmentBearerRef target}, ${2:CFStringRef key}, ${3:CMAttachmentMode* attachmentModeOut})"
    },
    {
      "trigger": "CMMagneticFieldCalibrationAccuracyHigh (2)",
      "contents": "CMMagneticFieldCalibrationAccuracyHigh"
    },
    {
      "trigger": "CMMagneticFieldCalibrationAccuracyLow (0)",
      "contents": "CMMagneticFieldCalibrationAccuracyLow"
    },
    {
      "trigger": "CMMagneticFieldCalibrationAccuracyMedium (1)",
      "contents": "CMMagneticFieldCalibrationAccuracyMedium"
    },
    {
      "trigger": "CMMagneticFieldCalibrationAccuracyUncalibrated (-1)",
      "contents": "CMMagneticFieldCalibrationAccuracyUncalibrated"
    },
    {
      "trigger": "CMMetadataFormatDescriptionCreateWithKeys",
      "contents": "CMMetadataFormatDescriptionCreateWithKeys(${1:CFAllocatorRef allocator}, ${2:CMMetadataFormatType metadataType}, ${3:CFArrayRef keys}, ${4:CMMetadataFormatDescriptionRef* outDesc})"
    },
    {
      "trigger": "CMMetadataFormatDescriptionGetKeyWithLocalID",
      "contents": "CMMetadataFormatDescriptionGetKeyWithLocalID(${1:CMMetadataFormatDescriptionRef desc}, ${2:OSType localKeyID})"
    },
    {
      "trigger": "CMMuxedFormatDescriptionCreate",
      "contents": "CMMuxedFormatDescriptionCreate(${1:CFAllocatorRef allocator}, ${2:CMMuxedStreamType muxType}, ${3:CFDictionaryRef extensions}, ${4:CMMuxedFormatDescriptionRef* outDesc})"
    },
    {
      "trigger": "CMPropagateAttachments",
      "contents": "CMPropagateAttachments(${1:CMAttachmentBearerRef source}, ${2:CMAttachmentBearerRef destination})"
    },
    {
      "trigger": "CMRemoveAllAttachments",
      "contents": "CMRemoveAllAttachments(${1:CMAttachmentBearerRef target})"
    },
    {
      "trigger": "CMRemoveAttachment",
      "contents": "CMRemoveAttachment(${1:CMAttachmentBearerRef target}, ${2:CFStringRef key})"
    },
    {
      "trigger": "CMSampleBufferCallForEachSample",
      "contents": "CMSampleBufferCallForEachSample(${1:CMSampleBufferRef sbuf}, ${2:OSStatus (*)(CMSampleBufferRef, CMItemCount, void *) callback}, ${3:void* refcon})"
    },
    {
      "trigger": "CMSampleBufferCopySampleBufferForRange",
      "contents": "CMSampleBufferCopySampleBufferForRange(${1:CFAllocatorRef allocator}, ${2:CMSampleBufferRef sbuf}, ${3:CFRange sampleRange}, ${4:CMSampleBufferRef* sBufOut})"
    },
    {
      "trigger": "CMSampleBufferCreate",
      "contents": "CMSampleBufferCreate(${1:CFAllocatorRef allocator}, ${2:CMBlockBufferRef dataBuffer}, ${3:Boolean dataReady}, ${4:CMSampleBufferMakeDataReadyCallback makeDataReadyCallback}, ${5:void* makeDataReadyRefcon}, ${6:CMFormatDescriptionRef formatDescription}, ${7:CMItemCount numSamples}, ${8:CMItemCount numSampleTimingEntries}, ${9:CMSampleTimingInfo* sampleTimingArray}, ${10:CMItemCount numSampleSizeEntries}, ${11:size_t* sampleSizeArray}, ${12:CMSampleBufferRef* sBufOut})"
    },
    {
      "trigger": "CMSampleBufferCreateCopy",
      "contents": "CMSampleBufferCreateCopy(${1:CFAllocatorRef allocator}, ${2:CMSampleBufferRef sbuf}, ${3:CMSampleBufferRef* sbufCopyOut})"
    },
    {
      "trigger": "CMSampleBufferCreateCopyWithNewTiming",
      "contents": "CMSampleBufferCreateCopyWithNewTiming(${1:CFAllocatorRef allocator}, ${2:CMSampleBufferRef originalSBuf}, ${3:CMItemCount numSampleTimingEntries}, ${4:CMSampleTimingInfo* sampleTimingArray}, ${5:CMSampleBufferRef* sBufCopyOut})"
    },
    {
      "trigger": "CMSampleBufferCreateForImageBuffer",
      "contents": "CMSampleBufferCreateForImageBuffer(${1:CFAllocatorRef allocator}, ${2:CVImageBufferRef imageBuffer}, ${3:Boolean dataReady}, ${4:CMSampleBufferMakeDataReadyCallback makeDataReadyCallback}, ${5:void* makeDataReadyRefcon}, ${6:CMVideoFormatDescriptionRef formatDescription}, ${7:CMSampleTimingInfo* sampleTiming}, ${8:CMSampleBufferRef* sBufOut})"
    },
    {
      "trigger": "CMSampleBufferDataIsReady",
      "contents": "CMSampleBufferDataIsReady(${1:CMSampleBufferRef sbuf})"
    },
    {
      "trigger": "CMSampleBufferGetAudioBufferListWithRetainedBlockBuffer",
      "contents": "CMSampleBufferGetAudioBufferListWithRetainedBlockBuffer(${1:CMSampleBufferRef sbuf}, ${2:size_t* bufferListSizeNeededOut}, ${3:AudioBufferList* bufferListOut}, ${4:size_t bufferListSize}, ${5:CFAllocatorRef bbufStructAllocator}, ${6:CFAllocatorRef bbufMemoryAllocator}, ${7:uint32_t flags}, ${8:CMBlockBufferRef* blockBufferOut})"
    },
    {
      "trigger": "CMSampleBufferGetAudioStreamPacketDescriptions",
      "contents": "CMSampleBufferGetAudioStreamPacketDescriptions(${1:CMSampleBufferRef sbuf}, ${2:size_t packetDescriptionsSize}, ${3:AudioStreamPacketDescription* packetDescriptionsOut}, ${4:size_t* packetDescriptionsSizeNeededOut})"
    },
    {
      "trigger": "CMSampleBufferGetAudioStreamPacketDescriptionsPtr",
      "contents": "CMSampleBufferGetAudioStreamPacketDescriptionsPtr(${1:CMSampleBufferRef sbuf}, ${2:AudioStreamPacketDescription** packetDescriptionsPtrOut}, ${3:size_t* packetDescriptionsSizeOut})"
    },
    {
      "trigger": "CMSampleBufferGetDataBuffer",
      "contents": "CMSampleBufferGetDataBuffer(${1:CMSampleBufferRef sbuf})"
    },
    {
      "trigger": "CMSampleBufferGetDecodeTimeStamp",
      "contents": "CMSampleBufferGetDecodeTimeStamp(${1:CMSampleBufferRef sbuf})"
    },
    {
      "trigger": "CMSampleBufferGetDuration",
      "contents": "CMSampleBufferGetDuration(${1:CMSampleBufferRef sbuf})"
    },
    {
      "trigger": "CMSampleBufferGetFormatDescription",
      "contents": "CMSampleBufferGetFormatDescription(${1:CMSampleBufferRef sbuf})"
    },
    {
      "trigger": "CMSampleBufferGetImageBuffer",
      "contents": "CMSampleBufferGetImageBuffer(${1:CMSampleBufferRef sbuf})"
    },
    {
      "trigger": "CMSampleBufferGetNumSamples",
      "contents": "CMSampleBufferGetNumSamples(${1:CMSampleBufferRef sbuf})"
    },
    {
      "trigger": "CMSampleBufferGetOutputDecodeTimeStamp",
      "contents": "CMSampleBufferGetOutputDecodeTimeStamp(${1:CMSampleBufferRef sbuf})"
    },
    {
      "trigger": "CMSampleBufferGetOutputDuration",
      "contents": "CMSampleBufferGetOutputDuration(${1:CMSampleBufferRef sbuf})"
    },
    {
      "trigger": "CMSampleBufferGetOutputPresentationTimeStamp",
      "contents": "CMSampleBufferGetOutputPresentationTimeStamp(${1:CMSampleBufferRef sbuf})"
    },
    {
      "trigger": "CMSampleBufferGetOutputSampleTimingInfoArray",
      "contents": "CMSampleBufferGetOutputSampleTimingInfoArray(${1:CMSampleBufferRef sbuf}, ${2:CMItemCount timingArrayEntries}, ${3:CMSampleTimingInfo* timingArrayOut}, ${4:CMItemCount* timingArrayEntriesNeededOut})"
    },
    {
      "trigger": "CMSampleBufferGetPresentationTimeStamp",
      "contents": "CMSampleBufferGetPresentationTimeStamp(${1:CMSampleBufferRef sbuf})"
    },
    {
      "trigger": "CMSampleBufferGetSampleAttachmentsArray",
      "contents": "CMSampleBufferGetSampleAttachmentsArray(${1:CMSampleBufferRef sbuf}, ${2:Boolean createIfNecessary})"
    },
    {
      "trigger": "CMSampleBufferGetSampleSize",
      "contents": "CMSampleBufferGetSampleSize(${1:CMSampleBufferRef sbuf}, ${2:CMItemIndex sampleIndex})"
    },
    {
      "trigger": "CMSampleBufferGetSampleSizeArray",
      "contents": "CMSampleBufferGetSampleSizeArray(${1:CMSampleBufferRef sbuf}, ${2:CMItemCount sizeArrayEntries}, ${3:size_t* sizeArrayOut}, ${4:CMItemCount* sizeArrayEntriesNeededOut})"
    },
    {
      "trigger": "CMSampleBufferGetSampleTimingInfo",
      "contents": "CMSampleBufferGetSampleTimingInfo(${1:CMSampleBufferRef sbuf}, ${2:CMItemIndex sampleIndex}, ${3:CMSampleTimingInfo* timingInfoOut})"
    },
    {
      "trigger": "CMSampleBufferGetSampleTimingInfoArray",
      "contents": "CMSampleBufferGetSampleTimingInfoArray(${1:CMSampleBufferRef sbuf}, ${2:CMItemCount timingArrayEntries}, ${3:CMSampleTimingInfo* timingArrayOut}, ${4:CMItemCount* timingArrayEntriesNeededOut})"
    },
    {
      "trigger": "CMSampleBufferGetTotalSampleSize",
      "contents": "CMSampleBufferGetTotalSampleSize(${1:CMSampleBufferRef sbuf})"
    },
    {
      "trigger": "CMSampleBufferInvalidate",
      "contents": "CMSampleBufferInvalidate(${1:CMSampleBufferRef sbuf})"
    },
    {
      "trigger": "CMSampleBufferIsValid",
      "contents": "CMSampleBufferIsValid(${1:CMSampleBufferRef sbuf})"
    },
    {
      "trigger": "CMSampleBufferMakeDataReady",
      "contents": "CMSampleBufferMakeDataReady(${1:CMSampleBufferRef sbuf})"
    },
    {
      "trigger": "CMSampleBufferSetDataBuffer",
      "contents": "CMSampleBufferSetDataBuffer(${1:CMSampleBufferRef sbuf}, ${2:CMBlockBufferRef dataBuffer})"
    },
    {
      "trigger": "CMSampleBufferSetDataBufferFromAudioBufferList",
      "contents": "CMSampleBufferSetDataBufferFromAudioBufferList(${1:CMSampleBufferRef sbuf}, ${2:CFAllocatorRef bbufStructAllocator}, ${3:CFAllocatorRef bbufMemoryAllocator}, ${4:uint32_t flags}, ${5:AudioBufferList* bufferList})"
    },
    {
      "trigger": "CMSampleBufferSetDataReady",
      "contents": "CMSampleBufferSetDataReady(${1:CMSampleBufferRef sbuf})"
    },
    {
      "trigger": "CMSampleBufferSetInvalidateCallback",
      "contents": "CMSampleBufferSetInvalidateCallback(${1:CMSampleBufferRef sbuf}, ${2:CMSampleBufferInvalidateCallback invalidateCallback}, ${3:uint64_t invalidateRefCon})"
    },
    {
      "trigger": "CMSampleBufferSetOutputPresentationTimeStamp",
      "contents": "CMSampleBufferSetOutputPresentationTimeStamp(${1:CMSampleBufferRef sbuf}, ${2:CMTime outputPresentationTimeStamp})"
    },
    {
      "trigger": "CMSampleBufferTrackDataReadiness",
      "contents": "CMSampleBufferTrackDataReadiness(${1:CMSampleBufferRef sbuf}, ${2:CMSampleBufferRef sbufToTrack})"
    },
    {
      "trigger": "CMSetAttachment",
      "contents": "CMSetAttachment(${1:CMAttachmentBearerRef target}, ${2:CFStringRef key}, ${3:CFTypeRef value}, ${4:CMAttachmentMode attachmentMode})"
    },
    {
      "trigger": "CMSetAttachments",
      "contents": "CMSetAttachments(${1:CMAttachmentBearerRef target}, ${2:CFDictionaryRef theAttachments}, ${3:CMAttachmentMode attachmentMode})"
    },
    {
      "trigger": "CMSimpleQueueCreate",
      "contents": "CMSimpleQueueCreate(${1:CFAllocatorRef allocator}, ${2:int32_t capacity}, ${3:CMSimpleQueueRef* queueOut})"
    },
    {
      "trigger": "CMSimpleQueueDequeue",
      "contents": "CMSimpleQueueDequeue(${1:CMSimpleQueueRef queue})"
    },
    {
      "trigger": "CMSimpleQueueEnqueue",
      "contents": "CMSimpleQueueEnqueue(${1:CMSimpleQueueRef queue}, ${2:void* element})"
    },
    {
      "trigger": "CMSimpleQueueGetCapacity",
      "contents": "CMSimpleQueueGetCapacity(${1:CMSimpleQueueRef queue})"
    },
    {
      "trigger": "CMSimpleQueueGetCount",
      "contents": "CMSimpleQueueGetCount(${1:CMSimpleQueueRef queue})"
    },
    {
      "trigger": "CMSimpleQueueGetHead",
      "contents": "CMSimpleQueueGetHead(${1:CMSimpleQueueRef queue})"
    },
    {
      "trigger": "CMSimpleQueueReset",
      "contents": "CMSimpleQueueReset(${1:CMSimpleQueueRef queue})"
    },
    {
      "trigger": "CMTextFormatDescriptionGetDefaultStyle",
      "contents": "CMTextFormatDescriptionGetDefaultStyle(${1:CMFormatDescriptionRef desc}, ${2:uint16_t* outLocalFontID}, ${3:Boolean* outBold}, ${4:Boolean* outItalic}, ${5:Boolean* outUnderline}, ${6:CGFloat* outFontSize}, ${7:CGFloat* outColorComponents})"
    },
    {
      "trigger": "CMTextFormatDescriptionGetDefaultTextBox",
      "contents": "CMTextFormatDescriptionGetDefaultTextBox(${1:CMFormatDescriptionRef desc}, ${2:Boolean originIsAtTopLeft}, ${3:CGFloat heightOfTextTrack}, ${4:CGRect* outDefaultTextBox})"
    },
    {
      "trigger": "CMTextFormatDescriptionGetDisplayFlags",
      "contents": "CMTextFormatDescriptionGetDisplayFlags(${1:CMFormatDescriptionRef desc}, ${2:CMTextDisplayFlags* outDisplayFlags})"
    },
    {
      "trigger": "CMTextFormatDescriptionGetFontName",
      "contents": "CMTextFormatDescriptionGetFontName(${1:CMFormatDescriptionRef desc}, ${2:uint16_t localFontID}, ${3:CFStringRef* outFontName})"
    },
    {
      "trigger": "CMTextFormatDescriptionGetJustification",
      "contents": "CMTextFormatDescriptionGetJustification(${1:CMFormatDescriptionRef desc}, ${2:CMTextJustificationValue* outHorizontalJust}, ${3:CMTextJustificationValue* outVerticalJust})"
    },
    {
      "trigger": "CMTimeAbsoluteValue",
      "contents": "CMTimeAbsoluteValue(${1:CMTime time})"
    },
    {
      "trigger": "CMTimeAdd",
      "contents": "CMTimeAdd(${1:CMTime addend1}, ${2:CMTime addend2})"
    },
    {
      "trigger": "CMTimeClampToRange",
      "contents": "CMTimeClampToRange(${1:CMTime time}, ${2:CMTimeRange range})"
    },
    {
      "trigger": "CMTimeCodeFormatDescriptionCreate",
      "contents": "CMTimeCodeFormatDescriptionCreate(${1:CFAllocatorRef allocator}, ${2:CMTimeCodeFormatType timeCodeFormatType}, ${3:CMTime frameDuration}, ${4:uint32_t frameQuanta}, ${5:uint32_t tcFlags}, ${6:CFDictionaryRef extensions}, ${7:CMTimeCodeFormatDescriptionRef* descOut})"
    },
    {
      "trigger": "CMTimeCodeFormatDescriptionGetFrameDuration",
      "contents": "CMTimeCodeFormatDescriptionGetFrameDuration(${1:CMTimeCodeFormatDescriptionRef timeCodeFormatDescription})"
    },
    {
      "trigger": "CMTimeCodeFormatDescriptionGetFrameQuanta",
      "contents": "CMTimeCodeFormatDescriptionGetFrameQuanta(${1:CMTimeCodeFormatDescriptionRef timeCodeFormatDescription})"
    },
    {
      "trigger": "CMTimeCodeFormatDescriptionGetTimeCodeFlags",
      "contents": "CMTimeCodeFormatDescriptionGetTimeCodeFlags(${1:CMTimeCodeFormatDescriptionRef desc})"
    },
    {
      "trigger": "CMTimeCompare",
      "contents": "CMTimeCompare(${1:CMTime time1}, ${2:CMTime time2})"
    },
    {
      "trigger": "CMTimeConvertScale",
      "contents": "CMTimeConvertScale(${1:CMTime time}, ${2:int32_t newTimescale}, ${3:CMTimeRoundingMethod method})"
    },
    {
      "trigger": "CMTimeCopyAsDictionary",
      "contents": "CMTimeCopyAsDictionary(${1:CMTime time}, ${2:CFAllocatorRef allocator})"
    },
    {
      "trigger": "CMTimeCopyDescription",
      "contents": "CMTimeCopyDescription(${1:CFAllocatorRef allocator}, ${2:CMTime time})"
    },
    {
      "trigger": "CMTimeGetSeconds",
      "contents": "CMTimeGetSeconds(${1:CMTime time})"
    },
    {
      "trigger": "CMTimeMake",
      "contents": "CMTimeMake(${1:int64_t value}, ${2:int32_t timescale})"
    },
    {
      "trigger": "CMTimeMakeFromDictionary",
      "contents": "CMTimeMakeFromDictionary(${1:CFDictionaryRef dict})"
    },
    {
      "trigger": "CMTimeMakeWithEpoch",
      "contents": "CMTimeMakeWithEpoch(${1:int64_t value}, ${2:int32_t timescale}, ${3:int64_t epoch})"
    },
    {
      "trigger": "CMTimeMakeWithSeconds",
      "contents": "CMTimeMakeWithSeconds(${1:Float64 seconds}, ${2:int32_t preferredTimeScale})"
    },
    {
      "trigger": "CMTimeMapDurationFromRangeToRange",
      "contents": "CMTimeMapDurationFromRangeToRange(${1:CMTime dur}, ${2:CMTimeRange fromRange}, ${3:CMTimeRange toRange})"
    },
    {
      "trigger": "CMTimeMapTimeFromRangeToRange",
      "contents": "CMTimeMapTimeFromRangeToRange(${1:CMTime t}, ${2:CMTimeRange fromRange}, ${3:CMTimeRange toRange})"
    },
    {
      "trigger": "CMTimeMaximum",
      "contents": "CMTimeMaximum(${1:CMTime time1}, ${2:CMTime time2})"
    },
    {
      "trigger": "CMTimeMinimum",
      "contents": "CMTimeMinimum(${1:CMTime time1}, ${2:CMTime time2})"
    },
    {
      "trigger": "CMTimeMultiply",
      "contents": "CMTimeMultiply(${1:CMTime time}, ${2:int32_t multiplier})"
    },
    {
      "trigger": "CMTimeMultiplyByFloat64",
      "contents": "CMTimeMultiplyByFloat64(${1:CMTime time}, ${2:Float64 multiplier})"
    },
    {
      "trigger": "CMTimeRangeContainsTime",
      "contents": "CMTimeRangeContainsTime(${1:CMTimeRange range}, ${2:CMTime time})"
    },
    {
      "trigger": "CMTimeRangeContainsTimeRange",
      "contents": "CMTimeRangeContainsTimeRange(${1:CMTimeRange range1}, ${2:CMTimeRange range2})"
    },
    {
      "trigger": "CMTimeRangeCopyAsDictionary",
      "contents": "CMTimeRangeCopyAsDictionary(${1:CMTimeRange range}, ${2:CFAllocatorRef allocator})"
    },
    {
      "trigger": "CMTimeRangeCopyDescription",
      "contents": "CMTimeRangeCopyDescription(${1:CFAllocatorRef allocator}, ${2:CMTimeRange range})"
    },
    {
      "trigger": "CMTimeRangeEqual",
      "contents": "CMTimeRangeEqual(${1:CMTimeRange range1}, ${2:CMTimeRange range2})"
    },
    {
      "trigger": "CMTimeRangeFromTimeToTime",
      "contents": "CMTimeRangeFromTimeToTime(${1:CMTime start}, ${2:CMTime end})"
    },
    {
      "trigger": "CMTimeRangeGetEnd",
      "contents": "CMTimeRangeGetEnd(${1:CMTimeRange range})"
    },
    {
      "trigger": "CMTimeRangeGetIntersection",
      "contents": "CMTimeRangeGetIntersection(${1:CMTimeRange range1}, ${2:CMTimeRange range2})"
    },
    {
      "trigger": "CMTimeRangeGetUnion",
      "contents": "CMTimeRangeGetUnion(${1:CMTimeRange range1}, ${2:CMTimeRange range2})"
    },
    {
      "trigger": "CMTimeRangeMake",
      "contents": "CMTimeRangeMake(${1:CMTime start}, ${2:CMTime duration})"
    },
    {
      "trigger": "CMTimeRangeMakeFromDictionary",
      "contents": "CMTimeRangeMakeFromDictionary(${1:CFDictionaryRef dict})"
    },
    {
      "trigger": "CMTimeRangeShow",
      "contents": "CMTimeRangeShow(${1:CMTimeRange range})"
    },
    {
      "trigger": "CMTimeShow",
      "contents": "CMTimeShow(${1:CMTime time})"
    },
    {
      "trigger": "CMTimeSubtract",
      "contents": "CMTimeSubtract(${1:CMTime minuend}, ${2:CMTime subtrahend})"
    },
    {
      "trigger": "CMVideoFormatDescriptionCreate",
      "contents": "CMVideoFormatDescriptionCreate(${1:CFAllocatorRef allocator}, ${2:CMVideoCodecType codecType}, ${3:int32_t width}, ${4:int32_t height}, ${5:CFDictionaryRef extensions}, ${6:CMVideoFormatDescriptionRef* outDesc})"
    },
    {
      "trigger": "CMVideoFormatDescriptionCreateForImageBuffer",
      "contents": "CMVideoFormatDescriptionCreateForImageBuffer(${1:CFAllocatorRef allocator}, ${2:CVImageBufferRef imageBuffer}, ${3:CMVideoFormatDescriptionRef* outDesc})"
    },
    {
      "trigger": "CMVideoFormatDescriptionGetCleanAperture",
      "contents": "CMVideoFormatDescriptionGetCleanAperture(${1:CMVideoFormatDescriptionRef videoDesc}, ${2:Boolean originIsAtTopLeft})"
    },
    {
      "trigger": "CMVideoFormatDescriptionGetDimensions",
      "contents": "CMVideoFormatDescriptionGetDimensions(${1:CMVideoFormatDescriptionRef videoDesc})"
    },
    {
      "trigger": "CMVideoFormatDescriptionGetPresentationDimensions",
      "contents": "CMVideoFormatDescriptionGetPresentationDimensions(${1:CMVideoFormatDescriptionRef videoDesc}, ${2:Boolean usePixelAspectRatio}, ${3:Boolean useCleanAperture})"
    },
    {
      "trigger": "CMVideoFormatDescriptionMatchesImageBuffer",
      "contents": "CMVideoFormatDescriptionMatchesImageBuffer(${1:CMVideoFormatDescriptionRef desc}, ${2:CVImageBufferRef imageBuffer})"
    },
    {
      "trigger": "CNCopyCurrentNetworkInfo",
      "contents": "CNCopyCurrentNetworkInfo(${1:CFStringRef interfaceName})"
    },
    {
      "trigger": "CNMarkPortalOffline",
      "contents": "CNMarkPortalOffline(${1:CFStringRef interfaceName})"
    },
    {
      "trigger": "CNMarkPortalOnline",
      "contents": "CNMarkPortalOnline(${1:CFStringRef interfaceName})"
    },
    {
      "trigger": "CNSetSupportedSSIDs",
      "contents": "CNSetSupportedSSIDs(${1:CFArrayRef ssidArray})"
    },
    {
      "trigger": "COREAUDIOTYPES_VERSION (1051)",
      "contents": "COREAUDIOTYPES_VERSION"
    },
    {
      "trigger": "COREFOUNDATION_CFPLUGINCOM_SEPARATE (1)",
      "contents": "COREFOUNDATION_CFPLUGINCOM_SEPARATE"
    },
    {
      "trigger": "COREVIDEO_SUPPORTS_COLORSPACE (0)",
      "contents": "COREVIDEO_SUPPORTS_COLORSPACE"
    },
    {
      "trigger": "COREVIDEO_SUPPORTS_DIRECT3D (0)",
      "contents": "COREVIDEO_SUPPORTS_DIRECT3D"
    },
    {
      "trigger": "COREVIDEO_SUPPORTS_DISPLAYLINK (0)",
      "contents": "COREVIDEO_SUPPORTS_DISPLAYLINK"
    },
    {
      "trigger": "COREVIDEO_SUPPORTS_IOSURFACE (0)",
      "contents": "COREVIDEO_SUPPORTS_IOSURFACE"
    },
    {
      "trigger": "COREVIDEO_SUPPORTS_OPENGL (0)",
      "contents": "COREVIDEO_SUPPORTS_OPENGL"
    },
    {
      "trigger": "COREVIDEO_SUPPORTS_OPENGLES (1)",
      "contents": "COREVIDEO_SUPPORTS_OPENGLES"
    },
    {
      "trigger": "CTCallStateConnected (NSString*)",
      "contents": "CTCallStateConnected"
    },
    {
      "trigger": "CTCallStateDialing (NSString*)",
      "contents": "CTCallStateDialing"
    },
    {
      "trigger": "CTCallStateDisconnected (NSString*)",
      "contents": "CTCallStateDisconnected"
    },
    {
      "trigger": "CTCallStateIncoming (NSString*)",
      "contents": "CTCallStateIncoming"
    },
    {
      "trigger": "CTFontCollectionCreateCopyWithFontDescriptors",
      "contents": "CTFontCollectionCreateCopyWithFontDescriptors(${1:CTFontCollectionRef original}, ${2:CFArrayRef queryDescriptors}, ${3:CFDictionaryRef options})"
    },
    {
      "trigger": "CTFontCollectionCreateFromAvailableFonts",
      "contents": "CTFontCollectionCreateFromAvailableFonts(${1:CFDictionaryRef options})"
    },
    {
      "trigger": "CTFontCollectionCreateMatchingFontDescriptors",
      "contents": "CTFontCollectionCreateMatchingFontDescriptors(${1:CTFontCollectionRef collection})"
    },
    {
      "trigger": "CTFontCollectionCreateMatchingFontDescriptorsSortedWithCallback",
      "contents": "CTFontCollectionCreateMatchingFontDescriptorsSortedWithCallback(${1:CTFontCollectionRef collection}, ${2:CTFontCollectionSortDescriptorsCallback sortCallback}, ${3:void* refCon})"
    },
    {
      "trigger": "CTFontCollectionCreateWithFontDescriptors",
      "contents": "CTFontCollectionCreateWithFontDescriptors(${1:CFArrayRef queryDescriptors}, ${2:CFDictionaryRef options})"
    },
    {
      "trigger": "CTFontCopyAttribute",
      "contents": "CTFontCopyAttribute(${1:CTFontRef font}, ${2:CFStringRef attribute})"
    },
    {
      "trigger": "CTFontCopyAvailableTables",
      "contents": "CTFontCopyAvailableTables(${1:CTFontRef font}, ${2:CTFontTableOptions options})"
    },
    {
      "trigger": "CTFontCopyCharacterSet",
      "contents": "CTFontCopyCharacterSet(${1:CTFontRef font})"
    },
    {
      "trigger": "CTFontCopyDisplayName",
      "contents": "CTFontCopyDisplayName(${1:CTFontRef font})"
    },
    {
      "trigger": "CTFontCopyFamilyName",
      "contents": "CTFontCopyFamilyName(${1:CTFontRef font})"
    },
    {
      "trigger": "CTFontCopyFeatureSettings",
      "contents": "CTFontCopyFeatureSettings(${1:CTFontRef font})"
    },
    {
      "trigger": "CTFontCopyFeatures",
      "contents": "CTFontCopyFeatures(${1:CTFontRef font})"
    },
    {
      "trigger": "CTFontCopyFontDescriptor",
      "contents": "CTFontCopyFontDescriptor(${1:CTFontRef font})"
    },
    {
      "trigger": "CTFontCopyFullName",
      "contents": "CTFontCopyFullName(${1:CTFontRef font})"
    },
    {
      "trigger": "CTFontCopyGraphicsFont",
      "contents": "CTFontCopyGraphicsFont(${1:CTFontRef font}, ${2:CTFontDescriptorRef* attributes})"
    },
    {
      "trigger": "CTFontCopyLocalizedName",
      "contents": "CTFontCopyLocalizedName(${1:CTFontRef font}, ${2:CFStringRef nameKey}, ${3:CFStringRef* language})"
    },
    {
      "trigger": "CTFontCopyName",
      "contents": "CTFontCopyName(${1:CTFontRef font}, ${2:CFStringRef nameKey})"
    },
    {
      "trigger": "CTFontCopyPostScriptName",
      "contents": "CTFontCopyPostScriptName(${1:CTFontRef font})"
    },
    {
      "trigger": "CTFontCopySupportedLanguages",
      "contents": "CTFontCopySupportedLanguages(${1:CTFontRef font})"
    },
    {
      "trigger": "CTFontCopyTable",
      "contents": "CTFontCopyTable(${1:CTFontRef font}, ${2:CTFontTableTag table}, ${3:CTFontTableOptions options})"
    },
    {
      "trigger": "CTFontCopyTraits",
      "contents": "CTFontCopyTraits(${1:CTFontRef font})"
    },
    {
      "trigger": "CTFontCopyVariation",
      "contents": "CTFontCopyVariation(${1:CTFontRef font})"
    },
    {
      "trigger": "CTFontCopyVariationAxes",
      "contents": "CTFontCopyVariationAxes(${1:CTFontRef font})"
    },
    {
      "trigger": "CTFontCreateCopyWithAttributes",
      "contents": "CTFontCreateCopyWithAttributes(${1:CTFontRef font}, ${2:CGFloat size}, ${3:CGAffineTransform* matrix}, ${4:CTFontDescriptorRef attributes})"
    },
    {
      "trigger": "CTFontCreateCopyWithFamily",
      "contents": "CTFontCreateCopyWithFamily(${1:CTFontRef font}, ${2:CGFloat size}, ${3:CGAffineTransform* matrix}, ${4:CFStringRef family})"
    },
    {
      "trigger": "CTFontCreateCopyWithSymbolicTraits",
      "contents": "CTFontCreateCopyWithSymbolicTraits(${1:CTFontRef font}, ${2:CGFloat size}, ${3:CGAffineTransform* matrix}, ${4:CTFontSymbolicTraits symTraitValue}, ${5:CTFontSymbolicTraits symTraitMask})"
    },
    {
      "trigger": "CTFontCreateForString",
      "contents": "CTFontCreateForString(${1:CTFontRef currentFont}, ${2:CFStringRef string}, ${3:CFRange range})"
    },
    {
      "trigger": "CTFontCreatePathForGlyph",
      "contents": "CTFontCreatePathForGlyph(${1:CTFontRef font}, ${2:CGGlyph glyph}, ${3:CGAffineTransform* transform})"
    },
    {
      "trigger": "CTFontCreateUIFontForLanguage",
      "contents": "CTFontCreateUIFontForLanguage(${1:CTFontUIFontType uiType}, ${2:CGFloat size}, ${3:CFStringRef language})"
    },
    {
      "trigger": "CTFontCreateWithFontDescriptor",
      "contents": "CTFontCreateWithFontDescriptor(${1:CTFontDescriptorRef descriptor}, ${2:CGFloat size}, ${3:CGAffineTransform* matrix})"
    },
    {
      "trigger": "CTFontCreateWithFontDescriptorAndOptions",
      "contents": "CTFontCreateWithFontDescriptorAndOptions(${1:CTFontDescriptorRef descriptor}, ${2:CGFloat size}, ${3:CGAffineTransform* matrix}, ${4:CTFontOptions options})"
    },
    {
      "trigger": "CTFontCreateWithGraphicsFont",
      "contents": "CTFontCreateWithGraphicsFont(${1:CGFontRef graphicsFont}, ${2:CGFloat size}, ${3:CGAffineTransform* matrix}, ${4:CTFontDescriptorRef attributes})"
    },
    {
      "trigger": "CTFontCreateWithName",
      "contents": "CTFontCreateWithName(${1:CFStringRef name}, ${2:CGFloat size}, ${3:CGAffineTransform* matrix})"
    },
    {
      "trigger": "CTFontCreateWithNameAndOptions",
      "contents": "CTFontCreateWithNameAndOptions(${1:CFStringRef name}, ${2:CGFloat size}, ${3:CGAffineTransform* matrix}, ${4:CTFontOptions options})"
    },
    {
      "trigger": "CTFontDescriptorCopyAttribute",
      "contents": "CTFontDescriptorCopyAttribute(${1:CTFontDescriptorRef descriptor}, ${2:CFStringRef attribute})"
    },
    {
      "trigger": "CTFontDescriptorCopyAttributes",
      "contents": "CTFontDescriptorCopyAttributes(${1:CTFontDescriptorRef descriptor})"
    },
    {
      "trigger": "CTFontDescriptorCopyLocalizedAttribute",
      "contents": "CTFontDescriptorCopyLocalizedAttribute(${1:CTFontDescriptorRef descriptor}, ${2:CFStringRef attribute}, ${3:CFStringRef* language})"
    },
    {
      "trigger": "CTFontDescriptorCreateCopyWithAttributes",
      "contents": "CTFontDescriptorCreateCopyWithAttributes(${1:CTFontDescriptorRef original}, ${2:CFDictionaryRef attributes})"
    },
    {
      "trigger": "CTFontDescriptorCreateCopyWithFeature",
      "contents": "CTFontDescriptorCreateCopyWithFeature(${1:CTFontDescriptorRef original}, ${2:CFNumberRef featureTypeIdentifier}, ${3:CFNumberRef featureSelectorIdentifier})"
    },
    {
      "trigger": "CTFontDescriptorCreateCopyWithVariation",
      "contents": "CTFontDescriptorCreateCopyWithVariation(${1:CTFontDescriptorRef original}, ${2:CFNumberRef variationIdentifier}, ${3:CGFloat variationValue})"
    },
    {
      "trigger": "CTFontDescriptorCreateMatchingFontDescriptor",
      "contents": "CTFontDescriptorCreateMatchingFontDescriptor(${1:CTFontDescriptorRef descriptor}, ${2:CFSetRef mandatoryAttributes})"
    },
    {
      "trigger": "CTFontDescriptorCreateMatchingFontDescriptors",
      "contents": "CTFontDescriptorCreateMatchingFontDescriptors(${1:CTFontDescriptorRef descriptor}, ${2:CFSetRef mandatoryAttributes})"
    },
    {
      "trigger": "CTFontDescriptorCreateWithAttributes",
      "contents": "CTFontDescriptorCreateWithAttributes(${1:CFDictionaryRef attributes})"
    },
    {
      "trigger": "CTFontDescriptorCreateWithNameAndSize",
      "contents": "CTFontDescriptorCreateWithNameAndSize(${1:CFStringRef name}, ${2:CGFloat size})"
    },
    {
      "trigger": "CTFontDrawGlyphs",
      "contents": "CTFontDrawGlyphs(${1:CTFontRef font}, ${2:CGGlyph* glyphs}, ${3:CGPoint* positions}, ${4:size_t count}, ${5:CGContextRef context})"
    },
    {
      "trigger": "CTFontGetAdvancesForGlyphs",
      "contents": "CTFontGetAdvancesForGlyphs(${1:CTFontRef font}, ${2:CTFontOrientation orientation}, ${3:CGGlyph* glyphs}, ${4:CGSize* advances}, ${5:CFIndex count})"
    },
    {
      "trigger": "CTFontGetAscent",
      "contents": "CTFontGetAscent(${1:CTFontRef font})"
    },
    {
      "trigger": "CTFontGetBoundingBox",
      "contents": "CTFontGetBoundingBox(${1:CTFontRef font})"
    },
    {
      "trigger": "CTFontGetBoundingRectsForGlyphs",
      "contents": "CTFontGetBoundingRectsForGlyphs(${1:CTFontRef font}, ${2:CTFontOrientation orientation}, ${3:CGGlyph* glyphs}, ${4:CGRect* boundingRects}, ${5:CFIndex count})"
    },
    {
      "trigger": "CTFontGetCapHeight",
      "contents": "CTFontGetCapHeight(${1:CTFontRef font})"
    },
    {
      "trigger": "CTFontGetDescent",
      "contents": "CTFontGetDescent(${1:CTFontRef font})"
    },
    {
      "trigger": "CTFontGetGlyphCount",
      "contents": "CTFontGetGlyphCount(${1:CTFontRef font})"
    },
    {
      "trigger": "CTFontGetGlyphWithName",
      "contents": "CTFontGetGlyphWithName(${1:CTFontRef font}, ${2:CFStringRef glyphName})"
    },
    {
      "trigger": "CTFontGetGlyphsForCharacters",
      "contents": "CTFontGetGlyphsForCharacters(${1:CTFontRef font}, ${2:UniChar* characters}, ${3:CGGlyph* glyphs}, ${4:CFIndex count})"
    },
    {
      "trigger": "CTFontGetLeading",
      "contents": "CTFontGetLeading(${1:CTFontRef font})"
    },
    {
      "trigger": "CTFontGetLigatureCaretPositions",
      "contents": "CTFontGetLigatureCaretPositions(${1:CTFontRef font}, ${2:CGGlyph glyph}, ${3:CGFloat* positions}, ${4:CFIndex maxPositions})"
    },
    {
      "trigger": "CTFontGetMatrix",
      "contents": "CTFontGetMatrix(${1:CTFontRef font})"
    },
    {
      "trigger": "CTFontGetSize",
      "contents": "CTFontGetSize(${1:CTFontRef font})"
    },
    {
      "trigger": "CTFontGetSlantAngle",
      "contents": "CTFontGetSlantAngle(${1:CTFontRef font})"
    },
    {
      "trigger": "CTFontGetStringEncoding",
      "contents": "CTFontGetStringEncoding(${1:CTFontRef font})"
    },
    {
      "trigger": "CTFontGetSymbolicTraits",
      "contents": "CTFontGetSymbolicTraits(${1:CTFontRef font})"
    },
    {
      "trigger": "CTFontGetUnderlinePosition",
      "contents": "CTFontGetUnderlinePosition(${1:CTFontRef font})"
    },
    {
      "trigger": "CTFontGetUnderlineThickness",
      "contents": "CTFontGetUnderlineThickness(${1:CTFontRef font})"
    },
    {
      "trigger": "CTFontGetUnitsPerEm",
      "contents": "CTFontGetUnitsPerEm(${1:CTFontRef font})"
    },
    {
      "trigger": "CTFontGetVerticalTranslationsForGlyphs",
      "contents": "CTFontGetVerticalTranslationsForGlyphs(${1:CTFontRef font}, ${2:CGGlyph* glyphs}, ${3:CGSize* translations}, ${4:CFIndex count})"
    },
    {
      "trigger": "CTFontGetXHeight",
      "contents": "CTFontGetXHeight(${1:CTFontRef font})"
    },
    {
      "trigger": "CTFontManagerRegisterFontsForURL",
      "contents": "CTFontManagerRegisterFontsForURL(${1:CFURLRef fontURL}, ${2:CTFontManagerScope scope}, ${3:CFErrorRef* error})"
    },
    {
      "trigger": "CTFontManagerRegisterFontsForURLs",
      "contents": "CTFontManagerRegisterFontsForURLs(${1:CFArrayRef fontURLs}, ${2:CTFontManagerScope scope}, ${3:CFArrayRef* errors})"
    },
    {
      "trigger": "CTFontManagerRegisterGraphicsFont",
      "contents": "CTFontManagerRegisterGraphicsFont(${1:CGFontRef font}, ${2:CFErrorRef* error})"
    },
    {
      "trigger": "CTFontManagerUnregisterFontsForURL",
      "contents": "CTFontManagerUnregisterFontsForURL(${1:CFURLRef fontURL}, ${2:CTFontManagerScope scope}, ${3:CFErrorRef* error})"
    },
    {
      "trigger": "CTFontManagerUnregisterFontsForURLs",
      "contents": "CTFontManagerUnregisterFontsForURLs(${1:CFArrayRef fontURLs}, ${2:CTFontManagerScope scope}, ${3:CFArrayRef* errors})"
    },
    {
      "trigger": "CTFontManagerUnregisterGraphicsFont",
      "contents": "CTFontManagerUnregisterGraphicsFont(${1:CGFontRef font}, ${2:CFErrorRef* error})"
    },
    {
      "trigger": "CTFrameDraw",
      "contents": "CTFrameDraw(${1:CTFrameRef frame}, ${2:CGContextRef context})"
    },
    {
      "trigger": "CTFrameGetFrameAttributes",
      "contents": "CTFrameGetFrameAttributes(${1:CTFrameRef frame})"
    },
    {
      "trigger": "CTFrameGetLineOrigins",
      "contents": "CTFrameGetLineOrigins(${1:CTFrameRef frame}, ${2:CFRange range}, ${3:CGPoint* origins})"
    },
    {
      "trigger": "CTFrameGetLines",
      "contents": "CTFrameGetLines(${1:CTFrameRef frame})"
    },
    {
      "trigger": "CTFrameGetPath",
      "contents": "CTFrameGetPath(${1:CTFrameRef frame})"
    },
    {
      "trigger": "CTFrameGetStringRange",
      "contents": "CTFrameGetStringRange(${1:CTFrameRef frame})"
    },
    {
      "trigger": "CTFrameGetVisibleStringRange",
      "contents": "CTFrameGetVisibleStringRange(${1:CTFrameRef frame})"
    },
    {
      "trigger": "CTFramesetterCreateFrame",
      "contents": "CTFramesetterCreateFrame(${1:CTFramesetterRef framesetter}, ${2:CFRange stringRange}, ${3:CGPathRef path}, ${4:CFDictionaryRef frameAttributes})"
    },
    {
      "trigger": "CTFramesetterCreateWithAttributedString",
      "contents": "CTFramesetterCreateWithAttributedString(${1:CFAttributedStringRef string})"
    },
    {
      "trigger": "CTFramesetterGetTypesetter",
      "contents": "CTFramesetterGetTypesetter(${1:CTFramesetterRef framesetter})"
    },
    {
      "trigger": "CTFramesetterSuggestFrameSizeWithConstraints",
      "contents": "CTFramesetterSuggestFrameSizeWithConstraints(${1:CTFramesetterRef framesetter}, ${2:CFRange stringRange}, ${3:CFDictionaryRef frameAttributes}, ${4:CGSize constraints}, ${5:CFRange* fitRange})"
    },
    {
      "trigger": "CTGlyphInfoCreateWithCharacterIdentifier",
      "contents": "CTGlyphInfoCreateWithCharacterIdentifier(${1:CGFontIndex cid}, ${2:CTCharacterCollection collection}, ${3:CFStringRef baseString})"
    },
    {
      "trigger": "CTGlyphInfoCreateWithGlyph",
      "contents": "CTGlyphInfoCreateWithGlyph(${1:CGGlyph glyph}, ${2:CTFontRef font}, ${3:CFStringRef baseString})"
    },
    {
      "trigger": "CTGlyphInfoCreateWithGlyphName",
      "contents": "CTGlyphInfoCreateWithGlyphName(${1:CFStringRef glyphName}, ${2:CTFontRef font}, ${3:CFStringRef baseString})"
    },
    {
      "trigger": "CTGlyphInfoGetCharacterCollection",
      "contents": "CTGlyphInfoGetCharacterCollection(${1:CTGlyphInfoRef glyphInfo})"
    },
    {
      "trigger": "CTGlyphInfoGetCharacterIdentifier",
      "contents": "CTGlyphInfoGetCharacterIdentifier(${1:CTGlyphInfoRef glyphInfo})"
    },
    {
      "trigger": "CTGlyphInfoGetGlyphName",
      "contents": "CTGlyphInfoGetGlyphName(${1:CTGlyphInfoRef glyphInfo})"
    },
    {
      "trigger": "CTLineCreateJustifiedLine",
      "contents": "CTLineCreateJustifiedLine(${1:CTLineRef line}, ${2:CGFloat justificationFactor}, ${3:double justificationWidth})"
    },
    {
      "trigger": "CTLineCreateTruncatedLine",
      "contents": "CTLineCreateTruncatedLine(${1:CTLineRef line}, ${2:double width}, ${3:CTLineTruncationType truncationType}, ${4:CTLineRef truncationToken})"
    },
    {
      "trigger": "CTLineCreateWithAttributedString",
      "contents": "CTLineCreateWithAttributedString(${1:CFAttributedStringRef string})"
    },
    {
      "trigger": "CTLineDraw",
      "contents": "CTLineDraw(${1:CTLineRef line}, ${2:CGContextRef context})"
    },
    {
      "trigger": "CTLineGetGlyphCount",
      "contents": "CTLineGetGlyphCount(${1:CTLineRef line})"
    },
    {
      "trigger": "CTLineGetGlyphRuns",
      "contents": "CTLineGetGlyphRuns(${1:CTLineRef line})"
    },
    {
      "trigger": "CTLineGetImageBounds",
      "contents": "CTLineGetImageBounds(${1:CTLineRef line}, ${2:CGContextRef context})"
    },
    {
      "trigger": "CTLineGetOffsetForStringIndex",
      "contents": "CTLineGetOffsetForStringIndex(${1:CTLineRef line}, ${2:CFIndex charIndex}, ${3:CGFloat* secondaryOffset})"
    },
    {
      "trigger": "CTLineGetPenOffsetForFlush",
      "contents": "CTLineGetPenOffsetForFlush(${1:CTLineRef line}, ${2:CGFloat flushFactor}, ${3:double flushWidth})"
    },
    {
      "trigger": "CTLineGetStringIndexForPosition",
      "contents": "CTLineGetStringIndexForPosition(${1:CTLineRef line}, ${2:CGPoint position})"
    },
    {
      "trigger": "CTLineGetStringRange",
      "contents": "CTLineGetStringRange(${1:CTLineRef line})"
    },
    {
      "trigger": "CTLineGetTrailingWhitespaceWidth",
      "contents": "CTLineGetTrailingWhitespaceWidth(${1:CTLineRef line})"
    },
    {
      "trigger": "CTLineGetTypographicBounds",
      "contents": "CTLineGetTypographicBounds(${1:CTLineRef line}, ${2:CGFloat* ascent}, ${3:CGFloat* descent}, ${4:CGFloat* leading})"
    },
    {
      "trigger": "CTParagraphStyleCreate",
      "contents": "CTParagraphStyleCreate(${1:CTParagraphStyleSetting* settings}, ${2:CFIndex settingCount})"
    },
    {
      "trigger": "CTParagraphStyleCreateCopy",
      "contents": "CTParagraphStyleCreateCopy(${1:CTParagraphStyleRef paragraphStyle})"
    },
    {
      "trigger": "CTParagraphStyleGetValueForSpecifier",
      "contents": "CTParagraphStyleGetValueForSpecifier(${1:CTParagraphStyleRef paragraphStyle}, ${2:CTParagraphStyleSpecifier spec}, ${3:size_t valueBufferSize}, ${4:void* valueBuffer})"
    },
    {
      "trigger": "CTRunDelegateCreate",
      "contents": "CTRunDelegateCreate(${1:CTRunDelegateCallbacks* callbacks}, ${2:void* refCon})"
    },
    {
      "trigger": "CTRunDelegateGetRefCon",
      "contents": "CTRunDelegateGetRefCon(${1:CTRunDelegateRef runDelegate})"
    },
    {
      "trigger": "CTRunDraw",
      "contents": "CTRunDraw(${1:CTRunRef run}, ${2:CGContextRef context}, ${3:CFRange range})"
    },
    {
      "trigger": "CTRunGetAdvances",
      "contents": "CTRunGetAdvances(${1:CTRunRef run}, ${2:CFRange range}, ${3:CGSize* buffer})"
    },
    {
      "trigger": "CTRunGetAdvancesPtr",
      "contents": "CTRunGetAdvancesPtr(${1:CTRunRef run})"
    },
    {
      "trigger": "CTRunGetAttributes",
      "contents": "CTRunGetAttributes(${1:CTRunRef run})"
    },
    {
      "trigger": "CTRunGetGlyphCount",
      "contents": "CTRunGetGlyphCount(${1:CTRunRef run})"
    },
    {
      "trigger": "CTRunGetGlyphs",
      "contents": "CTRunGetGlyphs(${1:CTRunRef run}, ${2:CFRange range}, ${3:CGGlyph* buffer})"
    },
    {
      "trigger": "CTRunGetGlyphsPtr",
      "contents": "CTRunGetGlyphsPtr(${1:CTRunRef run})"
    },
    {
      "trigger": "CTRunGetImageBounds",
      "contents": "CTRunGetImageBounds(${1:CTRunRef run}, ${2:CGContextRef context}, ${3:CFRange range})"
    },
    {
      "trigger": "CTRunGetPositions",
      "contents": "CTRunGetPositions(${1:CTRunRef run}, ${2:CFRange range}, ${3:CGPoint* buffer})"
    },
    {
      "trigger": "CTRunGetPositionsPtr",
      "contents": "CTRunGetPositionsPtr(${1:CTRunRef run})"
    },
    {
      "trigger": "CTRunGetStatus",
      "contents": "CTRunGetStatus(${1:CTRunRef run})"
    },
    {
      "trigger": "CTRunGetStringIndices",
      "contents": "CTRunGetStringIndices(${1:CTRunRef run}, ${2:CFRange range}, ${3:CFIndex* buffer})"
    },
    {
      "trigger": "CTRunGetStringIndicesPtr",
      "contents": "CTRunGetStringIndicesPtr(${1:CTRunRef run})"
    },
    {
      "trigger": "CTRunGetStringRange",
      "contents": "CTRunGetStringRange(${1:CTRunRef run})"
    },
    {
      "trigger": "CTRunGetTextMatrix",
      "contents": "CTRunGetTextMatrix(${1:CTRunRef run})"
    },
    {
      "trigger": "CTRunGetTypographicBounds",
      "contents": "CTRunGetTypographicBounds(${1:CTRunRef run}, ${2:CFRange range}, ${3:CGFloat* ascent}, ${4:CGFloat* descent}, ${5:CGFloat* leading})"
    },
    {
      "trigger": "CTTextTabCreate",
      "contents": "CTTextTabCreate(${1:CTTextAlignment alignment}, ${2:double location}, ${3:CFDictionaryRef options})"
    },
    {
      "trigger": "CTTextTabGetAlignment",
      "contents": "CTTextTabGetAlignment(${1:CTTextTabRef tab})"
    },
    {
      "trigger": "CTTextTabGetLocation",
      "contents": "CTTextTabGetLocation(${1:CTTextTabRef tab})"
    },
    {
      "trigger": "CTTextTabGetOptions",
      "contents": "CTTextTabGetOptions(${1:CTTextTabRef tab})"
    },
    {
      "trigger": "CTTypesetterCreateLine",
      "contents": "CTTypesetterCreateLine(${1:CTTypesetterRef typesetter}, ${2:CFRange stringRange})"
    },
    {
      "trigger": "CTTypesetterCreateLineWithOffset",
      "contents": "CTTypesetterCreateLineWithOffset(${1:CTTypesetterRef typesetter}, ${2:CFRange stringRange}, ${3:double offset})"
    },
    {
      "trigger": "CTTypesetterCreateWithAttributedString",
      "contents": "CTTypesetterCreateWithAttributedString(${1:CFAttributedStringRef string})"
    },
    {
      "trigger": "CTTypesetterCreateWithAttributedStringAndOptions",
      "contents": "CTTypesetterCreateWithAttributedStringAndOptions(${1:CFAttributedStringRef string}, ${2:CFDictionaryRef options})"
    },
    {
      "trigger": "CTTypesetterSuggestClusterBreak",
      "contents": "CTTypesetterSuggestClusterBreak(${1:CTTypesetterRef typesetter}, ${2:CFIndex startIndex}, ${3:double width})"
    },
    {
      "trigger": "CTTypesetterSuggestClusterBreakWithOffset",
      "contents": "CTTypesetterSuggestClusterBreakWithOffset(${1:CTTypesetterRef typesetter}, ${2:CFIndex startIndex}, ${3:double width}, ${4:double offset})"
    },
    {
      "trigger": "CTTypesetterSuggestLineBreak",
      "contents": "CTTypesetterSuggestLineBreak(${1:CTTypesetterRef typesetter}, ${2:CFIndex startIndex}, ${3:double width})"
    },
    {
      "trigger": "CTTypesetterSuggestLineBreakWithOffset",
      "contents": "CTTypesetterSuggestLineBreakWithOffset(${1:CTTypesetterRef typesetter}, ${2:CFIndex startIndex}, ${3:double width}, ${4:double offset})"
    },
    {
      "trigger": "CVBufferGetAttachment",
      "contents": "CVBufferGetAttachment(${1:CVBufferRef buffer}, ${2:CFStringRef key}, ${3:CVAttachmentMode* attachmentMode})"
    },
    {
      "trigger": "CVBufferGetAttachments",
      "contents": "CVBufferGetAttachments(${1:CVBufferRef buffer}, ${2:CVAttachmentMode attachmentMode})"
    },
    {
      "trigger": "CVBufferPropagateAttachments",
      "contents": "CVBufferPropagateAttachments(${1:CVBufferRef sourceBuffer}, ${2:CVBufferRef destinationBuffer})"
    },
    {
      "trigger": "CVBufferRelease",
      "contents": "CVBufferRelease(${1:CVBufferRef buffer})"
    },
    {
      "trigger": "CVBufferRemoveAllAttachments",
      "contents": "CVBufferRemoveAllAttachments(${1:CVBufferRef buffer})"
    },
    {
      "trigger": "CVBufferRemoveAttachment",
      "contents": "CVBufferRemoveAttachment(${1:CVBufferRef buffer}, ${2:CFStringRef key})"
    },
    {
      "trigger": "CVBufferRetain",
      "contents": "CVBufferRetain(${1:CVBufferRef buffer})"
    },
    {
      "trigger": "CVBufferSetAttachment",
      "contents": "CVBufferSetAttachment(${1:CVBufferRef buffer}, ${2:CFStringRef key}, ${3:CFTypeRef value}, ${4:CVAttachmentMode attachmentMode})"
    },
    {
      "trigger": "CVBufferSetAttachments",
      "contents": "CVBufferSetAttachments(${1:CVBufferRef buffer}, ${2:CFDictionaryRef theAttachments}, ${3:CVAttachmentMode attachmentMode})"
    },
    {
      "trigger": "CVImageBufferGetCleanRect",
      "contents": "CVImageBufferGetCleanRect(${1:CVImageBufferRef imageBuffer})"
    },
    {
      "trigger": "CVImageBufferGetDisplaySize",
      "contents": "CVImageBufferGetDisplaySize(${1:CVImageBufferRef imageBuffer})"
    },
    {
      "trigger": "CVImageBufferGetEncodedSize",
      "contents": "CVImageBufferGetEncodedSize(${1:CVImageBufferRef imageBuffer})"
    },
    {
      "trigger": "CVOpenGLESTextureCacheCreate",
      "contents": "CVOpenGLESTextureCacheCreate(${1:CFAllocatorRef allocator}, ${2:CFDictionaryRef cacheAttributes}, ${3:void* eaglContext}, ${4:CFDictionaryRef textureAttributes}, ${5:CVOpenGLESTextureCacheRef* cacheOut})"
    },
    {
      "trigger": "CVOpenGLESTextureCacheCreateTextureFromImage",
      "contents": "CVOpenGLESTextureCacheCreateTextureFromImage(${1:CFAllocatorRef allocator}, ${2:CVOpenGLESTextureCacheRef textureCache}, ${3:CVImageBufferRef sourceImage}, ${4:CFDictionaryRef textureAttributes}, ${5:GLenum target}, ${6:GLint internalFormat}, ${7:GLsizei width}, ${8:GLsizei height}, ${9:GLenum format}, ${10:GLenum type}, ${11:size_t planeIndex}, ${12:CVOpenGLESTextureRef* textureOut})"
    },
    {
      "trigger": "CVOpenGLESTextureCacheFlush",
      "contents": "CVOpenGLESTextureCacheFlush(${1:CVOpenGLESTextureCacheRef textureCache}, ${2:CVOptionFlags options})"
    },
    {
      "trigger": "CVOpenGLESTextureGetCleanTexCoords",
      "contents": "CVOpenGLESTextureGetCleanTexCoords(${1:CVOpenGLESTextureRef image}, ${2:GLfloat* lowerLeft}, ${3:GLfloat* lowerRight}, ${4:GLfloat* upperRight}, ${5:GLfloat* upperLeft})"
    },
    {
      "trigger": "CVOpenGLESTextureGetName",
      "contents": "CVOpenGLESTextureGetName(${1:CVOpenGLESTextureRef image})"
    },
    {
      "trigger": "CVOpenGLESTextureGetTarget",
      "contents": "CVOpenGLESTextureGetTarget(${1:CVOpenGLESTextureRef image})"
    },
    {
      "trigger": "CVOpenGLESTextureIsFlipped",
      "contents": "CVOpenGLESTextureIsFlipped(${1:CVOpenGLESTextureRef image})"
    },
    {
      "trigger": "CVPixelBufferCreate",
      "contents": "CVPixelBufferCreate(${1:CFAllocatorRef allocator}, ${2:size_t width}, ${3:size_t height}, ${4:OSType pixelFormatType}, ${5:CFDictionaryRef pixelBufferAttributes}, ${6:CVPixelBufferRef* pixelBufferOut})"
    },
    {
      "trigger": "CVPixelBufferCreateResolvedAttributesDictionary",
      "contents": "CVPixelBufferCreateResolvedAttributesDictionary(${1:CFAllocatorRef allocator}, ${2:CFArrayRef attributes}, ${3:CFDictionaryRef* resolvedDictionaryOut})"
    },
    {
      "trigger": "CVPixelBufferCreateWithBytes",
      "contents": "CVPixelBufferCreateWithBytes(${1:CFAllocatorRef allocator}, ${2:size_t width}, ${3:size_t height}, ${4:OSType pixelFormatType}, ${5:void* baseAddress}, ${6:size_t bytesPerRow}, ${7:CVPixelBufferReleaseBytesCallback releaseCallback}, ${8:void* releaseRefCon}, ${9:CFDictionaryRef pixelBufferAttributes}, ${10:CVPixelBufferRef* pixelBufferOut})"
    },
    {
      "trigger": "CVPixelBufferCreateWithPlanarBytes",
      "contents": "CVPixelBufferCreateWithPlanarBytes(${1:CFAllocatorRef allocator}, ${2:size_t width}, ${3:size_t height}, ${4:OSType pixelFormatType}, ${5:void* dataPtr}, ${6:size_t dataSize}, ${7:size_t numberOfPlanes}, ${8:void** planeBaseAddress}, ${9:size_t* planeWidth}, ${10:size_t* planeHeight}, ${11:size_t* planeBytesPerRow}, ${12:CVPixelBufferReleasePlanarBytesCallback releaseCallback}, ${13:void* releaseRefCon}, ${14:CFDictionaryRef pixelBufferAttributes}, ${15:CVPixelBufferRef* pixelBufferOut})"
    },
    {
      "trigger": "CVPixelBufferFillExtendedPixels",
      "contents": "CVPixelBufferFillExtendedPixels(${1:CVPixelBufferRef pixelBuffer})"
    },
    {
      "trigger": "CVPixelBufferGetBaseAddress",
      "contents": "CVPixelBufferGetBaseAddress(${1:CVPixelBufferRef pixelBuffer})"
    },
    {
      "trigger": "CVPixelBufferGetBaseAddressOfPlane",
      "contents": "CVPixelBufferGetBaseAddressOfPlane(${1:CVPixelBufferRef pixelBuffer}, ${2:size_t planeIndex})"
    },
    {
      "trigger": "CVPixelBufferGetBytesPerRow",
      "contents": "CVPixelBufferGetBytesPerRow(${1:CVPixelBufferRef pixelBuffer})"
    },
    {
      "trigger": "CVPixelBufferGetBytesPerRowOfPlane",
      "contents": "CVPixelBufferGetBytesPerRowOfPlane(${1:CVPixelBufferRef pixelBuffer}, ${2:size_t planeIndex})"
    },
    {
      "trigger": "CVPixelBufferGetDataSize",
      "contents": "CVPixelBufferGetDataSize(${1:CVPixelBufferRef pixelBuffer})"
    },
    {
      "trigger": "CVPixelBufferGetExtendedPixels",
      "contents": "CVPixelBufferGetExtendedPixels(${1:CVPixelBufferRef pixelBuffer}, ${2:size_t* extraColumnsOnLeft}, ${3:size_t* extraColumnsOnRight}, ${4:size_t* extraRowsOnTop}, ${5:size_t* extraRowsOnBottom})"
    },
    {
      "trigger": "CVPixelBufferGetHeight",
      "contents": "CVPixelBufferGetHeight(${1:CVPixelBufferRef pixelBuffer})"
    },
    {
      "trigger": "CVPixelBufferGetHeightOfPlane",
      "contents": "CVPixelBufferGetHeightOfPlane(${1:CVPixelBufferRef pixelBuffer}, ${2:size_t planeIndex})"
    },
    {
      "trigger": "CVPixelBufferGetPixelFormatType",
      "contents": "CVPixelBufferGetPixelFormatType(${1:CVPixelBufferRef pixelBuffer})"
    },
    {
      "trigger": "CVPixelBufferGetPlaneCount",
      "contents": "CVPixelBufferGetPlaneCount(${1:CVPixelBufferRef pixelBuffer})"
    },
    {
      "trigger": "CVPixelBufferGetWidth",
      "contents": "CVPixelBufferGetWidth(${1:CVPixelBufferRef pixelBuffer})"
    },
    {
      "trigger": "CVPixelBufferGetWidthOfPlane",
      "contents": "CVPixelBufferGetWidthOfPlane(${1:CVPixelBufferRef pixelBuffer}, ${2:size_t planeIndex})"
    },
    {
      "trigger": "CVPixelBufferIsPlanar",
      "contents": "CVPixelBufferIsPlanar(${1:CVPixelBufferRef pixelBuffer})"
    },
    {
      "trigger": "CVPixelBufferLockBaseAddress",
      "contents": "CVPixelBufferLockBaseAddress(${1:CVPixelBufferRef pixelBuffer}, ${2:CVOptionFlags lockFlags})"
    },
    {
      "trigger": "CVPixelBufferPoolCreate",
      "contents": "CVPixelBufferPoolCreate(${1:CFAllocatorRef allocator}, ${2:CFDictionaryRef poolAttributes}, ${3:CFDictionaryRef pixelBufferAttributes}, ${4:CVPixelBufferPoolRef* poolOut})"
    },
    {
      "trigger": "CVPixelBufferPoolCreatePixelBuffer",
      "contents": "CVPixelBufferPoolCreatePixelBuffer(${1:CFAllocatorRef allocator}, ${2:CVPixelBufferPoolRef pixelBufferPool}, ${3:CVPixelBufferRef* pixelBufferOut})"
    },
    {
      "trigger": "CVPixelBufferPoolCreatePixelBufferWithAuxAttributes",
      "contents": "CVPixelBufferPoolCreatePixelBufferWithAuxAttributes(${1:CFAllocatorRef allocator}, ${2:CVPixelBufferPoolRef pixelBufferPool}, ${3:CFDictionaryRef auxAttributes}, ${4:CVPixelBufferRef* pixelBufferOut})"
    },
    {
      "trigger": "CVPixelBufferPoolGetAttributes",
      "contents": "CVPixelBufferPoolGetAttributes(${1:CVPixelBufferPoolRef pool})"
    },
    {
      "trigger": "CVPixelBufferPoolGetPixelBufferAttributes",
      "contents": "CVPixelBufferPoolGetPixelBufferAttributes(${1:CVPixelBufferPoolRef pool})"
    },
    {
      "trigger": "CVPixelBufferPoolRelease",
      "contents": "CVPixelBufferPoolRelease(${1:CVPixelBufferPoolRef pixelBufferPool})"
    },
    {
      "trigger": "CVPixelBufferPoolRetain",
      "contents": "CVPixelBufferPoolRetain(${1:CVPixelBufferPoolRef pixelBufferPool})"
    },
    {
      "trigger": "CVPixelBufferRelease",
      "contents": "CVPixelBufferRelease(${1:CVPixelBufferRef texture})"
    },
    {
      "trigger": "CVPixelBufferRetain",
      "contents": "CVPixelBufferRetain(${1:CVPixelBufferRef texture})"
    },
    {
      "trigger": "CVPixelBufferUnlockBaseAddress",
      "contents": "CVPixelBufferUnlockBaseAddress(${1:CVPixelBufferRef pixelBuffer}, ${2:CVOptionFlags unlockFlags})"
    },
    {
      "trigger": "CVPixelFormatDescriptionArrayCreateWithAllPixelFormatTypes",
      "contents": "CVPixelFormatDescriptionArrayCreateWithAllPixelFormatTypes(${1:CFAllocatorRef allocator})"
    },
    {
      "trigger": "CVPixelFormatDescriptionCreateWithPixelFormatType",
      "contents": "CVPixelFormatDescriptionCreateWithPixelFormatType(${1:CFAllocatorRef allocator}, ${2:OSType pixelFormat})"
    },
    {
      "trigger": "CVPixelFormatDescriptionRegisterDescriptionWithPixelFormatType",
      "contents": "CVPixelFormatDescriptionRegisterDescriptionWithPixelFormatType(${1:CFDictionaryRef description}, ${2:OSType pixelFormat})"
    },
    {
      "trigger": "DisposeAUGraph",
      "contents": "DisposeAUGraph(${1:AUGraph inGraph})"
    },
    {
      "trigger": "DisposeMusicEventIterator",
      "contents": "DisposeMusicEventIterator(${1:MusicEventIterator inIterator})"
    },
    {
      "trigger": "DisposeMusicPlayer",
      "contents": "DisposeMusicPlayer(${1:MusicPlayer inPlayer})"
    },
    {
      "trigger": "DisposeMusicSequence",
      "contents": "DisposeMusicSequence(${1:MusicSequence inSequence})"
    },
    {
      "trigger": "EAAccessoryDidConnectNotification (NSString*)",
      "contents": "EAAccessoryDidConnectNotification"
    },
    {
      "trigger": "EAAccessoryDidDisconnectNotification (NSString*)",
      "contents": "EAAccessoryDidDisconnectNotification"
    },
    {
      "trigger": "EAAccessoryKey (NSString*)",
      "contents": "EAAccessoryKey"
    },
    {
      "trigger": "EAConnectionIDNone (0)",
      "contents": "EAConnectionIDNone"
    },
    {
      "trigger": "EAGLContext.setCurrentContext:",
      "contents": "EAGLContext.setCurrentContext(${1:EAGLContext* context})"
    },
    {
      "trigger": "EAGLGetVersion",
      "contents": "EAGLGetVersion(${1:unsigned int* major}, ${2:unsigned int* minor})"
    },
    {
      "trigger": "EAGL_MAJOR_VERSION (1)",
      "contents": "EAGL_MAJOR_VERSION"
    },
    {
      "trigger": "EAGL_MINOR_VERSION (0)",
      "contents": "EAGL_MINOR_VERSION"
    },
    {
      "trigger": "EKAlarm.alarmWithAbsoluteDate:",
      "contents": "EKAlarm.alarmWithAbsoluteDate(${1:NSDate* date})"
    },
    {
      "trigger": "EKAlarm.alarmWithRelativeOffset:",
      "contents": "EKAlarm.alarmWithRelativeOffset(${1:NSTimeInterval offset})"
    },
    {
      "trigger": "EKCalendar.calendarWithEventStore:",
      "contents": "EKCalendar.calendarWithEventStore(${1:EKEventStore* eventStore})"
    },
    {
      "trigger": "EKCalendarChooserDisplayAllCalendars (0)",
      "contents": "EKCalendarChooserDisplayAllCalendars"
    },
    {
      "trigger": "EKCalendarChooserDisplayWritableCalendarsOnly (1)",
      "contents": "EKCalendarChooserDisplayWritableCalendarsOnly"
    },
    {
      "trigger": "EKCalendarChooserSelectionStyleMultiple (1)",
      "contents": "EKCalendarChooserSelectionStyleMultiple"
    },
    {
      "trigger": "EKCalendarChooserSelectionStyleSingle (0)",
      "contents": "EKCalendarChooserSelectionStyleSingle"
    },
    {
      "trigger": "EKCalendarEventAvailabilityBusy (1)",
      "contents": "EKCalendarEventAvailabilityBusy"
    },
    {
      "trigger": "EKCalendarEventAvailabilityFree (2)",
      "contents": "EKCalendarEventAvailabilityFree"
    },
    {
      "trigger": "EKCalendarEventAvailabilityNone (0)",
      "contents": "EKCalendarEventAvailabilityNone"
    },
    {
      "trigger": "EKCalendarEventAvailabilityTentative (4)",
      "contents": "EKCalendarEventAvailabilityTentative"
    },
    {
      "trigger": "EKCalendarEventAvailabilityUnavailable (8)",
      "contents": "EKCalendarEventAvailabilityUnavailable"
    },
    {
      "trigger": "EKCalendarTypeBirthday (4)",
      "contents": "EKCalendarTypeBirthday"
    },
    {
      "trigger": "EKCalendarTypeCalDAV (1)",
      "contents": "EKCalendarTypeCalDAV"
    },
    {
      "trigger": "EKCalendarTypeExchange (2)",
      "contents": "EKCalendarTypeExchange"
    },
    {
      "trigger": "EKCalendarTypeLocal (0)",
      "contents": "EKCalendarTypeLocal"
    },
    {
      "trigger": "EKCalendarTypeSubscription (3)",
      "contents": "EKCalendarTypeSubscription"
    },
    {
      "trigger": "EKErrorAlarmGreaterThanRecurrence (8)",
      "contents": "EKErrorAlarmGreaterThanRecurrence"
    },
    {
      "trigger": "EKErrorCalendarHasNoSource (14)",
      "contents": "EKErrorCalendarHasNoSource"
    },
    {
      "trigger": "EKErrorCalendarIsImmutable (16)",
      "contents": "EKErrorCalendarIsImmutable"
    },
    {
      "trigger": "EKErrorCalendarReadOnly (6)",
      "contents": "EKErrorCalendarReadOnly"
    },
    {
      "trigger": "EKErrorCalendarSourceCannotBeModified (15)",
      "contents": "EKErrorCalendarSourceCannotBeModified"
    },
    {
      "trigger": "EKErrorDatesInverted (4)",
      "contents": "EKErrorDatesInverted"
    },
    {
      "trigger": "EKErrorDomain (NSString*)",
      "contents": "EKErrorDomain"
    },
    {
      "trigger": "EKErrorDurationGreaterThanRecurrence (7)",
      "contents": "EKErrorDurationGreaterThanRecurrence"
    },
    {
      "trigger": "EKErrorEventNotMutable (0)",
      "contents": "EKErrorEventNotMutable"
    },
    {
      "trigger": "EKErrorInternalFailure (5)",
      "contents": "EKErrorInternalFailure"
    },
    {
      "trigger": "EKErrorInvalidSpan (13)",
      "contents": "EKErrorInvalidSpan"
    },
    {
      "trigger": "EKErrorInvitesCannotBeMoved (12)",
      "contents": "EKErrorInvitesCannotBeMoved"
    },
    {
      "trigger": "EKErrorLast (18)",
      "contents": "EKErrorLast"
    },
    {
      "trigger": "EKErrorNoCalendar (1)",
      "contents": "EKErrorNoCalendar"
    },
    {
      "trigger": "EKErrorNoEndDate (3)",
      "contents": "EKErrorNoEndDate"
    },
    {
      "trigger": "EKErrorNoStartDate (2)",
      "contents": "EKErrorNoStartDate"
    },
    {
      "trigger": "EKErrorObjectBelongsToDifferentStore (11)",
      "contents": "EKErrorObjectBelongsToDifferentStore"
    },
    {
      "trigger": "EKErrorSourceDoesNotAllowCalendarAddDelete (17)",
      "contents": "EKErrorSourceDoesNotAllowCalendarAddDelete"
    },
    {
      "trigger": "EKErrorStartDateCollidesWithOtherOccurrence (10)",
      "contents": "EKErrorStartDateCollidesWithOtherOccurrence"
    },
    {
      "trigger": "EKErrorStartDateTooFarInFuture (9)",
      "contents": "EKErrorStartDateTooFarInFuture"
    },
    {
      "trigger": "EKEvent.eventWithEventStore:",
      "contents": "EKEvent.eventWithEventStore(${1:EKEventStore* eventStore})"
    },
    {
      "trigger": "EKEventAvailabilityBusy (0)",
      "contents": "EKEventAvailabilityBusy"
    },
    {
      "trigger": "EKEventAvailabilityFree (1)",
      "contents": "EKEventAvailabilityFree"
    },
    {
      "trigger": "EKEventAvailabilityNotSupported (-1)",
      "contents": "EKEventAvailabilityNotSupported"
    },
    {
      "trigger": "EKEventAvailabilityTentative (2)",
      "contents": "EKEventAvailabilityTentative"
    },
    {
      "trigger": "EKEventAvailabilityUnavailable (3)",
      "contents": "EKEventAvailabilityUnavailable"
    },
    {
      "trigger": "EKEventEditViewActionCanceled (0)",
      "contents": "EKEventEditViewActionCanceled"
    },
    {
      "trigger": "EKEventEditViewActionCancelled (0)",
      "contents": "EKEventEditViewActionCancelled"
    },
    {
      "trigger": "EKEventEditViewActionDeleted (2)",
      "contents": "EKEventEditViewActionDeleted"
    },
    {
      "trigger": "EKEventEditViewActionSaved (1)",
      "contents": "EKEventEditViewActionSaved"
    },
    {
      "trigger": "EKEventStatusCanceled (3)",
      "contents": "EKEventStatusCanceled"
    },
    {
      "trigger": "EKEventStatusConfirmed (1)",
      "contents": "EKEventStatusConfirmed"
    },
    {
      "trigger": "EKEventStatusNone (0)",
      "contents": "EKEventStatusNone"
    },
    {
      "trigger": "EKEventStatusTentative (2)",
      "contents": "EKEventStatusTentative"
    },
    {
      "trigger": "EKEventStoreChangedNotification (NSString*)",
      "contents": "EKEventStoreChangedNotification"
    },
    {
      "trigger": "EKEventViewActionDeleted (2)",
      "contents": "EKEventViewActionDeleted"
    },
    {
      "trigger": "EKEventViewActionDone (0)",
      "contents": "EKEventViewActionDone"
    },
    {
      "trigger": "EKEventViewActionResponded (1)",
      "contents": "EKEventViewActionResponded"
    },
    {
      "trigger": "EKFriday (6)",
      "contents": "EKFriday"
    },
    {
      "trigger": "EKMonday (2)",
      "contents": "EKMonday"
    },
    {
      "trigger": "EKParticipantRoleChair (3)",
      "contents": "EKParticipantRoleChair"
    },
    {
      "trigger": "EKParticipantRoleNonParticipant (4)",
      "contents": "EKParticipantRoleNonParticipant"
    },
    {
      "trigger": "EKParticipantRoleOptional (2)",
      "contents": "EKParticipantRoleOptional"
    },
    {
      "trigger": "EKParticipantRoleRequired (1)",
      "contents": "EKParticipantRoleRequired"
    },
    {
      "trigger": "EKParticipantRoleUnknown (0)",
      "contents": "EKParticipantRoleUnknown"
    },
    {
      "trigger": "EKParticipantStatusAccepted (2)",
      "contents": "EKParticipantStatusAccepted"
    },
    {
      "trigger": "EKParticipantStatusCompleted (6)",
      "contents": "EKParticipantStatusCompleted"
    },
    {
      "trigger": "EKParticipantStatusDeclined (3)",
      "contents": "EKParticipantStatusDeclined"
    },
    {
      "trigger": "EKParticipantStatusDelegated (5)",
      "contents": "EKParticipantStatusDelegated"
    },
    {
      "trigger": "EKParticipantStatusInProcess (7)",
      "contents": "EKParticipantStatusInProcess"
    },
    {
      "trigger": "EKParticipantStatusPending (1)",
      "contents": "EKParticipantStatusPending"
    },
    {
      "trigger": "EKParticipantStatusTentative (4)",
      "contents": "EKParticipantStatusTentative"
    },
    {
      "trigger": "EKParticipantStatusUnknown (0)",
      "contents": "EKParticipantStatusUnknown"
    },
    {
      "trigger": "EKParticipantTypeGroup (4)",
      "contents": "EKParticipantTypeGroup"
    },
    {
      "trigger": "EKParticipantTypePerson (1)",
      "contents": "EKParticipantTypePerson"
    },
    {
      "trigger": "EKParticipantTypeResource (3)",
      "contents": "EKParticipantTypeResource"
    },
    {
      "trigger": "EKParticipantTypeRoom (2)",
      "contents": "EKParticipantTypeRoom"
    },
    {
      "trigger": "EKParticipantTypeUnknown (0)",
      "contents": "EKParticipantTypeUnknown"
    },
    {
      "trigger": "EKRecurrenceDayOfWeek.dayOfWeek:",
      "contents": "EKRecurrenceDayOfWeek.dayOfWeek(${1:NSInteger dayOfTheWeek})"
    },
    {
      "trigger": "EKRecurrenceDayOfWeek.dayOfWeek:weekNumber:",
      "contents": "EKRecurrenceDayOfWeek.dayOfWeek(${1:NSInteger dayOfTheWeek}, weekNumber:${2:NSInteger weekNumber})"
    },
    {
      "trigger": "EKRecurrenceEnd.recurrenceEndWithEndDate:",
      "contents": "EKRecurrenceEnd.recurrenceEndWithEndDate(${1:NSDate* endDate})"
    },
    {
      "trigger": "EKRecurrenceEnd.recurrenceEndWithOccurrenceCount:",
      "contents": "EKRecurrenceEnd.recurrenceEndWithOccurrenceCount(${1:NSUInteger occurrenceCount})"
    },
    {
      "trigger": "EKRecurrenceFrequencyDaily (0)",
      "contents": "EKRecurrenceFrequencyDaily"
    },
    {
      "trigger": "EKRecurrenceFrequencyMonthly (2)",
      "contents": "EKRecurrenceFrequencyMonthly"
    },
    {
      "trigger": "EKRecurrenceFrequencyWeekly (1)",
      "contents": "EKRecurrenceFrequencyWeekly"
    },
    {
      "trigger": "EKRecurrenceFrequencyYearly (3)",
      "contents": "EKRecurrenceFrequencyYearly"
    },
    {
      "trigger": "EKSaturday (7)",
      "contents": "EKSaturday"
    },
    {
      "trigger": "EKSourceTypeBirthdays (5)",
      "contents": "EKSourceTypeBirthdays"
    },
    {
      "trigger": "EKSourceTypeCalDAV (2)",
      "contents": "EKSourceTypeCalDAV"
    },
    {
      "trigger": "EKSourceTypeExchange (1)",
      "contents": "EKSourceTypeExchange"
    },
    {
      "trigger": "EKSourceTypeLocal (0)",
      "contents": "EKSourceTypeLocal"
    },
    {
      "trigger": "EKSourceTypeMobileMe (3)",
      "contents": "EKSourceTypeMobileMe"
    },
    {
      "trigger": "EKSourceTypeSubscribed (4)",
      "contents": "EKSourceTypeSubscribed"
    },
    {
      "trigger": "EKSpanFutureEvents (1)",
      "contents": "EKSpanFutureEvents"
    },
    {
      "trigger": "EKSpanThisEvent (0)",
      "contents": "EKSpanThisEvent"
    },
    {
      "trigger": "EKSunday (1)",
      "contents": "EKSunday"
    },
    {
      "trigger": "EKThursday (5)",
      "contents": "EKThursday"
    },
    {
      "trigger": "EKTuesday (3)",
      "contents": "EKTuesday"
    },
    {
      "trigger": "EKWednesday (4)",
      "contents": "EKWednesday"
    },
    {
      "trigger": "E_ABORT (-2147483641)",
      "contents": "E_ABORT"
    },
    {
      "trigger": "E_ACCESSDENIED (-2147483639)",
      "contents": "E_ACCESSDENIED"
    },
    {
      "trigger": "E_FAIL (-2147483640)",
      "contents": "E_FAIL"
    },
    {
      "trigger": "E_HANDLE (-2147483642)",
      "contents": "E_HANDLE"
    },
    {
      "trigger": "E_INVALIDARG (-2147483645)",
      "contents": "E_INVALIDARG"
    },
    {
      "trigger": "E_NOINTERFACE (-2147483644)",
      "contents": "E_NOINTERFACE"
    },
    {
      "trigger": "E_NOTIMPL (-2147483647)",
      "contents": "E_NOTIMPL"
    },
    {
      "trigger": "E_OUTOFMEMORY (-2147483646)",
      "contents": "E_OUTOFMEMORY"
    },
    {
      "trigger": "E_POINTER (-2147483643)",
      "contents": "E_POINTER"
    },
    {
      "trigger": "E_UNEXPECTED (-2147418113)",
      "contents": "E_UNEXPECTED"
    },
    {
      "trigger": "ExtAudioFileCreateWithURL",
      "contents": "ExtAudioFileCreateWithURL(${1:CFURLRef inURL}, ${2:AudioFileTypeID inFileType}, ${3:AudioStreamBasicDescription* inStreamDesc}, ${4:AudioChannelLayout* inChannelLayout}, ${5:UInt32 inFlags}, ${6:ExtAudioFileRef* outExtAudioFile})"
    },
    {
      "trigger": "ExtAudioFileDispose",
      "contents": "ExtAudioFileDispose(${1:ExtAudioFileRef inExtAudioFile})"
    },
    {
      "trigger": "ExtAudioFileGetProperty",
      "contents": "ExtAudioFileGetProperty(${1:ExtAudioFileRef inExtAudioFile}, ${2:ExtAudioFilePropertyID inPropertyID}, ${3:UInt32* ioPropertyDataSize}, ${4:void* outPropertyData})"
    },
    {
      "trigger": "ExtAudioFileGetPropertyInfo",
      "contents": "ExtAudioFileGetPropertyInfo(${1:ExtAudioFileRef inExtAudioFile}, ${2:ExtAudioFilePropertyID inPropertyID}, ${3:UInt32* outSize}, ${4:Boolean* outWritable})"
    },
    {
      "trigger": "ExtAudioFileOpenURL",
      "contents": "ExtAudioFileOpenURL(${1:CFURLRef inURL}, ${2:ExtAudioFileRef* outExtAudioFile})"
    },
    {
      "trigger": "ExtAudioFileRead",
      "contents": "ExtAudioFileRead(${1:ExtAudioFileRef inExtAudioFile}, ${2:UInt32* ioNumberFrames}, ${3:AudioBufferList* ioData})"
    },
    {
      "trigger": "ExtAudioFileSeek",
      "contents": "ExtAudioFileSeek(${1:ExtAudioFileRef inExtAudioFile}, ${2:SInt64 inFrameOffset})"
    },
    {
      "trigger": "ExtAudioFileSetProperty",
      "contents": "ExtAudioFileSetProperty(${1:ExtAudioFileRef inExtAudioFile}, ${2:ExtAudioFilePropertyID inPropertyID}, ${3:UInt32 inPropertyDataSize}, ${4:void* inPropertyData})"
    },
    {
      "trigger": "ExtAudioFileTell",
      "contents": "ExtAudioFileTell(${1:ExtAudioFileRef inExtAudioFile}, ${2:SInt64* outFrameOffset})"
    },
    {
      "trigger": "ExtAudioFileWrapAudioFileID",
      "contents": "ExtAudioFileWrapAudioFileID(${1:AudioFileID inFileID}, ${2:Boolean inForWriting}, ${3:ExtAudioFileRef* outExtAudioFile})"
    },
    {
      "trigger": "ExtAudioFileWrite",
      "contents": "ExtAudioFileWrite(${1:ExtAudioFileRef inExtAudioFile}, ${2:UInt32 inNumberFrames}, ${3:AudioBufferList* ioData})"
    },
    {
      "trigger": "ExtAudioFileWriteAsync",
      "contents": "ExtAudioFileWriteAsync(${1:ExtAudioFileRef inExtAudioFile}, ${2:UInt32 inNumberFrames}, ${3:AudioBufferList* ioData})"
    },
    {
      "trigger": "FALSE (0)",
      "contents": "FALSE"
    },
    {
      "trigger": "GKAchievement.loadAchievementsWithCompletionHandler:",
      "contents": "GKAchievement.loadAchievementsWithCompletionHandler(${1:void (^)(NSArray *, NSError *) completionHandler})"
    },
    {
      "trigger": "GKAchievement.resetAchievementsWithCompletionHandler:",
      "contents": "GKAchievement.resetAchievementsWithCompletionHandler(${1:void (^)(NSError *) completionHandler})"
    },
    {
      "trigger": "GKAchievementDescription.loadAchievementDescriptionsWithCompletionHandler:",
      "contents": "GKAchievementDescription.loadAchievementDescriptionsWithCompletionHandler(${1:void (^)(NSArray *, NSError *) completionHandler})"
    },
    {
      "trigger": "GKErrorAuthenticationInProgress (7)",
      "contents": "GKErrorAuthenticationInProgress"
    },
    {
      "trigger": "GKErrorCancelled (2)",
      "contents": "GKErrorCancelled"
    },
    {
      "trigger": "GKErrorCommunicationsFailure (3)",
      "contents": "GKErrorCommunicationsFailure"
    },
    {
      "trigger": "GKErrorDomain (NSString*)",
      "contents": "GKErrorDomain"
    },
    {
      "trigger": "GKErrorGameUnrecognized (15)",
      "contents": "GKErrorGameUnrecognized"
    },
    {
      "trigger": "GKErrorInvalidCredentials (5)",
      "contents": "GKErrorInvalidCredentials"
    },
    {
      "trigger": "GKErrorInvalidParameter (17)",
      "contents": "GKErrorInvalidParameter"
    },
    {
      "trigger": "GKErrorInvalidPlayer (8)",
      "contents": "GKErrorInvalidPlayer"
    },
    {
      "trigger": "GKErrorMatchRequestInvalid (13)",
      "contents": "GKErrorMatchRequestInvalid"
    },
    {
      "trigger": "GKErrorNotAuthenticated (6)",
      "contents": "GKErrorNotAuthenticated"
    },
    {
      "trigger": "GKErrorNotSupported (16)",
      "contents": "GKErrorNotSupported"
    },
    {
      "trigger": "GKErrorParentalControlsBlocked (10)",
      "contents": "GKErrorParentalControlsBlocked"
    },
    {
      "trigger": "GKErrorPlayerStatusExceedsMaximumLength (11)",
      "contents": "GKErrorPlayerStatusExceedsMaximumLength"
    },
    {
      "trigger": "GKErrorPlayerStatusInvalid (12)",
      "contents": "GKErrorPlayerStatusInvalid"
    },
    {
      "trigger": "GKErrorScoreNotSet (9)",
      "contents": "GKErrorScoreNotSet"
    },
    {
      "trigger": "GKErrorUnderage (14)",
      "contents": "GKErrorUnderage"
    },
    {
      "trigger": "GKErrorUnexpectedConnection (18)",
      "contents": "GKErrorUnexpectedConnection"
    },
    {
      "trigger": "GKErrorUnknown (1)",
      "contents": "GKErrorUnknown"
    },
    {
      "trigger": "GKErrorUserDenied (4)",
      "contents": "GKErrorUserDenied"
    },
    {
      "trigger": "GKLeaderboard.loadCategoriesWithCompletionHandler:",
      "contents": "GKLeaderboard.loadCategoriesWithCompletionHandler(${1:void (^)(NSArray *, NSArray *, NSError *) completionHandler})"
    },
    {
      "trigger": "GKLeaderboard.setDefaultLeaderboard:withCompletionHandler:",
      "contents": "GKLeaderboard.setDefaultLeaderboard(${1:NSString* categoryID}, withCompletionHandler:${2:void (^)(NSError *) completionHandler})"
    },
    {
      "trigger": "GKLeaderboardPlayerScopeFriendsOnly (1)",
      "contents": "GKLeaderboardPlayerScopeFriendsOnly"
    },
    {
      "trigger": "GKLeaderboardPlayerScopeGlobal (0)",
      "contents": "GKLeaderboardPlayerScopeGlobal"
    },
    {
      "trigger": "GKLeaderboardTimeScopeAllTime (2)",
      "contents": "GKLeaderboardTimeScopeAllTime"
    },
    {
      "trigger": "GKLeaderboardTimeScopeToday (0)",
      "contents": "GKLeaderboardTimeScopeToday"
    },
    {
      "trigger": "GKLeaderboardTimeScopeWeek (1)",
      "contents": "GKLeaderboardTimeScopeWeek"
    },
    {
      "trigger": "GKMatchSendDataReliable (0)",
      "contents": "GKMatchSendDataReliable"
    },
    {
      "trigger": "GKMatchSendDataUnreliable (1)",
      "contents": "GKMatchSendDataUnreliable"
    },
    {
      "trigger": "GKNotificationBanner.showBannerWithTitle:message:completionHandler:",
      "contents": "GKNotificationBanner.showBannerWithTitle(${1:NSString* title}, message:${2:NSString* message}, completionHandler:${3:void (^)(void) completionHandler})"
    },
    {
      "trigger": "GKPeerPickerConnectionTypeNearby (2)",
      "contents": "GKPeerPickerConnectionTypeNearby"
    },
    {
      "trigger": "GKPeerPickerConnectionTypeOnline (1)",
      "contents": "GKPeerPickerConnectionTypeOnline"
    },
    {
      "trigger": "GKPeerStateAvailable (0)",
      "contents": "GKPeerStateAvailable"
    },
    {
      "trigger": "GKPeerStateConnected (2)",
      "contents": "GKPeerStateConnected"
    },
    {
      "trigger": "GKPeerStateConnecting (4)",
      "contents": "GKPeerStateConnecting"
    },
    {
      "trigger": "GKPeerStateDisconnected (3)",
      "contents": "GKPeerStateDisconnected"
    },
    {
      "trigger": "GKPeerStateUnavailable (1)",
      "contents": "GKPeerStateUnavailable"
    },
    {
      "trigger": "GKPhotoSizeNormal (1)",
      "contents": "GKPhotoSizeNormal"
    },
    {
      "trigger": "GKPhotoSizeSmall (0)",
      "contents": "GKPhotoSizeSmall"
    },
    {
      "trigger": "GKPlayer.loadPlayersForIdentifiers:withCompletionHandler:",
      "contents": "GKPlayer.loadPlayersForIdentifiers(${1:NSArray* identifiers}, withCompletionHandler:${2:void (^)(NSArray *, NSError *) completionHandler})"
    },
    {
      "trigger": "GKPlayerAuthenticationDidChangeNotificationName (NSString*)",
      "contents": "GKPlayerAuthenticationDidChangeNotificationName"
    },
    {
      "trigger": "GKPlayerDidChangeNotificationName (NSString*)",
      "contents": "GKPlayerDidChangeNotificationName"
    },
    {
      "trigger": "GKPlayerStateConnected (1)",
      "contents": "GKPlayerStateConnected"
    },
    {
      "trigger": "GKPlayerStateDisconnected (2)",
      "contents": "GKPlayerStateDisconnected"
    },
    {
      "trigger": "GKPlayerStateUnknown (0)",
      "contents": "GKPlayerStateUnknown"
    },
    {
      "trigger": "GKSendDataReliable (0)",
      "contents": "GKSendDataReliable"
    },
    {
      "trigger": "GKSendDataUnreliable (1)",
      "contents": "GKSendDataUnreliable"
    },
    {
      "trigger": "GKSessionCancelledError (30504)",
      "contents": "GKSessionCancelledError"
    },
    {
      "trigger": "GKSessionCannotEnableError (30509)",
      "contents": "GKSessionCannotEnableError"
    },
    {
      "trigger": "GKSessionConnectionClosedError (30506)",
      "contents": "GKSessionConnectionClosedError"
    },
    {
      "trigger": "GKSessionConnectionFailedError (30505)",
      "contents": "GKSessionConnectionFailedError"
    },
    {
      "trigger": "GKSessionConnectivityError (30201)",
      "contents": "GKSessionConnectivityError"
    },
    {
      "trigger": "GKSessionDataTooBigError (30507)",
      "contents": "GKSessionDataTooBigError"
    },
    {
      "trigger": "GKSessionDeclinedError (30502)",
      "contents": "GKSessionDeclinedError"
    },
    {
      "trigger": "GKSessionErrorDomain (NSString*)",
      "contents": "GKSessionErrorDomain"
    },
    {
      "trigger": "GKSessionInProgressError (30510)",
      "contents": "GKSessionInProgressError"
    },
    {
      "trigger": "GKSessionInternalError (30203)",
      "contents": "GKSessionInternalError"
    },
    {
      "trigger": "GKSessionInvalidParameterError (30500)",
      "contents": "GKSessionInvalidParameterError"
    },
    {
      "trigger": "GKSessionModeClient (1)",
      "contents": "GKSessionModeClient"
    },
    {
      "trigger": "GKSessionModePeer (2)",
      "contents": "GKSessionModePeer"
    },
    {
      "trigger": "GKSessionModeServer (0)",
      "contents": "GKSessionModeServer"
    },
    {
      "trigger": "GKSessionNotConnectedError (30508)",
      "contents": "GKSessionNotConnectedError"
    },
    {
      "trigger": "GKSessionPeerNotFoundError (30501)",
      "contents": "GKSessionPeerNotFoundError"
    },
    {
      "trigger": "GKSessionSystemError (30205)",
      "contents": "GKSessionSystemError"
    },
    {
      "trigger": "GKSessionTimedOutError (30503)",
      "contents": "GKSessionTimedOutError"
    },
    {
      "trigger": "GKSessionTransportError (30202)",
      "contents": "GKSessionTransportError"
    },
    {
      "trigger": "GKSessionUnknownError (30204)",
      "contents": "GKSessionUnknownError"
    },
    {
      "trigger": "GKTurnBasedMatch.findMatchForRequest:withCompletionHandler:",
      "contents": "GKTurnBasedMatch.findMatchForRequest(${1:GKMatchRequest* request}, withCompletionHandler:${2:void (^)(GKTurnBasedMatch *, NSError *) completionHandler})"
    },
    {
      "trigger": "GKTurnBasedMatch.loadMatchesWithCompletionHandler:",
      "contents": "GKTurnBasedMatch.loadMatchesWithCompletionHandler(${1:void (^)(NSArray *, NSError *) completionHandler})"
    },
    {
      "trigger": "GKTurnBasedMatchOutcomeCustomRange (16711680)",
      "contents": "GKTurnBasedMatchOutcomeCustomRange"
    },
    {
      "trigger": "GKTurnBasedMatchOutcomeFirst (6)",
      "contents": "GKTurnBasedMatchOutcomeFirst"
    },
    {
      "trigger": "GKTurnBasedMatchOutcomeFourth (9)",
      "contents": "GKTurnBasedMatchOutcomeFourth"
    },
    {
      "trigger": "GKTurnBasedMatchOutcomeLost (3)",
      "contents": "GKTurnBasedMatchOutcomeLost"
    },
    {
      "trigger": "GKTurnBasedMatchOutcomeNone (0)",
      "contents": "GKTurnBasedMatchOutcomeNone"
    },
    {
      "trigger": "GKTurnBasedMatchOutcomeQuit (1)",
      "contents": "GKTurnBasedMatchOutcomeQuit"
    },
    {
      "trigger": "GKTurnBasedMatchOutcomeSecond (7)",
      "contents": "GKTurnBasedMatchOutcomeSecond"
    },
    {
      "trigger": "GKTurnBasedMatchOutcomeThird (8)",
      "contents": "GKTurnBasedMatchOutcomeThird"
    },
    {
      "trigger": "GKTurnBasedMatchOutcomeTied (4)",
      "contents": "GKTurnBasedMatchOutcomeTied"
    },
    {
      "trigger": "GKTurnBasedMatchOutcomeTimeExpired (5)",
      "contents": "GKTurnBasedMatchOutcomeTimeExpired"
    },
    {
      "trigger": "GKTurnBasedMatchOutcomeWon (2)",
      "contents": "GKTurnBasedMatchOutcomeWon"
    },
    {
      "trigger": "GKTurnBasedMatchStatusEnded (2)",
      "contents": "GKTurnBasedMatchStatusEnded"
    },
    {
      "trigger": "GKTurnBasedMatchStatusMatching (3)",
      "contents": "GKTurnBasedMatchStatusMatching"
    },
    {
      "trigger": "GKTurnBasedMatchStatusOpen (1)",
      "contents": "GKTurnBasedMatchStatusOpen"
    },
    {
      "trigger": "GKTurnBasedMatchStatusUnknown (0)",
      "contents": "GKTurnBasedMatchStatusUnknown"
    },
    {
      "trigger": "GKTurnBasedParticipantStatusActive (4)",
      "contents": "GKTurnBasedParticipantStatusActive"
    },
    {
      "trigger": "GKTurnBasedParticipantStatusDeclined (2)",
      "contents": "GKTurnBasedParticipantStatusDeclined"
    },
    {
      "trigger": "GKTurnBasedParticipantStatusDone (5)",
      "contents": "GKTurnBasedParticipantStatusDone"
    },
    {
      "trigger": "GKTurnBasedParticipantStatusInvited (1)",
      "contents": "GKTurnBasedParticipantStatusInvited"
    },
    {
      "trigger": "GKTurnBasedParticipantStatusMatching (3)",
      "contents": "GKTurnBasedParticipantStatusMatching"
    },
    {
      "trigger": "GKTurnBasedParticipantStatusUnknown (0)",
      "contents": "GKTurnBasedParticipantStatusUnknown"
    },
    {
      "trigger": "GKVoiceChatPlayerConnected (0)",
      "contents": "GKVoiceChatPlayerConnected"
    },
    {
      "trigger": "GKVoiceChatPlayerDisconnected (1)",
      "contents": "GKVoiceChatPlayerDisconnected"
    },
    {
      "trigger": "GKVoiceChatPlayerSilent (3)",
      "contents": "GKVoiceChatPlayerSilent"
    },
    {
      "trigger": "GKVoiceChatPlayerSpeaking (2)",
      "contents": "GKVoiceChatPlayerSpeaking"
    },
    {
      "trigger": "GKVoiceChatServiceAudioUnavailableError (32005)",
      "contents": "GKVoiceChatServiceAudioUnavailableError"
    },
    {
      "trigger": "GKVoiceChatServiceClientMissingRequiredMethodsError (32007)",
      "contents": "GKVoiceChatServiceClientMissingRequiredMethodsError"
    },
    {
      "trigger": "GKVoiceChatServiceErrorDomain (NSString*)",
      "contents": "GKVoiceChatServiceErrorDomain"
    },
    {
      "trigger": "GKVoiceChatServiceInternalError (32000)",
      "contents": "GKVoiceChatServiceInternalError"
    },
    {
      "trigger": "GKVoiceChatServiceInvalidCallIDError (32004)",
      "contents": "GKVoiceChatServiceInvalidCallIDError"
    },
    {
      "trigger": "GKVoiceChatServiceInvalidParameterError (32016)",
      "contents": "GKVoiceChatServiceInvalidParameterError"
    },
    {
      "trigger": "GKVoiceChatServiceMethodCurrentlyInvalidError (32012)",
      "contents": "GKVoiceChatServiceMethodCurrentlyInvalidError"
    },
    {
      "trigger": "GKVoiceChatServiceNetworkConfigurationError (32013)",
      "contents": "GKVoiceChatServiceNetworkConfigurationError"
    },
    {
      "trigger": "GKVoiceChatServiceNoRemotePacketsError (32001)",
      "contents": "GKVoiceChatServiceNoRemotePacketsError"
    },
    {
      "trigger": "GKVoiceChatServiceOutOfMemoryError (32015)",
      "contents": "GKVoiceChatServiceOutOfMemoryError"
    },
    {
      "trigger": "GKVoiceChatServiceRemoteParticipantBusyError (32008)",
      "contents": "GKVoiceChatServiceRemoteParticipantBusyError"
    },
    {
      "trigger": "GKVoiceChatServiceRemoteParticipantCancelledError (32009)",
      "contents": "GKVoiceChatServiceRemoteParticipantCancelledError"
    },
    {
      "trigger": "GKVoiceChatServiceRemoteParticipantDeclinedInviteError (32011)",
      "contents": "GKVoiceChatServiceRemoteParticipantDeclinedInviteError"
    },
    {
      "trigger": "GKVoiceChatServiceRemoteParticipantHangupError (32003)",
      "contents": "GKVoiceChatServiceRemoteParticipantHangupError"
    },
    {
      "trigger": "GKVoiceChatServiceRemoteParticipantResponseInvalidError (32010)",
      "contents": "GKVoiceChatServiceRemoteParticipantResponseInvalidError"
    },
    {
      "trigger": "GKVoiceChatServiceUnableToConnectError (32002)",
      "contents": "GKVoiceChatServiceUnableToConnectError"
    },
    {
      "trigger": "GKVoiceChatServiceUninitializedClientError (32006)",
      "contents": "GKVoiceChatServiceUninitializedClientError"
    },
    {
      "trigger": "GKVoiceChatServiceUnsupportedRemoteVersionError (32014)",
      "contents": "GKVoiceChatServiceUnsupportedRemoteVersionError"
    },
    {
      "trigger": "GLKFogModeExp (0)",
      "contents": "GLKFogModeExp"
    },
    {
      "trigger": "GLKFogModeExp2 (1)",
      "contents": "GLKFogModeExp2"
    },
    {
      "trigger": "GLKFogModeLinear (2)",
      "contents": "GLKFogModeLinear"
    },
    {
      "trigger": "GLKLightingTypePerPixel (1)",
      "contents": "GLKLightingTypePerPixel"
    },
    {
      "trigger": "GLKLightingTypePerVertex (0)",
      "contents": "GLKLightingTypePerVertex"
    },
    {
      "trigger": "GLKMathDegreesToRadians",
      "contents": "GLKMathDegreesToRadians(${1:float degrees})"
    },
    {
      "trigger": "GLKMathProject",
      "contents": "GLKMathProject(${1:GLKVector3 object}, ${2:GLKMatrix4 model}, ${3:GLKMatrix4 projection}, ${4:int* viewport})"
    },
    {
      "trigger": "GLKMathRadiansToDegrees",
      "contents": "GLKMathRadiansToDegrees(${1:float radians})"
    },
    {
      "trigger": "GLKMathUnproject",
      "contents": "GLKMathUnproject(${1:GLKVector3 window}, ${2:GLKMatrix4 model}, ${3:GLKMatrix4 projection}, ${4:int* viewport}, ${5:_Bool* success})"
    },
    {
      "trigger": "GLKMatrix3Add",
      "contents": "GLKMatrix3Add(${1:GLKMatrix3 matrixLeft}, ${2:GLKMatrix3 matrixRight})"
    },
    {
      "trigger": "GLKMatrix3GetColumn",
      "contents": "GLKMatrix3GetColumn(${1:GLKMatrix3 matrix}, ${2:int column})"
    },
    {
      "trigger": "GLKMatrix3GetMatrix2",
      "contents": "GLKMatrix3GetMatrix2(${1:GLKMatrix3 matrix})"
    },
    {
      "trigger": "GLKMatrix3GetRow",
      "contents": "GLKMatrix3GetRow(${1:GLKMatrix3 matrix}, ${2:int row})"
    },
    {
      "trigger": "GLKMatrix3Identity (GLKMatrix3)",
      "contents": "GLKMatrix3Identity"
    },
    {
      "trigger": "GLKMatrix3Invert",
      "contents": "GLKMatrix3Invert(${1:GLKMatrix3 matrix}, ${2:_Bool* isInvertible})"
    },
    {
      "trigger": "GLKMatrix3InvertAndTranspose",
      "contents": "GLKMatrix3InvertAndTranspose(${1:GLKMatrix3 matrix}, ${2:_Bool* isInvertible})"
    },
    {
      "trigger": "GLKMatrix3Make",
      "contents": "GLKMatrix3Make(${1:float m00}, ${2:float m01}, ${3:float m02}, ${4:float m10}, ${5:float m11}, ${6:float m12}, ${7:float m20}, ${8:float m21}, ${9:float m22})"
    },
    {
      "trigger": "GLKMatrix3MakeAndTranspose",
      "contents": "GLKMatrix3MakeAndTranspose(${1:float m00}, ${2:float m01}, ${3:float m02}, ${4:float m10}, ${5:float m11}, ${6:float m12}, ${7:float m20}, ${8:float m21}, ${9:float m22})"
    },
    {
      "trigger": "GLKMatrix3MakeRotation",
      "contents": "GLKMatrix3MakeRotation(${1:float radians}, ${2:float x}, ${3:float y}, ${4:float z})"
    },
    {
      "trigger": "GLKMatrix3MakeScale",
      "contents": "GLKMatrix3MakeScale(${1:float sx}, ${2:float sy}, ${3:float sz})"
    },
    {
      "trigger": "GLKMatrix3MakeWithArray",
      "contents": "GLKMatrix3MakeWithArray(${1:float* values})"
    },
    {
      "trigger": "GLKMatrix3MakeWithArrayAndTranspose",
      "contents": "GLKMatrix3MakeWithArrayAndTranspose(${1:float* values})"
    },
    {
      "trigger": "GLKMatrix3MakeWithColumns",
      "contents": "GLKMatrix3MakeWithColumns(${1:GLKVector3 column0}, ${2:GLKVector3 column1}, ${3:GLKVector3 column2})"
    },
    {
      "trigger": "GLKMatrix3MakeWithQuaternion",
      "contents": "GLKMatrix3MakeWithQuaternion(${1:GLKQuaternion quaternion})"
    },
    {
      "trigger": "GLKMatrix3MakeWithRows",
      "contents": "GLKMatrix3MakeWithRows(${1:GLKVector3 row0}, ${2:GLKVector3 row1}, ${3:GLKVector3 row2})"
    },
    {
      "trigger": "GLKMatrix3MakeXRotation",
      "contents": "GLKMatrix3MakeXRotation(${1:float radians})"
    },
    {
      "trigger": "GLKMatrix3MakeYRotation",
      "contents": "GLKMatrix3MakeYRotation(${1:float radians})"
    },
    {
      "trigger": "GLKMatrix3MakeZRotation",
      "contents": "GLKMatrix3MakeZRotation(${1:float radians})"
    },
    {
      "trigger": "GLKMatrix3Multiply",
      "contents": "GLKMatrix3Multiply(${1:GLKMatrix3 matrixLeft}, ${2:GLKMatrix3 matrixRight})"
    },
    {
      "trigger": "GLKMatrix3MultiplyVector3",
      "contents": "GLKMatrix3MultiplyVector3(${1:GLKMatrix3 matrixLeft}, ${2:GLKVector3 vectorRight})"
    },
    {
      "trigger": "GLKMatrix3MultiplyVector3Array",
      "contents": "GLKMatrix3MultiplyVector3Array(${1:GLKMatrix3 matrix}, ${2:GLKVector3* vectors}, ${3:size_t vectorCount})"
    },
    {
      "trigger": "GLKMatrix3Rotate",
      "contents": "GLKMatrix3Rotate(${1:GLKMatrix3 matrix}, ${2:float radians}, ${3:float x}, ${4:float y}, ${5:float z})"
    },
    {
      "trigger": "GLKMatrix3RotateWithVector3",
      "contents": "GLKMatrix3RotateWithVector3(${1:GLKMatrix3 matrix}, ${2:float radians}, ${3:GLKVector3 axisVector})"
    },
    {
      "trigger": "GLKMatrix3RotateWithVector4",
      "contents": "GLKMatrix3RotateWithVector4(${1:GLKMatrix3 matrix}, ${2:float radians}, ${3:GLKVector4 axisVector})"
    },
    {
      "trigger": "GLKMatrix3RotateX",
      "contents": "GLKMatrix3RotateX(${1:GLKMatrix3 matrix}, ${2:float radians})"
    },
    {
      "trigger": "GLKMatrix3RotateY",
      "contents": "GLKMatrix3RotateY(${1:GLKMatrix3 matrix}, ${2:float radians})"
    },
    {
      "trigger": "GLKMatrix3RotateZ",
      "contents": "GLKMatrix3RotateZ(${1:GLKMatrix3 matrix}, ${2:float radians})"
    },
    {
      "trigger": "GLKMatrix3Scale",
      "contents": "GLKMatrix3Scale(${1:GLKMatrix3 matrix}, ${2:float sx}, ${3:float sy}, ${4:float sz})"
    },
    {
      "trigger": "GLKMatrix3ScaleWithVector3",
      "contents": "GLKMatrix3ScaleWithVector3(${1:GLKMatrix3 matrix}, ${2:GLKVector3 scaleVector})"
    },
    {
      "trigger": "GLKMatrix3ScaleWithVector4",
      "contents": "GLKMatrix3ScaleWithVector4(${1:GLKMatrix3 matrix}, ${2:GLKVector4 scaleVector})"
    },
    {
      "trigger": "GLKMatrix3SetColumn",
      "contents": "GLKMatrix3SetColumn(${1:GLKMatrix3 matrix}, ${2:int column}, ${3:GLKVector3 vector})"
    },
    {
      "trigger": "GLKMatrix3SetRow",
      "contents": "GLKMatrix3SetRow(${1:GLKMatrix3 matrix}, ${2:int row}, ${3:GLKVector3 vector})"
    },
    {
      "trigger": "GLKMatrix3Subtract",
      "contents": "GLKMatrix3Subtract(${1:GLKMatrix3 matrixLeft}, ${2:GLKMatrix3 matrixRight})"
    },
    {
      "trigger": "GLKMatrix3Transpose",
      "contents": "GLKMatrix3Transpose(${1:GLKMatrix3 matrix})"
    },
    {
      "trigger": "GLKMatrix4Add",
      "contents": "GLKMatrix4Add(${1:GLKMatrix4 matrixLeft}, ${2:GLKMatrix4 matrixRight})"
    },
    {
      "trigger": "GLKMatrix4GetColumn",
      "contents": "GLKMatrix4GetColumn(${1:GLKMatrix4 matrix}, ${2:int column})"
    },
    {
      "trigger": "GLKMatrix4GetMatrix2",
      "contents": "GLKMatrix4GetMatrix2(${1:GLKMatrix4 matrix})"
    },
    {
      "trigger": "GLKMatrix4GetMatrix3",
      "contents": "GLKMatrix4GetMatrix3(${1:GLKMatrix4 matrix})"
    },
    {
      "trigger": "GLKMatrix4GetRow",
      "contents": "GLKMatrix4GetRow(${1:GLKMatrix4 matrix}, ${2:int row})"
    },
    {
      "trigger": "GLKMatrix4Identity (GLKMatrix4)",
      "contents": "GLKMatrix4Identity"
    },
    {
      "trigger": "GLKMatrix4Invert",
      "contents": "GLKMatrix4Invert(${1:GLKMatrix4 matrix}, ${2:_Bool* isInvertible})"
    },
    {
      "trigger": "GLKMatrix4InvertAndTranspose",
      "contents": "GLKMatrix4InvertAndTranspose(${1:GLKMatrix4 matrix}, ${2:_Bool* isInvertible})"
    },
    {
      "trigger": "GLKMatrix4Make",
      "contents": "GLKMatrix4Make(${1:float m00}, ${2:float m01}, ${3:float m02}, ${4:float m03}, ${5:float m10}, ${6:float m11}, ${7:float m12}, ${8:float m13}, ${9:float m20}, ${10:float m21}, ${11:float m22}, ${12:float m23}, ${13:float m30}, ${14:float m31}, ${15:float m32}, ${16:float m33})"
    },
    {
      "trigger": "GLKMatrix4MakeAndTranspose",
      "contents": "GLKMatrix4MakeAndTranspose(${1:float m00}, ${2:float m01}, ${3:float m02}, ${4:float m03}, ${5:float m10}, ${6:float m11}, ${7:float m12}, ${8:float m13}, ${9:float m20}, ${10:float m21}, ${11:float m22}, ${12:float m23}, ${13:float m30}, ${14:float m31}, ${15:float m32}, ${16:float m33})"
    },
    {
      "trigger": "GLKMatrix4MakeFrustum",
      "contents": "GLKMatrix4MakeFrustum(${1:float left}, ${2:float right}, ${3:float bottom}, ${4:float top}, ${5:float nearZ}, ${6:float farZ})"
    },
    {
      "trigger": "GLKMatrix4MakeLookAt",
      "contents": "GLKMatrix4MakeLookAt(${1:float eyeX}, ${2:float eyeY}, ${3:float eyeZ}, ${4:float centerX}, ${5:float centerY}, ${6:float centerZ}, ${7:float upX}, ${8:float upY}, ${9:float upZ})"
    },
    {
      "trigger": "GLKMatrix4MakeOrtho",
      "contents": "GLKMatrix4MakeOrtho(${1:float left}, ${2:float right}, ${3:float bottom}, ${4:float top}, ${5:float nearZ}, ${6:float farZ})"
    },
    {
      "trigger": "GLKMatrix4MakePerspective",
      "contents": "GLKMatrix4MakePerspective(${1:float fovyRadians}, ${2:float aspect}, ${3:float nearZ}, ${4:float farZ})"
    },
    {
      "trigger": "GLKMatrix4MakeRotation",
      "contents": "GLKMatrix4MakeRotation(${1:float radians}, ${2:float x}, ${3:float y}, ${4:float z})"
    },
    {
      "trigger": "GLKMatrix4MakeScale",
      "contents": "GLKMatrix4MakeScale(${1:float sx}, ${2:float sy}, ${3:float sz})"
    },
    {
      "trigger": "GLKMatrix4MakeTranslation",
      "contents": "GLKMatrix4MakeTranslation(${1:float tx}, ${2:float ty}, ${3:float tz})"
    },
    {
      "trigger": "GLKMatrix4MakeWithArray",
      "contents": "GLKMatrix4MakeWithArray(${1:float* values})"
    },
    {
      "trigger": "GLKMatrix4MakeWithArrayAndTranspose",
      "contents": "GLKMatrix4MakeWithArrayAndTranspose(${1:float* values})"
    },
    {
      "trigger": "GLKMatrix4MakeWithColumns",
      "contents": "GLKMatrix4MakeWithColumns(${1:GLKVector4 column0}, ${2:GLKVector4 column1}, ${3:GLKVector4 column2}, ${4:GLKVector4 column3})"
    },
    {
      "trigger": "GLKMatrix4MakeWithQuaternion",
      "contents": "GLKMatrix4MakeWithQuaternion(${1:GLKQuaternion quaternion})"
    },
    {
      "trigger": "GLKMatrix4MakeWithRows",
      "contents": "GLKMatrix4MakeWithRows(${1:GLKVector4 row0}, ${2:GLKVector4 row1}, ${3:GLKVector4 row2}, ${4:GLKVector4 row3})"
    },
    {
      "trigger": "GLKMatrix4MakeXRotation",
      "contents": "GLKMatrix4MakeXRotation(${1:float radians})"
    },
    {
      "trigger": "GLKMatrix4MakeYRotation",
      "contents": "GLKMatrix4MakeYRotation(${1:float radians})"
    },
    {
      "trigger": "GLKMatrix4MakeZRotation",
      "contents": "GLKMatrix4MakeZRotation(${1:float radians})"
    },
    {
      "trigger": "GLKMatrix4Multiply",
      "contents": "GLKMatrix4Multiply(${1:GLKMatrix4 matrixLeft}, ${2:GLKMatrix4 matrixRight})"
    },
    {
      "trigger": "GLKMatrix4MultiplyAndProjectVector3",
      "contents": "GLKMatrix4MultiplyAndProjectVector3(${1:GLKMatrix4 matrixLeft}, ${2:GLKVector3 vectorRight})"
    },
    {
      "trigger": "GLKMatrix4MultiplyAndProjectVector3Array",
      "contents": "GLKMatrix4MultiplyAndProjectVector3Array(${1:GLKMatrix4 matrix}, ${2:GLKVector3* vectors}, ${3:size_t vectorCount})"
    },
    {
      "trigger": "GLKMatrix4MultiplyVector3",
      "contents": "GLKMatrix4MultiplyVector3(${1:GLKMatrix4 matrixLeft}, ${2:GLKVector3 vectorRight})"
    },
    {
      "trigger": "GLKMatrix4MultiplyVector3Array",
      "contents": "GLKMatrix4MultiplyVector3Array(${1:GLKMatrix4 matrix}, ${2:GLKVector3* vectors}, ${3:size_t vectorCount})"
    },
    {
      "trigger": "GLKMatrix4MultiplyVector3ArrayWithTranslation",
      "contents": "GLKMatrix4MultiplyVector3ArrayWithTranslation(${1:GLKMatrix4 matrix}, ${2:GLKVector3* vectors}, ${3:size_t vectorCount})"
    },
    {
      "trigger": "GLKMatrix4MultiplyVector3WithTranslation",
      "contents": "GLKMatrix4MultiplyVector3WithTranslation(${1:GLKMatrix4 matrixLeft}, ${2:GLKVector3 vectorRight})"
    },
    {
      "trigger": "GLKMatrix4MultiplyVector4",
      "contents": "GLKMatrix4MultiplyVector4(${1:GLKMatrix4 matrixLeft}, ${2:GLKVector4 vectorRight})"
    },
    {
      "trigger": "GLKMatrix4MultiplyVector4Array",
      "contents": "GLKMatrix4MultiplyVector4Array(${1:GLKMatrix4 matrix}, ${2:GLKVector4* vectors}, ${3:size_t vectorCount})"
    },
    {
      "trigger": "GLKMatrix4Rotate",
      "contents": "GLKMatrix4Rotate(${1:GLKMatrix4 matrix}, ${2:float radians}, ${3:float x}, ${4:float y}, ${5:float z})"
    },
    {
      "trigger": "GLKMatrix4RotateWithVector3",
      "contents": "GLKMatrix4RotateWithVector3(${1:GLKMatrix4 matrix}, ${2:float radians}, ${3:GLKVector3 axisVector})"
    },
    {
      "trigger": "GLKMatrix4RotateWithVector4",
      "contents": "GLKMatrix4RotateWithVector4(${1:GLKMatrix4 matrix}, ${2:float radians}, ${3:GLKVector4 axisVector})"
    },
    {
      "trigger": "GLKMatrix4RotateX",
      "contents": "GLKMatrix4RotateX(${1:GLKMatrix4 matrix}, ${2:float radians})"
    },
    {
      "trigger": "GLKMatrix4RotateY",
      "contents": "GLKMatrix4RotateY(${1:GLKMatrix4 matrix}, ${2:float radians})"
    },
    {
      "trigger": "GLKMatrix4RotateZ",
      "contents": "GLKMatrix4RotateZ(${1:GLKMatrix4 matrix}, ${2:float radians})"
    },
    {
      "trigger": "GLKMatrix4Scale",
      "contents": "GLKMatrix4Scale(${1:GLKMatrix4 matrix}, ${2:float sx}, ${3:float sy}, ${4:float sz})"
    },
    {
      "trigger": "GLKMatrix4ScaleWithVector3",
      "contents": "GLKMatrix4ScaleWithVector3(${1:GLKMatrix4 matrix}, ${2:GLKVector3 scaleVector})"
    },
    {
      "trigger": "GLKMatrix4ScaleWithVector4",
      "contents": "GLKMatrix4ScaleWithVector4(${1:GLKMatrix4 matrix}, ${2:GLKVector4 scaleVector})"
    },
    {
      "trigger": "GLKMatrix4SetColumn",
      "contents": "GLKMatrix4SetColumn(${1:GLKMatrix4 matrix}, ${2:int column}, ${3:GLKVector4 vector})"
    },
    {
      "trigger": "GLKMatrix4SetRow",
      "contents": "GLKMatrix4SetRow(${1:GLKMatrix4 matrix}, ${2:int row}, ${3:GLKVector4 vector})"
    },
    {
      "trigger": "GLKMatrix4Subtract",
      "contents": "GLKMatrix4Subtract(${1:GLKMatrix4 matrixLeft}, ${2:GLKMatrix4 matrixRight})"
    },
    {
      "trigger": "GLKMatrix4Translate",
      "contents": "GLKMatrix4Translate(${1:GLKMatrix4 matrix}, ${2:float tx}, ${3:float ty}, ${4:float tz})"
    },
    {
      "trigger": "GLKMatrix4TranslateWithVector3",
      "contents": "GLKMatrix4TranslateWithVector3(${1:GLKMatrix4 matrix}, ${2:GLKVector3 translationVector})"
    },
    {
      "trigger": "GLKMatrix4TranslateWithVector4",
      "contents": "GLKMatrix4TranslateWithVector4(${1:GLKMatrix4 matrix}, ${2:GLKVector4 translationVector})"
    },
    {
      "trigger": "GLKMatrix4Transpose",
      "contents": "GLKMatrix4Transpose(${1:GLKMatrix4 matrix})"
    },
    {
      "trigger": "GLKMatrixStackCreate",
      "contents": "GLKMatrixStackCreate(${1:CFAllocatorRef alloc})"
    },
    {
      "trigger": "GLKMatrixStackGetMatrix2",
      "contents": "GLKMatrixStackGetMatrix2(${1:GLKMatrixStackRef stack})"
    },
    {
      "trigger": "GLKMatrixStackGetMatrix3",
      "contents": "GLKMatrixStackGetMatrix3(${1:GLKMatrixStackRef stack})"
    },
    {
      "trigger": "GLKMatrixStackGetMatrix3Inverse",
      "contents": "GLKMatrixStackGetMatrix3Inverse(${1:GLKMatrixStackRef stack})"
    },
    {
      "trigger": "GLKMatrixStackGetMatrix3InverseTranspose",
      "contents": "GLKMatrixStackGetMatrix3InverseTranspose(${1:GLKMatrixStackRef stack})"
    },
    {
      "trigger": "GLKMatrixStackGetMatrix4",
      "contents": "GLKMatrixStackGetMatrix4(${1:GLKMatrixStackRef stack})"
    },
    {
      "trigger": "GLKMatrixStackGetMatrix4Inverse",
      "contents": "GLKMatrixStackGetMatrix4Inverse(${1:GLKMatrixStackRef stack})"
    },
    {
      "trigger": "GLKMatrixStackGetMatrix4InverseTranspose",
      "contents": "GLKMatrixStackGetMatrix4InverseTranspose(${1:GLKMatrixStackRef stack})"
    },
    {
      "trigger": "GLKMatrixStackLoadMatrix4",
      "contents": "GLKMatrixStackLoadMatrix4(${1:GLKMatrixStackRef stack}, ${2:GLKMatrix4 matrix})"
    },
    {
      "trigger": "GLKMatrixStackMultiplyMatrix4",
      "contents": "GLKMatrixStackMultiplyMatrix4(${1:GLKMatrixStackRef stack}, ${2:GLKMatrix4 matrix})"
    },
    {
      "trigger": "GLKMatrixStackMultiplyMatrixStack",
      "contents": "GLKMatrixStackMultiplyMatrixStack(${1:GLKMatrixStackRef stackLeft}, ${2:GLKMatrixStackRef stackRight})"
    },
    {
      "trigger": "GLKMatrixStackPop",
      "contents": "GLKMatrixStackPop(${1:GLKMatrixStackRef stack})"
    },
    {
      "trigger": "GLKMatrixStackPush",
      "contents": "GLKMatrixStackPush(${1:GLKMatrixStackRef stack})"
    },
    {
      "trigger": "GLKMatrixStackRotate",
      "contents": "GLKMatrixStackRotate(${1:GLKMatrixStackRef stack}, ${2:float radians}, ${3:float x}, ${4:float y}, ${5:float z})"
    },
    {
      "trigger": "GLKMatrixStackRotateWithVector3",
      "contents": "GLKMatrixStackRotateWithVector3(${1:GLKMatrixStackRef stack}, ${2:float radians}, ${3:GLKVector3 axisVector})"
    },
    {
      "trigger": "GLKMatrixStackRotateWithVector4",
      "contents": "GLKMatrixStackRotateWithVector4(${1:GLKMatrixStackRef stack}, ${2:float radians}, ${3:GLKVector4 axisVector})"
    },
    {
      "trigger": "GLKMatrixStackRotateX",
      "contents": "GLKMatrixStackRotateX(${1:GLKMatrixStackRef stack}, ${2:float radians})"
    },
    {
      "trigger": "GLKMatrixStackRotateY",
      "contents": "GLKMatrixStackRotateY(${1:GLKMatrixStackRef stack}, ${2:float radians})"
    },
    {
      "trigger": "GLKMatrixStackRotateZ",
      "contents": "GLKMatrixStackRotateZ(${1:GLKMatrixStackRef stack}, ${2:float radians})"
    },
    {
      "trigger": "GLKMatrixStackScale",
      "contents": "GLKMatrixStackScale(${1:GLKMatrixStackRef stack}, ${2:float sx}, ${3:float sy}, ${4:float sz})"
    },
    {
      "trigger": "GLKMatrixStackScaleWithVector3",
      "contents": "GLKMatrixStackScaleWithVector3(${1:GLKMatrixStackRef stack}, ${2:GLKVector3 scaleVector})"
    },
    {
      "trigger": "GLKMatrixStackScaleWithVector4",
      "contents": "GLKMatrixStackScaleWithVector4(${1:GLKMatrixStackRef stack}, ${2:GLKVector4 scaleVector})"
    },
    {
      "trigger": "GLKMatrixStackSize",
      "contents": "GLKMatrixStackSize(${1:GLKMatrixStackRef stack})"
    },
    {
      "trigger": "GLKMatrixStackTranslate",
      "contents": "GLKMatrixStackTranslate(${1:GLKMatrixStackRef stack}, ${2:float tx}, ${3:float ty}, ${4:float tz})"
    },
    {
      "trigger": "GLKMatrixStackTranslateWithVector3",
      "contents": "GLKMatrixStackTranslateWithVector3(${1:GLKMatrixStackRef stack}, ${2:GLKVector3 translationVector})"
    },
    {
      "trigger": "GLKMatrixStackTranslateWithVector4",
      "contents": "GLKMatrixStackTranslateWithVector4(${1:GLKMatrixStackRef stack}, ${2:GLKVector4 translationVector})"
    },
    {
      "trigger": "GLKQuaternionAdd",
      "contents": "GLKQuaternionAdd(${1:GLKQuaternion quaternionLeft}, ${2:GLKQuaternion quaternionRight})"
    },
    {
      "trigger": "GLKQuaternionAngle",
      "contents": "GLKQuaternionAngle(${1:GLKQuaternion quaternion})"
    },
    {
      "trigger": "GLKQuaternionAxis",
      "contents": "GLKQuaternionAxis(${1:GLKQuaternion quaternion})"
    },
    {
      "trigger": "GLKQuaternionConjugate",
      "contents": "GLKQuaternionConjugate(${1:GLKQuaternion quaternion})"
    },
    {
      "trigger": "GLKQuaternionIdentity (GLKQuaternion)",
      "contents": "GLKQuaternionIdentity"
    },
    {
      "trigger": "GLKQuaternionInvert",
      "contents": "GLKQuaternionInvert(${1:GLKQuaternion quaternion})"
    },
    {
      "trigger": "GLKQuaternionLength",
      "contents": "GLKQuaternionLength(${1:GLKQuaternion quaternion})"
    },
    {
      "trigger": "GLKQuaternionMake",
      "contents": "GLKQuaternionMake(${1:float x}, ${2:float y}, ${3:float z}, ${4:float w})"
    },
    {
      "trigger": "GLKQuaternionMakeWithAngleAndAxis",
      "contents": "GLKQuaternionMakeWithAngleAndAxis(${1:float radians}, ${2:float x}, ${3:float y}, ${4:float z})"
    },
    {
      "trigger": "GLKQuaternionMakeWithAngleAndVector3Axis",
      "contents": "GLKQuaternionMakeWithAngleAndVector3Axis(${1:float radians}, ${2:GLKVector3 axisVector})"
    },
    {
      "trigger": "GLKQuaternionMakeWithArray",
      "contents": "GLKQuaternionMakeWithArray(${1:float* values})"
    },
    {
      "trigger": "GLKQuaternionMakeWithMatrix3",
      "contents": "GLKQuaternionMakeWithMatrix3(${1:GLKMatrix3 matrix})"
    },
    {
      "trigger": "GLKQuaternionMakeWithMatrix4",
      "contents": "GLKQuaternionMakeWithMatrix4(${1:GLKMatrix4 matrix})"
    },
    {
      "trigger": "GLKQuaternionMakeWithVector3",
      "contents": "GLKQuaternionMakeWithVector3(${1:GLKVector3 vector}, ${2:float scalar})"
    },
    {
      "trigger": "GLKQuaternionMultiply",
      "contents": "GLKQuaternionMultiply(${1:GLKQuaternion quaternionLeft}, ${2:GLKQuaternion quaternionRight})"
    },
    {
      "trigger": "GLKQuaternionNormalize",
      "contents": "GLKQuaternionNormalize(${1:GLKQuaternion quaternion})"
    },
    {
      "trigger": "GLKQuaternionRotateVector3",
      "contents": "GLKQuaternionRotateVector3(${1:GLKQuaternion quaternion}, ${2:GLKVector3 vector})"
    },
    {
      "trigger": "GLKQuaternionRotateVector3Array",
      "contents": "GLKQuaternionRotateVector3Array(${1:GLKQuaternion quaternion}, ${2:GLKVector3* vectors}, ${3:size_t vectorCount})"
    },
    {
      "trigger": "GLKQuaternionRotateVector4",
      "contents": "GLKQuaternionRotateVector4(${1:GLKQuaternion quaternion}, ${2:GLKVector4 vector})"
    },
    {
      "trigger": "GLKQuaternionRotateVector4Array",
      "contents": "GLKQuaternionRotateVector4Array(${1:GLKQuaternion quaternion}, ${2:GLKVector4* vectors}, ${3:size_t vectorCount})"
    },
    {
      "trigger": "GLKQuaternionSlerp",
      "contents": "GLKQuaternionSlerp(${1:GLKQuaternion quaternionStart}, ${2:GLKQuaternion quaternionEnd}, ${3:float t})"
    },
    {
      "trigger": "GLKQuaternionSubtract",
      "contents": "GLKQuaternionSubtract(${1:GLKQuaternion quaternionLeft}, ${2:GLKQuaternion quaternionRight})"
    },
    {
      "trigger": "GLKTextureEnvModeDecal (2)",
      "contents": "GLKTextureEnvModeDecal"
    },
    {
      "trigger": "GLKTextureEnvModeModulate (1)",
      "contents": "GLKTextureEnvModeModulate"
    },
    {
      "trigger": "GLKTextureEnvModeReplace (0)",
      "contents": "GLKTextureEnvModeReplace"
    },
    {
      "trigger": "GLKTextureInfoAlphaStateNonPremultiplied (1)",
      "contents": "GLKTextureInfoAlphaStateNonPremultiplied"
    },
    {
      "trigger": "GLKTextureInfoAlphaStateNone (0)",
      "contents": "GLKTextureInfoAlphaStateNone"
    },
    {
      "trigger": "GLKTextureInfoAlphaStatePremultiplied (2)",
      "contents": "GLKTextureInfoAlphaStatePremultiplied"
    },
    {
      "trigger": "GLKTextureInfoOriginBottomLeft (2)",
      "contents": "GLKTextureInfoOriginBottomLeft"
    },
    {
      "trigger": "GLKTextureInfoOriginTopLeft (1)",
      "contents": "GLKTextureInfoOriginTopLeft"
    },
    {
      "trigger": "GLKTextureInfoOriginUnknown (0)",
      "contents": "GLKTextureInfoOriginUnknown"
    },
    {
      "trigger": "GLKTextureLoader.cubeMapWithContentsOfFile:options:error:",
      "contents": "GLKTextureLoader.cubeMapWithContentsOfFile(${1:NSString* path}, options:${2:NSDictionary* options}, error:${3:NSError** outError})"
    },
    {
      "trigger": "GLKTextureLoader.cubeMapWithContentsOfFiles:options:error:",
      "contents": "GLKTextureLoader.cubeMapWithContentsOfFiles(${1:NSArray* paths}, options:${2:NSDictionary* options}, error:${3:NSError** outError})"
    },
    {
      "trigger": "GLKTextureLoader.cubeMapWithContentsOfURL:options:error:",
      "contents": "GLKTextureLoader.cubeMapWithContentsOfURL(${1:NSURL* url}, options:${2:NSDictionary* options}, error:${3:NSError** outError})"
    },
    {
      "trigger": "GLKTextureLoader.textureWithCGImage:options:error:",
      "contents": "GLKTextureLoader.textureWithCGImage(${1:CGImageRef cgImage}, options:${2:NSDictionary* options}, error:${3:NSError** outError})"
    },
    {
      "trigger": "GLKTextureLoader.textureWithContentsOfData:options:error:",
      "contents": "GLKTextureLoader.textureWithContentsOfData(${1:NSData* data}, options:${2:NSDictionary* options}, error:${3:NSError** outError})"
    },
    {
      "trigger": "GLKTextureLoader.textureWithContentsOfFile:options:error:",
      "contents": "GLKTextureLoader.textureWithContentsOfFile(${1:NSString* path}, options:${2:NSDictionary* options}, error:${3:NSError** outError})"
    },
    {
      "trigger": "GLKTextureLoader.textureWithContentsOfURL:options:error:",
      "contents": "GLKTextureLoader.textureWithContentsOfURL(${1:NSURL* url}, options:${2:NSDictionary* options}, error:${3:NSError** outError})"
    },
    {
      "trigger": "GLKTextureLoaderApplyPremultiplication (NSString*)",
      "contents": "GLKTextureLoaderApplyPremultiplication"
    },
    {
      "trigger": "GLKTextureLoaderErrorAlphaPremultiplicationFailure (16)",
      "contents": "GLKTextureLoaderErrorAlphaPremultiplicationFailure"
    },
    {
      "trigger": "GLKTextureLoaderErrorCompressedTextureUpload (7)",
      "contents": "GLKTextureLoaderErrorCompressedTextureUpload"
    },
    {
      "trigger": "GLKTextureLoaderErrorCubeMapInvalidNumFiles (6)",
      "contents": "GLKTextureLoaderErrorCubeMapInvalidNumFiles"
    },
    {
      "trigger": "GLKTextureLoaderErrorDataPreprocessingFailure (12)",
      "contents": "GLKTextureLoaderErrorDataPreprocessingFailure"
    },
    {
      "trigger": "GLKTextureLoaderErrorDomain (NSString*)",
      "contents": "GLKTextureLoaderErrorDomain"
    },
    {
      "trigger": "GLKTextureLoaderErrorFileOrURLNotFound (0)",
      "contents": "GLKTextureLoaderErrorFileOrURLNotFound"
    },
    {
      "trigger": "GLKTextureLoaderErrorInvalidCGImage (2)",
      "contents": "GLKTextureLoaderErrorInvalidCGImage"
    },
    {
      "trigger": "GLKTextureLoaderErrorInvalidEAGLContext (17)",
      "contents": "GLKTextureLoaderErrorInvalidEAGLContext"
    },
    {
      "trigger": "GLKTextureLoaderErrorInvalidNSData (1)",
      "contents": "GLKTextureLoaderErrorInvalidNSData"
    },
    {
      "trigger": "GLKTextureLoaderErrorKey (NSString*)",
      "contents": "GLKTextureLoaderErrorKey"
    },
    {
      "trigger": "GLKTextureLoaderErrorMipmapUnsupported (13)",
      "contents": "GLKTextureLoaderErrorMipmapUnsupported"
    },
    {
      "trigger": "GLKTextureLoaderErrorPVRAtlasUnsupported (5)",
      "contents": "GLKTextureLoaderErrorPVRAtlasUnsupported"
    },
    {
      "trigger": "GLKTextureLoaderErrorReorientationFailure (15)",
      "contents": "GLKTextureLoaderErrorReorientationFailure"
    },
    {
      "trigger": "GLKTextureLoaderErrorUncompressedTextureUpload (8)",
      "contents": "GLKTextureLoaderErrorUncompressedTextureUpload"
    },
    {
      "trigger": "GLKTextureLoaderErrorUnknownFileType (4)",
      "contents": "GLKTextureLoaderErrorUnknownFileType"
    },
    {
      "trigger": "GLKTextureLoaderErrorUnknownPathType (3)",
      "contents": "GLKTextureLoaderErrorUnknownPathType"
    },
    {
      "trigger": "GLKTextureLoaderErrorUnsupportedBitDepth (10)",
      "contents": "GLKTextureLoaderErrorUnsupportedBitDepth"
    },
    {
      "trigger": "GLKTextureLoaderErrorUnsupportedCubeMapDimensions (9)",
      "contents": "GLKTextureLoaderErrorUnsupportedCubeMapDimensions"
    },
    {
      "trigger": "GLKTextureLoaderErrorUnsupportedOrientation (14)",
      "contents": "GLKTextureLoaderErrorUnsupportedOrientation"
    },
    {
      "trigger": "GLKTextureLoaderErrorUnsupportedPVRFormat (11)",
      "contents": "GLKTextureLoaderErrorUnsupportedPVRFormat"
    },
    {
      "trigger": "GLKTextureLoaderGLErrorKey (NSString*)",
      "contents": "GLKTextureLoaderGLErrorKey"
    },
    {
      "trigger": "GLKTextureLoaderGenerateMipmaps (NSString*)",
      "contents": "GLKTextureLoaderGenerateMipmaps"
    },
    {
      "trigger": "GLKTextureLoaderGrayscaleAsAlpha (NSString*)",
      "contents": "GLKTextureLoaderGrayscaleAsAlpha"
    },
    {
      "trigger": "GLKTextureLoaderOriginBottomLeft (NSString*)",
      "contents": "GLKTextureLoaderOriginBottomLeft"
    },
    {
      "trigger": "GLKTextureTarget2D (3553)",
      "contents": "GLKTextureTarget2D"
    },
    {
      "trigger": "GLKTextureTargetCt (2)",
      "contents": "GLKTextureTargetCt"
    },
    {
      "trigger": "GLKTextureTargetCubeMap (34067)",
      "contents": "GLKTextureTargetCubeMap"
    },
    {
      "trigger": "GLKVector2Add",
      "contents": "GLKVector2Add(${1:GLKVector2 vectorLeft}, ${2:GLKVector2 vectorRight})"
    },
    {
      "trigger": "GLKVector2AddScalar",
      "contents": "GLKVector2AddScalar(${1:GLKVector2 vector}, ${2:float value})"
    },
    {
      "trigger": "GLKVector2AllEqualToScalar",
      "contents": "GLKVector2AllEqualToScalar(${1:GLKVector2 vector}, ${2:float value})"
    },
    {
      "trigger": "GLKVector2AllEqualToVector2",
      "contents": "GLKVector2AllEqualToVector2(${1:GLKVector2 vectorLeft}, ${2:GLKVector2 vectorRight})"
    },
    {
      "trigger": "GLKVector2AllGreaterThanOrEqualToScalar",
      "contents": "GLKVector2AllGreaterThanOrEqualToScalar(${1:GLKVector2 vector}, ${2:float value})"
    },
    {
      "trigger": "GLKVector2AllGreaterThanOrEqualToVector2",
      "contents": "GLKVector2AllGreaterThanOrEqualToVector2(${1:GLKVector2 vectorLeft}, ${2:GLKVector2 vectorRight})"
    },
    {
      "trigger": "GLKVector2AllGreaterThanScalar",
      "contents": "GLKVector2AllGreaterThanScalar(${1:GLKVector2 vector}, ${2:float value})"
    },
    {
      "trigger": "GLKVector2AllGreaterThanVector2",
      "contents": "GLKVector2AllGreaterThanVector2(${1:GLKVector2 vectorLeft}, ${2:GLKVector2 vectorRight})"
    },
    {
      "trigger": "GLKVector2Distance",
      "contents": "GLKVector2Distance(${1:GLKVector2 vectorStart}, ${2:GLKVector2 vectorEnd})"
    },
    {
      "trigger": "GLKVector2Divide",
      "contents": "GLKVector2Divide(${1:GLKVector2 vectorLeft}, ${2:GLKVector2 vectorRight})"
    },
    {
      "trigger": "GLKVector2DivideScalar",
      "contents": "GLKVector2DivideScalar(${1:GLKVector2 vector}, ${2:float value})"
    },
    {
      "trigger": "GLKVector2DotProduct",
      "contents": "GLKVector2DotProduct(${1:GLKVector2 vectorLeft}, ${2:GLKVector2 vectorRight})"
    },
    {
      "trigger": "GLKVector2Length",
      "contents": "GLKVector2Length(${1:GLKVector2 vector})"
    },
    {
      "trigger": "GLKVector2Lerp",
      "contents": "GLKVector2Lerp(${1:GLKVector2 vectorStart}, ${2:GLKVector2 vectorEnd}, ${3:float t})"
    },
    {
      "trigger": "GLKVector2Make",
      "contents": "GLKVector2Make(${1:float x}, ${2:float y})"
    },
    {
      "trigger": "GLKVector2MakeWithArray",
      "contents": "GLKVector2MakeWithArray(${1:float* values})"
    },
    {
      "trigger": "GLKVector2Maximum",
      "contents": "GLKVector2Maximum(${1:GLKVector2 vectorLeft}, ${2:GLKVector2 vectorRight})"
    },
    {
      "trigger": "GLKVector2Minimum",
      "contents": "GLKVector2Minimum(${1:GLKVector2 vectorLeft}, ${2:GLKVector2 vectorRight})"
    },
    {
      "trigger": "GLKVector2Multiply",
      "contents": "GLKVector2Multiply(${1:GLKVector2 vectorLeft}, ${2:GLKVector2 vectorRight})"
    },
    {
      "trigger": "GLKVector2MultiplyScalar",
      "contents": "GLKVector2MultiplyScalar(${1:GLKVector2 vector}, ${2:float value})"
    },
    {
      "trigger": "GLKVector2Negate",
      "contents": "GLKVector2Negate(${1:GLKVector2 vector})"
    },
    {
      "trigger": "GLKVector2Normalize",
      "contents": "GLKVector2Normalize(${1:GLKVector2 vector})"
    },
    {
      "trigger": "GLKVector2Project",
      "contents": "GLKVector2Project(${1:GLKVector2 vectorToProject}, ${2:GLKVector2 projectionVector})"
    },
    {
      "trigger": "GLKVector2Subtract",
      "contents": "GLKVector2Subtract(${1:GLKVector2 vectorLeft}, ${2:GLKVector2 vectorRight})"
    },
    {
      "trigger": "GLKVector2SubtractScalar",
      "contents": "GLKVector2SubtractScalar(${1:GLKVector2 vector}, ${2:float value})"
    },
    {
      "trigger": "GLKVector3Add",
      "contents": "GLKVector3Add(${1:GLKVector3 vectorLeft}, ${2:GLKVector3 vectorRight})"
    },
    {
      "trigger": "GLKVector3AddScalar",
      "contents": "GLKVector3AddScalar(${1:GLKVector3 vector}, ${2:float value})"
    },
    {
      "trigger": "GLKVector3AllEqualToScalar",
      "contents": "GLKVector3AllEqualToScalar(${1:GLKVector3 vector}, ${2:float value})"
    },
    {
      "trigger": "GLKVector3AllEqualToVector3",
      "contents": "GLKVector3AllEqualToVector3(${1:GLKVector3 vectorLeft}, ${2:GLKVector3 vectorRight})"
    },
    {
      "trigger": "GLKVector3AllGreaterThanOrEqualToScalar",
      "contents": "GLKVector3AllGreaterThanOrEqualToScalar(${1:GLKVector3 vector}, ${2:float value})"
    },
    {
      "trigger": "GLKVector3AllGreaterThanOrEqualToVector3",
      "contents": "GLKVector3AllGreaterThanOrEqualToVector3(${1:GLKVector3 vectorLeft}, ${2:GLKVector3 vectorRight})"
    },
    {
      "trigger": "GLKVector3AllGreaterThanScalar",
      "contents": "GLKVector3AllGreaterThanScalar(${1:GLKVector3 vector}, ${2:float value})"
    },
    {
      "trigger": "GLKVector3AllGreaterThanVector3",
      "contents": "GLKVector3AllGreaterThanVector3(${1:GLKVector3 vectorLeft}, ${2:GLKVector3 vectorRight})"
    },
    {
      "trigger": "GLKVector3CrossProduct",
      "contents": "GLKVector3CrossProduct(${1:GLKVector3 vectorLeft}, ${2:GLKVector3 vectorRight})"
    },
    {
      "trigger": "GLKVector3Distance",
      "contents": "GLKVector3Distance(${1:GLKVector3 vectorStart}, ${2:GLKVector3 vectorEnd})"
    },
    {
      "trigger": "GLKVector3Divide",
      "contents": "GLKVector3Divide(${1:GLKVector3 vectorLeft}, ${2:GLKVector3 vectorRight})"
    },
    {
      "trigger": "GLKVector3DivideScalar",
      "contents": "GLKVector3DivideScalar(${1:GLKVector3 vector}, ${2:float value})"
    },
    {
      "trigger": "GLKVector3DotProduct",
      "contents": "GLKVector3DotProduct(${1:GLKVector3 vectorLeft}, ${2:GLKVector3 vectorRight})"
    },
    {
      "trigger": "GLKVector3Length",
      "contents": "GLKVector3Length(${1:GLKVector3 vector})"
    },
    {
      "trigger": "GLKVector3Lerp",
      "contents": "GLKVector3Lerp(${1:GLKVector3 vectorStart}, ${2:GLKVector3 vectorEnd}, ${3:float t})"
    },
    {
      "trigger": "GLKVector3Make",
      "contents": "GLKVector3Make(${1:float x}, ${2:float y}, ${3:float z})"
    },
    {
      "trigger": "GLKVector3MakeWithArray",
      "contents": "GLKVector3MakeWithArray(${1:float* values})"
    },
    {
      "trigger": "GLKVector3Maximum",
      "contents": "GLKVector3Maximum(${1:GLKVector3 vectorLeft}, ${2:GLKVector3 vectorRight})"
    },
    {
      "trigger": "GLKVector3Minimum",
      "contents": "GLKVector3Minimum(${1:GLKVector3 vectorLeft}, ${2:GLKVector3 vectorRight})"
    },
    {
      "trigger": "GLKVector3Multiply",
      "contents": "GLKVector3Multiply(${1:GLKVector3 vectorLeft}, ${2:GLKVector3 vectorRight})"
    },
    {
      "trigger": "GLKVector3MultiplyScalar",
      "contents": "GLKVector3MultiplyScalar(${1:GLKVector3 vector}, ${2:float value})"
    },
    {
      "trigger": "GLKVector3Negate",
      "contents": "GLKVector3Negate(${1:GLKVector3 vector})"
    },
    {
      "trigger": "GLKVector3Normalize",
      "contents": "GLKVector3Normalize(${1:GLKVector3 vector})"
    },
    {
      "trigger": "GLKVector3Project",
      "contents": "GLKVector3Project(${1:GLKVector3 vectorToProject}, ${2:GLKVector3 projectionVector})"
    },
    {
      "trigger": "GLKVector3Subtract",
      "contents": "GLKVector3Subtract(${1:GLKVector3 vectorLeft}, ${2:GLKVector3 vectorRight})"
    },
    {
      "trigger": "GLKVector3SubtractScalar",
      "contents": "GLKVector3SubtractScalar(${1:GLKVector3 vector}, ${2:float value})"
    },
    {
      "trigger": "GLKVector4Add",
      "contents": "GLKVector4Add(${1:GLKVector4 vectorLeft}, ${2:GLKVector4 vectorRight})"
    },
    {
      "trigger": "GLKVector4AddScalar",
      "contents": "GLKVector4AddScalar(${1:GLKVector4 vector}, ${2:float value})"
    },
    {
      "trigger": "GLKVector4AllEqualToScalar",
      "contents": "GLKVector4AllEqualToScalar(${1:GLKVector4 vector}, ${2:float value})"
    },
    {
      "trigger": "GLKVector4AllEqualToVector4",
      "contents": "GLKVector4AllEqualToVector4(${1:GLKVector4 vectorLeft}, ${2:GLKVector4 vectorRight})"
    },
    {
      "trigger": "GLKVector4AllGreaterThanOrEqualToScalar",
      "contents": "GLKVector4AllGreaterThanOrEqualToScalar(${1:GLKVector4 vector}, ${2:float value})"
    },
    {
      "trigger": "GLKVector4AllGreaterThanOrEqualToVector4",
      "contents": "GLKVector4AllGreaterThanOrEqualToVector4(${1:GLKVector4 vectorLeft}, ${2:GLKVector4 vectorRight})"
    },
    {
      "trigger": "GLKVector4AllGreaterThanScalar",
      "contents": "GLKVector4AllGreaterThanScalar(${1:GLKVector4 vector}, ${2:float value})"
    },
    {
      "trigger": "GLKVector4AllGreaterThanVector4",
      "contents": "GLKVector4AllGreaterThanVector4(${1:GLKVector4 vectorLeft}, ${2:GLKVector4 vectorRight})"
    },
    {
      "trigger": "GLKVector4CrossProduct",
      "contents": "GLKVector4CrossProduct(${1:GLKVector4 vectorLeft}, ${2:GLKVector4 vectorRight})"
    },
    {
      "trigger": "GLKVector4Distance",
      "contents": "GLKVector4Distance(${1:GLKVector4 vectorStart}, ${2:GLKVector4 vectorEnd})"
    },
    {
      "trigger": "GLKVector4Divide",
      "contents": "GLKVector4Divide(${1:GLKVector4 vectorLeft}, ${2:GLKVector4 vectorRight})"
    },
    {
      "trigger": "GLKVector4DivideScalar",
      "contents": "GLKVector4DivideScalar(${1:GLKVector4 vector}, ${2:float value})"
    },
    {
      "trigger": "GLKVector4DotProduct",
      "contents": "GLKVector4DotProduct(${1:GLKVector4 vectorLeft}, ${2:GLKVector4 vectorRight})"
    },
    {
      "trigger": "GLKVector4Length",
      "contents": "GLKVector4Length(${1:GLKVector4 vector})"
    },
    {
      "trigger": "GLKVector4Lerp",
      "contents": "GLKVector4Lerp(${1:GLKVector4 vectorStart}, ${2:GLKVector4 vectorEnd}, ${3:float t})"
    },
    {
      "trigger": "GLKVector4Make",
      "contents": "GLKVector4Make(${1:float x}, ${2:float y}, ${3:float z}, ${4:float w})"
    },
    {
      "trigger": "GLKVector4MakeWithArray",
      "contents": "GLKVector4MakeWithArray(${1:float* values})"
    },
    {
      "trigger": "GLKVector4MakeWithVector3",
      "contents": "GLKVector4MakeWithVector3(${1:GLKVector3 vector}, ${2:float w})"
    },
    {
      "trigger": "GLKVector4Maximum",
      "contents": "GLKVector4Maximum(${1:GLKVector4 vectorLeft}, ${2:GLKVector4 vectorRight})"
    },
    {
      "trigger": "GLKVector4Minimum",
      "contents": "GLKVector4Minimum(${1:GLKVector4 vectorLeft}, ${2:GLKVector4 vectorRight})"
    },
    {
      "trigger": "GLKVector4Multiply",
      "contents": "GLKVector4Multiply(${1:GLKVector4 vectorLeft}, ${2:GLKVector4 vectorRight})"
    },
    {
      "trigger": "GLKVector4MultiplyScalar",
      "contents": "GLKVector4MultiplyScalar(${1:GLKVector4 vector}, ${2:float value})"
    },
    {
      "trigger": "GLKVector4Negate",
      "contents": "GLKVector4Negate(${1:GLKVector4 vector})"
    },
    {
      "trigger": "GLKVector4Normalize",
      "contents": "GLKVector4Normalize(${1:GLKVector4 vector})"
    },
    {
      "trigger": "GLKVector4Project",
      "contents": "GLKVector4Project(${1:GLKVector4 vectorToProject}, ${2:GLKVector4 projectionVector})"
    },
    {
      "trigger": "GLKVector4Subtract",
      "contents": "GLKVector4Subtract(${1:GLKVector4 vectorLeft}, ${2:GLKVector4 vectorRight})"
    },
    {
      "trigger": "GLKVector4SubtractScalar",
      "contents": "GLKVector4SubtractScalar(${1:GLKVector4 vector}, ${2:float value})"
    },
    {
      "trigger": "GLKVertexAttribColor (2)",
      "contents": "GLKVertexAttribColor"
    },
    {
      "trigger": "GLKVertexAttribNormal (1)",
      "contents": "GLKVertexAttribNormal"
    },
    {
      "trigger": "GLKVertexAttribPosition (0)",
      "contents": "GLKVertexAttribPosition"
    },
    {
      "trigger": "GLKVertexAttribTexCoord0 (3)",
      "contents": "GLKVertexAttribTexCoord0"
    },
    {
      "trigger": "GLKVertexAttribTexCoord1 (4)",
      "contents": "GLKVertexAttribTexCoord1"
    },
    {
      "trigger": "GLKViewDrawableColorFormatRGB565 (1)",
      "contents": "GLKViewDrawableColorFormatRGB565"
    },
    {
      "trigger": "GLKViewDrawableColorFormatRGBA8888 (0)",
      "contents": "GLKViewDrawableColorFormatRGBA8888"
    },
    {
      "trigger": "GLKViewDrawableDepthFormat16 (1)",
      "contents": "GLKViewDrawableDepthFormat16"
    },
    {
      "trigger": "GLKViewDrawableDepthFormat24 (2)",
      "contents": "GLKViewDrawableDepthFormat24"
    },
    {
      "trigger": "GLKViewDrawableDepthFormatNone (0)",
      "contents": "GLKViewDrawableDepthFormatNone"
    },
    {
      "trigger": "GLKViewDrawableMultisample4X (1)",
      "contents": "GLKViewDrawableMultisample4X"
    },
    {
      "trigger": "GLKViewDrawableMultisampleNone (0)",
      "contents": "GLKViewDrawableMultisampleNone"
    },
    {
      "trigger": "GLKViewDrawableStencilFormat8 (1)",
      "contents": "GLKViewDrawableStencilFormat8"
    },
    {
      "trigger": "GLKViewDrawableStencilFormatNone (0)",
      "contents": "GLKViewDrawableStencilFormatNone"
    },
    {
      "trigger": "GL_ACTIVE_ATTRIBUTES (35721)",
      "contents": "GL_ACTIVE_ATTRIBUTES"
    },
    {
      "trigger": "GL_ACTIVE_ATTRIBUTE_MAX_LENGTH (35722)",
      "contents": "GL_ACTIVE_ATTRIBUTE_MAX_LENGTH"
    },
    {
      "trigger": "GL_ACTIVE_PROGRAM_EXT (33369)",
      "contents": "GL_ACTIVE_PROGRAM_EXT"
    },
    {
      "trigger": "GL_ACTIVE_TEXTURE (34016)",
      "contents": "GL_ACTIVE_TEXTURE"
    },
    {
      "trigger": "GL_ACTIVE_UNIFORMS (35718)",
      "contents": "GL_ACTIVE_UNIFORMS"
    },
    {
      "trigger": "GL_ACTIVE_UNIFORM_MAX_LENGTH (35719)",
      "contents": "GL_ACTIVE_UNIFORM_MAX_LENGTH"
    },
    {
      "trigger": "GL_ADD (260)",
      "contents": "GL_ADD"
    },
    {
      "trigger": "GL_ADD_SIGNED (34164)",
      "contents": "GL_ADD_SIGNED"
    },
    {
      "trigger": "GL_ALIASED_LINE_WIDTH_RANGE (33902)",
      "contents": "GL_ALIASED_LINE_WIDTH_RANGE"
    },
    {
      "trigger": "GL_ALIASED_POINT_SIZE_RANGE (33901)",
      "contents": "GL_ALIASED_POINT_SIZE_RANGE"
    },
    {
      "trigger": "GL_ALL_SHADER_BITS_EXT (4294967295)",
      "contents": "GL_ALL_SHADER_BITS_EXT"
    },
    {
      "trigger": "GL_ALPHA (6406)",
      "contents": "GL_ALPHA"
    },
    {
      "trigger": "GL_ALPHA_BITS (3413)",
      "contents": "GL_ALPHA_BITS"
    },
    {
      "trigger": "GL_ALPHA_SCALE (3356)",
      "contents": "GL_ALPHA_SCALE"
    },
    {
      "trigger": "GL_ALPHA_TEST (3008)",
      "contents": "GL_ALPHA_TEST"
    },
    {
      "trigger": "GL_ALPHA_TEST_FUNC (3009)",
      "contents": "GL_ALPHA_TEST_FUNC"
    },
    {
      "trigger": "GL_ALPHA_TEST_REF (3010)",
      "contents": "GL_ALPHA_TEST_REF"
    },
    {
      "trigger": "GL_ALWAYS (519)",
      "contents": "GL_ALWAYS"
    },
    {
      "trigger": "GL_AMBIENT (4608)",
      "contents": "GL_AMBIENT"
    },
    {
      "trigger": "GL_AMBIENT_AND_DIFFUSE (5634)",
      "contents": "GL_AMBIENT_AND_DIFFUSE"
    },
    {
      "trigger": "GL_AND (5377)",
      "contents": "GL_AND"
    },
    {
      "trigger": "GL_AND_INVERTED (5380)",
      "contents": "GL_AND_INVERTED"
    },
    {
      "trigger": "GL_AND_REVERSE (5378)",
      "contents": "GL_AND_REVERSE"
    },
    {
      "trigger": "GL_ANY_SAMPLES_PASSED_CONSERVATIVE_EXT (36202)",
      "contents": "GL_ANY_SAMPLES_PASSED_CONSERVATIVE_EXT"
    },
    {
      "trigger": "GL_ANY_SAMPLES_PASSED_EXT (35887)",
      "contents": "GL_ANY_SAMPLES_PASSED_EXT"
    },
    {
      "trigger": "GL_APPLE_framebuffer_multisample (1)",
      "contents": "GL_APPLE_framebuffer_multisample"
    },
    {
      "trigger": "GL_APPLE_rgb_422 (1)",
      "contents": "GL_APPLE_rgb_422"
    },
    {
      "trigger": "GL_APPLE_texture_2D_limited_npot (1)",
      "contents": "GL_APPLE_texture_2D_limited_npot"
    },
    {
      "trigger": "GL_APPLE_texture_format_BGRA8888 (1)",
      "contents": "GL_APPLE_texture_format_BGRA8888"
    },
    {
      "trigger": "GL_APPLE_texture_max_level (1)",
      "contents": "GL_APPLE_texture_max_level"
    },
    {
      "trigger": "GL_ARRAY_BUFFER (34962)",
      "contents": "GL_ARRAY_BUFFER"
    },
    {
      "trigger": "GL_ARRAY_BUFFER_BINDING (34964)",
      "contents": "GL_ARRAY_BUFFER_BINDING"
    },
    {
      "trigger": "GL_ATTACHED_SHADERS (35717)",
      "contents": "GL_ATTACHED_SHADERS"
    },
    {
      "trigger": "GL_BACK (1029)",
      "contents": "GL_BACK"
    },
    {
      "trigger": "GL_BGRA (32993)",
      "contents": "GL_BGRA"
    },
    {
      "trigger": "GL_BGRA_EXT (32993)",
      "contents": "GL_BGRA_EXT"
    },
    {
      "trigger": "GL_BGRA_IMG (32993)",
      "contents": "GL_BGRA_IMG"
    },
    {
      "trigger": "GL_BLEND (3042)",
      "contents": "GL_BLEND"
    },
    {
      "trigger": "GL_BLEND_COLOR (32773)",
      "contents": "GL_BLEND_COLOR"
    },
    {
      "trigger": "GL_BLEND_DST (3040)",
      "contents": "GL_BLEND_DST"
    },
    {
      "trigger": "GL_BLEND_DST_ALPHA (32970)",
      "contents": "GL_BLEND_DST_ALPHA"
    },
    {
      "trigger": "GL_BLEND_DST_ALPHA_OES (32970)",
      "contents": "GL_BLEND_DST_ALPHA_OES"
    },
    {
      "trigger": "GL_BLEND_DST_RGB (32968)",
      "contents": "GL_BLEND_DST_RGB"
    },
    {
      "trigger": "GL_BLEND_DST_RGB_OES (32968)",
      "contents": "GL_BLEND_DST_RGB_OES"
    },
    {
      "trigger": "GL_BLEND_EQUATION (32777)",
      "contents": "GL_BLEND_EQUATION"
    },
    {
      "trigger": "GL_BLEND_EQUATION_ALPHA (34877)",
      "contents": "GL_BLEND_EQUATION_ALPHA"
    },
    {
      "trigger": "GL_BLEND_EQUATION_ALPHA_OES (34877)",
      "contents": "GL_BLEND_EQUATION_ALPHA_OES"
    },
    {
      "trigger": "GL_BLEND_EQUATION_OES (32777)",
      "contents": "GL_BLEND_EQUATION_OES"
    },
    {
      "trigger": "GL_BLEND_EQUATION_RGB (32777)",
      "contents": "GL_BLEND_EQUATION_RGB"
    },
    {
      "trigger": "GL_BLEND_EQUATION_RGB_OES (32777)",
      "contents": "GL_BLEND_EQUATION_RGB_OES"
    },
    {
      "trigger": "GL_BLEND_SRC (3041)",
      "contents": "GL_BLEND_SRC"
    },
    {
      "trigger": "GL_BLEND_SRC_ALPHA (32971)",
      "contents": "GL_BLEND_SRC_ALPHA"
    },
    {
      "trigger": "GL_BLEND_SRC_ALPHA_OES (32971)",
      "contents": "GL_BLEND_SRC_ALPHA_OES"
    },
    {
      "trigger": "GL_BLEND_SRC_RGB (32969)",
      "contents": "GL_BLEND_SRC_RGB"
    },
    {
      "trigger": "GL_BLEND_SRC_RGB_OES (32969)",
      "contents": "GL_BLEND_SRC_RGB_OES"
    },
    {
      "trigger": "GL_BLUE_BITS (3412)",
      "contents": "GL_BLUE_BITS"
    },
    {
      "trigger": "GL_BOOL (35670)",
      "contents": "GL_BOOL"
    },
    {
      "trigger": "GL_BOOL_VEC2 (35671)",
      "contents": "GL_BOOL_VEC2"
    },
    {
      "trigger": "GL_BOOL_VEC3 (35672)",
      "contents": "GL_BOOL_VEC3"
    },
    {
      "trigger": "GL_BOOL_VEC4 (35673)",
      "contents": "GL_BOOL_VEC4"
    },
    {
      "trigger": "GL_BUFFER_ACCESS_OES (35003)",
      "contents": "GL_BUFFER_ACCESS_OES"
    },
    {
      "trigger": "GL_BUFFER_MAPPED_OES (35004)",
      "contents": "GL_BUFFER_MAPPED_OES"
    },
    {
      "trigger": "GL_BUFFER_MAP_POINTER_OES (35005)",
      "contents": "GL_BUFFER_MAP_POINTER_OES"
    },
    {
      "trigger": "GL_BUFFER_OBJECT_EXT (37201)",
      "contents": "GL_BUFFER_OBJECT_EXT"
    },
    {
      "trigger": "GL_BUFFER_SIZE (34660)",
      "contents": "GL_BUFFER_SIZE"
    },
    {
      "trigger": "GL_BUFFER_USAGE (34661)",
      "contents": "GL_BUFFER_USAGE"
    },
    {
      "trigger": "GL_BYTE (5120)",
      "contents": "GL_BYTE"
    },
    {
      "trigger": "GL_CCW (2305)",
      "contents": "GL_CCW"
    },
    {
      "trigger": "GL_CLAMP_TO_EDGE (33071)",
      "contents": "GL_CLAMP_TO_EDGE"
    },
    {
      "trigger": "GL_CLEAR (5376)",
      "contents": "GL_CLEAR"
    },
    {
      "trigger": "GL_CLIENT_ACTIVE_TEXTURE (34017)",
      "contents": "GL_CLIENT_ACTIVE_TEXTURE"
    },
    {
      "trigger": "GL_CLIP_PLANE0 (12288)",
      "contents": "GL_CLIP_PLANE0"
    },
    {
      "trigger": "GL_CLIP_PLANE1 (12289)",
      "contents": "GL_CLIP_PLANE1"
    },
    {
      "trigger": "GL_CLIP_PLANE2 (12290)",
      "contents": "GL_CLIP_PLANE2"
    },
    {
      "trigger": "GL_CLIP_PLANE3 (12291)",
      "contents": "GL_CLIP_PLANE3"
    },
    {
      "trigger": "GL_CLIP_PLANE4 (12292)",
      "contents": "GL_CLIP_PLANE4"
    },
    {
      "trigger": "GL_CLIP_PLANE5 (12293)",
      "contents": "GL_CLIP_PLANE5"
    },
    {
      "trigger": "GL_COLOR_ARRAY (32886)",
      "contents": "GL_COLOR_ARRAY"
    },
    {
      "trigger": "GL_COLOR_ARRAY_BUFFER_BINDING (34968)",
      "contents": "GL_COLOR_ARRAY_BUFFER_BINDING"
    },
    {
      "trigger": "GL_COLOR_ARRAY_POINTER (32912)",
      "contents": "GL_COLOR_ARRAY_POINTER"
    },
    {
      "trigger": "GL_COLOR_ARRAY_SIZE (32897)",
      "contents": "GL_COLOR_ARRAY_SIZE"
    },
    {
      "trigger": "GL_COLOR_ARRAY_STRIDE (32899)",
      "contents": "GL_COLOR_ARRAY_STRIDE"
    },
    {
      "trigger": "GL_COLOR_ARRAY_TYPE (32898)",
      "contents": "GL_COLOR_ARRAY_TYPE"
    },
    {
      "trigger": "GL_COLOR_ATTACHMENT0 (36064)",
      "contents": "GL_COLOR_ATTACHMENT0"
    },
    {
      "trigger": "GL_COLOR_ATTACHMENT0_OES (36064)",
      "contents": "GL_COLOR_ATTACHMENT0_OES"
    },
    {
      "trigger": "GL_COLOR_BUFFER_BIT (16384)",
      "contents": "GL_COLOR_BUFFER_BIT"
    },
    {
      "trigger": "GL_COLOR_CLEAR_VALUE (3106)",
      "contents": "GL_COLOR_CLEAR_VALUE"
    },
    {
      "trigger": "GL_COLOR_EXT (6144)",
      "contents": "GL_COLOR_EXT"
    },
    {
      "trigger": "GL_COLOR_LOGIC_OP (3058)",
      "contents": "GL_COLOR_LOGIC_OP"
    },
    {
      "trigger": "GL_COLOR_MATERIAL (2903)",
      "contents": "GL_COLOR_MATERIAL"
    },
    {
      "trigger": "GL_COLOR_WRITEMASK (3107)",
      "contents": "GL_COLOR_WRITEMASK"
    },
    {
      "trigger": "GL_COMBINE (34160)",
      "contents": "GL_COMBINE"
    },
    {
      "trigger": "GL_COMBINE_ALPHA (34162)",
      "contents": "GL_COMBINE_ALPHA"
    },
    {
      "trigger": "GL_COMBINE_RGB (34161)",
      "contents": "GL_COMBINE_RGB"
    },
    {
      "trigger": "GL_COMPARE_REF_TO_TEXTURE_EXT (34894)",
      "contents": "GL_COMPARE_REF_TO_TEXTURE_EXT"
    },
    {
      "trigger": "GL_COMPILE_STATUS (35713)",
      "contents": "GL_COMPILE_STATUS"
    },
    {
      "trigger": "GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG (35843)",
      "contents": "GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG"
    },
    {
      "trigger": "GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG (35842)",
      "contents": "GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG"
    },
    {
      "trigger": "GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG (35841)",
      "contents": "GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG"
    },
    {
      "trigger": "GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG (35840)",
      "contents": "GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG"
    },
    {
      "trigger": "GL_COMPRESSED_TEXTURE_FORMATS (34467)",
      "contents": "GL_COMPRESSED_TEXTURE_FORMATS"
    },
    {
      "trigger": "GL_CONSTANT (34166)",
      "contents": "GL_CONSTANT"
    },
    {
      "trigger": "GL_CONSTANT_ALPHA (32771)",
      "contents": "GL_CONSTANT_ALPHA"
    },
    {
      "trigger": "GL_CONSTANT_ATTENUATION (4615)",
      "contents": "GL_CONSTANT_ATTENUATION"
    },
    {
      "trigger": "GL_CONSTANT_COLOR (32769)",
      "contents": "GL_CONSTANT_COLOR"
    },
    {
      "trigger": "GL_COORD_REPLACE_OES (34914)",
      "contents": "GL_COORD_REPLACE_OES"
    },
    {
      "trigger": "GL_COPY (5379)",
      "contents": "GL_COPY"
    },
    {
      "trigger": "GL_COPY_INVERTED (5388)",
      "contents": "GL_COPY_INVERTED"
    },
    {
      "trigger": "GL_CULL_FACE (2884)",
      "contents": "GL_CULL_FACE"
    },
    {
      "trigger": "GL_CULL_FACE_MODE (2885)",
      "contents": "GL_CULL_FACE_MODE"
    },
    {
      "trigger": "GL_CURRENT_COLOR (2816)",
      "contents": "GL_CURRENT_COLOR"
    },
    {
      "trigger": "GL_CURRENT_NORMAL (2818)",
      "contents": "GL_CURRENT_NORMAL"
    },
    {
      "trigger": "GL_CURRENT_PALETTE_MATRIX_OES (34883)",
      "contents": "GL_CURRENT_PALETTE_MATRIX_OES"
    },
    {
      "trigger": "GL_CURRENT_PROGRAM (35725)",
      "contents": "GL_CURRENT_PROGRAM"
    },
    {
      "trigger": "GL_CURRENT_QUERY_EXT (34917)",
      "contents": "GL_CURRENT_QUERY_EXT"
    },
    {
      "trigger": "GL_CURRENT_TEXTURE_COORDS (2819)",
      "contents": "GL_CURRENT_TEXTURE_COORDS"
    },
    {
      "trigger": "GL_CURRENT_VERTEX_ATTRIB (34342)",
      "contents": "GL_CURRENT_VERTEX_ATTRIB"
    },
    {
      "trigger": "GL_CW (2304)",
      "contents": "GL_CW"
    },
    {
      "trigger": "GL_DECAL (8449)",
      "contents": "GL_DECAL"
    },
    {
      "trigger": "GL_DECR (7683)",
      "contents": "GL_DECR"
    },
    {
      "trigger": "GL_DECR_WRAP (34056)",
      "contents": "GL_DECR_WRAP"
    },
    {
      "trigger": "GL_DECR_WRAP_OES (34056)",
      "contents": "GL_DECR_WRAP_OES"
    },
    {
      "trigger": "GL_DELETE_STATUS (35712)",
      "contents": "GL_DELETE_STATUS"
    },
    {
      "trigger": "GL_DEPTH24_STENCIL8_OES (35056)",
      "contents": "GL_DEPTH24_STENCIL8_OES"
    },
    {
      "trigger": "GL_DEPTH_ATTACHMENT (36096)",
      "contents": "GL_DEPTH_ATTACHMENT"
    },
    {
      "trigger": "GL_DEPTH_ATTACHMENT_OES (36096)",
      "contents": "GL_DEPTH_ATTACHMENT_OES"
    },
    {
      "trigger": "GL_DEPTH_BITS (3414)",
      "contents": "GL_DEPTH_BITS"
    },
    {
      "trigger": "GL_DEPTH_BUFFER_BIT (256)",
      "contents": "GL_DEPTH_BUFFER_BIT"
    },
    {
      "trigger": "GL_DEPTH_CLEAR_VALUE (2931)",
      "contents": "GL_DEPTH_CLEAR_VALUE"
    },
    {
      "trigger": "GL_DEPTH_COMPONENT (6402)",
      "contents": "GL_DEPTH_COMPONENT"
    },
    {
      "trigger": "GL_DEPTH_COMPONENT16 (33189)",
      "contents": "GL_DEPTH_COMPONENT16"
    },
    {
      "trigger": "GL_DEPTH_COMPONENT16_OES (33189)",
      "contents": "GL_DEPTH_COMPONENT16_OES"
    },
    {
      "trigger": "GL_DEPTH_COMPONENT24_OES (33190)",
      "contents": "GL_DEPTH_COMPONENT24_OES"
    },
    {
      "trigger": "GL_DEPTH_EXT (6145)",
      "contents": "GL_DEPTH_EXT"
    },
    {
      "trigger": "GL_DEPTH_FUNC (2932)",
      "contents": "GL_DEPTH_FUNC"
    },
    {
      "trigger": "GL_DEPTH_RANGE (2928)",
      "contents": "GL_DEPTH_RANGE"
    },
    {
      "trigger": "GL_DEPTH_STENCIL_OES (34041)",
      "contents": "GL_DEPTH_STENCIL_OES"
    },
    {
      "trigger": "GL_DEPTH_TEST (2929)",
      "contents": "GL_DEPTH_TEST"
    },
    {
      "trigger": "GL_DEPTH_WRITEMASK (2930)",
      "contents": "GL_DEPTH_WRITEMASK"
    },
    {
      "trigger": "GL_DIFFUSE (4609)",
      "contents": "GL_DIFFUSE"
    },
    {
      "trigger": "GL_DITHER (3024)",
      "contents": "GL_DITHER"
    },
    {
      "trigger": "GL_DONT_CARE (4352)",
      "contents": "GL_DONT_CARE"
    },
    {
      "trigger": "GL_DOT3_RGB (34478)",
      "contents": "GL_DOT3_RGB"
    },
    {
      "trigger": "GL_DOT3_RGBA (34479)",
      "contents": "GL_DOT3_RGBA"
    },
    {
      "trigger": "GL_DRAW_FRAMEBUFFER_APPLE (36009)",
      "contents": "GL_DRAW_FRAMEBUFFER_APPLE"
    },
    {
      "trigger": "GL_DRAW_FRAMEBUFFER_BINDING_APPLE (36006)",
      "contents": "GL_DRAW_FRAMEBUFFER_BINDING_APPLE"
    },
    {
      "trigger": "GL_DST_ALPHA (772)",
      "contents": "GL_DST_ALPHA"
    },
    {
      "trigger": "GL_DST_COLOR (774)",
      "contents": "GL_DST_COLOR"
    },
    {
      "trigger": "GL_DYNAMIC_DRAW (35048)",
      "contents": "GL_DYNAMIC_DRAW"
    },
    {
      "trigger": "GL_ELEMENT_ARRAY_BUFFER (34963)",
      "contents": "GL_ELEMENT_ARRAY_BUFFER"
    },
    {
      "trigger": "GL_ELEMENT_ARRAY_BUFFER_BINDING (34965)",
      "contents": "GL_ELEMENT_ARRAY_BUFFER_BINDING"
    },
    {
      "trigger": "GL_EMISSION (5632)",
      "contents": "GL_EMISSION"
    },
    {
      "trigger": "GL_EQUAL (514)",
      "contents": "GL_EQUAL"
    },
    {
      "trigger": "GL_EQUIV (5385)",
      "contents": "GL_EQUIV"
    },
    {
      "trigger": "GL_ES_VERSION_2_0 (1)",
      "contents": "GL_ES_VERSION_2_0"
    },
    {
      "trigger": "GL_EXP (2048)",
      "contents": "GL_EXP"
    },
    {
      "trigger": "GL_EXP2 (2049)",
      "contents": "GL_EXP2"
    },
    {
      "trigger": "GL_EXTENSIONS (7939)",
      "contents": "GL_EXTENSIONS"
    },
    {
      "trigger": "GL_EXT_blend_minmax (1)",
      "contents": "GL_EXT_blend_minmax"
    },
    {
      "trigger": "GL_EXT_color_buffer_half_float (1)",
      "contents": "GL_EXT_color_buffer_half_float"
    },
    {
      "trigger": "GL_EXT_debug_label (1)",
      "contents": "GL_EXT_debug_label"
    },
    {
      "trigger": "GL_EXT_debug_marker (1)",
      "contents": "GL_EXT_debug_marker"
    },
    {
      "trigger": "GL_EXT_discard_framebuffer (1)",
      "contents": "GL_EXT_discard_framebuffer"
    },
    {
      "trigger": "GL_EXT_occlusion_query_boolean (1)",
      "contents": "GL_EXT_occlusion_query_boolean"
    },
    {
      "trigger": "GL_EXT_read_format_bgra (1)",
      "contents": "GL_EXT_read_format_bgra"
    },
    {
      "trigger": "GL_EXT_separate_shader_objects (1)",
      "contents": "GL_EXT_separate_shader_objects"
    },
    {
      "trigger": "GL_EXT_shader_texture_lod (1)",
      "contents": "GL_EXT_shader_texture_lod"
    },
    {
      "trigger": "GL_EXT_shadow_samplers (1)",
      "contents": "GL_EXT_shadow_samplers"
    },
    {
      "trigger": "GL_EXT_texture_filter_anisotropic (1)",
      "contents": "GL_EXT_texture_filter_anisotropic"
    },
    {
      "trigger": "GL_EXT_texture_lod_bias (1)",
      "contents": "GL_EXT_texture_lod_bias"
    },
    {
      "trigger": "GL_EXT_texture_rg (1)",
      "contents": "GL_EXT_texture_rg"
    },
    {
      "trigger": "GL_FALSE (0)",
      "contents": "GL_FALSE"
    },
    {
      "trigger": "GL_FASTEST (4353)",
      "contents": "GL_FASTEST"
    },
    {
      "trigger": "GL_FIXED (5132)",
      "contents": "GL_FIXED"
    },
    {
      "trigger": "GL_FLAT (7424)",
      "contents": "GL_FLAT"
    },
    {
      "trigger": "GL_FLOAT (5126)",
      "contents": "GL_FLOAT"
    },
    {
      "trigger": "GL_FLOAT_MAT2 (35674)",
      "contents": "GL_FLOAT_MAT2"
    },
    {
      "trigger": "GL_FLOAT_MAT3 (35675)",
      "contents": "GL_FLOAT_MAT3"
    },
    {
      "trigger": "GL_FLOAT_MAT4 (35676)",
      "contents": "GL_FLOAT_MAT4"
    },
    {
      "trigger": "GL_FLOAT_VEC2 (35664)",
      "contents": "GL_FLOAT_VEC2"
    },
    {
      "trigger": "GL_FLOAT_VEC3 (35665)",
      "contents": "GL_FLOAT_VEC3"
    },
    {
      "trigger": "GL_FLOAT_VEC4 (35666)",
      "contents": "GL_FLOAT_VEC4"
    },
    {
      "trigger": "GL_FOG (2912)",
      "contents": "GL_FOG"
    },
    {
      "trigger": "GL_FOG_COLOR (2918)",
      "contents": "GL_FOG_COLOR"
    },
    {
      "trigger": "GL_FOG_DENSITY (2914)",
      "contents": "GL_FOG_DENSITY"
    },
    {
      "trigger": "GL_FOG_END (2916)",
      "contents": "GL_FOG_END"
    },
    {
      "trigger": "GL_FOG_HINT (3156)",
      "contents": "GL_FOG_HINT"
    },
    {
      "trigger": "GL_FOG_MODE (2917)",
      "contents": "GL_FOG_MODE"
    },
    {
      "trigger": "GL_FOG_START (2915)",
      "contents": "GL_FOG_START"
    },
    {
      "trigger": "GL_FRAGMENT_SHADER (35632)",
      "contents": "GL_FRAGMENT_SHADER"
    },
    {
      "trigger": "GL_FRAGMENT_SHADER_BIT_EXT (2)",
      "contents": "GL_FRAGMENT_SHADER_BIT_EXT"
    },
    {
      "trigger": "GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES (35723)",
      "contents": "GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES"
    },
    {
      "trigger": "GL_FRAMEBUFFER (36160)",
      "contents": "GL_FRAMEBUFFER"
    },
    {
      "trigger": "GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT (33297)",
      "contents": "GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT"
    },
    {
      "trigger": "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME (36049)",
      "contents": "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME"
    },
    {
      "trigger": "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES (36049)",
      "contents": "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES"
    },
    {
      "trigger": "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE (36048)",
      "contents": "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE"
    },
    {
      "trigger": "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES (36048)",
      "contents": "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES"
    },
    {
      "trigger": "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE (36051)",
      "contents": "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE"
    },
    {
      "trigger": "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES (36051)",
      "contents": "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES"
    },
    {
      "trigger": "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL (36050)",
      "contents": "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL"
    },
    {
      "trigger": "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES (36050)",
      "contents": "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES"
    },
    {
      "trigger": "GL_FRAMEBUFFER_BINDING (36006)",
      "contents": "GL_FRAMEBUFFER_BINDING"
    },
    {
      "trigger": "GL_FRAMEBUFFER_BINDING_OES (36006)",
      "contents": "GL_FRAMEBUFFER_BINDING_OES"
    },
    {
      "trigger": "GL_FRAMEBUFFER_COMPLETE (36053)",
      "contents": "GL_FRAMEBUFFER_COMPLETE"
    },
    {
      "trigger": "GL_FRAMEBUFFER_COMPLETE_OES (36053)",
      "contents": "GL_FRAMEBUFFER_COMPLETE_OES"
    },
    {
      "trigger": "GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT (36054)",
      "contents": "GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT"
    },
    {
      "trigger": "GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES (36054)",
      "contents": "GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES"
    },
    {
      "trigger": "GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS (36057)",
      "contents": "GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS"
    },
    {
      "trigger": "GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES (36057)",
      "contents": "GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES"
    },
    {
      "trigger": "GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES (36058)",
      "contents": "GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES"
    },
    {
      "trigger": "GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT (36055)",
      "contents": "GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT"
    },
    {
      "trigger": "GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES (36055)",
      "contents": "GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES"
    },
    {
      "trigger": "GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE (36182)",
      "contents": "GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE"
    },
    {
      "trigger": "GL_FRAMEBUFFER_OES (36160)",
      "contents": "GL_FRAMEBUFFER_OES"
    },
    {
      "trigger": "GL_FRAMEBUFFER_UNSUPPORTED (36061)",
      "contents": "GL_FRAMEBUFFER_UNSUPPORTED"
    },
    {
      "trigger": "GL_FRAMEBUFFER_UNSUPPORTED_OES (36061)",
      "contents": "GL_FRAMEBUFFER_UNSUPPORTED_OES"
    },
    {
      "trigger": "GL_FRONT (1028)",
      "contents": "GL_FRONT"
    },
    {
      "trigger": "GL_FRONT_AND_BACK (1032)",
      "contents": "GL_FRONT_AND_BACK"
    },
    {
      "trigger": "GL_FRONT_FACE (2886)",
      "contents": "GL_FRONT_FACE"
    },
    {
      "trigger": "GL_FUNC_ADD (32774)",
      "contents": "GL_FUNC_ADD"
    },
    {
      "trigger": "GL_FUNC_ADD_OES (32774)",
      "contents": "GL_FUNC_ADD_OES"
    },
    {
      "trigger": "GL_FUNC_REVERSE_SUBTRACT (32779)",
      "contents": "GL_FUNC_REVERSE_SUBTRACT"
    },
    {
      "trigger": "GL_FUNC_REVERSE_SUBTRACT_OES (32779)",
      "contents": "GL_FUNC_REVERSE_SUBTRACT_OES"
    },
    {
      "trigger": "GL_FUNC_SUBTRACT (32778)",
      "contents": "GL_FUNC_SUBTRACT"
    },
    {
      "trigger": "GL_FUNC_SUBTRACT_OES (32778)",
      "contents": "GL_FUNC_SUBTRACT_OES"
    },
    {
      "trigger": "GL_GENERATE_MIPMAP (33169)",
      "contents": "GL_GENERATE_MIPMAP"
    },
    {
      "trigger": "GL_GENERATE_MIPMAP_HINT (33170)",
      "contents": "GL_GENERATE_MIPMAP_HINT"
    },
    {
      "trigger": "GL_GEQUAL (518)",
      "contents": "GL_GEQUAL"
    },
    {
      "trigger": "GL_GREATER (516)",
      "contents": "GL_GREATER"
    },
    {
      "trigger": "GL_GREEN_BITS (3411)",
      "contents": "GL_GREEN_BITS"
    },
    {
      "trigger": "GL_HALF_FLOAT_OES (36193)",
      "contents": "GL_HALF_FLOAT_OES"
    },
    {
      "trigger": "GL_HIGH_FLOAT (36338)",
      "contents": "GL_HIGH_FLOAT"
    },
    {
      "trigger": "GL_HIGH_INT (36341)",
      "contents": "GL_HIGH_INT"
    },
    {
      "trigger": "GL_IMG_read_format (1)",
      "contents": "GL_IMG_read_format"
    },
    {
      "trigger": "GL_IMG_texture_compression_pvrtc (1)",
      "contents": "GL_IMG_texture_compression_pvrtc"
    },
    {
      "trigger": "GL_IMPLEMENTATION_COLOR_READ_FORMAT (35739)",
      "contents": "GL_IMPLEMENTATION_COLOR_READ_FORMAT"
    },
    {
      "trigger": "GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES (35739)",
      "contents": "GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES"
    },
    {
      "trigger": "GL_IMPLEMENTATION_COLOR_READ_TYPE (35738)",
      "contents": "GL_IMPLEMENTATION_COLOR_READ_TYPE"
    },
    {
      "trigger": "GL_IMPLEMENTATION_COLOR_READ_TYPE_OES (35738)",
      "contents": "GL_IMPLEMENTATION_COLOR_READ_TYPE_OES"
    },
    {
      "trigger": "GL_INCR (7682)",
      "contents": "GL_INCR"
    },
    {
      "trigger": "GL_INCR_WRAP (34055)",
      "contents": "GL_INCR_WRAP"
    },
    {
      "trigger": "GL_INCR_WRAP_OES (34055)",
      "contents": "GL_INCR_WRAP_OES"
    },
    {
      "trigger": "GL_INFO_LOG_LENGTH (35716)",
      "contents": "GL_INFO_LOG_LENGTH"
    },
    {
      "trigger": "GL_INT (5124)",
      "contents": "GL_INT"
    },
    {
      "trigger": "GL_INTERPOLATE (34165)",
      "contents": "GL_INTERPOLATE"
    },
    {
      "trigger": "GL_INT_VEC2 (35667)",
      "contents": "GL_INT_VEC2"
    },
    {
      "trigger": "GL_INT_VEC3 (35668)",
      "contents": "GL_INT_VEC3"
    },
    {
      "trigger": "GL_INT_VEC4 (35669)",
      "contents": "GL_INT_VEC4"
    },
    {
      "trigger": "GL_INVALID_ENUM (1280)",
      "contents": "GL_INVALID_ENUM"
    },
    {
      "trigger": "GL_INVALID_FRAMEBUFFER_OPERATION (1286)",
      "contents": "GL_INVALID_FRAMEBUFFER_OPERATION"
    },
    {
      "trigger": "GL_INVALID_FRAMEBUFFER_OPERATION_OES (1286)",
      "contents": "GL_INVALID_FRAMEBUFFER_OPERATION_OES"
    },
    {
      "trigger": "GL_INVALID_OPERATION (1282)",
      "contents": "GL_INVALID_OPERATION"
    },
    {
      "trigger": "GL_INVALID_VALUE (1281)",
      "contents": "GL_INVALID_VALUE"
    },
    {
      "trigger": "GL_INVERT (5386)",
      "contents": "GL_INVERT"
    },
    {
      "trigger": "GL_KEEP (7680)",
      "contents": "GL_KEEP"
    },
    {
      "trigger": "GL_LEQUAL (515)",
      "contents": "GL_LEQUAL"
    },
    {
      "trigger": "GL_LESS (513)",
      "contents": "GL_LESS"
    },
    {
      "trigger": "GL_LIGHT0 (16384)",
      "contents": "GL_LIGHT0"
    },
    {
      "trigger": "GL_LIGHT1 (16385)",
      "contents": "GL_LIGHT1"
    },
    {
      "trigger": "GL_LIGHT2 (16386)",
      "contents": "GL_LIGHT2"
    },
    {
      "trigger": "GL_LIGHT3 (16387)",
      "contents": "GL_LIGHT3"
    },
    {
      "trigger": "GL_LIGHT4 (16388)",
      "contents": "GL_LIGHT4"
    },
    {
      "trigger": "GL_LIGHT5 (16389)",
      "contents": "GL_LIGHT5"
    },
    {
      "trigger": "GL_LIGHT6 (16390)",
      "contents": "GL_LIGHT6"
    },
    {
      "trigger": "GL_LIGHT7 (16391)",
      "contents": "GL_LIGHT7"
    },
    {
      "trigger": "GL_LIGHTING (2896)",
      "contents": "GL_LIGHTING"
    },
    {
      "trigger": "GL_LIGHT_MODEL_AMBIENT (2899)",
      "contents": "GL_LIGHT_MODEL_AMBIENT"
    },
    {
      "trigger": "GL_LIGHT_MODEL_TWO_SIDE (2898)",
      "contents": "GL_LIGHT_MODEL_TWO_SIDE"
    },
    {
      "trigger": "GL_LINEAR (9729)",
      "contents": "GL_LINEAR"
    },
    {
      "trigger": "GL_LINEAR_ATTENUATION (4616)",
      "contents": "GL_LINEAR_ATTENUATION"
    },
    {
      "trigger": "GL_LINEAR_MIPMAP_LINEAR (9987)",
      "contents": "GL_LINEAR_MIPMAP_LINEAR"
    },
    {
      "trigger": "GL_LINEAR_MIPMAP_NEAREST (9985)",
      "contents": "GL_LINEAR_MIPMAP_NEAREST"
    },
    {
      "trigger": "GL_LINES (1)",
      "contents": "GL_LINES"
    },
    {
      "trigger": "GL_LINE_LOOP (2)",
      "contents": "GL_LINE_LOOP"
    },
    {
      "trigger": "GL_LINE_SMOOTH (2848)",
      "contents": "GL_LINE_SMOOTH"
    },
    {
      "trigger": "GL_LINE_SMOOTH_HINT (3154)",
      "contents": "GL_LINE_SMOOTH_HINT"
    },
    {
      "trigger": "GL_LINE_STRIP (3)",
      "contents": "GL_LINE_STRIP"
    },
    {
      "trigger": "GL_LINE_WIDTH (2849)",
      "contents": "GL_LINE_WIDTH"
    },
    {
      "trigger": "GL_LINK_STATUS (35714)",
      "contents": "GL_LINK_STATUS"
    },
    {
      "trigger": "GL_LOGIC_OP_MODE (3056)",
      "contents": "GL_LOGIC_OP_MODE"
    },
    {
      "trigger": "GL_LOW_FLOAT (36336)",
      "contents": "GL_LOW_FLOAT"
    },
    {
      "trigger": "GL_LOW_INT (36339)",
      "contents": "GL_LOW_INT"
    },
    {
      "trigger": "GL_LUMINANCE (6409)",
      "contents": "GL_LUMINANCE"
    },
    {
      "trigger": "GL_LUMINANCE_ALPHA (6410)",
      "contents": "GL_LUMINANCE_ALPHA"
    },
    {
      "trigger": "GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES (35742)",
      "contents": "GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES"
    },
    {
      "trigger": "GL_MATRIX_INDEX_ARRAY_OES (34884)",
      "contents": "GL_MATRIX_INDEX_ARRAY_OES"
    },
    {
      "trigger": "GL_MATRIX_INDEX_ARRAY_POINTER_OES (34889)",
      "contents": "GL_MATRIX_INDEX_ARRAY_POINTER_OES"
    },
    {
      "trigger": "GL_MATRIX_INDEX_ARRAY_SIZE_OES (34886)",
      "contents": "GL_MATRIX_INDEX_ARRAY_SIZE_OES"
    },
    {
      "trigger": "GL_MATRIX_INDEX_ARRAY_STRIDE_OES (34888)",
      "contents": "GL_MATRIX_INDEX_ARRAY_STRIDE_OES"
    },
    {
      "trigger": "GL_MATRIX_INDEX_ARRAY_TYPE_OES (34887)",
      "contents": "GL_MATRIX_INDEX_ARRAY_TYPE_OES"
    },
    {
      "trigger": "GL_MATRIX_MODE (2976)",
      "contents": "GL_MATRIX_MODE"
    },
    {
      "trigger": "GL_MATRIX_PALETTE_OES (34880)",
      "contents": "GL_MATRIX_PALETTE_OES"
    },
    {
      "trigger": "GL_MAX_CLIP_PLANES (3378)",
      "contents": "GL_MAX_CLIP_PLANES"
    },
    {
      "trigger": "GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS (35661)",
      "contents": "GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS"
    },
    {
      "trigger": "GL_MAX_CUBE_MAP_TEXTURE_SIZE (34076)",
      "contents": "GL_MAX_CUBE_MAP_TEXTURE_SIZE"
    },
    {
      "trigger": "GL_MAX_EXT (32776)",
      "contents": "GL_MAX_EXT"
    },
    {
      "trigger": "GL_MAX_FRAGMENT_UNIFORM_VECTORS (36349)",
      "contents": "GL_MAX_FRAGMENT_UNIFORM_VECTORS"
    },
    {
      "trigger": "GL_MAX_LIGHTS (3377)",
      "contents": "GL_MAX_LIGHTS"
    },
    {
      "trigger": "GL_MAX_MODELVIEW_STACK_DEPTH (3382)",
      "contents": "GL_MAX_MODELVIEW_STACK_DEPTH"
    },
    {
      "trigger": "GL_MAX_PALETTE_MATRICES_OES (34882)",
      "contents": "GL_MAX_PALETTE_MATRICES_OES"
    },
    {
      "trigger": "GL_MAX_PROJECTION_STACK_DEPTH (3384)",
      "contents": "GL_MAX_PROJECTION_STACK_DEPTH"
    },
    {
      "trigger": "GL_MAX_RENDERBUFFER_SIZE (34024)",
      "contents": "GL_MAX_RENDERBUFFER_SIZE"
    },
    {
      "trigger": "GL_MAX_RENDERBUFFER_SIZE_OES (34024)",
      "contents": "GL_MAX_RENDERBUFFER_SIZE_OES"
    },
    {
      "trigger": "GL_MAX_SAMPLES_APPLE (36183)",
      "contents": "GL_MAX_SAMPLES_APPLE"
    },
    {
      "trigger": "GL_MAX_TEXTURE_IMAGE_UNITS (34930)",
      "contents": "GL_MAX_TEXTURE_IMAGE_UNITS"
    },
    {
      "trigger": "GL_MAX_TEXTURE_LOD_BIAS_EXT (34045)",
      "contents": "GL_MAX_TEXTURE_LOD_BIAS_EXT"
    },
    {
      "trigger": "GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT (34047)",
      "contents": "GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT"
    },
    {
      "trigger": "GL_MAX_TEXTURE_SIZE (3379)",
      "contents": "GL_MAX_TEXTURE_SIZE"
    },
    {
      "trigger": "GL_MAX_TEXTURE_STACK_DEPTH (3385)",
      "contents": "GL_MAX_TEXTURE_STACK_DEPTH"
    },
    {
      "trigger": "GL_MAX_TEXTURE_UNITS (34018)",
      "contents": "GL_MAX_TEXTURE_UNITS"
    },
    {
      "trigger": "GL_MAX_VARYING_VECTORS (36348)",
      "contents": "GL_MAX_VARYING_VECTORS"
    },
    {
      "trigger": "GL_MAX_VERTEX_ATTRIBS (34921)",
      "contents": "GL_MAX_VERTEX_ATTRIBS"
    },
    {
      "trigger": "GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS (35660)",
      "contents": "GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS"
    },
    {
      "trigger": "GL_MAX_VERTEX_UNIFORM_VECTORS (36347)",
      "contents": "GL_MAX_VERTEX_UNIFORM_VECTORS"
    },
    {
      "trigger": "GL_MAX_VERTEX_UNITS_OES (34468)",
      "contents": "GL_MAX_VERTEX_UNITS_OES"
    },
    {
      "trigger": "GL_MAX_VIEWPORT_DIMS (3386)",
      "contents": "GL_MAX_VIEWPORT_DIMS"
    },
    {
      "trigger": "GL_MEDIUM_FLOAT (36337)",
      "contents": "GL_MEDIUM_FLOAT"
    },
    {
      "trigger": "GL_MEDIUM_INT (36340)",
      "contents": "GL_MEDIUM_INT"
    },
    {
      "trigger": "GL_MIN_EXT (32775)",
      "contents": "GL_MIN_EXT"
    },
    {
      "trigger": "GL_MIRRORED_REPEAT (33648)",
      "contents": "GL_MIRRORED_REPEAT"
    },
    {
      "trigger": "GL_MIRRORED_REPEAT_OES (33648)",
      "contents": "GL_MIRRORED_REPEAT_OES"
    },
    {
      "trigger": "GL_MODELVIEW (5888)",
      "contents": "GL_MODELVIEW"
    },
    {
      "trigger": "GL_MODELVIEW_MATRIX (2982)",
      "contents": "GL_MODELVIEW_MATRIX"
    },
    {
      "trigger": "GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES (35213)",
      "contents": "GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES"
    },
    {
      "trigger": "GL_MODELVIEW_STACK_DEPTH (2979)",
      "contents": "GL_MODELVIEW_STACK_DEPTH"
    },
    {
      "trigger": "GL_MODULATE (8448)",
      "contents": "GL_MODULATE"
    },
    {
      "trigger": "GL_MULTISAMPLE (32925)",
      "contents": "GL_MULTISAMPLE"
    },
    {
      "trigger": "GL_NAND (5390)",
      "contents": "GL_NAND"
    },
    {
      "trigger": "GL_NEAREST (9728)",
      "contents": "GL_NEAREST"
    },
    {
      "trigger": "GL_NEAREST_MIPMAP_LINEAR (9986)",
      "contents": "GL_NEAREST_MIPMAP_LINEAR"
    },
    {
      "trigger": "GL_NEAREST_MIPMAP_NEAREST (9984)",
      "contents": "GL_NEAREST_MIPMAP_NEAREST"
    },
    {
      "trigger": "GL_NEVER (512)",
      "contents": "GL_NEVER"
    },
    {
      "trigger": "GL_NICEST (4354)",
      "contents": "GL_NICEST"
    },
    {
      "trigger": "GL_NONE (0)",
      "contents": "GL_NONE"
    },
    {
      "trigger": "GL_NOOP (5381)",
      "contents": "GL_NOOP"
    },
    {
      "trigger": "GL_NOR (5384)",
      "contents": "GL_NOR"
    },
    {
      "trigger": "GL_NORMALIZE (2977)",
      "contents": "GL_NORMALIZE"
    },
    {
      "trigger": "GL_NORMAL_ARRAY (32885)",
      "contents": "GL_NORMAL_ARRAY"
    },
    {
      "trigger": "GL_NORMAL_ARRAY_BUFFER_BINDING (34967)",
      "contents": "GL_NORMAL_ARRAY_BUFFER_BINDING"
    },
    {
      "trigger": "GL_NORMAL_ARRAY_POINTER (32911)",
      "contents": "GL_NORMAL_ARRAY_POINTER"
    },
    {
      "trigger": "GL_NORMAL_ARRAY_STRIDE (32895)",
      "contents": "GL_NORMAL_ARRAY_STRIDE"
    },
    {
      "trigger": "GL_NORMAL_ARRAY_TYPE (32894)",
      "contents": "GL_NORMAL_ARRAY_TYPE"
    },
    {
      "trigger": "GL_NOTEQUAL (517)",
      "contents": "GL_NOTEQUAL"
    },
    {
      "trigger": "GL_NO_ERROR (0)",
      "contents": "GL_NO_ERROR"
    },
    {
      "trigger": "GL_NUM_COMPRESSED_TEXTURE_FORMATS (34466)",
      "contents": "GL_NUM_COMPRESSED_TEXTURE_FORMATS"
    },
    {
      "trigger": "GL_NUM_SHADER_BINARY_FORMATS (36345)",
      "contents": "GL_NUM_SHADER_BINARY_FORMATS"
    },
    {
      "trigger": "GL_OES_VERSION_1_0 (1)",
      "contents": "GL_OES_VERSION_1_0"
    },
    {
      "trigger": "GL_OES_VERSION_1_1 (1)",
      "contents": "GL_OES_VERSION_1_1"
    },
    {
      "trigger": "GL_OES_blend_equation_separate (1)",
      "contents": "GL_OES_blend_equation_separate"
    },
    {
      "trigger": "GL_OES_blend_func_separate (1)",
      "contents": "GL_OES_blend_func_separate"
    },
    {
      "trigger": "GL_OES_blend_subtract (1)",
      "contents": "GL_OES_blend_subtract"
    },
    {
      "trigger": "GL_OES_byte_coordinates (1)",
      "contents": "GL_OES_byte_coordinates"
    },
    {
      "trigger": "GL_OES_compressed_paletted_texture (1)",
      "contents": "GL_OES_compressed_paletted_texture"
    },
    {
      "trigger": "GL_OES_depth24 (1)",
      "contents": "GL_OES_depth24"
    },
    {
      "trigger": "GL_OES_depth_texture (1)",
      "contents": "GL_OES_depth_texture"
    },
    {
      "trigger": "GL_OES_draw_texture (1)",
      "contents": "GL_OES_draw_texture"
    },
    {
      "trigger": "GL_OES_element_index_uint (1)",
      "contents": "GL_OES_element_index_uint"
    },
    {
      "trigger": "GL_OES_fbo_render_mipmap (1)",
      "contents": "GL_OES_fbo_render_mipmap"
    },
    {
      "trigger": "GL_OES_fixed_point (1)",
      "contents": "GL_OES_fixed_point"
    },
    {
      "trigger": "GL_OES_framebuffer_object (1)",
      "contents": "GL_OES_framebuffer_object"
    },
    {
      "trigger": "GL_OES_mapbuffer (1)",
      "contents": "GL_OES_mapbuffer"
    },
    {
      "trigger": "GL_OES_matrix_get (1)",
      "contents": "GL_OES_matrix_get"
    },
    {
      "trigger": "GL_OES_matrix_palette (1)",
      "contents": "GL_OES_matrix_palette"
    },
    {
      "trigger": "GL_OES_packed_depth_stencil (1)",
      "contents": "GL_OES_packed_depth_stencil"
    },
    {
      "trigger": "GL_OES_point_size_array (1)",
      "contents": "GL_OES_point_size_array"
    },
    {
      "trigger": "GL_OES_point_sprite (1)",
      "contents": "GL_OES_point_sprite"
    },
    {
      "trigger": "GL_OES_read_format (1)",
      "contents": "GL_OES_read_format"
    },
    {
      "trigger": "GL_OES_rgb8_rgba8 (1)",
      "contents": "GL_OES_rgb8_rgba8"
    },
    {
      "trigger": "GL_OES_single_precision (1)",
      "contents": "GL_OES_single_precision"
    },
    {
      "trigger": "GL_OES_standard_derivatives (1)",
      "contents": "GL_OES_standard_derivatives"
    },
    {
      "trigger": "GL_OES_stencil8 (1)",
      "contents": "GL_OES_stencil8"
    },
    {
      "trigger": "GL_OES_stencil_wrap (1)",
      "contents": "GL_OES_stencil_wrap"
    },
    {
      "trigger": "GL_OES_texture_float (1)",
      "contents": "GL_OES_texture_float"
    },
    {
      "trigger": "GL_OES_texture_half_float (1)",
      "contents": "GL_OES_texture_half_float"
    },
    {
      "trigger": "GL_OES_texture_mirrored_repeat (1)",
      "contents": "GL_OES_texture_mirrored_repeat"
    },
    {
      "trigger": "GL_OES_vertex_array_object (1)",
      "contents": "GL_OES_vertex_array_object"
    },
    {
      "trigger": "GL_ONE (1)",
      "contents": "GL_ONE"
    },
    {
      "trigger": "GL_ONE_MINUS_CONSTANT_ALPHA (32772)",
      "contents": "GL_ONE_MINUS_CONSTANT_ALPHA"
    },
    {
      "trigger": "GL_ONE_MINUS_CONSTANT_COLOR (32770)",
      "contents": "GL_ONE_MINUS_CONSTANT_COLOR"
    },
    {
      "trigger": "GL_ONE_MINUS_DST_ALPHA (773)",
      "contents": "GL_ONE_MINUS_DST_ALPHA"
    },
    {
      "trigger": "GL_ONE_MINUS_DST_COLOR (775)",
      "contents": "GL_ONE_MINUS_DST_COLOR"
    },
    {
      "trigger": "GL_ONE_MINUS_SRC_ALPHA (771)",
      "contents": "GL_ONE_MINUS_SRC_ALPHA"
    },
    {
      "trigger": "GL_ONE_MINUS_SRC_COLOR (769)",
      "contents": "GL_ONE_MINUS_SRC_COLOR"
    },
    {
      "trigger": "GL_OPERAND0_ALPHA (34200)",
      "contents": "GL_OPERAND0_ALPHA"
    },
    {
      "trigger": "GL_OPERAND0_RGB (34192)",
      "contents": "GL_OPERAND0_RGB"
    },
    {
      "trigger": "GL_OPERAND1_ALPHA (34201)",
      "contents": "GL_OPERAND1_ALPHA"
    },
    {
      "trigger": "GL_OPERAND1_RGB (34193)",
      "contents": "GL_OPERAND1_RGB"
    },
    {
      "trigger": "GL_OPERAND2_ALPHA (34202)",
      "contents": "GL_OPERAND2_ALPHA"
    },
    {
      "trigger": "GL_OPERAND2_RGB (34194)",
      "contents": "GL_OPERAND2_RGB"
    },
    {
      "trigger": "GL_OR (5383)",
      "contents": "GL_OR"
    },
    {
      "trigger": "GL_OR_INVERTED (5389)",
      "contents": "GL_OR_INVERTED"
    },
    {
      "trigger": "GL_OR_REVERSE (5387)",
      "contents": "GL_OR_REVERSE"
    },
    {
      "trigger": "GL_OUT_OF_MEMORY (1285)",
      "contents": "GL_OUT_OF_MEMORY"
    },
    {
      "trigger": "GL_PACK_ALIGNMENT (3333)",
      "contents": "GL_PACK_ALIGNMENT"
    },
    {
      "trigger": "GL_PALETTE4_R5_G6_B5_OES (35730)",
      "contents": "GL_PALETTE4_R5_G6_B5_OES"
    },
    {
      "trigger": "GL_PALETTE4_RGB5_A1_OES (35732)",
      "contents": "GL_PALETTE4_RGB5_A1_OES"
    },
    {
      "trigger": "GL_PALETTE4_RGB8_OES (35728)",
      "contents": "GL_PALETTE4_RGB8_OES"
    },
    {
      "trigger": "GL_PALETTE4_RGBA4_OES (35731)",
      "contents": "GL_PALETTE4_RGBA4_OES"
    },
    {
      "trigger": "GL_PALETTE4_RGBA8_OES (35729)",
      "contents": "GL_PALETTE4_RGBA8_OES"
    },
    {
      "trigger": "GL_PALETTE8_R5_G6_B5_OES (35735)",
      "contents": "GL_PALETTE8_R5_G6_B5_OES"
    },
    {
      "trigger": "GL_PALETTE8_RGB5_A1_OES (35737)",
      "contents": "GL_PALETTE8_RGB5_A1_OES"
    },
    {
      "trigger": "GL_PALETTE8_RGB8_OES (35733)",
      "contents": "GL_PALETTE8_RGB8_OES"
    },
    {
      "trigger": "GL_PALETTE8_RGBA4_OES (35736)",
      "contents": "GL_PALETTE8_RGBA4_OES"
    },
    {
      "trigger": "GL_PALETTE8_RGBA8_OES (35734)",
      "contents": "GL_PALETTE8_RGBA8_OES"
    },
    {
      "trigger": "GL_PERSPECTIVE_CORRECTION_HINT (3152)",
      "contents": "GL_PERSPECTIVE_CORRECTION_HINT"
    },
    {
      "trigger": "GL_POINTS (0)",
      "contents": "GL_POINTS"
    },
    {
      "trigger": "GL_POINT_DISTANCE_ATTENUATION (33065)",
      "contents": "GL_POINT_DISTANCE_ATTENUATION"
    },
    {
      "trigger": "GL_POINT_FADE_THRESHOLD_SIZE (33064)",
      "contents": "GL_POINT_FADE_THRESHOLD_SIZE"
    },
    {
      "trigger": "GL_POINT_SIZE (2833)",
      "contents": "GL_POINT_SIZE"
    },
    {
      "trigger": "GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES (35743)",
      "contents": "GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES"
    },
    {
      "trigger": "GL_POINT_SIZE_ARRAY_OES (35740)",
      "contents": "GL_POINT_SIZE_ARRAY_OES"
    },
    {
      "trigger": "GL_POINT_SIZE_ARRAY_POINTER_OES (35212)",
      "contents": "GL_POINT_SIZE_ARRAY_POINTER_OES"
    },
    {
      "trigger": "GL_POINT_SIZE_ARRAY_STRIDE_OES (35211)",
      "contents": "GL_POINT_SIZE_ARRAY_STRIDE_OES"
    },
    {
      "trigger": "GL_POINT_SIZE_ARRAY_TYPE_OES (35210)",
      "contents": "GL_POINT_SIZE_ARRAY_TYPE_OES"
    },
    {
      "trigger": "GL_POINT_SIZE_MAX (33063)",
      "contents": "GL_POINT_SIZE_MAX"
    },
    {
      "trigger": "GL_POINT_SIZE_MIN (33062)",
      "contents": "GL_POINT_SIZE_MIN"
    },
    {
      "trigger": "GL_POINT_SMOOTH (2832)",
      "contents": "GL_POINT_SMOOTH"
    },
    {
      "trigger": "GL_POINT_SMOOTH_HINT (3153)",
      "contents": "GL_POINT_SMOOTH_HINT"
    },
    {
      "trigger": "GL_POINT_SPRITE_OES (34913)",
      "contents": "GL_POINT_SPRITE_OES"
    },
    {
      "trigger": "GL_POLYGON_OFFSET_FACTOR (32824)",
      "contents": "GL_POLYGON_OFFSET_FACTOR"
    },
    {
      "trigger": "GL_POLYGON_OFFSET_FILL (32823)",
      "contents": "GL_POLYGON_OFFSET_FILL"
    },
    {
      "trigger": "GL_POLYGON_OFFSET_UNITS (10752)",
      "contents": "GL_POLYGON_OFFSET_UNITS"
    },
    {
      "trigger": "GL_POSITION (4611)",
      "contents": "GL_POSITION"
    },
    {
      "trigger": "GL_PREVIOUS (34168)",
      "contents": "GL_PREVIOUS"
    },
    {
      "trigger": "GL_PRIMARY_COLOR (34167)",
      "contents": "GL_PRIMARY_COLOR"
    },
    {
      "trigger": "GL_PROGRAM_OBJECT_EXT (35648)",
      "contents": "GL_PROGRAM_OBJECT_EXT"
    },
    {
      "trigger": "GL_PROGRAM_PIPELINE_BINDING_EXT (33370)",
      "contents": "GL_PROGRAM_PIPELINE_BINDING_EXT"
    },
    {
      "trigger": "GL_PROGRAM_PIPELINE_OBJECT_EXT (35407)",
      "contents": "GL_PROGRAM_PIPELINE_OBJECT_EXT"
    },
    {
      "trigger": "GL_PROGRAM_SEPARABLE_EXT (33368)",
      "contents": "GL_PROGRAM_SEPARABLE_EXT"
    },
    {
      "trigger": "GL_PROJECTION (5889)",
      "contents": "GL_PROJECTION"
    },
    {
      "trigger": "GL_PROJECTION_MATRIX (2983)",
      "contents": "GL_PROJECTION_MATRIX"
    },
    {
      "trigger": "GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES (35214)",
      "contents": "GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES"
    },
    {
      "trigger": "GL_PROJECTION_STACK_DEPTH (2980)",
      "contents": "GL_PROJECTION_STACK_DEPTH"
    },
    {
      "trigger": "GL_QUADRATIC_ATTENUATION (4617)",
      "contents": "GL_QUADRATIC_ATTENUATION"
    },
    {
      "trigger": "GL_QUERY_OBJECT_EXT (37203)",
      "contents": "GL_QUERY_OBJECT_EXT"
    },
    {
      "trigger": "GL_QUERY_RESULT_AVAILABLE_EXT (34919)",
      "contents": "GL_QUERY_RESULT_AVAILABLE_EXT"
    },
    {
      "trigger": "GL_QUERY_RESULT_EXT (34918)",
      "contents": "GL_QUERY_RESULT_EXT"
    },
    {
      "trigger": "GL_R16F_EXT (33325)",
      "contents": "GL_R16F_EXT"
    },
    {
      "trigger": "GL_R8_EXT (33321)",
      "contents": "GL_R8_EXT"
    },
    {
      "trigger": "GL_READ_FRAMEBUFFER_APPLE (36008)",
      "contents": "GL_READ_FRAMEBUFFER_APPLE"
    },
    {
      "trigger": "GL_READ_FRAMEBUFFER_BINDING_APPLE (36010)",
      "contents": "GL_READ_FRAMEBUFFER_BINDING_APPLE"
    },
    {
      "trigger": "GL_RED_BITS (3410)",
      "contents": "GL_RED_BITS"
    },
    {
      "trigger": "GL_RED_EXT (6403)",
      "contents": "GL_RED_EXT"
    },
    {
      "trigger": "GL_RENDERBUFFER (36161)",
      "contents": "GL_RENDERBUFFER"
    },
    {
      "trigger": "GL_RENDERBUFFER_ALPHA_SIZE (36179)",
      "contents": "GL_RENDERBUFFER_ALPHA_SIZE"
    },
    {
      "trigger": "GL_RENDERBUFFER_ALPHA_SIZE_OES (36179)",
      "contents": "GL_RENDERBUFFER_ALPHA_SIZE_OES"
    },
    {
      "trigger": "GL_RENDERBUFFER_BINDING (36007)",
      "contents": "GL_RENDERBUFFER_BINDING"
    },
    {
      "trigger": "GL_RENDERBUFFER_BINDING_OES (36007)",
      "contents": "GL_RENDERBUFFER_BINDING_OES"
    },
    {
      "trigger": "GL_RENDERBUFFER_BLUE_SIZE (36178)",
      "contents": "GL_RENDERBUFFER_BLUE_SIZE"
    },
    {
      "trigger": "GL_RENDERBUFFER_BLUE_SIZE_OES (36178)",
      "contents": "GL_RENDERBUFFER_BLUE_SIZE_OES"
    },
    {
      "trigger": "GL_RENDERBUFFER_DEPTH_SIZE (36180)",
      "contents": "GL_RENDERBUFFER_DEPTH_SIZE"
    },
    {
      "trigger": "GL_RENDERBUFFER_DEPTH_SIZE_OES (36180)",
      "contents": "GL_RENDERBUFFER_DEPTH_SIZE_OES"
    },
    {
      "trigger": "GL_RENDERBUFFER_GREEN_SIZE (36177)",
      "contents": "GL_RENDERBUFFER_GREEN_SIZE"
    },
    {
      "trigger": "GL_RENDERBUFFER_GREEN_SIZE_OES (36177)",
      "contents": "GL_RENDERBUFFER_GREEN_SIZE_OES"
    },
    {
      "trigger": "GL_RENDERBUFFER_HEIGHT (36163)",
      "contents": "GL_RENDERBUFFER_HEIGHT"
    },
    {
      "trigger": "GL_RENDERBUFFER_HEIGHT_OES (36163)",
      "contents": "GL_RENDERBUFFER_HEIGHT_OES"
    },
    {
      "trigger": "GL_RENDERBUFFER_INTERNAL_FORMAT (36164)",
      "contents": "GL_RENDERBUFFER_INTERNAL_FORMAT"
    },
    {
      "trigger": "GL_RENDERBUFFER_INTERNAL_FORMAT_OES (36164)",
      "contents": "GL_RENDERBUFFER_INTERNAL_FORMAT_OES"
    },
    {
      "trigger": "GL_RENDERBUFFER_OES (36161)",
      "contents": "GL_RENDERBUFFER_OES"
    },
    {
      "trigger": "GL_RENDERBUFFER_RED_SIZE (36176)",
      "contents": "GL_RENDERBUFFER_RED_SIZE"
    },
    {
      "trigger": "GL_RENDERBUFFER_RED_SIZE_OES (36176)",
      "contents": "GL_RENDERBUFFER_RED_SIZE_OES"
    },
    {
      "trigger": "GL_RENDERBUFFER_SAMPLES_APPLE (36011)",
      "contents": "GL_RENDERBUFFER_SAMPLES_APPLE"
    },
    {
      "trigger": "GL_RENDERBUFFER_STENCIL_SIZE (36181)",
      "contents": "GL_RENDERBUFFER_STENCIL_SIZE"
    },
    {
      "trigger": "GL_RENDERBUFFER_STENCIL_SIZE_OES (36181)",
      "contents": "GL_RENDERBUFFER_STENCIL_SIZE_OES"
    },
    {
      "trigger": "GL_RENDERBUFFER_WIDTH (36162)",
      "contents": "GL_RENDERBUFFER_WIDTH"
    },
    {
      "trigger": "GL_RENDERBUFFER_WIDTH_OES (36162)",
      "contents": "GL_RENDERBUFFER_WIDTH_OES"
    },
    {
      "trigger": "GL_RENDERER (7937)",
      "contents": "GL_RENDERER"
    },
    {
      "trigger": "GL_REPEAT (10497)",
      "contents": "GL_REPEAT"
    },
    {
      "trigger": "GL_REPLACE (7681)",
      "contents": "GL_REPLACE"
    },
    {
      "trigger": "GL_RESCALE_NORMAL (32826)",
      "contents": "GL_RESCALE_NORMAL"
    },
    {
      "trigger": "GL_RG16F_EXT (33327)",
      "contents": "GL_RG16F_EXT"
    },
    {
      "trigger": "GL_RG8_EXT (33323)",
      "contents": "GL_RG8_EXT"
    },
    {
      "trigger": "GL_RGB (6407)",
      "contents": "GL_RGB"
    },
    {
      "trigger": "GL_RGB16F_EXT (34843)",
      "contents": "GL_RGB16F_EXT"
    },
    {
      "trigger": "GL_RGB565 (36194)",
      "contents": "GL_RGB565"
    },
    {
      "trigger": "GL_RGB565_OES (36194)",
      "contents": "GL_RGB565_OES"
    },
    {
      "trigger": "GL_RGB5_A1 (32855)",
      "contents": "GL_RGB5_A1"
    },
    {
      "trigger": "GL_RGB5_A1_OES (32855)",
      "contents": "GL_RGB5_A1_OES"
    },
    {
      "trigger": "GL_RGB8_OES (32849)",
      "contents": "GL_RGB8_OES"
    },
    {
      "trigger": "GL_RGBA (6408)",
      "contents": "GL_RGBA"
    },
    {
      "trigger": "GL_RGBA16F_EXT (34842)",
      "contents": "GL_RGBA16F_EXT"
    },
    {
      "trigger": "GL_RGBA4 (32854)",
      "contents": "GL_RGBA4"
    },
    {
      "trigger": "GL_RGBA4_OES (32854)",
      "contents": "GL_RGBA4_OES"
    },
    {
      "trigger": "GL_RGBA8_OES (32856)",
      "contents": "GL_RGBA8_OES"
    },
    {
      "trigger": "GL_RGB_422_APPLE (35359)",
      "contents": "GL_RGB_422_APPLE"
    },
    {
      "trigger": "GL_RGB_SCALE (34163)",
      "contents": "GL_RGB_SCALE"
    },
    {
      "trigger": "GL_RG_EXT (33319)",
      "contents": "GL_RG_EXT"
    },
    {
      "trigger": "GL_SAMPLER_2D (35678)",
      "contents": "GL_SAMPLER_2D"
    },
    {
      "trigger": "GL_SAMPLER_CUBE (35680)",
      "contents": "GL_SAMPLER_CUBE"
    },
    {
      "trigger": "GL_SAMPLES (32937)",
      "contents": "GL_SAMPLES"
    },
    {
      "trigger": "GL_SAMPLE_ALPHA_TO_COVERAGE (32926)",
      "contents": "GL_SAMPLE_ALPHA_TO_COVERAGE"
    },
    {
      "trigger": "GL_SAMPLE_ALPHA_TO_ONE (32927)",
      "contents": "GL_SAMPLE_ALPHA_TO_ONE"
    },
    {
      "trigger": "GL_SAMPLE_BUFFERS (32936)",
      "contents": "GL_SAMPLE_BUFFERS"
    },
    {
      "trigger": "GL_SAMPLE_COVERAGE (32928)",
      "contents": "GL_SAMPLE_COVERAGE"
    },
    {
      "trigger": "GL_SAMPLE_COVERAGE_INVERT (32939)",
      "contents": "GL_SAMPLE_COVERAGE_INVERT"
    },
    {
      "trigger": "GL_SAMPLE_COVERAGE_VALUE (32938)",
      "contents": "GL_SAMPLE_COVERAGE_VALUE"
    },
    {
      "trigger": "GL_SCISSOR_BOX (3088)",
      "contents": "GL_SCISSOR_BOX"
    },
    {
      "trigger": "GL_SCISSOR_TEST (3089)",
      "contents": "GL_SCISSOR_TEST"
    },
    {
      "trigger": "GL_SET (5391)",
      "contents": "GL_SET"
    },
    {
      "trigger": "GL_SHADER_BINARY_FORMATS (36344)",
      "contents": "GL_SHADER_BINARY_FORMATS"
    },
    {
      "trigger": "GL_SHADER_COMPILER (36346)",
      "contents": "GL_SHADER_COMPILER"
    },
    {
      "trigger": "GL_SHADER_OBJECT_EXT (35656)",
      "contents": "GL_SHADER_OBJECT_EXT"
    },
    {
      "trigger": "GL_SHADER_SOURCE_LENGTH (35720)",
      "contents": "GL_SHADER_SOURCE_LENGTH"
    },
    {
      "trigger": "GL_SHADER_TYPE (35663)",
      "contents": "GL_SHADER_TYPE"
    },
    {
      "trigger": "GL_SHADE_MODEL (2900)",
      "contents": "GL_SHADE_MODEL"
    },
    {
      "trigger": "GL_SHADING_LANGUAGE_VERSION (35724)",
      "contents": "GL_SHADING_LANGUAGE_VERSION"
    },
    {
      "trigger": "GL_SHININESS (5633)",
      "contents": "GL_SHININESS"
    },
    {
      "trigger": "GL_SHORT (5122)",
      "contents": "GL_SHORT"
    },
    {
      "trigger": "GL_SMOOTH (7425)",
      "contents": "GL_SMOOTH"
    },
    {
      "trigger": "GL_SMOOTH_LINE_WIDTH_RANGE (2850)",
      "contents": "GL_SMOOTH_LINE_WIDTH_RANGE"
    },
    {
      "trigger": "GL_SMOOTH_POINT_SIZE_RANGE (2834)",
      "contents": "GL_SMOOTH_POINT_SIZE_RANGE"
    },
    {
      "trigger": "GL_SPECULAR (4610)",
      "contents": "GL_SPECULAR"
    },
    {
      "trigger": "GL_SPOT_CUTOFF (4614)",
      "contents": "GL_SPOT_CUTOFF"
    },
    {
      "trigger": "GL_SPOT_DIRECTION (4612)",
      "contents": "GL_SPOT_DIRECTION"
    },
    {
      "trigger": "GL_SPOT_EXPONENT (4613)",
      "contents": "GL_SPOT_EXPONENT"
    },
    {
      "trigger": "GL_SRC0_ALPHA (34184)",
      "contents": "GL_SRC0_ALPHA"
    },
    {
      "trigger": "GL_SRC0_RGB (34176)",
      "contents": "GL_SRC0_RGB"
    },
    {
      "trigger": "GL_SRC1_ALPHA (34185)",
      "contents": "GL_SRC1_ALPHA"
    },
    {
      "trigger": "GL_SRC1_RGB (34177)",
      "contents": "GL_SRC1_RGB"
    },
    {
      "trigger": "GL_SRC2_ALPHA (34186)",
      "contents": "GL_SRC2_ALPHA"
    },
    {
      "trigger": "GL_SRC2_RGB (34178)",
      "contents": "GL_SRC2_RGB"
    },
    {
      "trigger": "GL_SRC_ALPHA (770)",
      "contents": "GL_SRC_ALPHA"
    },
    {
      "trigger": "GL_SRC_ALPHA_SATURATE (776)",
      "contents": "GL_SRC_ALPHA_SATURATE"
    },
    {
      "trigger": "GL_SRC_COLOR (768)",
      "contents": "GL_SRC_COLOR"
    },
    {
      "trigger": "GL_STACK_OVERFLOW (1283)",
      "contents": "GL_STACK_OVERFLOW"
    },
    {
      "trigger": "GL_STACK_UNDERFLOW (1284)",
      "contents": "GL_STACK_UNDERFLOW"
    },
    {
      "trigger": "GL_STATIC_DRAW (35044)",
      "contents": "GL_STATIC_DRAW"
    },
    {
      "trigger": "GL_STENCIL_ATTACHMENT (36128)",
      "contents": "GL_STENCIL_ATTACHMENT"
    },
    {
      "trigger": "GL_STENCIL_ATTACHMENT_OES (36128)",
      "contents": "GL_STENCIL_ATTACHMENT_OES"
    },
    {
      "trigger": "GL_STENCIL_BACK_FAIL (34817)",
      "contents": "GL_STENCIL_BACK_FAIL"
    },
    {
      "trigger": "GL_STENCIL_BACK_FUNC (34816)",
      "contents": "GL_STENCIL_BACK_FUNC"
    },
    {
      "trigger": "GL_STENCIL_BACK_PASS_DEPTH_FAIL (34818)",
      "contents": "GL_STENCIL_BACK_PASS_DEPTH_FAIL"
    },
    {
      "trigger": "GL_STENCIL_BACK_PASS_DEPTH_PASS (34819)",
      "contents": "GL_STENCIL_BACK_PASS_DEPTH_PASS"
    },
    {
      "trigger": "GL_STENCIL_BACK_REF (36003)",
      "contents": "GL_STENCIL_BACK_REF"
    },
    {
      "trigger": "GL_STENCIL_BACK_VALUE_MASK (36004)",
      "contents": "GL_STENCIL_BACK_VALUE_MASK"
    },
    {
      "trigger": "GL_STENCIL_BACK_WRITEMASK (36005)",
      "contents": "GL_STENCIL_BACK_WRITEMASK"
    },
    {
      "trigger": "GL_STENCIL_BITS (3415)",
      "contents": "GL_STENCIL_BITS"
    },
    {
      "trigger": "GL_STENCIL_BUFFER_BIT (1024)",
      "contents": "GL_STENCIL_BUFFER_BIT"
    },
    {
      "trigger": "GL_STENCIL_CLEAR_VALUE (2961)",
      "contents": "GL_STENCIL_CLEAR_VALUE"
    },
    {
      "trigger": "GL_STENCIL_EXT (6146)",
      "contents": "GL_STENCIL_EXT"
    },
    {
      "trigger": "GL_STENCIL_FAIL (2964)",
      "contents": "GL_STENCIL_FAIL"
    },
    {
      "trigger": "GL_STENCIL_FUNC (2962)",
      "contents": "GL_STENCIL_FUNC"
    },
    {
      "trigger": "GL_STENCIL_INDEX (6401)",
      "contents": "GL_STENCIL_INDEX"
    },
    {
      "trigger": "GL_STENCIL_INDEX8 (36168)",
      "contents": "GL_STENCIL_INDEX8"
    },
    {
      "trigger": "GL_STENCIL_INDEX8_OES (36168)",
      "contents": "GL_STENCIL_INDEX8_OES"
    },
    {
      "trigger": "GL_STENCIL_PASS_DEPTH_FAIL (2965)",
      "contents": "GL_STENCIL_PASS_DEPTH_FAIL"
    },
    {
      "trigger": "GL_STENCIL_PASS_DEPTH_PASS (2966)",
      "contents": "GL_STENCIL_PASS_DEPTH_PASS"
    },
    {
      "trigger": "GL_STENCIL_REF (2967)",
      "contents": "GL_STENCIL_REF"
    },
    {
      "trigger": "GL_STENCIL_TEST (2960)",
      "contents": "GL_STENCIL_TEST"
    },
    {
      "trigger": "GL_STENCIL_VALUE_MASK (2963)",
      "contents": "GL_STENCIL_VALUE_MASK"
    },
    {
      "trigger": "GL_STENCIL_WRITEMASK (2968)",
      "contents": "GL_STENCIL_WRITEMASK"
    },
    {
      "trigger": "GL_STREAM_DRAW (35040)",
      "contents": "GL_STREAM_DRAW"
    },
    {
      "trigger": "GL_SUBPIXEL_BITS (3408)",
      "contents": "GL_SUBPIXEL_BITS"
    },
    {
      "trigger": "GL_SUBTRACT (34023)",
      "contents": "GL_SUBTRACT"
    },
    {
      "trigger": "GL_TEXTURE (5890)",
      "contents": "GL_TEXTURE"
    },
    {
      "trigger": "GL_TEXTURE0 (33984)",
      "contents": "GL_TEXTURE0"
    },
    {
      "trigger": "GL_TEXTURE1 (33985)",
      "contents": "GL_TEXTURE1"
    },
    {
      "trigger": "GL_TEXTURE10 (33994)",
      "contents": "GL_TEXTURE10"
    },
    {
      "trigger": "GL_TEXTURE11 (33995)",
      "contents": "GL_TEXTURE11"
    },
    {
      "trigger": "GL_TEXTURE12 (33996)",
      "contents": "GL_TEXTURE12"
    },
    {
      "trigger": "GL_TEXTURE13 (33997)",
      "contents": "GL_TEXTURE13"
    },
    {
      "trigger": "GL_TEXTURE14 (33998)",
      "contents": "GL_TEXTURE14"
    },
    {
      "trigger": "GL_TEXTURE15 (33999)",
      "contents": "GL_TEXTURE15"
    },
    {
      "trigger": "GL_TEXTURE16 (34000)",
      "contents": "GL_TEXTURE16"
    },
    {
      "trigger": "GL_TEXTURE17 (34001)",
      "contents": "GL_TEXTURE17"
    },
    {
      "trigger": "GL_TEXTURE18 (34002)",
      "contents": "GL_TEXTURE18"
    },
    {
      "trigger": "GL_TEXTURE19 (34003)",
      "contents": "GL_TEXTURE19"
    },
    {
      "trigger": "GL_TEXTURE2 (33986)",
      "contents": "GL_TEXTURE2"
    },
    {
      "trigger": "GL_TEXTURE20 (34004)",
      "contents": "GL_TEXTURE20"
    },
    {
      "trigger": "GL_TEXTURE21 (34005)",
      "contents": "GL_TEXTURE21"
    },
    {
      "trigger": "GL_TEXTURE22 (34006)",
      "contents": "GL_TEXTURE22"
    },
    {
      "trigger": "GL_TEXTURE23 (34007)",
      "contents": "GL_TEXTURE23"
    },
    {
      "trigger": "GL_TEXTURE24 (34008)",
      "contents": "GL_TEXTURE24"
    },
    {
      "trigger": "GL_TEXTURE25 (34009)",
      "contents": "GL_TEXTURE25"
    },
    {
      "trigger": "GL_TEXTURE26 (34010)",
      "contents": "GL_TEXTURE26"
    },
    {
      "trigger": "GL_TEXTURE27 (34011)",
      "contents": "GL_TEXTURE27"
    },
    {
      "trigger": "GL_TEXTURE28 (34012)",
      "contents": "GL_TEXTURE28"
    },
    {
      "trigger": "GL_TEXTURE29 (34013)",
      "contents": "GL_TEXTURE29"
    },
    {
      "trigger": "GL_TEXTURE3 (33987)",
      "contents": "GL_TEXTURE3"
    },
    {
      "trigger": "GL_TEXTURE30 (34014)",
      "contents": "GL_TEXTURE30"
    },
    {
      "trigger": "GL_TEXTURE31 (34015)",
      "contents": "GL_TEXTURE31"
    },
    {
      "trigger": "GL_TEXTURE4 (33988)",
      "contents": "GL_TEXTURE4"
    },
    {
      "trigger": "GL_TEXTURE5 (33989)",
      "contents": "GL_TEXTURE5"
    },
    {
      "trigger": "GL_TEXTURE6 (33990)",
      "contents": "GL_TEXTURE6"
    },
    {
      "trigger": "GL_TEXTURE7 (33991)",
      "contents": "GL_TEXTURE7"
    },
    {
      "trigger": "GL_TEXTURE8 (33992)",
      "contents": "GL_TEXTURE8"
    },
    {
      "trigger": "GL_TEXTURE9 (33993)",
      "contents": "GL_TEXTURE9"
    },
    {
      "trigger": "GL_TEXTURE_2D (3553)",
      "contents": "GL_TEXTURE_2D"
    },
    {
      "trigger": "GL_TEXTURE_BINDING_2D (32873)",
      "contents": "GL_TEXTURE_BINDING_2D"
    },
    {
      "trigger": "GL_TEXTURE_BINDING_CUBE_MAP (34068)",
      "contents": "GL_TEXTURE_BINDING_CUBE_MAP"
    },
    {
      "trigger": "GL_TEXTURE_COMPARE_FUNC_EXT (34893)",
      "contents": "GL_TEXTURE_COMPARE_FUNC_EXT"
    },
    {
      "trigger": "GL_TEXTURE_COMPARE_MODE_EXT (34892)",
      "contents": "GL_TEXTURE_COMPARE_MODE_EXT"
    },
    {
      "trigger": "GL_TEXTURE_COORD_ARRAY (32888)",
      "contents": "GL_TEXTURE_COORD_ARRAY"
    },
    {
      "trigger": "GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING (34970)",
      "contents": "GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING"
    },
    {
      "trigger": "GL_TEXTURE_COORD_ARRAY_POINTER (32914)",
      "contents": "GL_TEXTURE_COORD_ARRAY_POINTER"
    },
    {
      "trigger": "GL_TEXTURE_COORD_ARRAY_SIZE (32904)",
      "contents": "GL_TEXTURE_COORD_ARRAY_SIZE"
    },
    {
      "trigger": "GL_TEXTURE_COORD_ARRAY_STRIDE (32906)",
      "contents": "GL_TEXTURE_COORD_ARRAY_STRIDE"
    },
    {
      "trigger": "GL_TEXTURE_COORD_ARRAY_TYPE (32905)",
      "contents": "GL_TEXTURE_COORD_ARRAY_TYPE"
    },
    {
      "trigger": "GL_TEXTURE_CROP_RECT_OES (35741)",
      "contents": "GL_TEXTURE_CROP_RECT_OES"
    },
    {
      "trigger": "GL_TEXTURE_CUBE_MAP (34067)",
      "contents": "GL_TEXTURE_CUBE_MAP"
    },
    {
      "trigger": "GL_TEXTURE_CUBE_MAP_NEGATIVE_X (34070)",
      "contents": "GL_TEXTURE_CUBE_MAP_NEGATIVE_X"
    },
    {
      "trigger": "GL_TEXTURE_CUBE_MAP_NEGATIVE_Y (34072)",
      "contents": "GL_TEXTURE_CUBE_MAP_NEGATIVE_Y"
    },
    {
      "trigger": "GL_TEXTURE_CUBE_MAP_NEGATIVE_Z (34074)",
      "contents": "GL_TEXTURE_CUBE_MAP_NEGATIVE_Z"
    },
    {
      "trigger": "GL_TEXTURE_CUBE_MAP_POSITIVE_X (34069)",
      "contents": "GL_TEXTURE_CUBE_MAP_POSITIVE_X"
    },
    {
      "trigger": "GL_TEXTURE_CUBE_MAP_POSITIVE_Y (34071)",
      "contents": "GL_TEXTURE_CUBE_MAP_POSITIVE_Y"
    },
    {
      "trigger": "GL_TEXTURE_CUBE_MAP_POSITIVE_Z (34073)",
      "contents": "GL_TEXTURE_CUBE_MAP_POSITIVE_Z"
    },
    {
      "trigger": "GL_TEXTURE_ENV (8960)",
      "contents": "GL_TEXTURE_ENV"
    },
    {
      "trigger": "GL_TEXTURE_ENV_COLOR (8705)",
      "contents": "GL_TEXTURE_ENV_COLOR"
    },
    {
      "trigger": "GL_TEXTURE_ENV_MODE (8704)",
      "contents": "GL_TEXTURE_ENV_MODE"
    },
    {
      "trigger": "GL_TEXTURE_FILTER_CONTROL_EXT (34048)",
      "contents": "GL_TEXTURE_FILTER_CONTROL_EXT"
    },
    {
      "trigger": "GL_TEXTURE_LOD_BIAS_EXT (34049)",
      "contents": "GL_TEXTURE_LOD_BIAS_EXT"
    },
    {
      "trigger": "GL_TEXTURE_MAG_FILTER (10240)",
      "contents": "GL_TEXTURE_MAG_FILTER"
    },
    {
      "trigger": "GL_TEXTURE_MATRIX (2984)",
      "contents": "GL_TEXTURE_MATRIX"
    },
    {
      "trigger": "GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES (35215)",
      "contents": "GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES"
    },
    {
      "trigger": "GL_TEXTURE_MAX_ANISOTROPY_EXT (34046)",
      "contents": "GL_TEXTURE_MAX_ANISOTROPY_EXT"
    },
    {
      "trigger": "GL_TEXTURE_MAX_LEVEL_APPLE (33085)",
      "contents": "GL_TEXTURE_MAX_LEVEL_APPLE"
    },
    {
      "trigger": "GL_TEXTURE_MIN_FILTER (10241)",
      "contents": "GL_TEXTURE_MIN_FILTER"
    },
    {
      "trigger": "GL_TEXTURE_STACK_DEPTH (2981)",
      "contents": "GL_TEXTURE_STACK_DEPTH"
    },
    {
      "trigger": "GL_TEXTURE_WRAP_S (10242)",
      "contents": "GL_TEXTURE_WRAP_S"
    },
    {
      "trigger": "GL_TEXTURE_WRAP_T (10243)",
      "contents": "GL_TEXTURE_WRAP_T"
    },
    {
      "trigger": "GL_TRIANGLES (4)",
      "contents": "GL_TRIANGLES"
    },
    {
      "trigger": "GL_TRIANGLE_FAN (6)",
      "contents": "GL_TRIANGLE_FAN"
    },
    {
      "trigger": "GL_TRIANGLE_STRIP (5)",
      "contents": "GL_TRIANGLE_STRIP"
    },
    {
      "trigger": "GL_TRUE (1)",
      "contents": "GL_TRUE"
    },
    {
      "trigger": "GL_UNPACK_ALIGNMENT (3317)",
      "contents": "GL_UNPACK_ALIGNMENT"
    },
    {
      "trigger": "GL_UNSIGNED_BYTE (5121)",
      "contents": "GL_UNSIGNED_BYTE"
    },
    {
      "trigger": "GL_UNSIGNED_INT (5125)",
      "contents": "GL_UNSIGNED_INT"
    },
    {
      "trigger": "GL_UNSIGNED_INT_24_8_OES (34042)",
      "contents": "GL_UNSIGNED_INT_24_8_OES"
    },
    {
      "trigger": "GL_UNSIGNED_INT_OES (5125)",
      "contents": "GL_UNSIGNED_INT_OES"
    },
    {
      "trigger": "GL_UNSIGNED_NORMALIZED_EXT (35863)",
      "contents": "GL_UNSIGNED_NORMALIZED_EXT"
    },
    {
      "trigger": "GL_UNSIGNED_SHORT (5123)",
      "contents": "GL_UNSIGNED_SHORT"
    },
    {
      "trigger": "GL_UNSIGNED_SHORT_1_5_5_5_REV (33638)",
      "contents": "GL_UNSIGNED_SHORT_1_5_5_5_REV"
    },
    {
      "trigger": "GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT (33638)",
      "contents": "GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT"
    },
    {
      "trigger": "GL_UNSIGNED_SHORT_4_4_4_4 (32819)",
      "contents": "GL_UNSIGNED_SHORT_4_4_4_4"
    },
    {
      "trigger": "GL_UNSIGNED_SHORT_4_4_4_4_REV (33637)",
      "contents": "GL_UNSIGNED_SHORT_4_4_4_4_REV"
    },
    {
      "trigger": "GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT (33637)",
      "contents": "GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT"
    },
    {
      "trigger": "GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG (33637)",
      "contents": "GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG"
    },
    {
      "trigger": "GL_UNSIGNED_SHORT_5_5_5_1 (32820)",
      "contents": "GL_UNSIGNED_SHORT_5_5_5_1"
    },
    {
      "trigger": "GL_UNSIGNED_SHORT_5_6_5 (33635)",
      "contents": "GL_UNSIGNED_SHORT_5_6_5"
    },
    {
      "trigger": "GL_UNSIGNED_SHORT_8_8_APPLE (34234)",
      "contents": "GL_UNSIGNED_SHORT_8_8_APPLE"
    },
    {
      "trigger": "GL_UNSIGNED_SHORT_8_8_REV_APPLE (34235)",
      "contents": "GL_UNSIGNED_SHORT_8_8_REV_APPLE"
    },
    {
      "trigger": "GL_VALIDATE_STATUS (35715)",
      "contents": "GL_VALIDATE_STATUS"
    },
    {
      "trigger": "GL_VENDOR (7936)",
      "contents": "GL_VENDOR"
    },
    {
      "trigger": "GL_VERSION (7938)",
      "contents": "GL_VERSION"
    },
    {
      "trigger": "GL_VERSION_ES_CL_1_0 (1)",
      "contents": "GL_VERSION_ES_CL_1_0"
    },
    {
      "trigger": "GL_VERSION_ES_CL_1_1 (1)",
      "contents": "GL_VERSION_ES_CL_1_1"
    },
    {
      "trigger": "GL_VERSION_ES_CM_1_0 (1)",
      "contents": "GL_VERSION_ES_CM_1_0"
    },
    {
      "trigger": "GL_VERSION_ES_CM_1_1 (1)",
      "contents": "GL_VERSION_ES_CM_1_1"
    },
    {
      "trigger": "GL_VERTEX_ARRAY (32884)",
      "contents": "GL_VERTEX_ARRAY"
    },
    {
      "trigger": "GL_VERTEX_ARRAY_BINDING_OES (34229)",
      "contents": "GL_VERTEX_ARRAY_BINDING_OES"
    },
    {
      "trigger": "GL_VERTEX_ARRAY_BUFFER_BINDING (34966)",
      "contents": "GL_VERTEX_ARRAY_BUFFER_BINDING"
    },
    {
      "trigger": "GL_VERTEX_ARRAY_OBJECT_EXT (37204)",
      "contents": "GL_VERTEX_ARRAY_OBJECT_EXT"
    },
    {
      "trigger": "GL_VERTEX_ARRAY_POINTER (32910)",
      "contents": "GL_VERTEX_ARRAY_POINTER"
    },
    {
      "trigger": "GL_VERTEX_ARRAY_SIZE (32890)",
      "contents": "GL_VERTEX_ARRAY_SIZE"
    },
    {
      "trigger": "GL_VERTEX_ARRAY_STRIDE (32892)",
      "contents": "GL_VERTEX_ARRAY_STRIDE"
    },
    {
      "trigger": "GL_VERTEX_ARRAY_TYPE (32891)",
      "contents": "GL_VERTEX_ARRAY_TYPE"
    },
    {
      "trigger": "GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING (34975)",
      "contents": "GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING"
    },
    {
      "trigger": "GL_VERTEX_ATTRIB_ARRAY_ENABLED (34338)",
      "contents": "GL_VERTEX_ATTRIB_ARRAY_ENABLED"
    },
    {
      "trigger": "GL_VERTEX_ATTRIB_ARRAY_NORMALIZED (34922)",
      "contents": "GL_VERTEX_ATTRIB_ARRAY_NORMALIZED"
    },
    {
      "trigger": "GL_VERTEX_ATTRIB_ARRAY_POINTER (34373)",
      "contents": "GL_VERTEX_ATTRIB_ARRAY_POINTER"
    },
    {
      "trigger": "GL_VERTEX_ATTRIB_ARRAY_SIZE (34339)",
      "contents": "GL_VERTEX_ATTRIB_ARRAY_SIZE"
    },
    {
      "trigger": "GL_VERTEX_ATTRIB_ARRAY_STRIDE (34340)",
      "contents": "GL_VERTEX_ATTRIB_ARRAY_STRIDE"
    },
    {
      "trigger": "GL_VERTEX_ATTRIB_ARRAY_TYPE (34341)",
      "contents": "GL_VERTEX_ATTRIB_ARRAY_TYPE"
    },
    {
      "trigger": "GL_VERTEX_SHADER (35633)",
      "contents": "GL_VERTEX_SHADER"
    },
    {
      "trigger": "GL_VERTEX_SHADER_BIT_EXT (1)",
      "contents": "GL_VERTEX_SHADER_BIT_EXT"
    },
    {
      "trigger": "GL_VIEWPORT (2978)",
      "contents": "GL_VIEWPORT"
    },
    {
      "trigger": "GL_WEIGHT_ARRAY_BUFFER_BINDING_OES (34974)",
      "contents": "GL_WEIGHT_ARRAY_BUFFER_BINDING_OES"
    },
    {
      "trigger": "GL_WEIGHT_ARRAY_OES (34477)",
      "contents": "GL_WEIGHT_ARRAY_OES"
    },
    {
      "trigger": "GL_WEIGHT_ARRAY_POINTER_OES (34476)",
      "contents": "GL_WEIGHT_ARRAY_POINTER_OES"
    },
    {
      "trigger": "GL_WEIGHT_ARRAY_SIZE_OES (34475)",
      "contents": "GL_WEIGHT_ARRAY_SIZE_OES"
    },
    {
      "trigger": "GL_WEIGHT_ARRAY_STRIDE_OES (34474)",
      "contents": "GL_WEIGHT_ARRAY_STRIDE_OES"
    },
    {
      "trigger": "GL_WEIGHT_ARRAY_TYPE_OES (34473)",
      "contents": "GL_WEIGHT_ARRAY_TYPE_OES"
    },
    {
      "trigger": "GL_WRITE_ONLY_OES (35001)",
      "contents": "GL_WRITE_ONLY_OES"
    },
    {
      "trigger": "GL_XOR (5382)",
      "contents": "GL_XOR"
    },
    {
      "trigger": "GL_ZERO (0)",
      "contents": "GL_ZERO"
    },
    {
      "trigger": "MFMailComposeErrorCodeSaveFailed (0)",
      "contents": "MFMailComposeErrorCodeSaveFailed"
    },
    {
      "trigger": "MFMailComposeErrorCodeSendFailed (1)",
      "contents": "MFMailComposeErrorCodeSendFailed"
    },
    {
      "trigger": "MFMailComposeErrorDomain (NSString*)",
      "contents": "MFMailComposeErrorDomain"
    },
    {
      "trigger": "MFMailComposeResultCancelled (0)",
      "contents": "MFMailComposeResultCancelled"
    },
    {
      "trigger": "MFMailComposeResultFailed (3)",
      "contents": "MFMailComposeResultFailed"
    },
    {
      "trigger": "MFMailComposeResultSaved (1)",
      "contents": "MFMailComposeResultSaved"
    },
    {
      "trigger": "MFMailComposeResultSent (2)",
      "contents": "MFMailComposeResultSent"
    },
    {
      "trigger": "MFMessageComposeViewControllerTextMessageAvailabilityDidChangeNotification (NSString*)",
      "contents": "MFMessageComposeViewControllerTextMessageAvailabilityDidChangeNotification"
    },
    {
      "trigger": "MFMessageComposeViewControllerTextMessageAvailabilityKey (NSString*)",
      "contents": "MFMessageComposeViewControllerTextMessageAvailabilityKey"
    },
    {
      "trigger": "MIDIClientCreate",
      "contents": "MIDIClientCreate(${1:CFStringRef name}, ${2:MIDINotifyProc notifyProc}, ${3:void* notifyRefCon}, ${4:MIDIClientRef* outClient})"
    },
    {
      "trigger": "MIDIClientDispose",
      "contents": "MIDIClientDispose(${1:MIDIClientRef client})"
    },
    {
      "trigger": "MIDIDestinationCreate",
      "contents": "MIDIDestinationCreate(${1:MIDIClientRef client}, ${2:CFStringRef name}, ${3:MIDIReadProc readProc}, ${4:void* refCon}, ${5:MIDIEndpointRef* outDest})"
    },
    {
      "trigger": "MIDIDeviceAddEntity",
      "contents": "MIDIDeviceAddEntity(${1:MIDIDeviceRef device}, ${2:CFStringRef name}, ${3:Boolean embedded}, ${4:ItemCount numSourceEndpoints}, ${5:ItemCount numDestinationEndpoints}, ${6:MIDIEntityRef* newEntity})"
    },
    {
      "trigger": "MIDIDeviceCreate",
      "contents": "MIDIDeviceCreate(${1:MIDIDriverRef owner}, ${2:CFStringRef name}, ${3:CFStringRef manufacturer}, ${4:CFStringRef model}, ${5:MIDIDeviceRef* outDevice})"
    },
    {
      "trigger": "MIDIDeviceDispose",
      "contents": "MIDIDeviceDispose(${1:MIDIDeviceRef device})"
    },
    {
      "trigger": "MIDIDeviceGetEntity",
      "contents": "MIDIDeviceGetEntity(${1:MIDIDeviceRef device}, ${2:ItemCount entityIndex0})"
    },
    {
      "trigger": "MIDIDeviceGetNumberOfEntities",
      "contents": "MIDIDeviceGetNumberOfEntities(${1:MIDIDeviceRef device})"
    },
    {
      "trigger": "MIDIDeviceListAddDevice",
      "contents": "MIDIDeviceListAddDevice(${1:MIDIDeviceListRef devList}, ${2:MIDIDeviceRef dev})"
    },
    {
      "trigger": "MIDIDeviceListDispose",
      "contents": "MIDIDeviceListDispose(${1:MIDIDeviceListRef devList})"
    },
    {
      "trigger": "MIDIDeviceListGetDevice",
      "contents": "MIDIDeviceListGetDevice(${1:MIDIDeviceListRef devList}, ${2:ItemCount index0})"
    },
    {
      "trigger": "MIDIDeviceListGetNumberOfDevices",
      "contents": "MIDIDeviceListGetNumberOfDevices(${1:MIDIDeviceListRef devList})"
    },
    {
      "trigger": "MIDIDeviceRemoveEntity",
      "contents": "MIDIDeviceRemoveEntity(${1:MIDIDeviceRef device}, ${2:MIDIEntityRef entity})"
    },
    {
      "trigger": "MIDIEndpointDispose",
      "contents": "MIDIEndpointDispose(${1:MIDIEndpointRef endpt})"
    },
    {
      "trigger": "MIDIEndpointGetEntity",
      "contents": "MIDIEndpointGetEntity(${1:MIDIEndpointRef inEndpoint}, ${2:MIDIEntityRef* outEntity})"
    },
    {
      "trigger": "MIDIEndpointGetRefCons",
      "contents": "MIDIEndpointGetRefCons(${1:MIDIEndpointRef endpt}, ${2:void** ref1}, ${3:void** ref2})"
    },
    {
      "trigger": "MIDIEndpointSetRefCons",
      "contents": "MIDIEndpointSetRefCons(${1:MIDIEndpointRef endpt}, ${2:void* ref1}, ${3:void* ref2})"
    },
    {
      "trigger": "MIDIEntityAddOrRemoveEndpoints",
      "contents": "MIDIEntityAddOrRemoveEndpoints(${1:MIDIEntityRef entity}, ${2:ItemCount numSourceEndpoints}, ${3:ItemCount numDestinationEndpoints})"
    },
    {
      "trigger": "MIDIEntityGetDestination",
      "contents": "MIDIEntityGetDestination(${1:MIDIEntityRef entity}, ${2:ItemCount destIndex0})"
    },
    {
      "trigger": "MIDIEntityGetDevice",
      "contents": "MIDIEntityGetDevice(${1:MIDIEntityRef inEntity}, ${2:MIDIDeviceRef* outDevice})"
    },
    {
      "trigger": "MIDIEntityGetNumberOfDestinations",
      "contents": "MIDIEntityGetNumberOfDestinations(${1:MIDIEntityRef entity})"
    },
    {
      "trigger": "MIDIEntityGetNumberOfSources",
      "contents": "MIDIEntityGetNumberOfSources(${1:MIDIEntityRef entity})"
    },
    {
      "trigger": "MIDIEntityGetSource",
      "contents": "MIDIEntityGetSource(${1:MIDIEntityRef entity}, ${2:ItemCount sourceIndex0})"
    },
    {
      "trigger": "MIDIExternalDeviceCreate",
      "contents": "MIDIExternalDeviceCreate(${1:CFStringRef name}, ${2:CFStringRef manufacturer}, ${3:CFStringRef model}, ${4:MIDIDeviceRef* outDevice})"
    },
    {
      "trigger": "MIDIFlushOutput",
      "contents": "MIDIFlushOutput(${1:MIDIEndpointRef dest})"
    },
    {
      "trigger": "MIDIGetDestination",
      "contents": "MIDIGetDestination(${1:ItemCount destIndex0})"
    },
    {
      "trigger": "MIDIGetDevice",
      "contents": "MIDIGetDevice(${1:ItemCount deviceIndex0})"
    },
    {
      "trigger": "MIDIGetDriverDeviceList",
      "contents": "MIDIGetDriverDeviceList(${1:MIDIDriverRef driver})"
    },
    {
      "trigger": "MIDIGetExternalDevice",
      "contents": "MIDIGetExternalDevice(${1:ItemCount deviceIndex0})"
    },
    {
      "trigger": "MIDIGetSource",
      "contents": "MIDIGetSource(${1:ItemCount sourceIndex0})"
    },
    {
      "trigger": "MIDIInputPortCreate",
      "contents": "MIDIInputPortCreate(${1:MIDIClientRef client}, ${2:CFStringRef portName}, ${3:MIDIReadProc readProc}, ${4:void* refCon}, ${5:MIDIPortRef* outPort})"
    },
    {
      "trigger": "MIDINetworkBonjourServiceType (NSString*)",
      "contents": "MIDINetworkBonjourServiceType"
    },
    {
      "trigger": "MIDINetworkConnection.connectionWithHost:",
      "contents": "MIDINetworkConnection.connectionWithHost(${1:MIDINetworkHost* host})"
    },
    {
      "trigger": "MIDINetworkConnectionPolicy_Anyone (2)",
      "contents": "MIDINetworkConnectionPolicy_Anyone"
    },
    {
      "trigger": "MIDINetworkConnectionPolicy_HostsInContactList (1)",
      "contents": "MIDINetworkConnectionPolicy_HostsInContactList"
    },
    {
      "trigger": "MIDINetworkConnectionPolicy_NoOne (0)",
      "contents": "MIDINetworkConnectionPolicy_NoOne"
    },
    {
      "trigger": "MIDINetworkHost.hostWithName:address:port:",
      "contents": "MIDINetworkHost.hostWithName(${1:NSString* name}, address:${2:NSString* address}, port:${3:NSUInteger port})"
    },
    {
      "trigger": "MIDINetworkHost.hostWithName:netService:",
      "contents": "MIDINetworkHost.hostWithName(${1:NSString* name}, netService:${2:NSNetService* netService})"
    },
    {
      "trigger": "MIDINetworkHost.hostWithName:netServiceName:netServiceDomain:",
      "contents": "MIDINetworkHost.hostWithName(${1:NSString* name}, netServiceName:${2:NSString* netServiceName}, netServiceDomain:${3:NSString* netServiceDomain})"
    },
    {
      "trigger": "MIDINetworkNotificationContactsDidChange (NSString*)",
      "contents": "MIDINetworkNotificationContactsDidChange"
    },
    {
      "trigger": "MIDINetworkNotificationSessionDidChange (NSString*)",
      "contents": "MIDINetworkNotificationSessionDidChange"
    },
    {
      "trigger": "MIDIObjectFindByUniqueID",
      "contents": "MIDIObjectFindByUniqueID(${1:MIDIUniqueID inUniqueID}, ${2:MIDIObjectRef* outObject}, ${3:MIDIObjectType* outObjectType})"
    },
    {
      "trigger": "MIDIObjectGetDataProperty",
      "contents": "MIDIObjectGetDataProperty(${1:MIDIObjectRef obj}, ${2:CFStringRef propertyID}, ${3:CFDataRef* outData})"
    },
    {
      "trigger": "MIDIObjectGetDictionaryProperty",
      "contents": "MIDIObjectGetDictionaryProperty(${1:MIDIObjectRef obj}, ${2:CFStringRef propertyID}, ${3:CFDictionaryRef* outDict})"
    },
    {
      "trigger": "MIDIObjectGetIntegerProperty",
      "contents": "MIDIObjectGetIntegerProperty(${1:MIDIObjectRef obj}, ${2:CFStringRef propertyID}, ${3:SInt32* outValue})"
    },
    {
      "trigger": "MIDIObjectGetProperties",
      "contents": "MIDIObjectGetProperties(${1:MIDIObjectRef obj}, ${2:CFPropertyListRef* outProperties}, ${3:Boolean deep})"
    },
    {
      "trigger": "MIDIObjectGetStringProperty",
      "contents": "MIDIObjectGetStringProperty(${1:MIDIObjectRef obj}, ${2:CFStringRef propertyID}, ${3:CFStringRef* str})"
    },
    {
      "trigger": "MIDIObjectRemoveProperty",
      "contents": "MIDIObjectRemoveProperty(${1:MIDIObjectRef obj}, ${2:CFStringRef propertyID})"
    },
    {
      "trigger": "MIDIObjectSetDataProperty",
      "contents": "MIDIObjectSetDataProperty(${1:MIDIObjectRef obj}, ${2:CFStringRef propertyID}, ${3:CFDataRef data})"
    },
    {
      "trigger": "MIDIObjectSetDictionaryProperty",
      "contents": "MIDIObjectSetDictionaryProperty(${1:MIDIObjectRef obj}, ${2:CFStringRef propertyID}, ${3:CFDictionaryRef data})"
    },
    {
      "trigger": "MIDIObjectSetIntegerProperty",
      "contents": "MIDIObjectSetIntegerProperty(${1:MIDIObjectRef obj}, ${2:CFStringRef propertyID}, ${3:SInt32 value})"
    },
    {
      "trigger": "MIDIObjectSetStringProperty",
      "contents": "MIDIObjectSetStringProperty(${1:MIDIObjectRef obj}, ${2:CFStringRef propertyID}, ${3:CFStringRef str})"
    },
    {
      "trigger": "MIDIOutputPortCreate",
      "contents": "MIDIOutputPortCreate(${1:MIDIClientRef client}, ${2:CFStringRef portName}, ${3:MIDIPortRef* outPort})"
    },
    {
      "trigger": "MIDIPacketListAdd",
      "contents": "MIDIPacketListAdd(${1:MIDIPacketList* pktlist}, ${2:ByteCount listSize}, ${3:MIDIPacket* curPacket}, ${4:MIDITimeStamp time}, ${5:ByteCount nData}, ${6:Byte* data})"
    },
    {
      "trigger": "MIDIPacketListInit",
      "contents": "MIDIPacketListInit(${1:MIDIPacketList* pktlist})"
    },
    {
      "trigger": "MIDIPortConnectSource",
      "contents": "MIDIPortConnectSource(${1:MIDIPortRef port}, ${2:MIDIEndpointRef source}, ${3:void* connRefCon})"
    },
    {
      "trigger": "MIDIPortDisconnectSource",
      "contents": "MIDIPortDisconnectSource(${1:MIDIPortRef port}, ${2:MIDIEndpointRef source})"
    },
    {
      "trigger": "MIDIPortDispose",
      "contents": "MIDIPortDispose(${1:MIDIPortRef port})"
    },
    {
      "trigger": "MIDIReceived",
      "contents": "MIDIReceived(${1:MIDIEndpointRef src}, ${2:MIDIPacketList* pktlist})"
    },
    {
      "trigger": "MIDISend",
      "contents": "MIDISend(${1:MIDIPortRef port}, ${2:MIDIEndpointRef dest}, ${3:MIDIPacketList* pktlist})"
    },
    {
      "trigger": "MIDISendSysex",
      "contents": "MIDISendSysex(${1:MIDISysexSendRequest* request})"
    },
    {
      "trigger": "MIDISetupAddDevice",
      "contents": "MIDISetupAddDevice(${1:MIDIDeviceRef device})"
    },
    {
      "trigger": "MIDISetupAddExternalDevice",
      "contents": "MIDISetupAddExternalDevice(${1:MIDIDeviceRef device})"
    },
    {
      "trigger": "MIDISetupRemoveDevice",
      "contents": "MIDISetupRemoveDevice(${1:MIDIDeviceRef device})"
    },
    {
      "trigger": "MIDISetupRemoveExternalDevice",
      "contents": "MIDISetupRemoveExternalDevice(${1:MIDIDeviceRef device})"
    },
    {
      "trigger": "MIDISourceCreate",
      "contents": "MIDISourceCreate(${1:MIDIClientRef client}, ${2:CFStringRef name}, ${3:MIDIEndpointRef* outSrc})"
    },
    {
      "trigger": "MIDIThruConnectionCreate",
      "contents": "MIDIThruConnectionCreate(${1:CFStringRef inPersistentOwnerID}, ${2:CFDataRef inConnectionParams}, ${3:MIDIThruConnectionRef* outConnection})"
    },
    {
      "trigger": "MIDIThruConnectionDispose",
      "contents": "MIDIThruConnectionDispose(${1:MIDIThruConnectionRef connection})"
    },
    {
      "trigger": "MIDIThruConnectionFind",
      "contents": "MIDIThruConnectionFind(${1:CFStringRef inPersistentOwnerID}, ${2:CFDataRef* outConnectionList})"
    },
    {
      "trigger": "MIDIThruConnectionGetParams",
      "contents": "MIDIThruConnectionGetParams(${1:MIDIThruConnectionRef connection}, ${2:CFDataRef* outConnectionParams})"
    },
    {
      "trigger": "MIDIThruConnectionParamsInitialize",
      "contents": "MIDIThruConnectionParamsInitialize(${1:MIDIThruConnectionParams* inConnectionParams})"
    },
    {
      "trigger": "MIDIThruConnectionSetParams",
      "contents": "MIDIThruConnectionSetParams(${1:MIDIThruConnectionRef connection}, ${2:CFDataRef inConnectionParams})"
    },
    {
      "trigger": "MKAnnotationCalloutInfoDidChangeNotification (NSString*)",
      "contents": "MKAnnotationCalloutInfoDidChangeNotification"
    },
    {
      "trigger": "MKAnnotationViewDragStateCanceling (3)",
      "contents": "MKAnnotationViewDragStateCanceling"
    },
    {
      "trigger": "MKAnnotationViewDragStateDragging (2)",
      "contents": "MKAnnotationViewDragStateDragging"
    },
    {
      "trigger": "MKAnnotationViewDragStateEnding (4)",
      "contents": "MKAnnotationViewDragStateEnding"
    },
    {
      "trigger": "MKAnnotationViewDragStateNone (0)",
      "contents": "MKAnnotationViewDragStateNone"
    },
    {
      "trigger": "MKAnnotationViewDragStateStarting (1)",
      "contents": "MKAnnotationViewDragStateStarting"
    },
    {
      "trigger": "MKCircle.circleWithCenterCoordinate:radius:",
      "contents": "MKCircle.circleWithCenterCoordinate(${1:CLLocationCoordinate2D coord}, radius:${2:CLLocationDistance radius})"
    },
    {
      "trigger": "MKCircle.circleWithMapRect:",
      "contents": "MKCircle.circleWithMapRect(${1:MKMapRect mapRect})"
    },
    {
      "trigger": "MKCoordinateForMapPoint",
      "contents": "MKCoordinateForMapPoint(${1:MKMapPoint mapPoint})"
    },
    {
      "trigger": "MKCoordinateRegionForMapRect",
      "contents": "MKCoordinateRegionForMapRect(${1:MKMapRect rect})"
    },
    {
      "trigger": "MKCoordinateRegionMake",
      "contents": "MKCoordinateRegionMake(${1:CLLocationCoordinate2D centerCoordinate}, ${2:MKCoordinateSpan span})"
    },
    {
      "trigger": "MKCoordinateRegionMakeWithDistance",
      "contents": "MKCoordinateRegionMakeWithDistance(${1:CLLocationCoordinate2D centerCoordinate}, ${2:CLLocationDistance latitudinalMeters}, ${3:CLLocationDistance longitudinalMeters})"
    },
    {
      "trigger": "MKCoordinateSpanMake",
      "contents": "MKCoordinateSpanMake(${1:CLLocationDegrees latitudeDelta}, ${2:CLLocationDegrees longitudeDelta})"
    },
    {
      "trigger": "MKErrorDomain (NSString*)",
      "contents": "MKErrorDomain"
    },
    {
      "trigger": "MKErrorLoadingThrottled (3)",
      "contents": "MKErrorLoadingThrottled"
    },
    {
      "trigger": "MKErrorPlacemarkNotFound (4)",
      "contents": "MKErrorPlacemarkNotFound"
    },
    {
      "trigger": "MKErrorServerFailure (2)",
      "contents": "MKErrorServerFailure"
    },
    {
      "trigger": "MKErrorUnknown (1)",
      "contents": "MKErrorUnknown"
    },
    {
      "trigger": "MKMapPointEqualToPoint",
      "contents": "MKMapPointEqualToPoint(${1:MKMapPoint point1}, ${2:MKMapPoint point2})"
    },
    {
      "trigger": "MKMapPointForCoordinate",
      "contents": "MKMapPointForCoordinate(${1:CLLocationCoordinate2D coordinate})"
    },
    {
      "trigger": "MKMapPointMake",
      "contents": "MKMapPointMake(${1:double x}, ${2:double y})"
    },
    {
      "trigger": "MKMapPointsPerMeterAtLatitude",
      "contents": "MKMapPointsPerMeterAtLatitude(${1:CLLocationDegrees latitude})"
    },
    {
      "trigger": "MKMapRectContainsPoint",
      "contents": "MKMapRectContainsPoint(${1:MKMapRect rect}, ${2:MKMapPoint point})"
    },
    {
      "trigger": "MKMapRectContainsRect",
      "contents": "MKMapRectContainsRect(${1:MKMapRect rect1}, ${2:MKMapRect rect2})"
    },
    {
      "trigger": "MKMapRectDivide",
      "contents": "MKMapRectDivide(${1:MKMapRect rect}, ${2:MKMapRect* slice}, ${3:MKMapRect* remainder}, ${4:double amount}, ${5:CGRectEdge edge})"
    },
    {
      "trigger": "MKMapRectEqualToRect",
      "contents": "MKMapRectEqualToRect(${1:MKMapRect rect1}, ${2:MKMapRect rect2})"
    },
    {
      "trigger": "MKMapRectGetHeight",
      "contents": "MKMapRectGetHeight(${1:MKMapRect rect})"
    },
    {
      "trigger": "MKMapRectGetMaxX",
      "contents": "MKMapRectGetMaxX(${1:MKMapRect rect})"
    },
    {
      "trigger": "MKMapRectGetMaxY",
      "contents": "MKMapRectGetMaxY(${1:MKMapRect rect})"
    },
    {
      "trigger": "MKMapRectGetMidX",
      "contents": "MKMapRectGetMidX(${1:MKMapRect rect})"
    },
    {
      "trigger": "MKMapRectGetMidY",
      "contents": "MKMapRectGetMidY(${1:MKMapRect rect})"
    },
    {
      "trigger": "MKMapRectGetMinX",
      "contents": "MKMapRectGetMinX(${1:MKMapRect rect})"
    },
    {
      "trigger": "MKMapRectGetMinY",
      "contents": "MKMapRectGetMinY(${1:MKMapRect rect})"
    },
    {
      "trigger": "MKMapRectGetWidth",
      "contents": "MKMapRectGetWidth(${1:MKMapRect rect})"
    },
    {
      "trigger": "MKMapRectInset",
      "contents": "MKMapRectInset(${1:MKMapRect rect}, ${2:double dx}, ${3:double dy})"
    },
    {
      "trigger": "MKMapRectIntersection",
      "contents": "MKMapRectIntersection(${1:MKMapRect rect1}, ${2:MKMapRect rect2})"
    },
    {
      "trigger": "MKMapRectIntersectsRect",
      "contents": "MKMapRectIntersectsRect(${1:MKMapRect rect1}, ${2:MKMapRect rect2})"
    },
    {
      "trigger": "MKMapRectIsEmpty",
      "contents": "MKMapRectIsEmpty(${1:MKMapRect rect})"
    },
    {
      "trigger": "MKMapRectIsNull",
      "contents": "MKMapRectIsNull(${1:MKMapRect rect})"
    },
    {
      "trigger": "MKMapRectMake",
      "contents": "MKMapRectMake(${1:double x}, ${2:double y}, ${3:double width}, ${4:double height})"
    },
    {
      "trigger": "MKMapRectNull (MKMapRect)",
      "contents": "MKMapRectNull"
    },
    {
      "trigger": "MKMapRectOffset",
      "contents": "MKMapRectOffset(${1:MKMapRect rect}, ${2:double dx}, ${3:double dy})"
    },
    {
      "trigger": "MKMapRectRemainder",
      "contents": "MKMapRectRemainder(${1:MKMapRect rect})"
    },
    {
      "trigger": "MKMapRectSpans180thMeridian",
      "contents": "MKMapRectSpans180thMeridian(${1:MKMapRect rect})"
    },
    {
      "trigger": "MKMapRectUnion",
      "contents": "MKMapRectUnion(${1:MKMapRect rect1}, ${2:MKMapRect rect2})"
    },
    {
      "trigger": "MKMapRectWorld (MKMapRect)",
      "contents": "MKMapRectWorld"
    },
    {
      "trigger": "MKMapSizeEqualToSize",
      "contents": "MKMapSizeEqualToSize(${1:MKMapSize size1}, ${2:MKMapSize size2})"
    },
    {
      "trigger": "MKMapSizeMake",
      "contents": "MKMapSizeMake(${1:double width}, ${2:double height})"
    },
    {
      "trigger": "MKMapSizeWorld (MKMapSize)",
      "contents": "MKMapSizeWorld"
    },
    {
      "trigger": "MKMapTypeHybrid (2)",
      "contents": "MKMapTypeHybrid"
    },
    {
      "trigger": "MKMapTypeSatellite (1)",
      "contents": "MKMapTypeSatellite"
    },
    {
      "trigger": "MKMapTypeStandard (0)",
      "contents": "MKMapTypeStandard"
    },
    {
      "trigger": "MKMetersBetweenMapPoints",
      "contents": "MKMetersBetweenMapPoints(${1:MKMapPoint a}, ${2:MKMapPoint b})"
    },
    {
      "trigger": "MKMetersPerMapPointAtLatitude",
      "contents": "MKMetersPerMapPointAtLatitude(${1:CLLocationDegrees latitude})"
    },
    {
      "trigger": "MKPinAnnotationColorGreen (1)",
      "contents": "MKPinAnnotationColorGreen"
    },
    {
      "trigger": "MKPinAnnotationColorPurple (2)",
      "contents": "MKPinAnnotationColorPurple"
    },
    {
      "trigger": "MKPinAnnotationColorRed (0)",
      "contents": "MKPinAnnotationColorRed"
    },
    {
      "trigger": "MKPolygon.polygonWithCoordinates:count:",
      "contents": "MKPolygon.polygonWithCoordinates(${1:CLLocationCoordinate2D* coords}, count:${2:NSUInteger count})"
    },
    {
      "trigger": "MKPolygon.polygonWithCoordinates:count:interiorPolygons:",
      "contents": "MKPolygon.polygonWithCoordinates(${1:CLLocationCoordinate2D* coords}, count:${2:NSUInteger count}, interiorPolygons:${3:NSArray* interiorPolygons})"
    },
    {
      "trigger": "MKPolygon.polygonWithPoints:count:",
      "contents": "MKPolygon.polygonWithPoints(${1:MKMapPoint* points}, count:${2:NSUInteger count})"
    },
    {
      "trigger": "MKPolygon.polygonWithPoints:count:interiorPolygons:",
      "contents": "MKPolygon.polygonWithPoints(${1:MKMapPoint* points}, count:${2:NSUInteger count}, interiorPolygons:${3:NSArray* interiorPolygons})"
    },
    {
      "trigger": "MKPolyline.polylineWithCoordinates:count:",
      "contents": "MKPolyline.polylineWithCoordinates(${1:CLLocationCoordinate2D* coords}, count:${2:NSUInteger count})"
    },
    {
      "trigger": "MKPolyline.polylineWithPoints:count:",
      "contents": "MKPolyline.polylineWithPoints(${1:MKMapPoint* points}, count:${2:NSUInteger count})"
    },
    {
      "trigger": "MKRoadWidthAtZoomScale",
      "contents": "MKRoadWidthAtZoomScale(${1:MKZoomScale zoomScale})"
    },
    {
      "trigger": "MKStringFromMapPoint",
      "contents": "MKStringFromMapPoint(${1:MKMapPoint point})"
    },
    {
      "trigger": "MKStringFromMapRect",
      "contents": "MKStringFromMapRect(${1:MKMapRect rect})"
    },
    {
      "trigger": "MKStringFromMapSize",
      "contents": "MKStringFromMapSize(${1:MKMapSize size})"
    },
    {
      "trigger": "MKUserTrackingModeFollow (1)",
      "contents": "MKUserTrackingModeFollow"
    },
    {
      "trigger": "MKUserTrackingModeFollowWithHeading (2)",
      "contents": "MKUserTrackingModeFollowWithHeading"
    },
    {
      "trigger": "MKUserTrackingModeNone (0)",
      "contents": "MKUserTrackingModeNone"
    },
    {
      "trigger": "MPMediaEntity.canFilterByProperty:",
      "contents": "MPMediaEntity.canFilterByProperty(${1:NSString* property})"
    },
    {
      "trigger": "MPMediaEntityPropertyPersistentID (NSString*)",
      "contents": "MPMediaEntityPropertyPersistentID"
    },
    {
      "trigger": "MPMediaGroupingAlbum (1)",
      "contents": "MPMediaGroupingAlbum"
    },
    {
      "trigger": "MPMediaGroupingAlbumArtist (3)",
      "contents": "MPMediaGroupingAlbumArtist"
    },
    {
      "trigger": "MPMediaGroupingArtist (2)",
      "contents": "MPMediaGroupingArtist"
    },
    {
      "trigger": "MPMediaGroupingComposer (4)",
      "contents": "MPMediaGroupingComposer"
    },
    {
      "trigger": "MPMediaGroupingGenre (5)",
      "contents": "MPMediaGroupingGenre"
    },
    {
      "trigger": "MPMediaGroupingPlaylist (6)",
      "contents": "MPMediaGroupingPlaylist"
    },
    {
      "trigger": "MPMediaGroupingPodcastTitle (7)",
      "contents": "MPMediaGroupingPodcastTitle"
    },
    {
      "trigger": "MPMediaGroupingTitle (0)",
      "contents": "MPMediaGroupingTitle"
    },
    {
      "trigger": "MPMediaItem.persistentIDPropertyForGroupingType:",
      "contents": "MPMediaItem.persistentIDPropertyForGroupingType(${1:MPMediaGrouping groupingType})"
    },
    {
      "trigger": "MPMediaItem.titlePropertyForGroupingType:",
      "contents": "MPMediaItem.titlePropertyForGroupingType(${1:MPMediaGrouping groupingType})"
    },
    {
      "trigger": "MPMediaItemCollection.collectionWithItems:",
      "contents": "MPMediaItemCollection.collectionWithItems(${1:NSArray* items})"
    },
    {
      "trigger": "MPMediaItemPropertyAlbumArtist (NSString*)",
      "contents": "MPMediaItemPropertyAlbumArtist"
    },
    {
      "trigger": "MPMediaItemPropertyAlbumArtistPersistentID (NSString*)",
      "contents": "MPMediaItemPropertyAlbumArtistPersistentID"
    },
    {
      "trigger": "MPMediaItemPropertyAlbumPersistentID (NSString*)",
      "contents": "MPMediaItemPropertyAlbumPersistentID"
    },
    {
      "trigger": "MPMediaItemPropertyAlbumTitle (NSString*)",
      "contents": "MPMediaItemPropertyAlbumTitle"
    },
    {
      "trigger": "MPMediaItemPropertyAlbumTrackCount (NSString*)",
      "contents": "MPMediaItemPropertyAlbumTrackCount"
    },
    {
      "trigger": "MPMediaItemPropertyAlbumTrackNumber (NSString*)",
      "contents": "MPMediaItemPropertyAlbumTrackNumber"
    },
    {
      "trigger": "MPMediaItemPropertyArtist (NSString*)",
      "contents": "MPMediaItemPropertyArtist"
    },
    {
      "trigger": "MPMediaItemPropertyArtistPersistentID (NSString*)",
      "contents": "MPMediaItemPropertyArtistPersistentID"
    },
    {
      "trigger": "MPMediaItemPropertyArtwork (NSString*)",
      "contents": "MPMediaItemPropertyArtwork"
    },
    {
      "trigger": "MPMediaItemPropertyAssetURL (NSString*)",
      "contents": "MPMediaItemPropertyAssetURL"
    },
    {
      "trigger": "MPMediaItemPropertyBeatsPerMinute (NSString*)",
      "contents": "MPMediaItemPropertyBeatsPerMinute"
    },
    {
      "trigger": "MPMediaItemPropertyComments (NSString*)",
      "contents": "MPMediaItemPropertyComments"
    },
    {
      "trigger": "MPMediaItemPropertyComposer (NSString*)",
      "contents": "MPMediaItemPropertyComposer"
    },
    {
      "trigger": "MPMediaItemPropertyComposerPersistentID (NSString*)",
      "contents": "MPMediaItemPropertyComposerPersistentID"
    },
    {
      "trigger": "MPMediaItemPropertyDiscCount (NSString*)",
      "contents": "MPMediaItemPropertyDiscCount"
    },
    {
      "trigger": "MPMediaItemPropertyDiscNumber (NSString*)",
      "contents": "MPMediaItemPropertyDiscNumber"
    },
    {
      "trigger": "MPMediaItemPropertyGenre (NSString*)",
      "contents": "MPMediaItemPropertyGenre"
    },
    {
      "trigger": "MPMediaItemPropertyGenrePersistentID (NSString*)",
      "contents": "MPMediaItemPropertyGenrePersistentID"
    },
    {
      "trigger": "MPMediaItemPropertyIsCompilation (NSString*)",
      "contents": "MPMediaItemPropertyIsCompilation"
    },
    {
      "trigger": "MPMediaItemPropertyLastPlayedDate (NSString*)",
      "contents": "MPMediaItemPropertyLastPlayedDate"
    },
    {
      "trigger": "MPMediaItemPropertyLyrics (NSString*)",
      "contents": "MPMediaItemPropertyLyrics"
    },
    {
      "trigger": "MPMediaItemPropertyMediaType (NSString*)",
      "contents": "MPMediaItemPropertyMediaType"
    },
    {
      "trigger": "MPMediaItemPropertyPersistentID (NSString*)",
      "contents": "MPMediaItemPropertyPersistentID"
    },
    {
      "trigger": "MPMediaItemPropertyPlayCount (NSString*)",
      "contents": "MPMediaItemPropertyPlayCount"
    },
    {
      "trigger": "MPMediaItemPropertyPlaybackDuration (NSString*)",
      "contents": "MPMediaItemPropertyPlaybackDuration"
    },
    {
      "trigger": "MPMediaItemPropertyPodcastPersistentID (NSString*)",
      "contents": "MPMediaItemPropertyPodcastPersistentID"
    },
    {
      "trigger": "MPMediaItemPropertyPodcastTitle (NSString*)",
      "contents": "MPMediaItemPropertyPodcastTitle"
    },
    {
      "trigger": "MPMediaItemPropertyRating (NSString*)",
      "contents": "MPMediaItemPropertyRating"
    },
    {
      "trigger": "MPMediaItemPropertyReleaseDate (NSString*)",
      "contents": "MPMediaItemPropertyReleaseDate"
    },
    {
      "trigger": "MPMediaItemPropertySkipCount (NSString*)",
      "contents": "MPMediaItemPropertySkipCount"
    },
    {
      "trigger": "MPMediaItemPropertyTitle (NSString*)",
      "contents": "MPMediaItemPropertyTitle"
    },
    {
      "trigger": "MPMediaItemPropertyUserGrouping (NSString*)",
      "contents": "MPMediaItemPropertyUserGrouping"
    },
    {
      "trigger": "MPMediaLibraryDidChangeNotification (NSString*)",
      "contents": "MPMediaLibraryDidChangeNotification"
    },
    {
      "trigger": "MPMediaPlaybackIsPreparedToPlayDidChangeNotification (NSString*)",
      "contents": "MPMediaPlaybackIsPreparedToPlayDidChangeNotification"
    },
    {
      "trigger": "MPMediaPlaylistAttributeGenius (4)",
      "contents": "MPMediaPlaylistAttributeGenius"
    },
    {
      "trigger": "MPMediaPlaylistAttributeNone (0)",
      "contents": "MPMediaPlaylistAttributeNone"
    },
    {
      "trigger": "MPMediaPlaylistAttributeOnTheGo (1)",
      "contents": "MPMediaPlaylistAttributeOnTheGo"
    },
    {
      "trigger": "MPMediaPlaylistAttributeSmart (2)",
      "contents": "MPMediaPlaylistAttributeSmart"
    },
    {
      "trigger": "MPMediaPlaylistPropertyName (NSString*)",
      "contents": "MPMediaPlaylistPropertyName"
    },
    {
      "trigger": "MPMediaPlaylistPropertyPersistentID (NSString*)",
      "contents": "MPMediaPlaylistPropertyPersistentID"
    },
    {
      "trigger": "MPMediaPlaylistPropertyPlaylistAttributes (NSString*)",
      "contents": "MPMediaPlaylistPropertyPlaylistAttributes"
    },
    {
      "trigger": "MPMediaPlaylistPropertySeedItems (NSString*)",
      "contents": "MPMediaPlaylistPropertySeedItems"
    },
    {
      "trigger": "MPMediaPredicateComparisonContains (1)",
      "contents": "MPMediaPredicateComparisonContains"
    },
    {
      "trigger": "MPMediaPredicateComparisonEqualTo (0)",
      "contents": "MPMediaPredicateComparisonEqualTo"
    },
    {
      "trigger": "MPMediaPropertyPredicate.predicateWithValue:forProperty:",
      "contents": "MPMediaPropertyPredicate.predicateWithValue(${1:id value}, forProperty:${2:NSString* property})"
    },
    {
      "trigger": "MPMediaPropertyPredicate.predicateWithValue:forProperty:comparisonType:",
      "contents": "MPMediaPropertyPredicate.predicateWithValue(${1:id value}, forProperty:${2:NSString* property}, comparisonType:${3:MPMediaPredicateComparison comparisonType})"
    },
    {
      "trigger": "MPMediaTypeAny (-1)",
      "contents": "MPMediaTypeAny"
    },
    {
      "trigger": "MPMediaTypeAnyAudio (255)",
      "contents": "MPMediaTypeAnyAudio"
    },
    {
      "trigger": "MPMediaTypeAnyVideo (65280)",
      "contents": "MPMediaTypeAnyVideo"
    },
    {
      "trigger": "MPMediaTypeAudioBook (4)",
      "contents": "MPMediaTypeAudioBook"
    },
    {
      "trigger": "MPMediaTypeAudioITunesU (8)",
      "contents": "MPMediaTypeAudioITunesU"
    },
    {
      "trigger": "MPMediaTypeMovie (256)",
      "contents": "MPMediaTypeMovie"
    },
    {
      "trigger": "MPMediaTypeMusic (1)",
      "contents": "MPMediaTypeMusic"
    },
    {
      "trigger": "MPMediaTypeMusicVideo (2048)",
      "contents": "MPMediaTypeMusicVideo"
    },
    {
      "trigger": "MPMediaTypePodcast (2)",
      "contents": "MPMediaTypePodcast"
    },
    {
      "trigger": "MPMediaTypeTVShow (512)",
      "contents": "MPMediaTypeTVShow"
    },
    {
      "trigger": "MPMediaTypeVideoITunesU (4096)",
      "contents": "MPMediaTypeVideoITunesU"
    },
    {
      "trigger": "MPMediaTypeVideoPodcast (1024)",
      "contents": "MPMediaTypeVideoPodcast"
    },
    {
      "trigger": "MPMovieControlModeDefault (0)",
      "contents": "MPMovieControlModeDefault"
    },
    {
      "trigger": "MPMovieControlModeHidden (2)",
      "contents": "MPMovieControlModeHidden"
    },
    {
      "trigger": "MPMovieControlModeVolumeOnly (1)",
      "contents": "MPMovieControlModeVolumeOnly"
    },
    {
      "trigger": "MPMovieControlStyleDefault (1)",
      "contents": "MPMovieControlStyleDefault"
    },
    {
      "trigger": "MPMovieControlStyleEmbedded (1)",
      "contents": "MPMovieControlStyleEmbedded"
    },
    {
      "trigger": "MPMovieControlStyleFullscreen (2)",
      "contents": "MPMovieControlStyleFullscreen"
    },
    {
      "trigger": "MPMovieControlStyleNone (0)",
      "contents": "MPMovieControlStyleNone"
    },
    {
      "trigger": "MPMovieDurationAvailableNotification (NSString*)",
      "contents": "MPMovieDurationAvailableNotification"
    },
    {
      "trigger": "MPMovieFinishReasonPlaybackEnded (0)",
      "contents": "MPMovieFinishReasonPlaybackEnded"
    },
    {
      "trigger": "MPMovieFinishReasonPlaybackError (1)",
      "contents": "MPMovieFinishReasonPlaybackError"
    },
    {
      "trigger": "MPMovieFinishReasonUserExited (2)",
      "contents": "MPMovieFinishReasonUserExited"
    },
    {
      "trigger": "MPMovieLoadStatePlayable (1)",
      "contents": "MPMovieLoadStatePlayable"
    },
    {
      "trigger": "MPMovieLoadStatePlaythroughOK (2)",
      "contents": "MPMovieLoadStatePlaythroughOK"
    },
    {
      "trigger": "MPMovieLoadStateStalled (4)",
      "contents": "MPMovieLoadStateStalled"
    },
    {
      "trigger": "MPMovieLoadStateUnknown (0)",
      "contents": "MPMovieLoadStateUnknown"
    },
    {
      "trigger": "MPMovieMediaTypeMaskAudio (2)",
      "contents": "MPMovieMediaTypeMaskAudio"
    },
    {
      "trigger": "MPMovieMediaTypeMaskNone (0)",
      "contents": "MPMovieMediaTypeMaskNone"
    },
    {
      "trigger": "MPMovieMediaTypeMaskVideo (1)",
      "contents": "MPMovieMediaTypeMaskVideo"
    },
    {
      "trigger": "MPMovieMediaTypesAvailableNotification (NSString*)",
      "contents": "MPMovieMediaTypesAvailableNotification"
    },
    {
      "trigger": "MPMovieNaturalSizeAvailableNotification (NSString*)",
      "contents": "MPMovieNaturalSizeAvailableNotification"
    },
    {
      "trigger": "MPMoviePlaybackStateInterrupted (3)",
      "contents": "MPMoviePlaybackStateInterrupted"
    },
    {
      "trigger": "MPMoviePlaybackStatePaused (2)",
      "contents": "MPMoviePlaybackStatePaused"
    },
    {
      "trigger": "MPMoviePlaybackStatePlaying (1)",
      "contents": "MPMoviePlaybackStatePlaying"
    },
    {
      "trigger": "MPMoviePlaybackStateSeekingBackward (5)",
      "contents": "MPMoviePlaybackStateSeekingBackward"
    },
    {
      "trigger": "MPMoviePlaybackStateSeekingForward (4)",
      "contents": "MPMoviePlaybackStateSeekingForward"
    },
    {
      "trigger": "MPMoviePlaybackStateStopped (0)",
      "contents": "MPMoviePlaybackStateStopped"
    },
    {
      "trigger": "MPMoviePlayerContentPreloadDidFinishNotification (NSString*)",
      "contents": "MPMoviePlayerContentPreloadDidFinishNotification"
    },
    {
      "trigger": "MPMoviePlayerDidEnterFullscreenNotification (NSString*)",
      "contents": "MPMoviePlayerDidEnterFullscreenNotification"
    },
    {
      "trigger": "MPMoviePlayerDidExitFullscreenNotification (NSString*)",
      "contents": "MPMoviePlayerDidExitFullscreenNotification"
    },
    {
      "trigger": "MPMoviePlayerFullscreenAnimationCurveUserInfoKey (NSString*)",
      "contents": "MPMoviePlayerFullscreenAnimationCurveUserInfoKey"
    },
    {
      "trigger": "MPMoviePlayerFullscreenAnimationDurationUserInfoKey (NSString*)",
      "contents": "MPMoviePlayerFullscreenAnimationDurationUserInfoKey"
    },
    {
      "trigger": "MPMoviePlayerIsAirPlayVideoActiveDidChangeNotification (NSString*)",
      "contents": "MPMoviePlayerIsAirPlayVideoActiveDidChangeNotification"
    },
    {
      "trigger": "MPMoviePlayerLoadStateDidChangeNotification (NSString*)",
      "contents": "MPMoviePlayerLoadStateDidChangeNotification"
    },
    {
      "trigger": "MPMoviePlayerNowPlayingMovieDidChangeNotification (NSString*)",
      "contents": "MPMoviePlayerNowPlayingMovieDidChangeNotification"
    },
    {
      "trigger": "MPMoviePlayerPlaybackDidFinishNotification (NSString*)",
      "contents": "MPMoviePlayerPlaybackDidFinishNotification"
    },
    {
      "trigger": "MPMoviePlayerPlaybackDidFinishReasonUserInfoKey (NSString*)",
      "contents": "MPMoviePlayerPlaybackDidFinishReasonUserInfoKey"
    },
    {
      "trigger": "MPMoviePlayerPlaybackStateDidChangeNotification (NSString*)",
      "contents": "MPMoviePlayerPlaybackStateDidChangeNotification"
    },
    {
      "trigger": "MPMoviePlayerScalingModeDidChangeNotification (NSString*)",
      "contents": "MPMoviePlayerScalingModeDidChangeNotification"
    },
    {
      "trigger": "MPMoviePlayerThumbnailErrorKey (NSString*)",
      "contents": "MPMoviePlayerThumbnailErrorKey"
    },
    {
      "trigger": "MPMoviePlayerThumbnailImageKey (NSString*)",
      "contents": "MPMoviePlayerThumbnailImageKey"
    },
    {
      "trigger": "MPMoviePlayerThumbnailImageRequestDidFinishNotification (NSString*)",
      "contents": "MPMoviePlayerThumbnailImageRequestDidFinishNotification"
    },
    {
      "trigger": "MPMoviePlayerThumbnailTimeKey (NSString*)",
      "contents": "MPMoviePlayerThumbnailTimeKey"
    },
    {
      "trigger": "MPMoviePlayerTimedMetadataKeyDataType (NSString*)",
      "contents": "MPMoviePlayerTimedMetadataKeyDataType"
    },
    {
      "trigger": "MPMoviePlayerTimedMetadataKeyInfo (NSString*)",
      "contents": "MPMoviePlayerTimedMetadataKeyInfo"
    },
    {
      "trigger": "MPMoviePlayerTimedMetadataKeyLanguageCode (NSString*)",
      "contents": "MPMoviePlayerTimedMetadataKeyLanguageCode"
    },
    {
      "trigger": "MPMoviePlayerTimedMetadataKeyMIMEType (NSString*)",
      "contents": "MPMoviePlayerTimedMetadataKeyMIMEType"
    },
    {
      "trigger": "MPMoviePlayerTimedMetadataKeyName (NSString*)",
      "contents": "MPMoviePlayerTimedMetadataKeyName"
    },
    {
      "trigger": "MPMoviePlayerTimedMetadataUpdatedNotification (NSString*)",
      "contents": "MPMoviePlayerTimedMetadataUpdatedNotification"
    },
    {
      "trigger": "MPMoviePlayerTimedMetadataUserInfoKey (NSString*)",
      "contents": "MPMoviePlayerTimedMetadataUserInfoKey"
    },
    {
      "trigger": "MPMoviePlayerWillEnterFullscreenNotification (NSString*)",
      "contents": "MPMoviePlayerWillEnterFullscreenNotification"
    },
    {
      "trigger": "MPMoviePlayerWillExitFullscreenNotification (NSString*)",
      "contents": "MPMoviePlayerWillExitFullscreenNotification"
    },
    {
      "trigger": "MPMovieRepeatModeNone (0)",
      "contents": "MPMovieRepeatModeNone"
    },
    {
      "trigger": "MPMovieRepeatModeOne (1)",
      "contents": "MPMovieRepeatModeOne"
    },
    {
      "trigger": "MPMovieScalingModeAspectFill (2)",
      "contents": "MPMovieScalingModeAspectFill"
    },
    {
      "trigger": "MPMovieScalingModeAspectFit (1)",
      "contents": "MPMovieScalingModeAspectFit"
    },
    {
      "trigger": "MPMovieScalingModeFill (3)",
      "contents": "MPMovieScalingModeFill"
    },
    {
      "trigger": "MPMovieScalingModeNone (0)",
      "contents": "MPMovieScalingModeNone"
    },
    {
      "trigger": "MPMovieSourceTypeAvailableNotification (NSString*)",
      "contents": "MPMovieSourceTypeAvailableNotification"
    },
    {
      "trigger": "MPMovieSourceTypeFile (1)",
      "contents": "MPMovieSourceTypeFile"
    },
    {
      "trigger": "MPMovieSourceTypeStreaming (2)",
      "contents": "MPMovieSourceTypeStreaming"
    },
    {
      "trigger": "MPMovieSourceTypeUnknown (0)",
      "contents": "MPMovieSourceTypeUnknown"
    },
    {
      "trigger": "MPMovieTimeOptionExact (1)",
      "contents": "MPMovieTimeOptionExact"
    },
    {
      "trigger": "MPMovieTimeOptionNearestKeyFrame (0)",
      "contents": "MPMovieTimeOptionNearestKeyFrame"
    },
    {
      "trigger": "MPMusicPlaybackStateInterrupted (3)",
      "contents": "MPMusicPlaybackStateInterrupted"
    },
    {
      "trigger": "MPMusicPlaybackStatePaused (2)",
      "contents": "MPMusicPlaybackStatePaused"
    },
    {
      "trigger": "MPMusicPlaybackStatePlaying (1)",
      "contents": "MPMusicPlaybackStatePlaying"
    },
    {
      "trigger": "MPMusicPlaybackStateSeekingBackward (5)",
      "contents": "MPMusicPlaybackStateSeekingBackward"
    },
    {
      "trigger": "MPMusicPlaybackStateSeekingForward (4)",
      "contents": "MPMusicPlaybackStateSeekingForward"
    },
    {
      "trigger": "MPMusicPlaybackStateStopped (0)",
      "contents": "MPMusicPlaybackStateStopped"
    },
    {
      "trigger": "MPMusicPlayerControllerNowPlayingItemDidChangeNotification (NSString*)",
      "contents": "MPMusicPlayerControllerNowPlayingItemDidChangeNotification"
    },
    {
      "trigger": "MPMusicPlayerControllerPlaybackStateDidChangeNotification (NSString*)",
      "contents": "MPMusicPlayerControllerPlaybackStateDidChangeNotification"
    },
    {
      "trigger": "MPMusicPlayerControllerVolumeDidChangeNotification (NSString*)",
      "contents": "MPMusicPlayerControllerVolumeDidChangeNotification"
    },
    {
      "trigger": "MPMusicRepeatModeAll (3)",
      "contents": "MPMusicRepeatModeAll"
    },
    {
      "trigger": "MPMusicRepeatModeDefault (0)",
      "contents": "MPMusicRepeatModeDefault"
    },
    {
      "trigger": "MPMusicRepeatModeNone (1)",
      "contents": "MPMusicRepeatModeNone"
    },
    {
      "trigger": "MPMusicRepeatModeOne (2)",
      "contents": "MPMusicRepeatModeOne"
    },
    {
      "trigger": "MPMusicShuffleModeAlbums (3)",
      "contents": "MPMusicShuffleModeAlbums"
    },
    {
      "trigger": "MPMusicShuffleModeDefault (0)",
      "contents": "MPMusicShuffleModeDefault"
    },
    {
      "trigger": "MPMusicShuffleModeOff (1)",
      "contents": "MPMusicShuffleModeOff"
    },
    {
      "trigger": "MPMusicShuffleModeSongs (2)",
      "contents": "MPMusicShuffleModeSongs"
    },
    {
      "trigger": "MPNowPlayingInfoPropertyChapterCount (NSString*)",
      "contents": "MPNowPlayingInfoPropertyChapterCount"
    },
    {
      "trigger": "MPNowPlayingInfoPropertyChapterNumber (NSString*)",
      "contents": "MPNowPlayingInfoPropertyChapterNumber"
    },
    {
      "trigger": "MPNowPlayingInfoPropertyElapsedPlaybackTime (NSString*)",
      "contents": "MPNowPlayingInfoPropertyElapsedPlaybackTime"
    },
    {
      "trigger": "MPNowPlayingInfoPropertyPlaybackQueueCount (NSString*)",
      "contents": "MPNowPlayingInfoPropertyPlaybackQueueCount"
    },
    {
      "trigger": "MPNowPlayingInfoPropertyPlaybackQueueIndex (NSString*)",
      "contents": "MPNowPlayingInfoPropertyPlaybackQueueIndex"
    },
    {
      "trigger": "MPNowPlayingInfoPropertyPlaybackRate (NSString*)",
      "contents": "MPNowPlayingInfoPropertyPlaybackRate"
    },
    {
      "trigger": "MessageComposeResultCancelled (0)",
      "contents": "MessageComposeResultCancelled"
    },
    {
      "trigger": "MessageComposeResultFailed (2)",
      "contents": "MessageComposeResultFailed"
    },
    {
      "trigger": "MessageComposeResultSent (1)",
      "contents": "MessageComposeResultSent"
    },
    {
      "trigger": "MusicEventIteratorDeleteEvent",
      "contents": "MusicEventIteratorDeleteEvent(${1:MusicEventIterator inIterator})"
    },
    {
      "trigger": "MusicEventIteratorGetEventInfo",
      "contents": "MusicEventIteratorGetEventInfo(${1:MusicEventIterator inIterator}, ${2:MusicTimeStamp* outTimeStamp}, ${3:MusicEventType* outEventType}, ${4:void** outEventData}, ${5:UInt32* outEventDataSize})"
    },
    {
      "trigger": "MusicEventIteratorHasCurrentEvent",
      "contents": "MusicEventIteratorHasCurrentEvent(${1:MusicEventIterator inIterator}, ${2:Boolean* outHasCurEvent})"
    },
    {
      "trigger": "MusicEventIteratorHasNextEvent",
      "contents": "MusicEventIteratorHasNextEvent(${1:MusicEventIterator inIterator}, ${2:Boolean* outHasNextEvent})"
    },
    {
      "trigger": "MusicEventIteratorHasPreviousEvent",
      "contents": "MusicEventIteratorHasPreviousEvent(${1:MusicEventIterator inIterator}, ${2:Boolean* outHasPrevEvent})"
    },
    {
      "trigger": "MusicEventIteratorNextEvent",
      "contents": "MusicEventIteratorNextEvent(${1:MusicEventIterator inIterator})"
    },
    {
      "trigger": "MusicEventIteratorPreviousEvent",
      "contents": "MusicEventIteratorPreviousEvent(${1:MusicEventIterator inIterator})"
    },
    {
      "trigger": "MusicEventIteratorSeek",
      "contents": "MusicEventIteratorSeek(${1:MusicEventIterator inIterator}, ${2:MusicTimeStamp inTimeStamp})"
    },
    {
      "trigger": "MusicEventIteratorSetEventInfo",
      "contents": "MusicEventIteratorSetEventInfo(${1:MusicEventIterator inIterator}, ${2:MusicEventType inEventType}, ${3:void* inEventData})"
    },
    {
      "trigger": "MusicEventIteratorSetEventTime",
      "contents": "MusicEventIteratorSetEventTime(${1:MusicEventIterator inIterator}, ${2:MusicTimeStamp inTimeStamp})"
    },
    {
      "trigger": "MusicPlayerGetBeatsForHostTime",
      "contents": "MusicPlayerGetBeatsForHostTime(${1:MusicPlayer inPlayer}, ${2:UInt64 inHostTime}, ${3:MusicTimeStamp* outBeats})"
    },
    {
      "trigger": "MusicPlayerGetHostTimeForBeats",
      "contents": "MusicPlayerGetHostTimeForBeats(${1:MusicPlayer inPlayer}, ${2:MusicTimeStamp inBeats}, ${3:UInt64* outHostTime})"
    },
    {
      "trigger": "MusicPlayerGetPlayRateScalar",
      "contents": "MusicPlayerGetPlayRateScalar(${1:MusicPlayer inPlayer}, ${2:Float64* outScaleRate})"
    },
    {
      "trigger": "MusicPlayerGetSequence",
      "contents": "MusicPlayerGetSequence(${1:MusicPlayer inPlayer}, ${2:MusicSequence* outSequence})"
    },
    {
      "trigger": "MusicPlayerGetTime",
      "contents": "MusicPlayerGetTime(${1:MusicPlayer inPlayer}, ${2:MusicTimeStamp* outTime})"
    },
    {
      "trigger": "MusicPlayerIsPlaying",
      "contents": "MusicPlayerIsPlaying(${1:MusicPlayer inPlayer}, ${2:Boolean* outIsPlaying})"
    },
    {
      "trigger": "MusicPlayerPreroll",
      "contents": "MusicPlayerPreroll(${1:MusicPlayer inPlayer})"
    },
    {
      "trigger": "MusicPlayerSetPlayRateScalar",
      "contents": "MusicPlayerSetPlayRateScalar(${1:MusicPlayer inPlayer}, ${2:Float64 inScaleRate})"
    },
    {
      "trigger": "MusicPlayerSetSequence",
      "contents": "MusicPlayerSetSequence(${1:MusicPlayer inPlayer}, ${2:MusicSequence inSequence})"
    },
    {
      "trigger": "MusicPlayerSetTime",
      "contents": "MusicPlayerSetTime(${1:MusicPlayer inPlayer}, ${2:MusicTimeStamp inTime})"
    },
    {
      "trigger": "MusicPlayerStart",
      "contents": "MusicPlayerStart(${1:MusicPlayer inPlayer})"
    },
    {
      "trigger": "MusicPlayerStop",
      "contents": "MusicPlayerStop(${1:MusicPlayer inPlayer})"
    },
    {
      "trigger": "MusicSequenceBarBeatTimeToBeats",
      "contents": "MusicSequenceBarBeatTimeToBeats(${1:MusicSequence inSequence}, ${2:CABarBeatTime* inBarBeatTime}, ${3:MusicTimeStamp* outBeats})"
    },
    {
      "trigger": "MusicSequenceBeatsToBarBeatTime",
      "contents": "MusicSequenceBeatsToBarBeatTime(${1:MusicSequence inSequence}, ${2:MusicTimeStamp inBeats}, ${3:UInt32 inSubbeatDivisor}, ${4:CABarBeatTime* outBarBeatTime})"
    },
    {
      "trigger": "MusicSequenceDisposeTrack",
      "contents": "MusicSequenceDisposeTrack(${1:MusicSequence inSequence}, ${2:MusicTrack inTrack})"
    },
    {
      "trigger": "MusicSequenceFileCreate",
      "contents": "MusicSequenceFileCreate(${1:MusicSequence inSequence}, ${2:CFURLRef inFileRef}, ${3:MusicSequenceFileTypeID inFileType}, ${4:MusicSequenceFileFlags inFlags}, ${5:SInt16 inResolution})"
    },
    {
      "trigger": "MusicSequenceFileCreateData",
      "contents": "MusicSequenceFileCreateData(${1:MusicSequence inSequence}, ${2:MusicSequenceFileTypeID inFileType}, ${3:MusicSequenceFileFlags inFlags}, ${4:SInt16 inResolution}, ${5:CFDataRef* outData})"
    },
    {
      "trigger": "MusicSequenceFileLoad",
      "contents": "MusicSequenceFileLoad(${1:MusicSequence inSequence}, ${2:CFURLRef inFileRef}, ${3:MusicSequenceFileTypeID inFileTypeHint}, ${4:MusicSequenceLoadFlags inFlags})"
    },
    {
      "trigger": "MusicSequenceFileLoadData",
      "contents": "MusicSequenceFileLoadData(${1:MusicSequence inSequence}, ${2:CFDataRef inData}, ${3:MusicSequenceFileTypeID inFileTypeHint}, ${4:MusicSequenceLoadFlags inFlags})"
    },
    {
      "trigger": "MusicSequenceGetAUGraph",
      "contents": "MusicSequenceGetAUGraph(${1:MusicSequence inSequence}, ${2:AUGraph* outGraph})"
    },
    {
      "trigger": "MusicSequenceGetBeatsForSeconds",
      "contents": "MusicSequenceGetBeatsForSeconds(${1:MusicSequence inSequence}, ${2:Float64 inSeconds}, ${3:MusicTimeStamp* outBeats})"
    },
    {
      "trigger": "MusicSequenceGetIndTrack",
      "contents": "MusicSequenceGetIndTrack(${1:MusicSequence inSequence}, ${2:UInt32 inTrackIndex}, ${3:MusicTrack* outTrack})"
    },
    {
      "trigger": "MusicSequenceGetInfoDictionary",
      "contents": "MusicSequenceGetInfoDictionary(${1:MusicSequence inSequence})"
    },
    {
      "trigger": "MusicSequenceGetSMPTEResolution",
      "contents": "MusicSequenceGetSMPTEResolution(${1:SInt16 inRes}, ${2:SignedByte* fps}, ${3:Byte* ticks})"
    },
    {
      "trigger": "MusicSequenceGetSecondsForBeats",
      "contents": "MusicSequenceGetSecondsForBeats(${1:MusicSequence inSequence}, ${2:MusicTimeStamp inBeats}, ${3:Float64* outSeconds})"
    },
    {
      "trigger": "MusicSequenceGetSequenceType",
      "contents": "MusicSequenceGetSequenceType(${1:MusicSequence inSequence}, ${2:MusicSequenceType* outType})"
    },
    {
      "trigger": "MusicSequenceGetTempoTrack",
      "contents": "MusicSequenceGetTempoTrack(${1:MusicSequence inSequence}, ${2:MusicTrack* outTrack})"
    },
    {
      "trigger": "MusicSequenceGetTrackCount",
      "contents": "MusicSequenceGetTrackCount(${1:MusicSequence inSequence}, ${2:UInt32* outNumberOfTracks})"
    },
    {
      "trigger": "MusicSequenceGetTrackIndex",
      "contents": "MusicSequenceGetTrackIndex(${1:MusicSequence inSequence}, ${2:MusicTrack inTrack}, ${3:UInt32* outTrackIndex})"
    },
    {
      "trigger": "MusicSequenceNewTrack",
      "contents": "MusicSequenceNewTrack(${1:MusicSequence inSequence}, ${2:MusicTrack* outTrack})"
    },
    {
      "trigger": "MusicSequenceReverse",
      "contents": "MusicSequenceReverse(${1:MusicSequence inSequence})"
    },
    {
      "trigger": "MusicSequenceSetAUGraph",
      "contents": "MusicSequenceSetAUGraph(${1:MusicSequence inSequence}, ${2:AUGraph inGraph})"
    },
    {
      "trigger": "MusicSequenceSetMIDIEndpoint",
      "contents": "MusicSequenceSetMIDIEndpoint(${1:MusicSequence inSequence}, ${2:MIDIEndpointRef inEndpoint})"
    },
    {
      "trigger": "MusicSequenceSetSMPTEResolution",
      "contents": "MusicSequenceSetSMPTEResolution(${1:SignedByte fps}, ${2:Byte ticks})"
    },
    {
      "trigger": "MusicSequenceSetSequenceType",
      "contents": "MusicSequenceSetSequenceType(${1:MusicSequence inSequence}, ${2:MusicSequenceType inType})"
    },
    {
      "trigger": "MusicSequenceSetUserCallback",
      "contents": "MusicSequenceSetUserCallback(${1:MusicSequence inSequence}, ${2:MusicSequenceUserCallback inCallback}, ${3:void* inClientData})"
    },
    {
      "trigger": "MusicTrackClear",
      "contents": "MusicTrackClear(${1:MusicTrack inTrack}, ${2:MusicTimeStamp inStartTime}, ${3:MusicTimeStamp inEndTime})"
    },
    {
      "trigger": "MusicTrackCopyInsert",
      "contents": "MusicTrackCopyInsert(${1:MusicTrack inSourceTrack}, ${2:MusicTimeStamp inSourceStartTime}, ${3:MusicTimeStamp inSourceEndTime}, ${4:MusicTrack inDestTrack}, ${5:MusicTimeStamp inDestInsertTime})"
    },
    {
      "trigger": "MusicTrackCut",
      "contents": "MusicTrackCut(${1:MusicTrack inTrack}, ${2:MusicTimeStamp inStartTime}, ${3:MusicTimeStamp inEndTime})"
    },
    {
      "trigger": "MusicTrackGetDestMIDIEndpoint",
      "contents": "MusicTrackGetDestMIDIEndpoint(${1:MusicTrack inTrack}, ${2:MIDIEndpointRef* outEndpoint})"
    },
    {
      "trigger": "MusicTrackGetDestNode",
      "contents": "MusicTrackGetDestNode(${1:MusicTrack inTrack}, ${2:AUNode* outNode})"
    },
    {
      "trigger": "MusicTrackGetProperty",
      "contents": "MusicTrackGetProperty(${1:MusicTrack inTrack}, ${2:UInt32 inPropertyID}, ${3:void* outData}, ${4:UInt32* ioLength})"
    },
    {
      "trigger": "MusicTrackGetSequence",
      "contents": "MusicTrackGetSequence(${1:MusicTrack inTrack}, ${2:MusicSequence* outSequence})"
    },
    {
      "trigger": "MusicTrackMerge",
      "contents": "MusicTrackMerge(${1:MusicTrack inSourceTrack}, ${2:MusicTimeStamp inSourceStartTime}, ${3:MusicTimeStamp inSourceEndTime}, ${4:MusicTrack inDestTrack}, ${5:MusicTimeStamp inDestInsertTime})"
    },
    {
      "trigger": "MusicTrackMoveEvents",
      "contents": "MusicTrackMoveEvents(${1:MusicTrack inTrack}, ${2:MusicTimeStamp inStartTime}, ${3:MusicTimeStamp inEndTime}, ${4:MusicTimeStamp inMoveTime})"
    },
    {
      "trigger": "MusicTrackNewAUPresetEvent",
      "contents": "MusicTrackNewAUPresetEvent(${1:MusicTrack inTrack}, ${2:MusicTimeStamp inTimeStamp}, ${3:AUPresetEvent* inPresetEvent})"
    },
    {
      "trigger": "MusicTrackNewExtendedNoteEvent",
      "contents": "MusicTrackNewExtendedNoteEvent(${1:MusicTrack inTrack}, ${2:MusicTimeStamp inTimeStamp}, ${3:ExtendedNoteOnEvent* inInfo})"
    },
    {
      "trigger": "MusicTrackNewExtendedTempoEvent",
      "contents": "MusicTrackNewExtendedTempoEvent(${1:MusicTrack inTrack}, ${2:MusicTimeStamp inTimeStamp}, ${3:Float64 inBPM})"
    },
    {
      "trigger": "MusicTrackNewMIDIChannelEvent",
      "contents": "MusicTrackNewMIDIChannelEvent(${1:MusicTrack inTrack}, ${2:MusicTimeStamp inTimeStamp}, ${3:MIDIChannelMessage* inMessage})"
    },
    {
      "trigger": "MusicTrackNewMIDINoteEvent",
      "contents": "MusicTrackNewMIDINoteEvent(${1:MusicTrack inTrack}, ${2:MusicTimeStamp inTimeStamp}, ${3:MIDINoteMessage* inMessage})"
    },
    {
      "trigger": "MusicTrackNewMIDIRawDataEvent",
      "contents": "MusicTrackNewMIDIRawDataEvent(${1:MusicTrack inTrack}, ${2:MusicTimeStamp inTimeStamp}, ${3:MIDIRawData* inRawData})"
    },
    {
      "trigger": "MusicTrackNewMetaEvent",
      "contents": "MusicTrackNewMetaEvent(${1:MusicTrack inTrack}, ${2:MusicTimeStamp inTimeStamp}, ${3:MIDIMetaEvent* inMetaEvent})"
    },
    {
      "trigger": "MusicTrackNewParameterEvent",
      "contents": "MusicTrackNewParameterEvent(${1:MusicTrack inTrack}, ${2:MusicTimeStamp inTimeStamp}, ${3:ParameterEvent* inInfo})"
    },
    {
      "trigger": "MusicTrackNewUserEvent",
      "contents": "MusicTrackNewUserEvent(${1:MusicTrack inTrack}, ${2:MusicTimeStamp inTimeStamp}, ${3:MusicEventUserData* inUserData})"
    },
    {
      "trigger": "MusicTrackSetDestMIDIEndpoint",
      "contents": "MusicTrackSetDestMIDIEndpoint(${1:MusicTrack inTrack}, ${2:MIDIEndpointRef inEndpoint})"
    },
    {
      "trigger": "MusicTrackSetDestNode",
      "contents": "MusicTrackSetDestNode(${1:MusicTrack inTrack}, ${2:AUNode inNode})"
    },
    {
      "trigger": "MusicTrackSetProperty",
      "contents": "MusicTrackSetProperty(${1:MusicTrack inTrack}, ${2:UInt32 inPropertyID}, ${3:void* inData}, ${4:UInt32 inLength})"
    },
    {
      "trigger": "NKIssueContentStatusAvailable (2)",
      "contents": "NKIssueContentStatusAvailable"
    },
    {
      "trigger": "NKIssueContentStatusDownloading (1)",
      "contents": "NKIssueContentStatusDownloading"
    },
    {
      "trigger": "NKIssueContentStatusNone (0)",
      "contents": "NKIssueContentStatusNone"
    },
    {
      "trigger": "NKIssueDownloadCompletedNotification (NSString*)",
      "contents": "NKIssueDownloadCompletedNotification"
    },
    {
      "trigger": "NSASCIIStringEncoding (1)",
      "contents": "NSASCIIStringEncoding"
    },
    {
      "trigger": "NSAddEntityMappingType (2)",
      "contents": "NSAddEntityMappingType"
    },
    {
      "trigger": "NSAddedPersistentStoresKey (NSString*)",
      "contents": "NSAddedPersistentStoresKey"
    },
    {
      "trigger": "NSAdminApplicationDirectory (4)",
      "contents": "NSAdminApplicationDirectory"
    },
    {
      "trigger": "NSAffectedObjectsErrorKey (NSString*)",
      "contents": "NSAffectedObjectsErrorKey"
    },
    {
      "trigger": "NSAffectedStoresErrorKey (NSString*)",
      "contents": "NSAffectedStoresErrorKey"
    },
    {
      "trigger": "NSAggregateExpressionType (14)",
      "contents": "NSAggregateExpressionType"
    },
    {
      "trigger": "NSAllApplicationsDirectory (100)",
      "contents": "NSAllApplicationsDirectory"
    },
    {
      "trigger": "NSAllDomainsMask (65535)",
      "contents": "NSAllDomainsMask"
    },
    {
      "trigger": "NSAllLibrariesDirectory (101)",
      "contents": "NSAllLibrariesDirectory"
    },
    {
      "trigger": "NSAllPredicateModifier (1)",
      "contents": "NSAllPredicateModifier"
    },
    {
      "trigger": "NSAllocateMemoryPages",
      "contents": "NSAllocateMemoryPages(${1:NSUInteger bytes})"
    },
    {
      "trigger": "NSAllocateObject",
      "contents": "NSAllocateObject(${1:Class aClass}, ${2:NSUInteger extraBytes}, ${3:NSZone* zone})"
    },
    {
      "trigger": "NSAnchoredSearch (8)",
      "contents": "NSAnchoredSearch"
    },
    {
      "trigger": "NSAndPredicateType (1)",
      "contents": "NSAndPredicateType"
    },
    {
      "trigger": "NSAnyPredicateModifier (2)",
      "contents": "NSAnyPredicateModifier"
    },
    {
      "trigger": "NSApplicationDirectory (1)",
      "contents": "NSApplicationDirectory"
    },
    {
      "trigger": "NSApplicationSupportDirectory (14)",
      "contents": "NSApplicationSupportDirectory"
    },
    {
      "trigger": "NSArgumentDomain (NSString*)",
      "contents": "NSArgumentDomain"
    },
    {
      "trigger": "NSArray.arrayWithArray:",
      "contents": "NSArray.arrayWithArray(${1:NSArray* array})"
    },
    {
      "trigger": "NSArray.arrayWithContentsOfFile:",
      "contents": "NSArray.arrayWithContentsOfFile(${1:NSString* path})"
    },
    {
      "trigger": "NSArray.arrayWithContentsOfURL:",
      "contents": "NSArray.arrayWithContentsOfURL(${1:NSURL* url})"
    },
    {
      "trigger": "NSArray.arrayWithObject:",
      "contents": "NSArray.arrayWithObject(${1:id anObject})"
    },
    {
      "trigger": "NSArray.arrayWithObjects:",
      "contents": "NSArray.arrayWithObjects(${1:id firstObj})"
    },
    {
      "trigger": "NSArray.arrayWithObjects:count:",
      "contents": "NSArray.arrayWithObjects(${1:id* objects}, count:${2:NSUInteger cnt})"
    },
    {
      "trigger": "NSAssertionHandlerKey (NSString*)",
      "contents": "NSAssertionHandlerKey"
    },
    {
      "trigger": "NSAtomicWrite (1)",
      "contents": "NSAtomicWrite"
    },
    {
      "trigger": "NSAttributedStringEnumerationLongestEffectiveRangeNotRequired (1048576)",
      "contents": "NSAttributedStringEnumerationLongestEffectiveRangeNotRequired"
    },
    {
      "trigger": "NSAttributedStringEnumerationReverse (2)",
      "contents": "NSAttributedStringEnumerationReverse"
    },
    {
      "trigger": "NSAutoreleasePool.addObject:",
      "contents": "NSAutoreleasePool.addObject(${1:id anObject})"
    },
    {
      "trigger": "NSAutosavedInformationDirectory (11)",
      "contents": "NSAutosavedInformationDirectory"
    },
    {
      "trigger": "NSAverageKeyValueOperator (NSString*)",
      "contents": "NSAverageKeyValueOperator"
    },
    {
      "trigger": "NSBackwardsSearch (4)",
      "contents": "NSBackwardsSearch"
    },
    {
      "trigger": "NSBeginsWithPredicateOperatorType (8)",
      "contents": "NSBeginsWithPredicateOperatorType"
    },
    {
      "trigger": "NSBetweenPredicateOperatorType (100)",
      "contents": "NSBetweenPredicateOperatorType"
    },
    {
      "trigger": "NSBinaryDataAttributeType (1000)",
      "contents": "NSBinaryDataAttributeType"
    },
    {
      "trigger": "NSBinarySearchingFirstEqual (256)",
      "contents": "NSBinarySearchingFirstEqual"
    },
    {
      "trigger": "NSBinarySearchingInsertionIndex (1024)",
      "contents": "NSBinarySearchingInsertionIndex"
    },
    {
      "trigger": "NSBinarySearchingLastEqual (512)",
      "contents": "NSBinarySearchingLastEqual"
    },
    {
      "trigger": "NSBinaryStoreType (NSString*)",
      "contents": "NSBinaryStoreType"
    },
    {
      "trigger": "NSBlockExpressionType (19)",
      "contents": "NSBlockExpressionType"
    },
    {
      "trigger": "NSBlockOperation.blockOperationWithBlock:",
      "contents": "NSBlockOperation.blockOperationWithBlock(${1:void (^)(void) block})"
    },
    {
      "trigger": "NSBooleanAttributeType (800)",
      "contents": "NSBooleanAttributeType"
    },
    {
      "trigger": "NSBuddhistCalendar (NSString*)",
      "contents": "NSBuddhistCalendar"
    },
    {
      "trigger": "NSBundle.URLForResource:withExtension:subdirectory:inBundleWithURL:",
      "contents": "NSBundle.URLForResource(${1:NSString* name}, withExtension:${2:NSString* ext}, subdirectory:${3:NSString* subpath}, inBundleWithURL:${4:NSURL* bundleURL})"
    },
    {
      "trigger": "NSBundle.URLsForResourcesWithExtension:subdirectory:inBundleWithURL:",
      "contents": "NSBundle.URLsForResourcesWithExtension(${1:NSString* ext}, subdirectory:${2:NSString* subpath}, inBundleWithURL:${3:NSURL* bundleURL})"
    },
    {
      "trigger": "NSBundle.bundleForClass:",
      "contents": "NSBundle.bundleForClass(${1:Class aClass})"
    },
    {
      "trigger": "NSBundle.bundleWithIdentifier:",
      "contents": "NSBundle.bundleWithIdentifier(${1:NSString* identifier})"
    },
    {
      "trigger": "NSBundle.bundleWithPath:",
      "contents": "NSBundle.bundleWithPath(${1:NSString* path})"
    },
    {
      "trigger": "NSBundle.bundleWithURL:",
      "contents": "NSBundle.bundleWithURL(${1:NSURL* url})"
    },
    {
      "trigger": "NSBundle.pathForResource:ofType:inDirectory:",
      "contents": "NSBundle.pathForResource(${1:NSString* name}, ofType:${2:NSString* ext}, inDirectory:${3:NSString* bundlePath})"
    },
    {
      "trigger": "NSBundle.pathsForResourcesOfType:inDirectory:",
      "contents": "NSBundle.pathsForResourcesOfType(${1:NSString* ext}, inDirectory:${2:NSString* bundlePath})"
    },
    {
      "trigger": "NSBundle.preferredLocalizationsFromArray:",
      "contents": "NSBundle.preferredLocalizationsFromArray(${1:NSArray* localizationsArray})"
    },
    {
      "trigger": "NSBundle.preferredLocalizationsFromArray:forPreferences:",
      "contents": "NSBundle.preferredLocalizationsFromArray(${1:NSArray* localizationsArray}, forPreferences:${2:NSArray* preferencesArray})"
    },
    {
      "trigger": "NSBundleDidLoadNotification (NSString*)",
      "contents": "NSBundleDidLoadNotification"
    },
    {
      "trigger": "NSBundleExecutableArchitectureI386 (7)",
      "contents": "NSBundleExecutableArchitectureI386"
    },
    {
      "trigger": "NSBundleExecutableArchitecturePPC (18)",
      "contents": "NSBundleExecutableArchitecturePPC"
    },
    {
      "trigger": "NSBundleExecutableArchitecturePPC64 (16777234)",
      "contents": "NSBundleExecutableArchitecturePPC64"
    },
    {
      "trigger": "NSBundleExecutableArchitectureX86_64 (16777223)",
      "contents": "NSBundleExecutableArchitectureX86_64"
    },
    {
      "trigger": "NSCachesDirectory (13)",
      "contents": "NSCachesDirectory"
    },
    {
      "trigger": "NSCalculationDivideByZero (4)",
      "contents": "NSCalculationDivideByZero"
    },
    {
      "trigger": "NSCalculationLossOfPrecision (1)",
      "contents": "NSCalculationLossOfPrecision"
    },
    {
      "trigger": "NSCalculationNoError (0)",
      "contents": "NSCalculationNoError"
    },
    {
      "trigger": "NSCalculationOverflow (3)",
      "contents": "NSCalculationOverflow"
    },
    {
      "trigger": "NSCalculationUnderflow (2)",
      "contents": "NSCalculationUnderflow"
    },
    {
      "trigger": "NSCalendarCalendarUnit (1048576)",
      "contents": "NSCalendarCalendarUnit"
    },
    {
      "trigger": "NSCascadeDeleteRule (2)",
      "contents": "NSCascadeDeleteRule"
    },
    {
      "trigger": "NSCaseInsensitivePredicateOption (1)",
      "contents": "NSCaseInsensitivePredicateOption"
    },
    {
      "trigger": "NSCaseInsensitiveSearch (1)",
      "contents": "NSCaseInsensitiveSearch"
    },
    {
      "trigger": "NSCharacterConversionException (NSString*)",
      "contents": "NSCharacterConversionException"
    },
    {
      "trigger": "NSCharacterSet.characterSetWithBitmapRepresentation:",
      "contents": "NSCharacterSet.characterSetWithBitmapRepresentation(${1:NSData* data})"
    },
    {
      "trigger": "NSCharacterSet.characterSetWithCharactersInString:",
      "contents": "NSCharacterSet.characterSetWithCharactersInString(${1:NSString* aString})"
    },
    {
      "trigger": "NSCharacterSet.characterSetWithContentsOfFile:",
      "contents": "NSCharacterSet.characterSetWithContentsOfFile(${1:NSString* fName})"
    },
    {
      "trigger": "NSCharacterSet.characterSetWithRange:",
      "contents": "NSCharacterSet.characterSetWithRange(${1:NSRange aRange})"
    },
    {
      "trigger": "NSChineseCalendar (NSString*)",
      "contents": "NSChineseCalendar"
    },
    {
      "trigger": "NSClassFromString",
      "contents": "NSClassFromString(${1:NSString* aClassName})"
    },
    {
      "trigger": "NSCocoaErrorDomain (NSString*)",
      "contents": "NSCocoaErrorDomain"
    },
    {
      "trigger": "NSCoderMethods.setVersion:",
      "contents": "NSCoderMethods.setVersion(${1:NSInteger aVersion})"
    },
    {
      "trigger": "NSComparisonPredicate.predicateWithLeftExpression:rightExpression:customSelector:",
      "contents": "NSComparisonPredicate.predicateWithLeftExpression(${1:NSExpression* lhs}, rightExpression:${2:NSExpression* rhs}, customSelector:${3:SEL selector})"
    },
    {
      "trigger": "NSComparisonPredicate.predicateWithLeftExpression:rightExpression:modifier:type:options:",
      "contents": "NSComparisonPredicate.predicateWithLeftExpression(${1:NSExpression* lhs}, rightExpression:${2:NSExpression* rhs}, modifier:${3:NSComparisonPredicateModifier modifier}, type:${4:NSPredicateOperatorType type}, options:${5:NSComparisonPredicateOptions options})"
    },
    {
      "trigger": "NSCompoundPredicate.andPredicateWithSubpredicates:",
      "contents": "NSCompoundPredicate.andPredicateWithSubpredicates(${1:NSArray* subpredicates})"
    },
    {
      "trigger": "NSCompoundPredicate.notPredicateWithSubpredicate:",
      "contents": "NSCompoundPredicate.notPredicateWithSubpredicate(${1:NSPredicate* predicate})"
    },
    {
      "trigger": "NSCompoundPredicate.orPredicateWithSubpredicates:",
      "contents": "NSCompoundPredicate.orPredicateWithSubpredicates(${1:NSArray* subpredicates})"
    },
    {
      "trigger": "NSConfinementConcurrencyType (0)",
      "contents": "NSConfinementConcurrencyType"
    },
    {
      "trigger": "NSConstantValueExpressionType (0)",
      "contents": "NSConstantValueExpressionType"
    },
    {
      "trigger": "NSContainsPredicateOperatorType (99)",
      "contents": "NSContainsPredicateOperatorType"
    },
    {
      "trigger": "NSConvertHostDoubleToSwapped",
      "contents": "NSConvertHostDoubleToSwapped(${1:double x})"
    },
    {
      "trigger": "NSConvertHostFloatToSwapped",
      "contents": "NSConvertHostFloatToSwapped(${1:float x})"
    },
    {
      "trigger": "NSConvertSwappedDoubleToHost",
      "contents": "NSConvertSwappedDoubleToHost(${1:NSSwappedDouble x})"
    },
    {
      "trigger": "NSConvertSwappedFloatToHost",
      "contents": "NSConvertSwappedFloatToHost(${1:NSSwappedFloat x})"
    },
    {
      "trigger": "NSCopyEntityMappingType (4)",
      "contents": "NSCopyEntityMappingType"
    },
    {
      "trigger": "NSCopyMemoryPages",
      "contents": "NSCopyMemoryPages(${1:void* source}, ${2:void* dest}, ${3:NSUInteger bytes})"
    },
    {
      "trigger": "NSCopyObject",
      "contents": "NSCopyObject(${1:id object}, ${2:NSUInteger extraBytes}, ${3:NSZone* zone})"
    },
    {
      "trigger": "NSCoreDataError (134060)",
      "contents": "NSCoreDataError"
    },
    {
      "trigger": "NSCoreDataVersionNumber (double)",
      "contents": "NSCoreDataVersionNumber"
    },
    {
      "trigger": "NSCoreDataVersionNumber10_4 (46.0)",
      "contents": "NSCoreDataVersionNumber10_4"
    },
    {
      "trigger": "NSCoreDataVersionNumber10_4_3 (77.0)",
      "contents": "NSCoreDataVersionNumber10_4_3"
    },
    {
      "trigger": "NSCoreDataVersionNumber10_5 (185.0)",
      "contents": "NSCoreDataVersionNumber10_5"
    },
    {
      "trigger": "NSCoreDataVersionNumber10_5_3 (186.0)",
      "contents": "NSCoreDataVersionNumber10_5_3"
    },
    {
      "trigger": "NSCoreDataVersionNumber10_6 (246.0)",
      "contents": "NSCoreDataVersionNumber10_6"
    },
    {
      "trigger": "NSCoreDataVersionNumber10_6_2 (250.0)",
      "contents": "NSCoreDataVersionNumber10_6_2"
    },
    {
      "trigger": "NSCoreDataVersionNumber10_6_3 (251.0)",
      "contents": "NSCoreDataVersionNumber10_6_3"
    },
    {
      "trigger": "NSCoreDataVersionNumber_iPhoneOS_3_0 (241.0)",
      "contents": "NSCoreDataVersionNumber_iPhoneOS_3_0"
    },
    {
      "trigger": "NSCoreDataVersionNumber_iPhoneOS_3_1 (248.0)",
      "contents": "NSCoreDataVersionNumber_iPhoneOS_3_1"
    },
    {
      "trigger": "NSCoreDataVersionNumber_iPhoneOS_3_2 (310.2)",
      "contents": "NSCoreDataVersionNumber_iPhoneOS_3_2"
    },
    {
      "trigger": "NSCoreDataVersionNumber_iPhoneOS_4_0 (320.5)",
      "contents": "NSCoreDataVersionNumber_iPhoneOS_4_0"
    },
    {
      "trigger": "NSCoreDataVersionNumber_iPhoneOS_4_1 (320.11)",
      "contents": "NSCoreDataVersionNumber_iPhoneOS_4_1"
    },
    {
      "trigger": "NSCoreDataVersionNumber_iPhoneOS_4_2 (320.15)",
      "contents": "NSCoreDataVersionNumber_iPhoneOS_4_2"
    },
    {
      "trigger": "NSCoreDataVersionNumber_iPhoneOS_4_3 (320.17)",
      "contents": "NSCoreDataVersionNumber_iPhoneOS_4_3"
    },
    {
      "trigger": "NSCoreServiceDirectory (10)",
      "contents": "NSCoreServiceDirectory"
    },
    {
      "trigger": "NSCountKeyValueOperator (NSString*)",
      "contents": "NSCountKeyValueOperator"
    },
    {
      "trigger": "NSCountResultType (4)",
      "contents": "NSCountResultType"
    },
    {
      "trigger": "NSCreateZone",
      "contents": "NSCreateZone(${1:NSUInteger startSize}, ${2:NSUInteger granularity}, ${3:BOOL canFree})"
    },
    {
      "trigger": "NSCurrentLocaleDidChangeNotification (NSString*)",
      "contents": "NSCurrentLocaleDidChangeNotification"
    },
    {
      "trigger": "NSCustomEntityMappingType (1)",
      "contents": "NSCustomEntityMappingType"
    },
    {
      "trigger": "NSCustomSelectorPredicateOperatorType (11)",
      "contents": "NSCustomSelectorPredicateOperatorType"
    },
    {
      "trigger": "NSData.dataWithBytes:length:",
      "contents": "NSData.dataWithBytes(${1:void* bytes}, length:${2:NSUInteger length})"
    },
    {
      "trigger": "NSData.dataWithBytesNoCopy:length:",
      "contents": "NSData.dataWithBytesNoCopy(${1:void* bytes}, length:${2:NSUInteger length})"
    },
    {
      "trigger": "NSData.dataWithBytesNoCopy:length:freeWhenDone:",
      "contents": "NSData.dataWithBytesNoCopy(${1:void* bytes}, length:${2:NSUInteger length}, freeWhenDone:${3:BOOL b})"
    },
    {
      "trigger": "NSData.dataWithContentsOfFile:",
      "contents": "NSData.dataWithContentsOfFile(${1:NSString* path})"
    },
    {
      "trigger": "NSData.dataWithContentsOfFile:options:error:",
      "contents": "NSData.dataWithContentsOfFile(${1:NSString* path}, options:${2:NSDataReadingOptions readOptionsMask}, error:${3:NSError** errorPtr})"
    },
    {
      "trigger": "NSData.dataWithContentsOfMappedFile:",
      "contents": "NSData.dataWithContentsOfMappedFile(${1:NSString* path})"
    },
    {
      "trigger": "NSData.dataWithContentsOfURL:",
      "contents": "NSData.dataWithContentsOfURL(${1:NSURL* url})"
    },
    {
      "trigger": "NSData.dataWithContentsOfURL:options:error:",
      "contents": "NSData.dataWithContentsOfURL(${1:NSURL* url}, options:${2:NSDataReadingOptions readOptionsMask}, error:${3:NSError** errorPtr})"
    },
    {
      "trigger": "NSData.dataWithData:",
      "contents": "NSData.dataWithData(${1:NSData* data})"
    },
    {
      "trigger": "NSDataDetector.dataDetectorWithTypes:error:",
      "contents": "NSDataDetector.dataDetectorWithTypes(${1:NSTextCheckingTypes checkingTypes}, error:${2:NSError** error})"
    },
    {
      "trigger": "NSDataReadingMapped (1)",
      "contents": "NSDataReadingMapped"
    },
    {
      "trigger": "NSDataReadingMappedAlways (8)",
      "contents": "NSDataReadingMappedAlways"
    },
    {
      "trigger": "NSDataReadingMappedIfSafe (1)",
      "contents": "NSDataReadingMappedIfSafe"
    },
    {
      "trigger": "NSDataReadingUncached (2)",
      "contents": "NSDataReadingUncached"
    },
    {
      "trigger": "NSDataSearchAnchored (2)",
      "contents": "NSDataSearchAnchored"
    },
    {
      "trigger": "NSDataSearchBackwards (1)",
      "contents": "NSDataSearchBackwards"
    },
    {
      "trigger": "NSDataWritingAtomic (1)",
      "contents": "NSDataWritingAtomic"
    },
    {
      "trigger": "NSDataWritingFileProtectionComplete (536870912)",
      "contents": "NSDataWritingFileProtectionComplete"
    },
    {
      "trigger": "NSDataWritingFileProtectionCompleteUnlessOpen (805306368)",
      "contents": "NSDataWritingFileProtectionCompleteUnlessOpen"
    },
    {
      "trigger": "NSDataWritingFileProtectionCompleteUntilFirstUserAuthentication (1073741824)",
      "contents": "NSDataWritingFileProtectionCompleteUntilFirstUserAuthentication"
    },
    {
      "trigger": "NSDataWritingFileProtectionMask (4026531840)",
      "contents": "NSDataWritingFileProtectionMask"
    },
    {
      "trigger": "NSDataWritingFileProtectionNone (268435456)",
      "contents": "NSDataWritingFileProtectionNone"
    },
    {
      "trigger": "NSDate.dateWithTimeInterval:sinceDate:",
      "contents": "NSDate.dateWithTimeInterval(${1:NSTimeInterval ti}, sinceDate:${2:NSDate* date})"
    },
    {
      "trigger": "NSDate.dateWithTimeIntervalSince1970:",
      "contents": "NSDate.dateWithTimeIntervalSince1970(${1:NSTimeInterval secs})"
    },
    {
      "trigger": "NSDate.dateWithTimeIntervalSinceNow:",
      "contents": "NSDate.dateWithTimeIntervalSinceNow(${1:NSTimeInterval secs})"
    },
    {
      "trigger": "NSDate.dateWithTimeIntervalSinceReferenceDate:",
      "contents": "NSDate.dateWithTimeIntervalSinceReferenceDate(${1:NSTimeInterval secs})"
    },
    {
      "trigger": "NSDateAttributeType (900)",
      "contents": "NSDateAttributeType"
    },
    {
      "trigger": "NSDateFormatter.dateFormatFromTemplate:options:locale:",
      "contents": "NSDateFormatter.dateFormatFromTemplate(${1:NSString* tmplate}, options:${2:NSUInteger opts}, locale:${3:NSLocale* locale})"
    },
    {
      "trigger": "NSDateFormatter.localizedStringFromDate:dateStyle:timeStyle:",
      "contents": "NSDateFormatter.localizedStringFromDate(${1:NSDate* date}, dateStyle:${2:NSDateFormatterStyle dstyle}, timeStyle:${3:NSDateFormatterStyle tstyle})"
    },
    {
      "trigger": "NSDateFormatter.setDefaultFormatterBehavior:",
      "contents": "NSDateFormatter.setDefaultFormatterBehavior(${1:NSDateFormatterBehavior behavior})"
    },
    {
      "trigger": "NSDateFormatterBehavior10_4 (1040)",
      "contents": "NSDateFormatterBehavior10_4"
    },
    {
      "trigger": "NSDateFormatterBehaviorDefault (0)",
      "contents": "NSDateFormatterBehaviorDefault"
    },
    {
      "trigger": "NSDateFormatterFullStyle (4)",
      "contents": "NSDateFormatterFullStyle"
    },
    {
      "trigger": "NSDateFormatterLongStyle (3)",
      "contents": "NSDateFormatterLongStyle"
    },
    {
      "trigger": "NSDateFormatterMediumStyle (2)",
      "contents": "NSDateFormatterMediumStyle"
    },
    {
      "trigger": "NSDateFormatterNoStyle (0)",
      "contents": "NSDateFormatterNoStyle"
    },
    {
      "trigger": "NSDateFormatterShortStyle (1)",
      "contents": "NSDateFormatterShortStyle"
    },
    {
      "trigger": "NSDayCalendarUnit (16)",
      "contents": "NSDayCalendarUnit"
    },
    {
      "trigger": "NSDeallocateMemoryPages",
      "contents": "NSDeallocateMemoryPages(${1:void* ptr}, ${2:NSUInteger bytes})"
    },
    {
      "trigger": "NSDeallocateObject",
      "contents": "NSDeallocateObject(${1:id object})"
    },
    {
      "trigger": "NSDecimalAdd",
      "contents": "NSDecimalAdd(${1:NSDecimal* result}, ${2:NSDecimal* leftOperand}, ${3:NSDecimal* rightOperand}, ${4:NSRoundingMode roundingMode})"
    },
    {
      "trigger": "NSDecimalAttributeType (400)",
      "contents": "NSDecimalAttributeType"
    },
    {
      "trigger": "NSDecimalCompact",
      "contents": "NSDecimalCompact(${1:NSDecimal* number})"
    },
    {
      "trigger": "NSDecimalCompare",
      "contents": "NSDecimalCompare(${1:NSDecimal* leftOperand}, ${2:NSDecimal* rightOperand})"
    },
    {
      "trigger": "NSDecimalCopy",
      "contents": "NSDecimalCopy(${1:NSDecimal* destination}, ${2:NSDecimal* source})"
    },
    {
      "trigger": "NSDecimalDivide",
      "contents": "NSDecimalDivide(${1:NSDecimal* result}, ${2:NSDecimal* leftOperand}, ${3:NSDecimal* rightOperand}, ${4:NSRoundingMode roundingMode})"
    },
    {
      "trigger": "NSDecimalIsNotANumber",
      "contents": "NSDecimalIsNotANumber(${1:NSDecimal* dcm})"
    },
    {
      "trigger": "NSDecimalMaxSize (8)",
      "contents": "NSDecimalMaxSize"
    },
    {
      "trigger": "NSDecimalMultiply",
      "contents": "NSDecimalMultiply(${1:NSDecimal* result}, ${2:NSDecimal* leftOperand}, ${3:NSDecimal* rightOperand}, ${4:NSRoundingMode roundingMode})"
    },
    {
      "trigger": "NSDecimalMultiplyByPowerOf10",
      "contents": "NSDecimalMultiplyByPowerOf10(${1:NSDecimal* result}, ${2:NSDecimal* number}, ${3:short power}, ${4:NSRoundingMode roundingMode})"
    },
    {
      "trigger": "NSDecimalNoScale (32767)",
      "contents": "NSDecimalNoScale"
    },
    {
      "trigger": "NSDecimalNormalize",
      "contents": "NSDecimalNormalize(${1:NSDecimal* number1}, ${2:NSDecimal* number2}, ${3:NSRoundingMode roundingMode})"
    },
    {
      "trigger": "NSDecimalNumber.decimalNumberWithDecimal:",
      "contents": "NSDecimalNumber.decimalNumberWithDecimal(${1:NSDecimal dcm})"
    },
    {
      "trigger": "NSDecimalNumber.decimalNumberWithMantissa:exponent:isNegative:",
      "contents": "NSDecimalNumber.decimalNumberWithMantissa(${1:unsigned long long mantissa}, exponent:${2:short exponent}, isNegative:${3:BOOL flag})"
    },
    {
      "trigger": "NSDecimalNumber.decimalNumberWithString:",
      "contents": "NSDecimalNumber.decimalNumberWithString(${1:NSString* numberValue})"
    },
    {
      "trigger": "NSDecimalNumber.decimalNumberWithString:locale:",
      "contents": "NSDecimalNumber.decimalNumberWithString(${1:NSString* numberValue}, locale:${2:id locale})"
    },
    {
      "trigger": "NSDecimalNumber.setDefaultBehavior:",
      "contents": "NSDecimalNumber.setDefaultBehavior(${1:id behavior})"
    },
    {
      "trigger": "NSDecimalNumberDivideByZeroException (NSString*)",
      "contents": "NSDecimalNumberDivideByZeroException"
    },
    {
      "trigger": "NSDecimalNumberExactnessException (NSString*)",
      "contents": "NSDecimalNumberExactnessException"
    },
    {
      "trigger": "NSDecimalNumberHandler.decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:",
      "contents": "NSDecimalNumberHandler.decimalNumberHandlerWithRoundingMode(${1:NSRoundingMode roundingMode}, scale:${2:short scale}, raiseOnExactness:${3:BOOL exact}, raiseOnOverflow:${4:BOOL overflow}, raiseOnUnderflow:${5:BOOL underflow}, raiseOnDivideByZero:${6:BOOL divideByZero})"
    },
    {
      "trigger": "NSDecimalNumberOverflowException (NSString*)",
      "contents": "NSDecimalNumberOverflowException"
    },
    {
      "trigger": "NSDecimalNumberUnderflowException (NSString*)",
      "contents": "NSDecimalNumberUnderflowException"
    },
    {
      "trigger": "NSDecimalPower",
      "contents": "NSDecimalPower(${1:NSDecimal* result}, ${2:NSDecimal* number}, ${3:NSUInteger power}, ${4:NSRoundingMode roundingMode})"
    },
    {
      "trigger": "NSDecimalRound",
      "contents": "NSDecimalRound(${1:NSDecimal* result}, ${2:NSDecimal* number}, ${3:NSInteger scale}, ${4:NSRoundingMode roundingMode})"
    },
    {
      "trigger": "NSDecimalString",
      "contents": "NSDecimalString(${1:NSDecimal* dcm}, ${2:id locale})"
    },
    {
      "trigger": "NSDecimalSubtract",
      "contents": "NSDecimalSubtract(${1:NSDecimal* result}, ${2:NSDecimal* leftOperand}, ${3:NSDecimal* rightOperand}, ${4:NSRoundingMode roundingMode})"
    },
    {
      "trigger": "NSDecrementExtraRefCountWasZero",
      "contents": "NSDecrementExtraRefCountWasZero(${1:id object})"
    },
    {
      "trigger": "NSDefaultRunLoopMode (NSString*)",
      "contents": "NSDefaultRunLoopMode"
    },
    {
      "trigger": "NSDelayedPerforming.cancelPreviousPerformRequestsWithTarget:",
      "contents": "NSDelayedPerforming.cancelPreviousPerformRequestsWithTarget(${1:id aTarget})"
    },
    {
      "trigger": "NSDelayedPerforming.cancelPreviousPerformRequestsWithTarget:selector:object:",
      "contents": "NSDelayedPerforming.cancelPreviousPerformRequestsWithTarget(${1:id aTarget}, selector:${2:SEL aSelector}, object:${3:id anArgument})"
    },
    {
      "trigger": "NSDeletedObjectsKey (NSString*)",
      "contents": "NSDeletedObjectsKey"
    },
    {
      "trigger": "NSDemoApplicationDirectory (2)",
      "contents": "NSDemoApplicationDirectory"
    },
    {
      "trigger": "NSDenyDeleteRule (3)",
      "contents": "NSDenyDeleteRule"
    },
    {
      "trigger": "NSDesktopDirectory (12)",
      "contents": "NSDesktopDirectory"
    },
    {
      "trigger": "NSDestinationInvalidException (NSString*)",
      "contents": "NSDestinationInvalidException"
    },
    {
      "trigger": "NSDetailedErrorsKey (NSString*)",
      "contents": "NSDetailedErrorsKey"
    },
    {
      "trigger": "NSDeveloperApplicationDirectory (3)",
      "contents": "NSDeveloperApplicationDirectory"
    },
    {
      "trigger": "NSDeveloperDirectory (6)",
      "contents": "NSDeveloperDirectory"
    },
    {
      "trigger": "NSDiacriticInsensitivePredicateOption (2)",
      "contents": "NSDiacriticInsensitivePredicateOption"
    },
    {
      "trigger": "NSDiacriticInsensitiveSearch (128)",
      "contents": "NSDiacriticInsensitiveSearch"
    },
    {
      "trigger": "NSDictionary.dictionaryWithContentsOfFile:",
      "contents": "NSDictionary.dictionaryWithContentsOfFile(${1:NSString* path})"
    },
    {
      "trigger": "NSDictionary.dictionaryWithContentsOfURL:",
      "contents": "NSDictionary.dictionaryWithContentsOfURL(${1:NSURL* url})"
    },
    {
      "trigger": "NSDictionary.dictionaryWithDictionary:",
      "contents": "NSDictionary.dictionaryWithDictionary(${1:NSDictionary* dict})"
    },
    {
      "trigger": "NSDictionary.dictionaryWithObject:forKey:",
      "contents": "NSDictionary.dictionaryWithObject(${1:id object}, forKey:${2:id key})"
    },
    {
      "trigger": "NSDictionary.dictionaryWithObjects:forKeys:",
      "contents": "NSDictionary.dictionaryWithObjects(${1:NSArray* objects}, forKeys:${2:NSArray* keys})"
    },
    {
      "trigger": "NSDictionary.dictionaryWithObjects:forKeys:count:",
      "contents": "NSDictionary.dictionaryWithObjects(${1:id* objects}, forKeys:${2:id* keys}, count:${3:NSUInteger cnt})"
    },
    {
      "trigger": "NSDictionary.dictionaryWithObjectsAndKeys:",
      "contents": "NSDictionary.dictionaryWithObjectsAndKeys(${1:id firstObject})"
    },
    {
      "trigger": "NSDictionaryResultType (2)",
      "contents": "NSDictionaryResultType"
    },
    {
      "trigger": "NSDidBecomeSingleThreadedNotification (NSString*)",
      "contents": "NSDidBecomeSingleThreadedNotification"
    },
    {
      "trigger": "NSDirectPredicateModifier (0)",
      "contents": "NSDirectPredicateModifier"
    },
    {
      "trigger": "NSDirectoryEnumerationSkipsHiddenFiles (4)",
      "contents": "NSDirectoryEnumerationSkipsHiddenFiles"
    },
    {
      "trigger": "NSDirectoryEnumerationSkipsPackageDescendants (2)",
      "contents": "NSDirectoryEnumerationSkipsPackageDescendants"
    },
    {
      "trigger": "NSDirectoryEnumerationSkipsSubdirectoryDescendants (1)",
      "contents": "NSDirectoryEnumerationSkipsSubdirectoryDescendants"
    },
    {
      "trigger": "NSDistinctUnionOfArraysKeyValueOperator (NSString*)",
      "contents": "NSDistinctUnionOfArraysKeyValueOperator"
    },
    {
      "trigger": "NSDistinctUnionOfObjectsKeyValueOperator (NSString*)",
      "contents": "NSDistinctUnionOfObjectsKeyValueOperator"
    },
    {
      "trigger": "NSDistinctUnionOfSetsKeyValueOperator (NSString*)",
      "contents": "NSDistinctUnionOfSetsKeyValueOperator"
    },
    {
      "trigger": "NSDocumentDirectory (9)",
      "contents": "NSDocumentDirectory"
    },
    {
      "trigger": "NSDocumentationDirectory (8)",
      "contents": "NSDocumentationDirectory"
    },
    {
      "trigger": "NSDoubleAttributeType (500)",
      "contents": "NSDoubleAttributeType"
    },
    {
      "trigger": "NSDownloadsDirectory (15)",
      "contents": "NSDownloadsDirectory"
    },
    {
      "trigger": "NSEndsWithPredicateOperatorType (9)",
      "contents": "NSEndsWithPredicateOperatorType"
    },
    {
      "trigger": "NSEntityDescription.entityForName:inManagedObjectContext:",
      "contents": "NSEntityDescription.entityForName(${1:NSString* entityName}, inManagedObjectContext:${2:NSManagedObjectContext* context})"
    },
    {
      "trigger": "NSEntityDescription.insertNewObjectForEntityForName:inManagedObjectContext:",
      "contents": "NSEntityDescription.insertNewObjectForEntityForName(${1:NSString* entityName}, inManagedObjectContext:${2:NSManagedObjectContext* context})"
    },
    {
      "trigger": "NSEntityMigrationPolicyError (134170)",
      "contents": "NSEntityMigrationPolicyError"
    },
    {
      "trigger": "NSEnumerationConcurrent (1)",
      "contents": "NSEnumerationConcurrent"
    },
    {
      "trigger": "NSEnumerationReverse (2)",
      "contents": "NSEnumerationReverse"
    },
    {
      "trigger": "NSEqualRanges",
      "contents": "NSEqualRanges(${1:NSRange range1}, ${2:NSRange range2})"
    },
    {
      "trigger": "NSEqualToPredicateOperatorType (4)",
      "contents": "NSEqualToPredicateOperatorType"
    },
    {
      "trigger": "NSEraCalendarUnit (2)",
      "contents": "NSEraCalendarUnit"
    },
    {
      "trigger": "NSError.errorWithDomain:code:userInfo:",
      "contents": "NSError.errorWithDomain(${1:NSString* domain}, code:${2:NSInteger code}, userInfo:${3:NSDictionary* dict})"
    },
    {
      "trigger": "NSErrorFailingURLStringKey (NSString*)",
      "contents": "NSErrorFailingURLStringKey"
    },
    {
      "trigger": "NSErrorMergePolicy (id)",
      "contents": "NSErrorMergePolicy"
    },
    {
      "trigger": "NSErrorMergePolicyType (0)",
      "contents": "NSErrorMergePolicyType"
    },
    {
      "trigger": "NSEvaluatedObjectExpressionType (1)",
      "contents": "NSEvaluatedObjectExpressionType"
    },
    {
      "trigger": "NSException.exceptionWithName:reason:userInfo:",
      "contents": "NSException.exceptionWithName(${1:NSString* name}, reason:${2:NSString* reason}, userInfo:${3:NSDictionary* userInfo})"
    },
    {
      "trigger": "NSException.raise:format:",
      "contents": "NSException.raise(${1:NSString* name}, format:${2:NSString* format})"
    },
    {
      "trigger": "NSException.raise:format:arguments:",
      "contents": "NSException.raise(${1:NSString* name}, format:${2:NSString* format}, arguments:${3:va_list argList})"
    },
    {
      "trigger": "NSExecutableArchitectureMismatchError (3585)",
      "contents": "NSExecutableArchitectureMismatchError"
    },
    {
      "trigger": "NSExecutableErrorMaximum (3839)",
      "contents": "NSExecutableErrorMaximum"
    },
    {
      "trigger": "NSExecutableErrorMinimum (3584)",
      "contents": "NSExecutableErrorMinimum"
    },
    {
      "trigger": "NSExecutableLinkError (3588)",
      "contents": "NSExecutableLinkError"
    },
    {
      "trigger": "NSExecutableLoadError (3587)",
      "contents": "NSExecutableLoadError"
    },
    {
      "trigger": "NSExecutableNotLoadableError (3584)",
      "contents": "NSExecutableNotLoadableError"
    },
    {
      "trigger": "NSExecutableRuntimeMismatchError (3586)",
      "contents": "NSExecutableRuntimeMismatchError"
    },
    {
      "trigger": "NSExpression.expressionForAggregate:",
      "contents": "NSExpression.expressionForAggregate(${1:NSArray* subexpressions})"
    },
    {
      "trigger": "NSExpression.expressionForBlock:arguments:",
      "contents": "NSExpression.expressionForBlock(${1:id (^)(id, NSArray *, NSMutableDictionary *) block}, arguments:${2:NSArray* arguments})"
    },
    {
      "trigger": "NSExpression.expressionForConstantValue:",
      "contents": "NSExpression.expressionForConstantValue(${1:id obj})"
    },
    {
      "trigger": "NSExpression.expressionForFunction:arguments:",
      "contents": "NSExpression.expressionForFunction(${1:NSString* name}, arguments:${2:NSArray* parameters})"
    },
    {
      "trigger": "NSExpression.expressionForFunction:selectorName:arguments:",
      "contents": "NSExpression.expressionForFunction(${1:NSExpression* target}, selectorName:${2:NSString* name}, arguments:${3:NSArray* parameters})"
    },
    {
      "trigger": "NSExpression.expressionForIntersectSet:with:",
      "contents": "NSExpression.expressionForIntersectSet(${1:NSExpression* left}, with:${2:NSExpression* right})"
    },
    {
      "trigger": "NSExpression.expressionForKeyPath:",
      "contents": "NSExpression.expressionForKeyPath(${1:NSString* keyPath})"
    },
    {
      "trigger": "NSExpression.expressionForMinusSet:with:",
      "contents": "NSExpression.expressionForMinusSet(${1:NSExpression* left}, with:${2:NSExpression* right})"
    },
    {
      "trigger": "NSExpression.expressionForSubquery:usingIteratorVariable:predicate:",
      "contents": "NSExpression.expressionForSubquery(${1:NSExpression* expression}, usingIteratorVariable:${2:NSString* variable}, predicate:${3:id predicate})"
    },
    {
      "trigger": "NSExpression.expressionForUnionSet:with:",
      "contents": "NSExpression.expressionForUnionSet(${1:NSExpression* left}, with:${2:NSExpression* right})"
    },
    {
      "trigger": "NSExpression.expressionForVariable:",
      "contents": "NSExpression.expressionForVariable(${1:NSString* string})"
    },
    {
      "trigger": "NSExpression.expressionWithFormat:",
      "contents": "NSExpression.expressionWithFormat(${1:NSString* expressionFormat})"
    },
    {
      "trigger": "NSExpression.expressionWithFormat:argumentArray:",
      "contents": "NSExpression.expressionWithFormat(${1:NSString* expressionFormat}, argumentArray:${2:NSArray* arguments})"
    },
    {
      "trigger": "NSExpression.expressionWithFormat:arguments:",
      "contents": "NSExpression.expressionWithFormat(${1:NSString* expressionFormat}, arguments:${2:va_list argList})"
    },
    {
      "trigger": "NSExternalRecordImportError (134200)",
      "contents": "NSExternalRecordImportError"
    },
    {
      "trigger": "NSExtraRefCount",
      "contents": "NSExtraRefCount(${1:id object})"
    },
    {
      "trigger": "NSFetchRequest.fetchRequestWithEntityName:",
      "contents": "NSFetchRequest.fetchRequestWithEntityName(${1:NSString* entityName})"
    },
    {
      "trigger": "NSFetchRequestExpression.expressionForFetch:context:countOnly:",
      "contents": "NSFetchRequestExpression.expressionForFetch(${1:NSExpression* fetch}, context:${2:NSExpression* context}, countOnly:${3:BOOL countFlag})"
    },
    {
      "trigger": "NSFetchRequestExpressionType (50)",
      "contents": "NSFetchRequestExpressionType"
    },
    {
      "trigger": "NSFetchRequestType (1)",
      "contents": "NSFetchRequestType"
    },
    {
      "trigger": "NSFetchedResultsChangeDelete (2)",
      "contents": "NSFetchedResultsChangeDelete"
    },
    {
      "trigger": "NSFetchedResultsChangeInsert (1)",
      "contents": "NSFetchedResultsChangeInsert"
    },
    {
      "trigger": "NSFetchedResultsChangeMove (3)",
      "contents": "NSFetchedResultsChangeMove"
    },
    {
      "trigger": "NSFetchedResultsChangeUpdate (4)",
      "contents": "NSFetchedResultsChangeUpdate"
    },
    {
      "trigger": "NSFetchedResultsController.deleteCacheWithName:",
      "contents": "NSFetchedResultsController.deleteCacheWithName(${1:NSString* name})"
    },
    {
      "trigger": "NSFileAppendOnly (NSString*)",
      "contents": "NSFileAppendOnly"
    },
    {
      "trigger": "NSFileBusy (NSString*)",
      "contents": "NSFileBusy"
    },
    {
      "trigger": "NSFileCoordinator.addFilePresenter:",
      "contents": "NSFileCoordinator.addFilePresenter(${1:id filePresenter})"
    },
    {
      "trigger": "NSFileCoordinator.removeFilePresenter:",
      "contents": "NSFileCoordinator.removeFilePresenter(${1:id filePresenter})"
    },
    {
      "trigger": "NSFileCoordinatorReadingResolvesSymbolicLink (2)",
      "contents": "NSFileCoordinatorReadingResolvesSymbolicLink"
    },
    {
      "trigger": "NSFileCoordinatorReadingWithoutChanges (1)",
      "contents": "NSFileCoordinatorReadingWithoutChanges"
    },
    {
      "trigger": "NSFileCoordinatorWritingForDeleting (1)",
      "contents": "NSFileCoordinatorWritingForDeleting"
    },
    {
      "trigger": "NSFileCoordinatorWritingForMerging (4)",
      "contents": "NSFileCoordinatorWritingForMerging"
    },
    {
      "trigger": "NSFileCoordinatorWritingForMoving (2)",
      "contents": "NSFileCoordinatorWritingForMoving"
    },
    {
      "trigger": "NSFileCoordinatorWritingForReplacing (8)",
      "contents": "NSFileCoordinatorWritingForReplacing"
    },
    {
      "trigger": "NSFileCreationDate (NSString*)",
      "contents": "NSFileCreationDate"
    },
    {
      "trigger": "NSFileDeviceIdentifier (NSString*)",
      "contents": "NSFileDeviceIdentifier"
    },
    {
      "trigger": "NSFileErrorMaximum (1023)",
      "contents": "NSFileErrorMaximum"
    },
    {
      "trigger": "NSFileErrorMinimum (0)",
      "contents": "NSFileErrorMinimum"
    },
    {
      "trigger": "NSFileExtensionHidden (NSString*)",
      "contents": "NSFileExtensionHidden"
    },
    {
      "trigger": "NSFileGroupOwnerAccountID (NSString*)",
      "contents": "NSFileGroupOwnerAccountID"
    },
    {
      "trigger": "NSFileGroupOwnerAccountName (NSString*)",
      "contents": "NSFileGroupOwnerAccountName"
    },
    {
      "trigger": "NSFileHFSCreatorCode (NSString*)",
      "contents": "NSFileHFSCreatorCode"
    },
    {
      "trigger": "NSFileHFSTypeCode (NSString*)",
      "contents": "NSFileHFSTypeCode"
    },
    {
      "trigger": "NSFileHandle.fileHandleForReadingAtPath:",
      "contents": "NSFileHandle.fileHandleForReadingAtPath(${1:NSString* path})"
    },
    {
      "trigger": "NSFileHandle.fileHandleForReadingFromURL:error:",
      "contents": "NSFileHandle.fileHandleForReadingFromURL(${1:NSURL* url}, error:${2:NSError** error})"
    },
    {
      "trigger": "NSFileHandle.fileHandleForUpdatingAtPath:",
      "contents": "NSFileHandle.fileHandleForUpdatingAtPath(${1:NSString* path})"
    },
    {
      "trigger": "NSFileHandle.fileHandleForUpdatingURL:error:",
      "contents": "NSFileHandle.fileHandleForUpdatingURL(${1:NSURL* url}, error:${2:NSError** error})"
    },
    {
      "trigger": "NSFileHandle.fileHandleForWritingAtPath:",
      "contents": "NSFileHandle.fileHandleForWritingAtPath(${1:NSString* path})"
    },
    {
      "trigger": "NSFileHandle.fileHandleForWritingToURL:error:",
      "contents": "NSFileHandle.fileHandleForWritingToURL(${1:NSURL* url}, error:${2:NSError** error})"
    },
    {
      "trigger": "NSFileHandleConnectionAcceptedNotification (NSString*)",
      "contents": "NSFileHandleConnectionAcceptedNotification"
    },
    {
      "trigger": "NSFileHandleDataAvailableNotification (NSString*)",
      "contents": "NSFileHandleDataAvailableNotification"
    },
    {
      "trigger": "NSFileHandleNotificationDataItem (NSString*)",
      "contents": "NSFileHandleNotificationDataItem"
    },
    {
      "trigger": "NSFileHandleNotificationFileHandleItem (NSString*)",
      "contents": "NSFileHandleNotificationFileHandleItem"
    },
    {
      "trigger": "NSFileHandleNotificationMonitorModes (NSString*)",
      "contents": "NSFileHandleNotificationMonitorModes"
    },
    {
      "trigger": "NSFileHandleOperationException (NSString*)",
      "contents": "NSFileHandleOperationException"
    },
    {
      "trigger": "NSFileHandleReadCompletionNotification (NSString*)",
      "contents": "NSFileHandleReadCompletionNotification"
    },
    {
      "trigger": "NSFileHandleReadToEndOfFileCompletionNotification (NSString*)",
      "contents": "NSFileHandleReadToEndOfFileCompletionNotification"
    },
    {
      "trigger": "NSFileImmutable (NSString*)",
      "contents": "NSFileImmutable"
    },
    {
      "trigger": "NSFileLockingError (255)",
      "contents": "NSFileLockingError"
    },
    {
      "trigger": "NSFileManagerItemReplacementUsingNewMetadataOnly (1)",
      "contents": "NSFileManagerItemReplacementUsingNewMetadataOnly"
    },
    {
      "trigger": "NSFileManagerItemReplacementWithoutDeletingBackupItem (2)",
      "contents": "NSFileManagerItemReplacementWithoutDeletingBackupItem"
    },
    {
      "trigger": "NSFileModificationDate (NSString*)",
      "contents": "NSFileModificationDate"
    },
    {
      "trigger": "NSFileNoSuchFileError (4)",
      "contents": "NSFileNoSuchFileError"
    },
    {
      "trigger": "NSFileOwnerAccountID (NSString*)",
      "contents": "NSFileOwnerAccountID"
    },
    {
      "trigger": "NSFileOwnerAccountName (NSString*)",
      "contents": "NSFileOwnerAccountName"
    },
    {
      "trigger": "NSFilePathErrorKey (NSString*)",
      "contents": "NSFilePathErrorKey"
    },
    {
      "trigger": "NSFilePosixPermissions (NSString*)",
      "contents": "NSFilePosixPermissions"
    },
    {
      "trigger": "NSFileProtectionComplete (NSString*)",
      "contents": "NSFileProtectionComplete"
    },
    {
      "trigger": "NSFileProtectionCompleteUnlessOpen (NSString*)",
      "contents": "NSFileProtectionCompleteUnlessOpen"
    },
    {
      "trigger": "NSFileProtectionCompleteUntilFirstUserAuthentication (NSString*)",
      "contents": "NSFileProtectionCompleteUntilFirstUserAuthentication"
    },
    {
      "trigger": "NSFileProtectionKey (NSString*)",
      "contents": "NSFileProtectionKey"
    },
    {
      "trigger": "NSFileProtectionNone (NSString*)",
      "contents": "NSFileProtectionNone"
    },
    {
      "trigger": "NSFileReadCorruptFileError (259)",
      "contents": "NSFileReadCorruptFileError"
    },
    {
      "trigger": "NSFileReadInapplicableStringEncodingError (261)",
      "contents": "NSFileReadInapplicableStringEncodingError"
    },
    {
      "trigger": "NSFileReadInvalidFileNameError (258)",
      "contents": "NSFileReadInvalidFileNameError"
    },
    {
      "trigger": "NSFileReadNoPermissionError (257)",
      "contents": "NSFileReadNoPermissionError"
    },
    {
      "trigger": "NSFileReadNoSuchFileError (260)",
      "contents": "NSFileReadNoSuchFileError"
    },
    {
      "trigger": "NSFileReadTooLargeError (263)",
      "contents": "NSFileReadTooLargeError"
    },
    {
      "trigger": "NSFileReadUnknownError (256)",
      "contents": "NSFileReadUnknownError"
    },
    {
      "trigger": "NSFileReadUnknownStringEncodingError (264)",
      "contents": "NSFileReadUnknownStringEncodingError"
    },
    {
      "trigger": "NSFileReadUnsupportedSchemeError (262)",
      "contents": "NSFileReadUnsupportedSchemeError"
    },
    {
      "trigger": "NSFileReferenceCount (NSString*)",
      "contents": "NSFileReferenceCount"
    },
    {
      "trigger": "NSFileSize (NSString*)",
      "contents": "NSFileSize"
    },
    {
      "trigger": "NSFileSystemFileNumber (NSString*)",
      "contents": "NSFileSystemFileNumber"
    },
    {
      "trigger": "NSFileSystemFreeNodes (NSString*)",
      "contents": "NSFileSystemFreeNodes"
    },
    {
      "trigger": "NSFileSystemFreeSize (NSString*)",
      "contents": "NSFileSystemFreeSize"
    },
    {
      "trigger": "NSFileSystemNodes (NSString*)",
      "contents": "NSFileSystemNodes"
    },
    {
      "trigger": "NSFileSystemNumber (NSString*)",
      "contents": "NSFileSystemNumber"
    },
    {
      "trigger": "NSFileSystemSize (NSString*)",
      "contents": "NSFileSystemSize"
    },
    {
      "trigger": "NSFileType (NSString*)",
      "contents": "NSFileType"
    },
    {
      "trigger": "NSFileTypeBlockSpecial (NSString*)",
      "contents": "NSFileTypeBlockSpecial"
    },
    {
      "trigger": "NSFileTypeCharacterSpecial (NSString*)",
      "contents": "NSFileTypeCharacterSpecial"
    },
    {
      "trigger": "NSFileTypeDirectory (NSString*)",
      "contents": "NSFileTypeDirectory"
    },
    {
      "trigger": "NSFileTypeRegular (NSString*)",
      "contents": "NSFileTypeRegular"
    },
    {
      "trigger": "NSFileTypeSocket (NSString*)",
      "contents": "NSFileTypeSocket"
    },
    {
      "trigger": "NSFileTypeSymbolicLink (NSString*)",
      "contents": "NSFileTypeSymbolicLink"
    },
    {
      "trigger": "NSFileTypeUnknown (NSString*)",
      "contents": "NSFileTypeUnknown"
    },
    {
      "trigger": "NSFileVersion.currentVersionOfItemAtURL:",
      "contents": "NSFileVersion.currentVersionOfItemAtURL(${1:NSURL* url})"
    },
    {
      "trigger": "NSFileVersion.otherVersionsOfItemAtURL:",
      "contents": "NSFileVersion.otherVersionsOfItemAtURL(${1:NSURL* url})"
    },
    {
      "trigger": "NSFileVersion.removeOtherVersionsOfItemAtURL:error:",
      "contents": "NSFileVersion.removeOtherVersionsOfItemAtURL(${1:NSURL* url}, error:${2:NSError** outError})"
    },
    {
      "trigger": "NSFileVersion.unresolvedConflictVersionsOfItemAtURL:",
      "contents": "NSFileVersion.unresolvedConflictVersionsOfItemAtURL(${1:NSURL* url})"
    },
    {
      "trigger": "NSFileVersion.versionOfItemAtURL:forPersistentIdentifier:",
      "contents": "NSFileVersion.versionOfItemAtURL(${1:NSURL* url}, forPersistentIdentifier:${2:id persistentIdentifier})"
    },
    {
      "trigger": "NSFileVersionAddingByMoving (1)",
      "contents": "NSFileVersionAddingByMoving"
    },
    {
      "trigger": "NSFileVersionReplacingByMoving (1)",
      "contents": "NSFileVersionReplacingByMoving"
    },
    {
      "trigger": "NSFileWrapperReadingImmediate (1)",
      "contents": "NSFileWrapperReadingImmediate"
    },
    {
      "trigger": "NSFileWrapperReadingWithoutMapping (2)",
      "contents": "NSFileWrapperReadingWithoutMapping"
    },
    {
      "trigger": "NSFileWrapperWritingAtomic (1)",
      "contents": "NSFileWrapperWritingAtomic"
    },
    {
      "trigger": "NSFileWrapperWritingWithNameUpdating (2)",
      "contents": "NSFileWrapperWritingWithNameUpdating"
    },
    {
      "trigger": "NSFileWriteFileExistsError (516)",
      "contents": "NSFileWriteFileExistsError"
    },
    {
      "trigger": "NSFileWriteInapplicableStringEncodingError (517)",
      "contents": "NSFileWriteInapplicableStringEncodingError"
    },
    {
      "trigger": "NSFileWriteInvalidFileNameError (514)",
      "contents": "NSFileWriteInvalidFileNameError"
    },
    {
      "trigger": "NSFileWriteNoPermissionError (513)",
      "contents": "NSFileWriteNoPermissionError"
    },
    {
      "trigger": "NSFileWriteOutOfSpaceError (640)",
      "contents": "NSFileWriteOutOfSpaceError"
    },
    {
      "trigger": "NSFileWriteUnknownError (512)",
      "contents": "NSFileWriteUnknownError"
    },
    {
      "trigger": "NSFileWriteUnsupportedSchemeError (518)",
      "contents": "NSFileWriteUnsupportedSchemeError"
    },
    {
      "trigger": "NSFileWriteVolumeReadOnlyError (642)",
      "contents": "NSFileWriteVolumeReadOnlyError"
    },
    {
      "trigger": "NSFloatAttributeType (600)",
      "contents": "NSFloatAttributeType"
    },
    {
      "trigger": "NSForcedOrderingSearch (512)",
      "contents": "NSForcedOrderingSearch"
    },
    {
      "trigger": "NSFormattingError (2048)",
      "contents": "NSFormattingError"
    },
    {
      "trigger": "NSFormattingErrorMaximum (2559)",
      "contents": "NSFormattingErrorMaximum"
    },
    {
      "trigger": "NSFormattingErrorMinimum (2048)",
      "contents": "NSFormattingErrorMinimum"
    },
    {
      "trigger": "NSFoundationVersionNumber (double)",
      "contents": "NSFoundationVersionNumber"
    },
    {
      "trigger": "NSFoundationVersionNumber10_0 (397.40)",
      "contents": "NSFoundationVersionNumber10_0"
    },
    {
      "trigger": "NSFoundationVersionNumber10_1 (425.00)",
      "contents": "NSFoundationVersionNumber10_1"
    },
    {
      "trigger": "NSFoundationVersionNumber10_1_1 (425.00)",
      "contents": "NSFoundationVersionNumber10_1_1"
    },
    {
      "trigger": "NSFoundationVersionNumber10_1_2 (425.00)",
      "contents": "NSFoundationVersionNumber10_1_2"
    },
    {
      "trigger": "NSFoundationVersionNumber10_1_3 (425.00)",
      "contents": "NSFoundationVersionNumber10_1_3"
    },
    {
      "trigger": "NSFoundationVersionNumber10_1_4 (425.00)",
      "contents": "NSFoundationVersionNumber10_1_4"
    },
    {
      "trigger": "NSFoundationVersionNumber10_2 (462.00)",
      "contents": "NSFoundationVersionNumber10_2"
    },
    {
      "trigger": "NSFoundationVersionNumber10_2_1 (462.00)",
      "contents": "NSFoundationVersionNumber10_2_1"
    },
    {
      "trigger": "NSFoundationVersionNumber10_2_2 (462.00)",
      "contents": "NSFoundationVersionNumber10_2_2"
    },
    {
      "trigger": "NSFoundationVersionNumber10_2_3 (462.00)",
      "contents": "NSFoundationVersionNumber10_2_3"
    },
    {
      "trigger": "NSFoundationVersionNumber10_2_4 (462.00)",
      "contents": "NSFoundationVersionNumber10_2_4"
    },
    {
      "trigger": "NSFoundationVersionNumber10_2_5 (462.00)",
      "contents": "NSFoundationVersionNumber10_2_5"
    },
    {
      "trigger": "NSFoundationVersionNumber10_2_6 (462.00)",
      "contents": "NSFoundationVersionNumber10_2_6"
    },
    {
      "trigger": "NSFoundationVersionNumber10_2_7 (462.70)",
      "contents": "NSFoundationVersionNumber10_2_7"
    },
    {
      "trigger": "NSFoundationVersionNumber10_2_8 (462.70)",
      "contents": "NSFoundationVersionNumber10_2_8"
    },
    {
      "trigger": "NSFoundationVersionNumber10_3 (500.00)",
      "contents": "NSFoundationVersionNumber10_3"
    },
    {
      "trigger": "NSFoundationVersionNumber10_3_1 (500.00)",
      "contents": "NSFoundationVersionNumber10_3_1"
    },
    {
      "trigger": "NSFoundationVersionNumber10_3_2 (500.30)",
      "contents": "NSFoundationVersionNumber10_3_2"
    },
    {
      "trigger": "NSFoundationVersionNumber10_3_3 (500.54)",
      "contents": "NSFoundationVersionNumber10_3_3"
    },
    {
      "trigger": "NSFoundationVersionNumber10_3_4 (500.56)",
      "contents": "NSFoundationVersionNumber10_3_4"
    },
    {
      "trigger": "NSFoundationVersionNumber10_3_5 (500.56)",
      "contents": "NSFoundationVersionNumber10_3_5"
    },
    {
      "trigger": "NSFoundationVersionNumber10_3_6 (500.56)",
      "contents": "NSFoundationVersionNumber10_3_6"
    },
    {
      "trigger": "NSFoundationVersionNumber10_3_7 (500.56)",
      "contents": "NSFoundationVersionNumber10_3_7"
    },
    {
      "trigger": "NSFoundationVersionNumber10_3_8 (500.56)",
      "contents": "NSFoundationVersionNumber10_3_8"
    },
    {
      "trigger": "NSFoundationVersionNumber10_3_9 (500.58)",
      "contents": "NSFoundationVersionNumber10_3_9"
    },
    {
      "trigger": "NSFoundationVersionNumber10_4 (567.00)",
      "contents": "NSFoundationVersionNumber10_4"
    },
    {
      "trigger": "NSFoundationVersionNumber10_4_1 (567.00)",
      "contents": "NSFoundationVersionNumber10_4_1"
    },
    {
      "trigger": "NSFoundationVersionNumber10_4_10 (567.29)",
      "contents": "NSFoundationVersionNumber10_4_10"
    },
    {
      "trigger": "NSFoundationVersionNumber10_4_11 (567.36)",
      "contents": "NSFoundationVersionNumber10_4_11"
    },
    {
      "trigger": "NSFoundationVersionNumber10_4_2 (567.12)",
      "contents": "NSFoundationVersionNumber10_4_2"
    },
    {
      "trigger": "NSFoundationVersionNumber10_4_3 (567.21)",
      "contents": "NSFoundationVersionNumber10_4_3"
    },
    {
      "trigger": "NSFoundationVersionNumber10_4_4_Intel (567.23)",
      "contents": "NSFoundationVersionNumber10_4_4_Intel"
    },
    {
      "trigger": "NSFoundationVersionNumber10_4_4_PowerPC (567.21)",
      "contents": "NSFoundationVersionNumber10_4_4_PowerPC"
    },
    {
      "trigger": "NSFoundationVersionNumber10_4_5 (567.25)",
      "contents": "NSFoundationVersionNumber10_4_5"
    },
    {
      "trigger": "NSFoundationVersionNumber10_4_6 (567.26)",
      "contents": "NSFoundationVersionNumber10_4_6"
    },
    {
      "trigger": "NSFoundationVersionNumber10_4_7 (567.27)",
      "contents": "NSFoundationVersionNumber10_4_7"
    },
    {
      "trigger": "NSFoundationVersionNumber10_4_8 (567.28)",
      "contents": "NSFoundationVersionNumber10_4_8"
    },
    {
      "trigger": "NSFoundationVersionNumber10_4_9 (567.29)",
      "contents": "NSFoundationVersionNumber10_4_9"
    },
    {
      "trigger": "NSFoundationVersionNumber10_5 (677.00)",
      "contents": "NSFoundationVersionNumber10_5"
    },
    {
      "trigger": "NSFoundationVersionNumber10_5_1 (677.10)",
      "contents": "NSFoundationVersionNumber10_5_1"
    },
    {
      "trigger": "NSFoundationVersionNumber10_5_2 (677.15)",
      "contents": "NSFoundationVersionNumber10_5_2"
    },
    {
      "trigger": "NSFoundationVersionNumber10_5_3 (677.19)",
      "contents": "NSFoundationVersionNumber10_5_3"
    },
    {
      "trigger": "NSFoundationVersionNumber10_5_4 (677.19)",
      "contents": "NSFoundationVersionNumber10_5_4"
    },
    {
      "trigger": "NSFoundationVersionNumber10_5_5 (677.21)",
      "contents": "NSFoundationVersionNumber10_5_5"
    },
    {
      "trigger": "NSFoundationVersionNumber10_5_6 (677.22)",
      "contents": "NSFoundationVersionNumber10_5_6"
    },
    {
      "trigger": "NSFoundationVersionNumber10_5_7 (677.24)",
      "contents": "NSFoundationVersionNumber10_5_7"
    },
    {
      "trigger": "NSFoundationVersionNumber10_5_8 (677.26)",
      "contents": "NSFoundationVersionNumber10_5_8"
    },
    {
      "trigger": "NSFoundationVersionNumber10_6 (751.00)",
      "contents": "NSFoundationVersionNumber10_6"
    },
    {
      "trigger": "NSFoundationVersionNumber10_6_1 (751.00)",
      "contents": "NSFoundationVersionNumber10_6_1"
    },
    {
      "trigger": "NSFoundationVersionNumber10_6_2 (751.14)",
      "contents": "NSFoundationVersionNumber10_6_2"
    },
    {
      "trigger": "NSFoundationVersionNumber10_6_3 (751.21)",
      "contents": "NSFoundationVersionNumber10_6_3"
    },
    {
      "trigger": "NSFoundationVersionNumber10_6_4 (751.29)",
      "contents": "NSFoundationVersionNumber10_6_4"
    },
    {
      "trigger": "NSFoundationVersionNumber10_6_5 (751.42)",
      "contents": "NSFoundationVersionNumber10_6_5"
    },
    {
      "trigger": "NSFoundationVersionNumber_iOS_4_0 (751.32)",
      "contents": "NSFoundationVersionNumber_iOS_4_0"
    },
    {
      "trigger": "NSFoundationVersionNumber_iOS_4_1 (751.37)",
      "contents": "NSFoundationVersionNumber_iOS_4_1"
    },
    {
      "trigger": "NSFoundationVersionNumber_iOS_4_2 (751.49)",
      "contents": "NSFoundationVersionNumber_iOS_4_2"
    },
    {
      "trigger": "NSFoundationVersionNumber_iPhoneOS_2_0 (678.24)",
      "contents": "NSFoundationVersionNumber_iPhoneOS_2_0"
    },
    {
      "trigger": "NSFoundationVersionNumber_iPhoneOS_2_1 (678.26)",
      "contents": "NSFoundationVersionNumber_iPhoneOS_2_1"
    },
    {
      "trigger": "NSFoundationVersionNumber_iPhoneOS_2_2 (678.29)",
      "contents": "NSFoundationVersionNumber_iPhoneOS_2_2"
    },
    {
      "trigger": "NSFoundationVersionNumber_iPhoneOS_3_0 (678.47)",
      "contents": "NSFoundationVersionNumber_iPhoneOS_3_0"
    },
    {
      "trigger": "NSFoundationVersionNumber_iPhoneOS_3_1 (678.51)",
      "contents": "NSFoundationVersionNumber_iPhoneOS_3_1"
    },
    {
      "trigger": "NSFoundationVersionNumber_iPhoneOS_3_2 (678.60)",
      "contents": "NSFoundationVersionNumber_iPhoneOS_3_2"
    },
    {
      "trigger": "NSFoundationVersionWithFileManagerResourceForkSupport (412)",
      "contents": "NSFoundationVersionWithFileManagerResourceForkSupport"
    },
    {
      "trigger": "NSFunctionExpressionType (4)",
      "contents": "NSFunctionExpressionType"
    },
    {
      "trigger": "NSGenericException (NSString*)",
      "contents": "NSGenericException"
    },
    {
      "trigger": "NSGetSizeAndAlignment",
      "contents": "NSGetSizeAndAlignment(${1:char* typePtr}, ${2:NSUInteger* sizep}, ${3:NSUInteger* alignp})"
    },
    {
      "trigger": "NSGlobalDomain (NSString*)",
      "contents": "NSGlobalDomain"
    },
    {
      "trigger": "NSGreaterThanOrEqualToPredicateOperatorType (3)",
      "contents": "NSGreaterThanOrEqualToPredicateOperatorType"
    },
    {
      "trigger": "NSGreaterThanPredicateOperatorType (2)",
      "contents": "NSGreaterThanPredicateOperatorType"
    },
    {
      "trigger": "NSGregorianCalendar (NSString*)",
      "contents": "NSGregorianCalendar"
    },
    {
      "trigger": "NSHPUXOperatingSystem (4)",
      "contents": "NSHPUXOperatingSystem"
    },
    {
      "trigger": "NSHTTPCookie.cookieWithProperties:",
      "contents": "NSHTTPCookie.cookieWithProperties(${1:NSDictionary* properties})"
    },
    {
      "trigger": "NSHTTPCookie.cookiesWithResponseHeaderFields:forURL:",
      "contents": "NSHTTPCookie.cookiesWithResponseHeaderFields(${1:NSDictionary* headerFields}, forURL:${2:NSURL* URL})"
    },
    {
      "trigger": "NSHTTPCookie.requestHeaderFieldsWithCookies:",
      "contents": "NSHTTPCookie.requestHeaderFieldsWithCookies(${1:NSArray* cookies})"
    },
    {
      "trigger": "NSHTTPCookieAcceptPolicyAlways (0)",
      "contents": "NSHTTPCookieAcceptPolicyAlways"
    },
    {
      "trigger": "NSHTTPCookieAcceptPolicyNever (1)",
      "contents": "NSHTTPCookieAcceptPolicyNever"
    },
    {
      "trigger": "NSHTTPCookieAcceptPolicyOnlyFromMainDocumentDomain (2)",
      "contents": "NSHTTPCookieAcceptPolicyOnlyFromMainDocumentDomain"
    },
    {
      "trigger": "NSHTTPCookieComment (NSString*)",
      "contents": "NSHTTPCookieComment"
    },
    {
      "trigger": "NSHTTPCookieCommentURL (NSString*)",
      "contents": "NSHTTPCookieCommentURL"
    },
    {
      "trigger": "NSHTTPCookieDiscard (NSString*)",
      "contents": "NSHTTPCookieDiscard"
    },
    {
      "trigger": "NSHTTPCookieDomain (NSString*)",
      "contents": "NSHTTPCookieDomain"
    },
    {
      "trigger": "NSHTTPCookieExpires (NSString*)",
      "contents": "NSHTTPCookieExpires"
    },
    {
      "trigger": "NSHTTPCookieManagerAcceptPolicyChangedNotification (NSString*)",
      "contents": "NSHTTPCookieManagerAcceptPolicyChangedNotification"
    },
    {
      "trigger": "NSHTTPCookieManagerCookiesChangedNotification (NSString*)",
      "contents": "NSHTTPCookieManagerCookiesChangedNotification"
    },
    {
      "trigger": "NSHTTPCookieMaximumAge (NSString*)",
      "contents": "NSHTTPCookieMaximumAge"
    },
    {
      "trigger": "NSHTTPCookieName (NSString*)",
      "contents": "NSHTTPCookieName"
    },
    {
      "trigger": "NSHTTPCookieOriginURL (NSString*)",
      "contents": "NSHTTPCookieOriginURL"
    },
    {
      "trigger": "NSHTTPCookiePath (NSString*)",
      "contents": "NSHTTPCookiePath"
    },
    {
      "trigger": "NSHTTPCookiePort (NSString*)",
      "contents": "NSHTTPCookiePort"
    },
    {
      "trigger": "NSHTTPCookieSecure (NSString*)",
      "contents": "NSHTTPCookieSecure"
    },
    {
      "trigger": "NSHTTPCookieValue (NSString*)",
      "contents": "NSHTTPCookieValue"
    },
    {
      "trigger": "NSHTTPCookieVersion (NSString*)",
      "contents": "NSHTTPCookieVersion"
    },
    {
      "trigger": "NSHTTPURLResponse.localizedStringForStatusCode:",
      "contents": "NSHTTPURLResponse.localizedStringForStatusCode(${1:NSInteger statusCode})"
    },
    {
      "trigger": "NSHebrewCalendar (NSString*)",
      "contents": "NSHebrewCalendar"
    },
    {
      "trigger": "NSHelpAnchorErrorKey (NSString*)",
      "contents": "NSHelpAnchorErrorKey"
    },
    {
      "trigger": "NSHomeDirectoryForUser",
      "contents": "NSHomeDirectoryForUser(${1:NSString* userName})"
    },
    {
      "trigger": "NSHourCalendarUnit (32)",
      "contents": "NSHourCalendarUnit"
    },
    {
      "trigger": "NSINTEGER_DEFINED (1)",
      "contents": "NSINTEGER_DEFINED"
    },
    {
      "trigger": "NSISO2022JPStringEncoding (21)",
      "contents": "NSISO2022JPStringEncoding"
    },
    {
      "trigger": "NSISO8601Calendar (NSString*)",
      "contents": "NSISO8601Calendar"
    },
    {
      "trigger": "NSISOLatin1StringEncoding (5)",
      "contents": "NSISOLatin1StringEncoding"
    },
    {
      "trigger": "NSISOLatin2StringEncoding (9)",
      "contents": "NSISOLatin2StringEncoding"
    },
    {
      "trigger": "NSIgnorePersistentStoreVersioningOption (NSString*)",
      "contents": "NSIgnorePersistentStoreVersioningOption"
    },
    {
      "trigger": "NSInMemoryStoreType (NSString*)",
      "contents": "NSInMemoryStoreType"
    },
    {
      "trigger": "NSInPredicateOperatorType (10)",
      "contents": "NSInPredicateOperatorType"
    },
    {
      "trigger": "NSIncrementExtraRefCount",
      "contents": "NSIncrementExtraRefCount(${1:id object})"
    },
    {
      "trigger": "NSIncrementalStore.identifierForNewStoreAtURL:",
      "contents": "NSIncrementalStore.identifierForNewStoreAtURL(${1:NSURL* storeURL})"
    },
    {
      "trigger": "NSIndexPath.indexPathForRow:inSection:",
      "contents": "NSIndexPath.indexPathForRow(${1:NSInteger row}, inSection:${2:NSInteger section})"
    },
    {
      "trigger": "NSIndexPath.indexPathWithIndex:",
      "contents": "NSIndexPath.indexPathWithIndex(${1:NSUInteger index})"
    },
    {
      "trigger": "NSIndexPath.indexPathWithIndexes:length:",
      "contents": "NSIndexPath.indexPathWithIndexes(${1:NSUInteger* indexes}, length:${2:NSUInteger length})"
    },
    {
      "trigger": "NSIndexSet.indexSetWithIndex:",
      "contents": "NSIndexSet.indexSetWithIndex(${1:NSUInteger value})"
    },
    {
      "trigger": "NSIndexSet.indexSetWithIndexesInRange:",
      "contents": "NSIndexSet.indexSetWithIndexesInRange(${1:NSRange range})"
    },
    {
      "trigger": "NSIndianCalendar (NSString*)",
      "contents": "NSIndianCalendar"
    },
    {
      "trigger": "NSInferMappingModelAutomaticallyOption (NSString*)",
      "contents": "NSInferMappingModelAutomaticallyOption"
    },
    {
      "trigger": "NSInferredMappingModelError (134190)",
      "contents": "NSInferredMappingModelError"
    },
    {
      "trigger": "NSInputMethodsDirectory (16)",
      "contents": "NSInputMethodsDirectory"
    },
    {
      "trigger": "NSInputStream.inputStreamWithData:",
      "contents": "NSInputStream.inputStreamWithData(${1:NSData* data})"
    },
    {
      "trigger": "NSInputStream.inputStreamWithFileAtPath:",
      "contents": "NSInputStream.inputStreamWithFileAtPath(${1:NSString* path})"
    },
    {
      "trigger": "NSInputStream.inputStreamWithURL:",
      "contents": "NSInputStream.inputStreamWithURL(${1:NSURL* url})"
    },
    {
      "trigger": "NSInsertedObjectsKey (NSString*)",
      "contents": "NSInsertedObjectsKey"
    },
    {
      "trigger": "NSInteger16AttributeType (100)",
      "contents": "NSInteger16AttributeType"
    },
    {
      "trigger": "NSInteger32AttributeType (200)",
      "contents": "NSInteger32AttributeType"
    },
    {
      "trigger": "NSInteger64AttributeType (300)",
      "contents": "NSInteger64AttributeType"
    },
    {
      "trigger": "NSIntegerMax (2147483647)",
      "contents": "NSIntegerMax"
    },
    {
      "trigger": "NSIntegerMin (-2147483648)",
      "contents": "NSIntegerMin"
    },
    {
      "trigger": "NSInternalInconsistencyException (NSString*)",
      "contents": "NSInternalInconsistencyException"
    },
    {
      "trigger": "NSIntersectSetExpressionType (6)",
      "contents": "NSIntersectSetExpressionType"
    },
    {
      "trigger": "NSIntersectionRange",
      "contents": "NSIntersectionRange(${1:NSRange range1}, ${2:NSRange range2})"
    },
    {
      "trigger": "NSInvalidArchiveOperationException (NSString*)",
      "contents": "NSInvalidArchiveOperationException"
    },
    {
      "trigger": "NSInvalidArgumentException (NSString*)",
      "contents": "NSInvalidArgumentException"
    },
    {
      "trigger": "NSInvalidReceivePortException (NSString*)",
      "contents": "NSInvalidReceivePortException"
    },
    {
      "trigger": "NSInvalidSendPortException (NSString*)",
      "contents": "NSInvalidSendPortException"
    },
    {
      "trigger": "NSInvalidUnarchiveOperationException (NSString*)",
      "contents": "NSInvalidUnarchiveOperationException"
    },
    {
      "trigger": "NSInvalidatedAllObjectsKey (NSString*)",
      "contents": "NSInvalidatedAllObjectsKey"
    },
    {
      "trigger": "NSInvalidatedObjectsKey (NSString*)",
      "contents": "NSInvalidatedObjectsKey"
    },
    {
      "trigger": "NSInvocation.invocationWithMethodSignature:",
      "contents": "NSInvocation.invocationWithMethodSignature(${1:NSMethodSignature* sig})"
    },
    {
      "trigger": "NSInvocationOperationCancelledException (NSString*)",
      "contents": "NSInvocationOperationCancelledException"
    },
    {
      "trigger": "NSInvocationOperationVoidResultException (NSString*)",
      "contents": "NSInvocationOperationVoidResultException"
    },
    {
      "trigger": "NSIsNilTransformerName (NSString*)",
      "contents": "NSIsNilTransformerName"
    },
    {
      "trigger": "NSIsNotNilTransformerName (NSString*)",
      "contents": "NSIsNotNilTransformerName"
    },
    {
      "trigger": "NSIslamicCalendar (NSString*)",
      "contents": "NSIslamicCalendar"
    },
    {
      "trigger": "NSIslamicCivilCalendar (NSString*)",
      "contents": "NSIslamicCivilCalendar"
    },
    {
      "trigger": "NSItemReplacementDirectory (99)",
      "contents": "NSItemReplacementDirectory"
    },
    {
      "trigger": "NSJSONReadingAllowFragments (4)",
      "contents": "NSJSONReadingAllowFragments"
    },
    {
      "trigger": "NSJSONReadingMutableContainers (1)",
      "contents": "NSJSONReadingMutableContainers"
    },
    {
      "trigger": "NSJSONReadingMutableLeaves (2)",
      "contents": "NSJSONReadingMutableLeaves"
    },
    {
      "trigger": "NSJSONSerialization.JSONObjectWithData:options:error:",
      "contents": "NSJSONSerialization.JSONObjectWithData(${1:NSData* data}, options:${2:NSJSONReadingOptions opt}, error:${3:NSError** error})"
    },
    {
      "trigger": "NSJSONSerialization.JSONObjectWithStream:options:error:",
      "contents": "NSJSONSerialization.JSONObjectWithStream(${1:NSInputStream* stream}, options:${2:NSJSONReadingOptions opt}, error:${3:NSError** error})"
    },
    {
      "trigger": "NSJSONSerialization.dataWithJSONObject:options:error:",
      "contents": "NSJSONSerialization.dataWithJSONObject(${1:id obj}, options:${2:NSJSONWritingOptions opt}, error:${3:NSError** error})"
    },
    {
      "trigger": "NSJSONSerialization.isValidJSONObject:",
      "contents": "NSJSONSerialization.isValidJSONObject(${1:id obj})"
    },
    {
      "trigger": "NSJSONSerialization.writeJSONObject:toStream:options:error:",
      "contents": "NSJSONSerialization.writeJSONObject(${1:id obj}, toStream:${2:NSOutputStream* stream}, options:${3:NSJSONWritingOptions opt}, error:${4:NSError** error})"
    },
    {
      "trigger": "NSJSONWritingPrettyPrinted (1)",
      "contents": "NSJSONWritingPrettyPrinted"
    },
    {
      "trigger": "NSJapaneseCalendar (NSString*)",
      "contents": "NSJapaneseCalendar"
    },
    {
      "trigger": "NSJapaneseEUCStringEncoding (3)",
      "contents": "NSJapaneseEUCStringEncoding"
    },
    {
      "trigger": "NSKeyPathExpressionType (3)",
      "contents": "NSKeyPathExpressionType"
    },
    {
      "trigger": "NSKeyValueChangeIndexesKey (NSString*)",
      "contents": "NSKeyValueChangeIndexesKey"
    },
    {
      "trigger": "NSKeyValueChangeInsertion (2)",
      "contents": "NSKeyValueChangeInsertion"
    },
    {
      "trigger": "NSKeyValueChangeKindKey (NSString*)",
      "contents": "NSKeyValueChangeKindKey"
    },
    {
      "trigger": "NSKeyValueChangeNewKey (NSString*)",
      "contents": "NSKeyValueChangeNewKey"
    },
    {
      "trigger": "NSKeyValueChangeNotificationIsPriorKey (NSString*)",
      "contents": "NSKeyValueChangeNotificationIsPriorKey"
    },
    {
      "trigger": "NSKeyValueChangeOldKey (NSString*)",
      "contents": "NSKeyValueChangeOldKey"
    },
    {
      "trigger": "NSKeyValueChangeRemoval (3)",
      "contents": "NSKeyValueChangeRemoval"
    },
    {
      "trigger": "NSKeyValueChangeReplacement (4)",
      "contents": "NSKeyValueChangeReplacement"
    },
    {
      "trigger": "NSKeyValueChangeSetting (1)",
      "contents": "NSKeyValueChangeSetting"
    },
    {
      "trigger": "NSKeyValueIntersectSetMutation (3)",
      "contents": "NSKeyValueIntersectSetMutation"
    },
    {
      "trigger": "NSKeyValueMinusSetMutation (2)",
      "contents": "NSKeyValueMinusSetMutation"
    },
    {
      "trigger": "NSKeyValueObservingCustomization.automaticallyNotifiesObserversForKey:",
      "contents": "NSKeyValueObservingCustomization.automaticallyNotifiesObserversForKey(${1:NSString* key})"
    },
    {
      "trigger": "NSKeyValueObservingCustomization.keyPathsForValuesAffectingValueForKey:",
      "contents": "NSKeyValueObservingCustomization.keyPathsForValuesAffectingValueForKey(${1:NSString* key})"
    },
    {
      "trigger": "NSKeyValueObservingOptionInitial (4)",
      "contents": "NSKeyValueObservingOptionInitial"
    },
    {
      "trigger": "NSKeyValueObservingOptionNew (1)",
      "contents": "NSKeyValueObservingOptionNew"
    },
    {
      "trigger": "NSKeyValueObservingOptionOld (2)",
      "contents": "NSKeyValueObservingOptionOld"
    },
    {
      "trigger": "NSKeyValueObservingOptionPrior (8)",
      "contents": "NSKeyValueObservingOptionPrior"
    },
    {
      "trigger": "NSKeyValueSetSetMutation (4)",
      "contents": "NSKeyValueSetSetMutation"
    },
    {
      "trigger": "NSKeyValueUnionSetMutation (1)",
      "contents": "NSKeyValueUnionSetMutation"
    },
    {
      "trigger": "NSKeyValueValidationError (1024)",
      "contents": "NSKeyValueValidationError"
    },
    {
      "trigger": "NSKeyedArchiver.archiveRootObject:toFile:",
      "contents": "NSKeyedArchiver.archiveRootObject(${1:id rootObject}, toFile:${2:NSString* path})"
    },
    {
      "trigger": "NSKeyedArchiver.archivedDataWithRootObject:",
      "contents": "NSKeyedArchiver.archivedDataWithRootObject(${1:id rootObject})"
    },
    {
      "trigger": "NSKeyedArchiver.classNameForClass:",
      "contents": "NSKeyedArchiver.classNameForClass(${1:Class cls})"
    },
    {
      "trigger": "NSKeyedArchiver.setClassName:forClass:",
      "contents": "NSKeyedArchiver.setClassName(${1:NSString* codedName}, forClass:${2:Class cls})"
    },
    {
      "trigger": "NSKeyedUnarchiveFromDataTransformerName (NSString*)",
      "contents": "NSKeyedUnarchiveFromDataTransformerName"
    },
    {
      "trigger": "NSKeyedUnarchiver.classForClassName:",
      "contents": "NSKeyedUnarchiver.classForClassName(${1:NSString* codedName})"
    },
    {
      "trigger": "NSKeyedUnarchiver.setClass:forClassName:",
      "contents": "NSKeyedUnarchiver.setClass(${1:Class cls}, forClassName:${2:NSString* codedName})"
    },
    {
      "trigger": "NSKeyedUnarchiver.unarchiveObjectWithData:",
      "contents": "NSKeyedUnarchiver.unarchiveObjectWithData(${1:NSData* data})"
    },
    {
      "trigger": "NSKeyedUnarchiver.unarchiveObjectWithFile:",
      "contents": "NSKeyedUnarchiver.unarchiveObjectWithFile(${1:NSString* path})"
    },
    {
      "trigger": "NSLessThanOrEqualToPredicateOperatorType (1)",
      "contents": "NSLessThanOrEqualToPredicateOperatorType"
    },
    {
      "trigger": "NSLessThanPredicateOperatorType (0)",
      "contents": "NSLessThanPredicateOperatorType"
    },
    {
      "trigger": "NSLibraryDirectory (5)",
      "contents": "NSLibraryDirectory"
    },
    {
      "trigger": "NSLikePredicateOperatorType (7)",
      "contents": "NSLikePredicateOperatorType"
    },
    {
      "trigger": "NSLinguisticTagAdjective (NSString*)",
      "contents": "NSLinguisticTagAdjective"
    },
    {
      "trigger": "NSLinguisticTagAdverb (NSString*)",
      "contents": "NSLinguisticTagAdverb"
    },
    {
      "trigger": "NSLinguisticTagClassifier (NSString*)",
      "contents": "NSLinguisticTagClassifier"
    },
    {
      "trigger": "NSLinguisticTagCloseParenthesis (NSString*)",
      "contents": "NSLinguisticTagCloseParenthesis"
    },
    {
      "trigger": "NSLinguisticTagCloseQuote (NSString*)",
      "contents": "NSLinguisticTagCloseQuote"
    },
    {
      "trigger": "NSLinguisticTagConjunction (NSString*)",
      "contents": "NSLinguisticTagConjunction"
    },
    {
      "trigger": "NSLinguisticTagDash (NSString*)",
      "contents": "NSLinguisticTagDash"
    },
    {
      "trigger": "NSLinguisticTagDeterminer (NSString*)",
      "contents": "NSLinguisticTagDeterminer"
    },
    {
      "trigger": "NSLinguisticTagIdiom (NSString*)",
      "contents": "NSLinguisticTagIdiom"
    },
    {
      "trigger": "NSLinguisticTagInterjection (NSString*)",
      "contents": "NSLinguisticTagInterjection"
    },
    {
      "trigger": "NSLinguisticTagNoun (NSString*)",
      "contents": "NSLinguisticTagNoun"
    },
    {
      "trigger": "NSLinguisticTagNumber (NSString*)",
      "contents": "NSLinguisticTagNumber"
    },
    {
      "trigger": "NSLinguisticTagOpenParenthesis (NSString*)",
      "contents": "NSLinguisticTagOpenParenthesis"
    },
    {
      "trigger": "NSLinguisticTagOpenQuote (NSString*)",
      "contents": "NSLinguisticTagOpenQuote"
    },
    {
      "trigger": "NSLinguisticTagOrganizationName (NSString*)",
      "contents": "NSLinguisticTagOrganizationName"
    },
    {
      "trigger": "NSLinguisticTagOther (NSString*)",
      "contents": "NSLinguisticTagOther"
    },
    {
      "trigger": "NSLinguisticTagOtherPunctuation (NSString*)",
      "contents": "NSLinguisticTagOtherPunctuation"
    },
    {
      "trigger": "NSLinguisticTagOtherWhitespace (NSString*)",
      "contents": "NSLinguisticTagOtherWhitespace"
    },
    {
      "trigger": "NSLinguisticTagOtherWord (NSString*)",
      "contents": "NSLinguisticTagOtherWord"
    },
    {
      "trigger": "NSLinguisticTagParagraphBreak (NSString*)",
      "contents": "NSLinguisticTagParagraphBreak"
    },
    {
      "trigger": "NSLinguisticTagParticle (NSString*)",
      "contents": "NSLinguisticTagParticle"
    },
    {
      "trigger": "NSLinguisticTagPersonalName (NSString*)",
      "contents": "NSLinguisticTagPersonalName"
    },
    {
      "trigger": "NSLinguisticTagPlaceName (NSString*)",
      "contents": "NSLinguisticTagPlaceName"
    },
    {
      "trigger": "NSLinguisticTagPreposition (NSString*)",
      "contents": "NSLinguisticTagPreposition"
    },
    {
      "trigger": "NSLinguisticTagPronoun (NSString*)",
      "contents": "NSLinguisticTagPronoun"
    },
    {
      "trigger": "NSLinguisticTagPunctuation (NSString*)",
      "contents": "NSLinguisticTagPunctuation"
    },
    {
      "trigger": "NSLinguisticTagSchemeLanguage (NSString*)",
      "contents": "NSLinguisticTagSchemeLanguage"
    },
    {
      "trigger": "NSLinguisticTagSchemeLemma (NSString*)",
      "contents": "NSLinguisticTagSchemeLemma"
    },
    {
      "trigger": "NSLinguisticTagSchemeLexicalClass (NSString*)",
      "contents": "NSLinguisticTagSchemeLexicalClass"
    },
    {
      "trigger": "NSLinguisticTagSchemeNameType (NSString*)",
      "contents": "NSLinguisticTagSchemeNameType"
    },
    {
      "trigger": "NSLinguisticTagSchemeNameTypeOrLexicalClass (NSString*)",
      "contents": "NSLinguisticTagSchemeNameTypeOrLexicalClass"
    },
    {
      "trigger": "NSLinguisticTagSchemeScript (NSString*)",
      "contents": "NSLinguisticTagSchemeScript"
    },
    {
      "trigger": "NSLinguisticTagSchemeTokenType (NSString*)",
      "contents": "NSLinguisticTagSchemeTokenType"
    },
    {
      "trigger": "NSLinguisticTagSentenceTerminator (NSString*)",
      "contents": "NSLinguisticTagSentenceTerminator"
    },
    {
      "trigger": "NSLinguisticTagVerb (NSString*)",
      "contents": "NSLinguisticTagVerb"
    },
    {
      "trigger": "NSLinguisticTagWhitespace (NSString*)",
      "contents": "NSLinguisticTagWhitespace"
    },
    {
      "trigger": "NSLinguisticTagWord (NSString*)",
      "contents": "NSLinguisticTagWord"
    },
    {
      "trigger": "NSLinguisticTagWordJoiner (NSString*)",
      "contents": "NSLinguisticTagWordJoiner"
    },
    {
      "trigger": "NSLinguisticTagger.availableTagSchemesForLanguage:",
      "contents": "NSLinguisticTagger.availableTagSchemesForLanguage(${1:NSString* language})"
    },
    {
      "trigger": "NSLinguisticTaggerJoinNames (16)",
      "contents": "NSLinguisticTaggerJoinNames"
    },
    {
      "trigger": "NSLinguisticTaggerOmitOther (8)",
      "contents": "NSLinguisticTaggerOmitOther"
    },
    {
      "trigger": "NSLinguisticTaggerOmitPunctuation (2)",
      "contents": "NSLinguisticTaggerOmitPunctuation"
    },
    {
      "trigger": "NSLinguisticTaggerOmitWhitespace (4)",
      "contents": "NSLinguisticTaggerOmitWhitespace"
    },
    {
      "trigger": "NSLinguisticTaggerOmitWords (1)",
      "contents": "NSLinguisticTaggerOmitWords"
    },
    {
      "trigger": "NSLiteralSearch (2)",
      "contents": "NSLiteralSearch"
    },
    {
      "trigger": "NSLoadedClasses (NSString*)",
      "contents": "NSLoadedClasses"
    },
    {
      "trigger": "NSLocalDomainMask (2)",
      "contents": "NSLocalDomainMask"
    },
    {
      "trigger": "NSLocale.canonicalLanguageIdentifierFromString:",
      "contents": "NSLocale.canonicalLanguageIdentifierFromString(${1:NSString* string})"
    },
    {
      "trigger": "NSLocale.canonicalLocaleIdentifierFromString:",
      "contents": "NSLocale.canonicalLocaleIdentifierFromString(${1:NSString* string})"
    },
    {
      "trigger": "NSLocale.characterDirectionForLanguage:",
      "contents": "NSLocale.characterDirectionForLanguage(${1:NSString* isoLangCode})"
    },
    {
      "trigger": "NSLocale.componentsFromLocaleIdentifier:",
      "contents": "NSLocale.componentsFromLocaleIdentifier(${1:NSString* string})"
    },
    {
      "trigger": "NSLocale.lineDirectionForLanguage:",
      "contents": "NSLocale.lineDirectionForLanguage(${1:NSString* isoLangCode})"
    },
    {
      "trigger": "NSLocale.localeIdentifierFromComponents:",
      "contents": "NSLocale.localeIdentifierFromComponents(${1:NSDictionary* dict})"
    },
    {
      "trigger": "NSLocale.localeIdentifierFromWindowsLocaleCode:",
      "contents": "NSLocale.localeIdentifierFromWindowsLocaleCode(${1:uint32_t lcid})"
    },
    {
      "trigger": "NSLocale.windowsLocaleCodeFromLocaleIdentifier:",
      "contents": "NSLocale.windowsLocaleCodeFromLocaleIdentifier(${1:NSString* localeIdentifier})"
    },
    {
      "trigger": "NSLocaleAlternateQuotationBeginDelimiterKey (NSString*)",
      "contents": "NSLocaleAlternateQuotationBeginDelimiterKey"
    },
    {
      "trigger": "NSLocaleAlternateQuotationEndDelimiterKey (NSString*)",
      "contents": "NSLocaleAlternateQuotationEndDelimiterKey"
    },
    {
      "trigger": "NSLocaleCalendar (NSString*)",
      "contents": "NSLocaleCalendar"
    },
    {
      "trigger": "NSLocaleCollationIdentifier (NSString*)",
      "contents": "NSLocaleCollationIdentifier"
    },
    {
      "trigger": "NSLocaleCollatorIdentifier (NSString*)",
      "contents": "NSLocaleCollatorIdentifier"
    },
    {
      "trigger": "NSLocaleCountryCode (NSString*)",
      "contents": "NSLocaleCountryCode"
    },
    {
      "trigger": "NSLocaleCurrencyCode (NSString*)",
      "contents": "NSLocaleCurrencyCode"
    },
    {
      "trigger": "NSLocaleCurrencySymbol (NSString*)",
      "contents": "NSLocaleCurrencySymbol"
    },
    {
      "trigger": "NSLocaleDecimalSeparator (NSString*)",
      "contents": "NSLocaleDecimalSeparator"
    },
    {
      "trigger": "NSLocaleExemplarCharacterSet (NSString*)",
      "contents": "NSLocaleExemplarCharacterSet"
    },
    {
      "trigger": "NSLocaleGroupingSeparator (NSString*)",
      "contents": "NSLocaleGroupingSeparator"
    },
    {
      "trigger": "NSLocaleIdentifier (NSString*)",
      "contents": "NSLocaleIdentifier"
    },
    {
      "trigger": "NSLocaleLanguageCode (NSString*)",
      "contents": "NSLocaleLanguageCode"
    },
    {
      "trigger": "NSLocaleLanguageDirectionBottomToTop (4)",
      "contents": "NSLocaleLanguageDirectionBottomToTop"
    },
    {
      "trigger": "NSLocaleLanguageDirectionLeftToRight (1)",
      "contents": "NSLocaleLanguageDirectionLeftToRight"
    },
    {
      "trigger": "NSLocaleLanguageDirectionRightToLeft (2)",
      "contents": "NSLocaleLanguageDirectionRightToLeft"
    },
    {
      "trigger": "NSLocaleLanguageDirectionTopToBottom (3)",
      "contents": "NSLocaleLanguageDirectionTopToBottom"
    },
    {
      "trigger": "NSLocaleLanguageDirectionUnknown (0)",
      "contents": "NSLocaleLanguageDirectionUnknown"
    },
    {
      "trigger": "NSLocaleMeasurementSystem (NSString*)",
      "contents": "NSLocaleMeasurementSystem"
    },
    {
      "trigger": "NSLocaleQuotationBeginDelimiterKey (NSString*)",
      "contents": "NSLocaleQuotationBeginDelimiterKey"
    },
    {
      "trigger": "NSLocaleQuotationEndDelimiterKey (NSString*)",
      "contents": "NSLocaleQuotationEndDelimiterKey"
    },
    {
      "trigger": "NSLocaleScriptCode (NSString*)",
      "contents": "NSLocaleScriptCode"
    },
    {
      "trigger": "NSLocaleUsesMetricSystem (NSString*)",
      "contents": "NSLocaleUsesMetricSystem"
    },
    {
      "trigger": "NSLocaleVariantCode (NSString*)",
      "contents": "NSLocaleVariantCode"
    },
    {
      "trigger": "NSLocalizedDescriptionKey (NSString*)",
      "contents": "NSLocalizedDescriptionKey"
    },
    {
      "trigger": "NSLocalizedFailureReasonErrorKey (NSString*)",
      "contents": "NSLocalizedFailureReasonErrorKey"
    },
    {
      "trigger": "NSLocalizedRecoveryOptionsErrorKey (NSString*)",
      "contents": "NSLocalizedRecoveryOptionsErrorKey"
    },
    {
      "trigger": "NSLocalizedRecoverySuggestionErrorKey (NSString*)",
      "contents": "NSLocalizedRecoverySuggestionErrorKey"
    },
    {
      "trigger": "NSLocationInRange",
      "contents": "NSLocationInRange(${1:NSUInteger loc}, ${2:NSRange range})"
    },
    {
      "trigger": "NSLog",
      "contents": "NSLog(${1:NSString* format})"
    },
    {
      "trigger": "NSLogv",
      "contents": "NSLogv(${1:NSString* format}, ${2:va_list args})"
    },
    {
      "trigger": "NSMACHOperatingSystem (5)",
      "contents": "NSMACHOperatingSystem"
    },
    {
      "trigger": "NSMacOSRomanStringEncoding (30)",
      "contents": "NSMacOSRomanStringEncoding"
    },
    {
      "trigger": "NSMachErrorDomain (NSString*)",
      "contents": "NSMachErrorDomain"
    },
    {
      "trigger": "NSMachPort.portWithMachPort:",
      "contents": "NSMachPort.portWithMachPort(${1:uint32_t machPort})"
    },
    {
      "trigger": "NSMachPort.portWithMachPort:options:",
      "contents": "NSMachPort.portWithMachPort(${1:uint32_t machPort}, options:${2:NSUInteger f})"
    },
    {
      "trigger": "NSMachPortDeallocateNone (0)",
      "contents": "NSMachPortDeallocateNone"
    },
    {
      "trigger": "NSMachPortDeallocateReceiveRight (2)",
      "contents": "NSMachPortDeallocateReceiveRight"
    },
    {
      "trigger": "NSMachPortDeallocateSendRight (1)",
      "contents": "NSMachPortDeallocateSendRight"
    },
    {
      "trigger": "NSMainQueueConcurrencyType (2)",
      "contents": "NSMainQueueConcurrencyType"
    },
    {
      "trigger": "NSMakeCollectable",
      "contents": "NSMakeCollectable(${1:CFTypeRef cf})"
    },
    {
      "trigger": "NSMakeRange",
      "contents": "NSMakeRange(${1:NSUInteger loc}, ${2:NSUInteger len})"
    },
    {
      "trigger": "NSMallocException (NSString*)",
      "contents": "NSMallocException"
    },
    {
      "trigger": "NSManagedObjectContextDidSaveNotification (NSString*)",
      "contents": "NSManagedObjectContextDidSaveNotification"
    },
    {
      "trigger": "NSManagedObjectContextLockingError (132000)",
      "contents": "NSManagedObjectContextLockingError"
    },
    {
      "trigger": "NSManagedObjectContextObjectsDidChangeNotification (NSString*)",
      "contents": "NSManagedObjectContextObjectsDidChangeNotification"
    },
    {
      "trigger": "NSManagedObjectContextWillSaveNotification (NSString*)",
      "contents": "NSManagedObjectContextWillSaveNotification"
    },
    {
      "trigger": "NSManagedObjectExternalRelationshipError (133010)",
      "contents": "NSManagedObjectExternalRelationshipError"
    },
    {
      "trigger": "NSManagedObjectIDResultType (1)",
      "contents": "NSManagedObjectIDResultType"
    },
    {
      "trigger": "NSManagedObjectMergeError (133020)",
      "contents": "NSManagedObjectMergeError"
    },
    {
      "trigger": "NSManagedObjectModel.mergedModelFromBundles:",
      "contents": "NSManagedObjectModel.mergedModelFromBundles(${1:NSArray* bundles})"
    },
    {
      "trigger": "NSManagedObjectModel.mergedModelFromBundles:forStoreMetadata:",
      "contents": "NSManagedObjectModel.mergedModelFromBundles(${1:NSArray* bundles}, forStoreMetadata:${2:NSDictionary* metadata})"
    },
    {
      "trigger": "NSManagedObjectModel.modelByMergingModels:",
      "contents": "NSManagedObjectModel.modelByMergingModels(${1:NSArray* models})"
    },
    {
      "trigger": "NSManagedObjectModel.modelByMergingModels:forStoreMetadata:",
      "contents": "NSManagedObjectModel.modelByMergingModels(${1:NSArray* models}, forStoreMetadata:${2:NSDictionary* metadata})"
    },
    {
      "trigger": "NSManagedObjectReferentialIntegrityError (133000)",
      "contents": "NSManagedObjectReferentialIntegrityError"
    },
    {
      "trigger": "NSManagedObjectResultType (0)",
      "contents": "NSManagedObjectResultType"
    },
    {
      "trigger": "NSManagedObjectValidationError (1550)",
      "contents": "NSManagedObjectValidationError"
    },
    {
      "trigger": "NSMappedRead (1)",
      "contents": "NSMappedRead"
    },
    {
      "trigger": "NSMappingModel.inferredMappingModelForSourceModel:destinationModel:error:",
      "contents": "NSMappingModel.inferredMappingModelForSourceModel(${1:NSManagedObjectModel* sourceModel}, destinationModel:${2:NSManagedObjectModel* destinationModel}, error:${3:NSError** error})"
    },
    {
      "trigger": "NSMappingModel.mappingModelFromBundles:forSourceModel:destinationModel:",
      "contents": "NSMappingModel.mappingModelFromBundles(${1:NSArray* bundles}, forSourceModel:${2:NSManagedObjectModel* sourceModel}, destinationModel:${3:NSManagedObjectModel* destinationModel})"
    },
    {
      "trigger": "NSMatchesPredicateOperatorType (6)",
      "contents": "NSMatchesPredicateOperatorType"
    },
    {
      "trigger": "NSMatchingAnchored (4)",
      "contents": "NSMatchingAnchored"
    },
    {
      "trigger": "NSMatchingCompleted (2)",
      "contents": "NSMatchingCompleted"
    },
    {
      "trigger": "NSMatchingHitEnd (4)",
      "contents": "NSMatchingHitEnd"
    },
    {
      "trigger": "NSMatchingInternalError (16)",
      "contents": "NSMatchingInternalError"
    },
    {
      "trigger": "NSMatchingProgress (1)",
      "contents": "NSMatchingProgress"
    },
    {
      "trigger": "NSMatchingReportCompletion (2)",
      "contents": "NSMatchingReportCompletion"
    },
    {
      "trigger": "NSMatchingReportProgress (1)",
      "contents": "NSMatchingReportProgress"
    },
    {
      "trigger": "NSMatchingRequiredEnd (8)",
      "contents": "NSMatchingRequiredEnd"
    },
    {
      "trigger": "NSMatchingWithTransparentBounds (8)",
      "contents": "NSMatchingWithTransparentBounds"
    },
    {
      "trigger": "NSMatchingWithoutAnchoringBounds (16)",
      "contents": "NSMatchingWithoutAnchoringBounds"
    },
    {
      "trigger": "NSMaxRange",
      "contents": "NSMaxRange(${1:NSRange range})"
    },
    {
      "trigger": "NSMaximumKeyValueOperator (NSString*)",
      "contents": "NSMaximumKeyValueOperator"
    },
    {
      "trigger": "NSMaximumStringLength (2147483646)",
      "contents": "NSMaximumStringLength"
    },
    {
      "trigger": "NSMergeByPropertyObjectTrumpMergePolicy (id)",
      "contents": "NSMergeByPropertyObjectTrumpMergePolicy"
    },
    {
      "trigger": "NSMergeByPropertyObjectTrumpMergePolicyType (2)",
      "contents": "NSMergeByPropertyObjectTrumpMergePolicyType"
    },
    {
      "trigger": "NSMergeByPropertyStoreTrumpMergePolicy (id)",
      "contents": "NSMergeByPropertyStoreTrumpMergePolicy"
    },
    {
      "trigger": "NSMergeByPropertyStoreTrumpMergePolicyType (1)",
      "contents": "NSMergeByPropertyStoreTrumpMergePolicyType"
    },
    {
      "trigger": "NSMetadataItemDisplayNameKey (NSString*)",
      "contents": "NSMetadataItemDisplayNameKey"
    },
    {
      "trigger": "NSMetadataItemFSContentChangeDateKey (NSString*)",
      "contents": "NSMetadataItemFSContentChangeDateKey"
    },
    {
      "trigger": "NSMetadataItemFSCreationDateKey (NSString*)",
      "contents": "NSMetadataItemFSCreationDateKey"
    },
    {
      "trigger": "NSMetadataItemFSNameKey (NSString*)",
      "contents": "NSMetadataItemFSNameKey"
    },
    {
      "trigger": "NSMetadataItemFSSizeKey (NSString*)",
      "contents": "NSMetadataItemFSSizeKey"
    },
    {
      "trigger": "NSMetadataItemIsUbiquitousKey (NSString*)",
      "contents": "NSMetadataItemIsUbiquitousKey"
    },
    {
      "trigger": "NSMetadataItemPathKey (NSString*)",
      "contents": "NSMetadataItemPathKey"
    },
    {
      "trigger": "NSMetadataItemURLKey (NSString*)",
      "contents": "NSMetadataItemURLKey"
    },
    {
      "trigger": "NSMetadataQueryDidFinishGatheringNotification (NSString*)",
      "contents": "NSMetadataQueryDidFinishGatheringNotification"
    },
    {
      "trigger": "NSMetadataQueryDidStartGatheringNotification (NSString*)",
      "contents": "NSMetadataQueryDidStartGatheringNotification"
    },
    {
      "trigger": "NSMetadataQueryDidUpdateNotification (NSString*)",
      "contents": "NSMetadataQueryDidUpdateNotification"
    },
    {
      "trigger": "NSMetadataQueryGatheringProgressNotification (NSString*)",
      "contents": "NSMetadataQueryGatheringProgressNotification"
    },
    {
      "trigger": "NSMetadataQueryResultContentRelevanceAttribute (NSString*)",
      "contents": "NSMetadataQueryResultContentRelevanceAttribute"
    },
    {
      "trigger": "NSMetadataQueryUbiquitousDataScope (NSString*)",
      "contents": "NSMetadataQueryUbiquitousDataScope"
    },
    {
      "trigger": "NSMetadataQueryUbiquitousDocumentsScope (NSString*)",
      "contents": "NSMetadataQueryUbiquitousDocumentsScope"
    },
    {
      "trigger": "NSMetadataUbiquitousItemHasUnresolvedConflictsKey (NSString*)",
      "contents": "NSMetadataUbiquitousItemHasUnresolvedConflictsKey"
    },
    {
      "trigger": "NSMetadataUbiquitousItemIsDownloadedKey (NSString*)",
      "contents": "NSMetadataUbiquitousItemIsDownloadedKey"
    },
    {
      "trigger": "NSMetadataUbiquitousItemIsDownloadingKey (NSString*)",
      "contents": "NSMetadataUbiquitousItemIsDownloadingKey"
    },
    {
      "trigger": "NSMetadataUbiquitousItemIsUploadedKey (NSString*)",
      "contents": "NSMetadataUbiquitousItemIsUploadedKey"
    },
    {
      "trigger": "NSMetadataUbiquitousItemIsUploadingKey (NSString*)",
      "contents": "NSMetadataUbiquitousItemIsUploadingKey"
    },
    {
      "trigger": "NSMetadataUbiquitousItemPercentDownloadedKey (NSString*)",
      "contents": "NSMetadataUbiquitousItemPercentDownloadedKey"
    },
    {
      "trigger": "NSMetadataUbiquitousItemPercentUploadedKey (NSString*)",
      "contents": "NSMetadataUbiquitousItemPercentUploadedKey"
    },
    {
      "trigger": "NSMethodSignature.signatureWithObjCTypes:",
      "contents": "NSMethodSignature.signatureWithObjCTypes(${1:char* types})"
    },
    {
      "trigger": "NSMigratePersistentStoresAutomaticallyOption (NSString*)",
      "contents": "NSMigratePersistentStoresAutomaticallyOption"
    },
    {
      "trigger": "NSMigrationCancelledError (134120)",
      "contents": "NSMigrationCancelledError"
    },
    {
      "trigger": "NSMigrationDestinationObjectKey (NSString*)",
      "contents": "NSMigrationDestinationObjectKey"
    },
    {
      "trigger": "NSMigrationEntityMappingKey (NSString*)",
      "contents": "NSMigrationEntityMappingKey"
    },
    {
      "trigger": "NSMigrationEntityPolicyKey (NSString*)",
      "contents": "NSMigrationEntityPolicyKey"
    },
    {
      "trigger": "NSMigrationError (134110)",
      "contents": "NSMigrationError"
    },
    {
      "trigger": "NSMigrationManagerDestinationStoreError (134160)",
      "contents": "NSMigrationManagerDestinationStoreError"
    },
    {
      "trigger": "NSMigrationManagerKey (NSString*)",
      "contents": "NSMigrationManagerKey"
    },
    {
      "trigger": "NSMigrationManagerSourceStoreError (134150)",
      "contents": "NSMigrationManagerSourceStoreError"
    },
    {
      "trigger": "NSMigrationMissingMappingModelError (134140)",
      "contents": "NSMigrationMissingMappingModelError"
    },
    {
      "trigger": "NSMigrationMissingSourceModelError (134130)",
      "contents": "NSMigrationMissingSourceModelError"
    },
    {
      "trigger": "NSMigrationPropertyMappingKey (NSString*)",
      "contents": "NSMigrationPropertyMappingKey"
    },
    {
      "trigger": "NSMigrationSourceObjectKey (NSString*)",
      "contents": "NSMigrationSourceObjectKey"
    },
    {
      "trigger": "NSMinimumKeyValueOperator (NSString*)",
      "contents": "NSMinimumKeyValueOperator"
    },
    {
      "trigger": "NSMinusSetExpressionType (7)",
      "contents": "NSMinusSetExpressionType"
    },
    {
      "trigger": "NSMinuteCalendarUnit (64)",
      "contents": "NSMinuteCalendarUnit"
    },
    {
      "trigger": "NSMonthCalendarUnit (8)",
      "contents": "NSMonthCalendarUnit"
    },
    {
      "trigger": "NSMoviesDirectory (17)",
      "contents": "NSMoviesDirectory"
    },
    {
      "trigger": "NSMusicDirectory (18)",
      "contents": "NSMusicDirectory"
    },
    {
      "trigger": "NSMutableArray.arrayWithCapacity:",
      "contents": "NSMutableArray.arrayWithCapacity(${1:NSUInteger numItems})"
    },
    {
      "trigger": "NSMutableData.dataWithCapacity:",
      "contents": "NSMutableData.dataWithCapacity(${1:NSUInteger aNumItems})"
    },
    {
      "trigger": "NSMutableData.dataWithLength:",
      "contents": "NSMutableData.dataWithLength(${1:NSUInteger length})"
    },
    {
      "trigger": "NSMutableDictionary.dictionaryWithCapacity:",
      "contents": "NSMutableDictionary.dictionaryWithCapacity(${1:NSUInteger numItems})"
    },
    {
      "trigger": "NSMutableOrderedSet.orderedSetWithCapacity:",
      "contents": "NSMutableOrderedSet.orderedSetWithCapacity(${1:NSUInteger numItems})"
    },
    {
      "trigger": "NSMutableSet.setWithCapacity:",
      "contents": "NSMutableSet.setWithCapacity(${1:NSUInteger numItems})"
    },
    {
      "trigger": "NSMutableString.stringWithCapacity:",
      "contents": "NSMutableString.stringWithCapacity(${1:NSUInteger capacity})"
    },
    {
      "trigger": "NSNEXTSTEPStringEncoding (2)",
      "contents": "NSNEXTSTEPStringEncoding"
    },
    {
      "trigger": "NSNegateBooleanTransformerName (NSString*)",
      "contents": "NSNegateBooleanTransformerName"
    },
    {
      "trigger": "NSNetService.dataFromTXTRecordDictionary:",
      "contents": "NSNetService.dataFromTXTRecordDictionary(${1:NSDictionary* txtDictionary})"
    },
    {
      "trigger": "NSNetService.dictionaryFromTXTRecordData:",
      "contents": "NSNetService.dictionaryFromTXTRecordData(${1:NSData* txtData})"
    },
    {
      "trigger": "NSNetServiceNoAutoRename (1)",
      "contents": "NSNetServiceNoAutoRename"
    },
    {
      "trigger": "NSNetServicesActivityInProgress (-72003)",
      "contents": "NSNetServicesActivityInProgress"
    },
    {
      "trigger": "NSNetServicesBadArgumentError (-72004)",
      "contents": "NSNetServicesBadArgumentError"
    },
    {
      "trigger": "NSNetServicesCancelledError (-72005)",
      "contents": "NSNetServicesCancelledError"
    },
    {
      "trigger": "NSNetServicesCollisionError (-72001)",
      "contents": "NSNetServicesCollisionError"
    },
    {
      "trigger": "NSNetServicesErrorCode (NSString*)",
      "contents": "NSNetServicesErrorCode"
    },
    {
      "trigger": "NSNetServicesErrorDomain (NSString*)",
      "contents": "NSNetServicesErrorDomain"
    },
    {
      "trigger": "NSNetServicesInvalidError (-72006)",
      "contents": "NSNetServicesInvalidError"
    },
    {
      "trigger": "NSNetServicesNotFoundError (-72002)",
      "contents": "NSNetServicesNotFoundError"
    },
    {
      "trigger": "NSNetServicesTimeoutError (-72007)",
      "contents": "NSNetServicesTimeoutError"
    },
    {
      "trigger": "NSNetServicesUnknownError (-72000)",
      "contents": "NSNetServicesUnknownError"
    },
    {
      "trigger": "NSNetworkDomainMask (4)",
      "contents": "NSNetworkDomainMask"
    },
    {
      "trigger": "NSNoActionDeleteRule (0)",
      "contents": "NSNoActionDeleteRule"
    },
    {
      "trigger": "NSNonLossyASCIIStringEncoding (7)",
      "contents": "NSNonLossyASCIIStringEncoding"
    },
    {
      "trigger": "NSNormalizedPredicateOption (4)",
      "contents": "NSNormalizedPredicateOption"
    },
    {
      "trigger": "NSNotEqualToPredicateOperatorType (5)",
      "contents": "NSNotEqualToPredicateOperatorType"
    },
    {
      "trigger": "NSNotFound (2147483647)",
      "contents": "NSNotFound"
    },
    {
      "trigger": "NSNotPredicateType (0)",
      "contents": "NSNotPredicateType"
    },
    {
      "trigger": "NSNotification.notificationWithName:object:",
      "contents": "NSNotification.notificationWithName(${1:NSString* aName}, object:${2:id anObject})"
    },
    {
      "trigger": "NSNotification.notificationWithName:object:userInfo:",
      "contents": "NSNotification.notificationWithName(${1:NSString* aName}, object:${2:id anObject}, userInfo:${3:NSDictionary* aUserInfo})"
    },
    {
      "trigger": "NSNotificationCoalescingOnName (1)",
      "contents": "NSNotificationCoalescingOnName"
    },
    {
      "trigger": "NSNotificationCoalescingOnSender (2)",
      "contents": "NSNotificationCoalescingOnSender"
    },
    {
      "trigger": "NSNotificationNoCoalescing (0)",
      "contents": "NSNotificationNoCoalescing"
    },
    {
      "trigger": "NSNullifyDeleteRule (1)",
      "contents": "NSNullifyDeleteRule"
    },
    {
      "trigger": "NSNumber.numberWithBool:",
      "contents": "NSNumber.numberWithBool(${1:BOOL value})"
    },
    {
      "trigger": "NSNumber.numberWithChar:",
      "contents": "NSNumber.numberWithChar(${1:char value})"
    },
    {
      "trigger": "NSNumber.numberWithDouble:",
      "contents": "NSNumber.numberWithDouble(${1:double value})"
    },
    {
      "trigger": "NSNumber.numberWithFloat:",
      "contents": "NSNumber.numberWithFloat(${1:float value})"
    },
    {
      "trigger": "NSNumber.numberWithInt:",
      "contents": "NSNumber.numberWithInt(${1:int value})"
    },
    {
      "trigger": "NSNumber.numberWithInteger:",
      "contents": "NSNumber.numberWithInteger(${1:NSInteger value})"
    },
    {
      "trigger": "NSNumber.numberWithLong:",
      "contents": "NSNumber.numberWithLong(${1:long value})"
    },
    {
      "trigger": "NSNumber.numberWithLongLong:",
      "contents": "NSNumber.numberWithLongLong(${1:long long value})"
    },
    {
      "trigger": "NSNumber.numberWithShort:",
      "contents": "NSNumber.numberWithShort(${1:short value})"
    },
    {
      "trigger": "NSNumber.numberWithUnsignedChar:",
      "contents": "NSNumber.numberWithUnsignedChar(${1:unsigned char value})"
    },
    {
      "trigger": "NSNumber.numberWithUnsignedInt:",
      "contents": "NSNumber.numberWithUnsignedInt(${1:unsigned int value})"
    },
    {
      "trigger": "NSNumber.numberWithUnsignedInteger:",
      "contents": "NSNumber.numberWithUnsignedInteger(${1:NSUInteger value})"
    },
    {
      "trigger": "NSNumber.numberWithUnsignedLong:",
      "contents": "NSNumber.numberWithUnsignedLong(${1:unsigned long value})"
    },
    {
      "trigger": "NSNumber.numberWithUnsignedLongLong:",
      "contents": "NSNumber.numberWithUnsignedLongLong(${1:unsigned long long value})"
    },
    {
      "trigger": "NSNumber.numberWithUnsignedShort:",
      "contents": "NSNumber.numberWithUnsignedShort(${1:unsigned short value})"
    },
    {
      "trigger": "NSNumberFormatter.localizedStringFromNumber:numberStyle:",
      "contents": "NSNumberFormatter.localizedStringFromNumber(${1:NSNumber* num}, numberStyle:${2:NSNumberFormatterStyle nstyle})"
    },
    {
      "trigger": "NSNumberFormatter.setDefaultFormatterBehavior:",
      "contents": "NSNumberFormatter.setDefaultFormatterBehavior(${1:NSNumberFormatterBehavior behavior})"
    },
    {
      "trigger": "NSNumberFormatterBehavior10_4 (1040)",
      "contents": "NSNumberFormatterBehavior10_4"
    },
    {
      "trigger": "NSNumberFormatterBehaviorDefault (0)",
      "contents": "NSNumberFormatterBehaviorDefault"
    },
    {
      "trigger": "NSNumberFormatterCurrencyStyle (2)",
      "contents": "NSNumberFormatterCurrencyStyle"
    },
    {
      "trigger": "NSNumberFormatterDecimalStyle (1)",
      "contents": "NSNumberFormatterDecimalStyle"
    },
    {
      "trigger": "NSNumberFormatterNoStyle (0)",
      "contents": "NSNumberFormatterNoStyle"
    },
    {
      "trigger": "NSNumberFormatterPadAfterPrefix (1)",
      "contents": "NSNumberFormatterPadAfterPrefix"
    },
    {
      "trigger": "NSNumberFormatterPadAfterSuffix (3)",
      "contents": "NSNumberFormatterPadAfterSuffix"
    },
    {
      "trigger": "NSNumberFormatterPadBeforePrefix (0)",
      "contents": "NSNumberFormatterPadBeforePrefix"
    },
    {
      "trigger": "NSNumberFormatterPadBeforeSuffix (2)",
      "contents": "NSNumberFormatterPadBeforeSuffix"
    },
    {
      "trigger": "NSNumberFormatterPercentStyle (3)",
      "contents": "NSNumberFormatterPercentStyle"
    },
    {
      "trigger": "NSNumberFormatterRoundCeiling (0)",
      "contents": "NSNumberFormatterRoundCeiling"
    },
    {
      "trigger": "NSNumberFormatterRoundDown (2)",
      "contents": "NSNumberFormatterRoundDown"
    },
    {
      "trigger": "NSNumberFormatterRoundFloor (1)",
      "contents": "NSNumberFormatterRoundFloor"
    },
    {
      "trigger": "NSNumberFormatterRoundHalfDown (5)",
      "contents": "NSNumberFormatterRoundHalfDown"
    },
    {
      "trigger": "NSNumberFormatterRoundHalfEven (4)",
      "contents": "NSNumberFormatterRoundHalfEven"
    },
    {
      "trigger": "NSNumberFormatterRoundHalfUp (6)",
      "contents": "NSNumberFormatterRoundHalfUp"
    },
    {
      "trigger": "NSNumberFormatterRoundUp (3)",
      "contents": "NSNumberFormatterRoundUp"
    },
    {
      "trigger": "NSNumberFormatterScientificStyle (4)",
      "contents": "NSNumberFormatterScientificStyle"
    },
    {
      "trigger": "NSNumberFormatterSpellOutStyle (5)",
      "contents": "NSNumberFormatterSpellOutStyle"
    },
    {
      "trigger": "NSNumericSearch (64)",
      "contents": "NSNumericSearch"
    },
    {
      "trigger": "NSOSF1OperatingSystem (7)",
      "contents": "NSOSF1OperatingSystem"
    },
    {
      "trigger": "NSOSStatusErrorDomain (NSString*)",
      "contents": "NSOSStatusErrorDomain"
    },
    {
      "trigger": "NSObject.allocWithZone:",
      "contents": "NSObject.allocWithZone(${1:NSZone* zone})"
    },
    {
      "trigger": "NSObject.appearanceWhenContainedIn:",
      "contents": "NSObject.appearanceWhenContainedIn(${1:Class* ContainerClass})"
    },
    {
      "trigger": "NSObject.automaticallyNotifiesObserversForKey:",
      "contents": "NSObject.automaticallyNotifiesObserversForKey(${1:NSString* key})"
    },
    {
      "trigger": "NSObject.cancelPreviousPerformRequestsWithTarget:",
      "contents": "NSObject.cancelPreviousPerformRequestsWithTarget(${1:id aTarget})"
    },
    {
      "trigger": "NSObject.cancelPreviousPerformRequestsWithTarget:selector:object:",
      "contents": "NSObject.cancelPreviousPerformRequestsWithTarget(${1:id aTarget}, selector:${2:SEL aSelector}, object:${3:id anArgument})"
    },
    {
      "trigger": "NSObject.conformsToProtocol:",
      "contents": "NSObject.conformsToProtocol(${1:Protocol* protocol})"
    },
    {
      "trigger": "NSObject.copyWithZone:",
      "contents": "NSObject.copyWithZone(${1:NSZone* zone})"
    },
    {
      "trigger": "NSObject.instanceMethodForSelector:",
      "contents": "NSObject.instanceMethodForSelector(${1:SEL aSelector})"
    },
    {
      "trigger": "NSObject.instanceMethodSignatureForSelector:",
      "contents": "NSObject.instanceMethodSignatureForSelector(${1:SEL aSelector})"
    },
    {
      "trigger": "NSObject.instancesRespondToSelector:",
      "contents": "NSObject.instancesRespondToSelector(${1:SEL aSelector})"
    },
    {
      "trigger": "NSObject.isSubclassOfClass:",
      "contents": "NSObject.isSubclassOfClass(${1:Class aClass})"
    },
    {
      "trigger": "NSObject.keyPathsForValuesAffectingValueForKey:",
      "contents": "NSObject.keyPathsForValuesAffectingValueForKey(${1:NSString* key})"
    },
    {
      "trigger": "NSObject.mutableCopyWithZone:",
      "contents": "NSObject.mutableCopyWithZone(${1:NSZone* zone})"
    },
    {
      "trigger": "NSObject.resolveClassMethod:",
      "contents": "NSObject.resolveClassMethod(${1:SEL sel})"
    },
    {
      "trigger": "NSObject.resolveInstanceMethod:",
      "contents": "NSObject.resolveInstanceMethod(${1:SEL sel})"
    },
    {
      "trigger": "NSObject.setVersion:",
      "contents": "NSObject.setVersion(${1:NSInteger aVersion})"
    },
    {
      "trigger": "NSObjectIDAttributeType (2000)",
      "contents": "NSObjectIDAttributeType"
    },
    {
      "trigger": "NSObjectInaccessibleException (NSString*)",
      "contents": "NSObjectInaccessibleException"
    },
    {
      "trigger": "NSObjectNotAvailableException (NSString*)",
      "contents": "NSObjectNotAvailableException"
    },
    {
      "trigger": "NSOldStyleException (NSString*)",
      "contents": "NSOldStyleException"
    },
    {
      "trigger": "NSOpenStepUnicodeReservedBase (62464)",
      "contents": "NSOpenStepUnicodeReservedBase"
    },
    {
      "trigger": "NSOperationQueueDefaultMaxConcurrentOperationCount (-1)",
      "contents": "NSOperationQueueDefaultMaxConcurrentOperationCount"
    },
    {
      "trigger": "NSOperationQueuePriorityHigh (4)",
      "contents": "NSOperationQueuePriorityHigh"
    },
    {
      "trigger": "NSOperationQueuePriorityLow (-4)",
      "contents": "NSOperationQueuePriorityLow"
    },
    {
      "trigger": "NSOperationQueuePriorityNormal (0)",
      "contents": "NSOperationQueuePriorityNormal"
    },
    {
      "trigger": "NSOperationQueuePriorityVeryHigh (8)",
      "contents": "NSOperationQueuePriorityVeryHigh"
    },
    {
      "trigger": "NSOperationQueuePriorityVeryLow (-8)",
      "contents": "NSOperationQueuePriorityVeryLow"
    },
    {
      "trigger": "NSOrPredicateType (2)",
      "contents": "NSOrPredicateType"
    },
    {
      "trigger": "NSOrderedAscending (-1)",
      "contents": "NSOrderedAscending"
    },
    {
      "trigger": "NSOrderedDescending (1)",
      "contents": "NSOrderedDescending"
    },
    {
      "trigger": "NSOrderedSame (0)",
      "contents": "NSOrderedSame"
    },
    {
      "trigger": "NSOrderedSet.orderedSetWithArray:",
      "contents": "NSOrderedSet.orderedSetWithArray(${1:NSArray* array})"
    },
    {
      "trigger": "NSOrderedSet.orderedSetWithArray:range:copyItems:",
      "contents": "NSOrderedSet.orderedSetWithArray(${1:NSArray* array}, range:${2:NSRange range}, copyItems:${3:BOOL flag})"
    },
    {
      "trigger": "NSOrderedSet.orderedSetWithObject:",
      "contents": "NSOrderedSet.orderedSetWithObject(${1:id object})"
    },
    {
      "trigger": "NSOrderedSet.orderedSetWithObjects:",
      "contents": "NSOrderedSet.orderedSetWithObjects(${1:id firstObj})"
    },
    {
      "trigger": "NSOrderedSet.orderedSetWithObjects:count:",
      "contents": "NSOrderedSet.orderedSetWithObjects(${1:id* objects}, count:${2:NSUInteger cnt})"
    },
    {
      "trigger": "NSOrderedSet.orderedSetWithOrderedSet:",
      "contents": "NSOrderedSet.orderedSetWithOrderedSet(${1:NSOrderedSet* set})"
    },
    {
      "trigger": "NSOrderedSet.orderedSetWithOrderedSet:range:copyItems:",
      "contents": "NSOrderedSet.orderedSetWithOrderedSet(${1:NSOrderedSet* set}, range:${2:NSRange range}, copyItems:${3:BOOL flag})"
    },
    {
      "trigger": "NSOrderedSet.orderedSetWithSet:",
      "contents": "NSOrderedSet.orderedSetWithSet(${1:NSSet* set})"
    },
    {
      "trigger": "NSOrderedSet.orderedSetWithSet:copyItems:",
      "contents": "NSOrderedSet.orderedSetWithSet(${1:NSSet* set}, copyItems:${2:BOOL flag})"
    },
    {
      "trigger": "NSOrthography.orthographyWithDominantScript:languageMap:",
      "contents": "NSOrthography.orthographyWithDominantScript(${1:NSString* script}, languageMap:${2:NSDictionary* map})"
    },
    {
      "trigger": "NSOutputStream.outputStreamToBuffer:capacity:",
      "contents": "NSOutputStream.outputStreamToBuffer(${1:uint8_t* buffer}, capacity:${2:NSUInteger capacity})"
    },
    {
      "trigger": "NSOutputStream.outputStreamToFileAtPath:append:",
      "contents": "NSOutputStream.outputStreamToFileAtPath(${1:NSString* path}, append:${2:BOOL shouldAppend})"
    },
    {
      "trigger": "NSOutputStream.outputStreamWithURL:append:",
      "contents": "NSOutputStream.outputStreamWithURL(${1:NSURL* url}, append:${2:BOOL shouldAppend})"
    },
    {
      "trigger": "NSOverwriteMergePolicy (id)",
      "contents": "NSOverwriteMergePolicy"
    },
    {
      "trigger": "NSOverwriteMergePolicyType (3)",
      "contents": "NSOverwriteMergePolicyType"
    },
    {
      "trigger": "NSPOSIXErrorDomain (NSString*)",
      "contents": "NSPOSIXErrorDomain"
    },
    {
      "trigger": "NSParseErrorException (NSString*)",
      "contents": "NSParseErrorException"
    },
    {
      "trigger": "NSPersianCalendar (NSString*)",
      "contents": "NSPersianCalendar"
    },
    {
      "trigger": "NSPersistentStore.metadataForPersistentStoreWithURL:error:",
      "contents": "NSPersistentStore.metadataForPersistentStoreWithURL(${1:NSURL* url}, error:${2:NSError** error})"
    },
    {
      "trigger": "NSPersistentStore.setMetadata:forPersistentStoreWithURL:error:",
      "contents": "NSPersistentStore.setMetadata(${1:NSDictionary* metadata}, forPersistentStoreWithURL:${2:NSURL* url}, error:${3:NSError** error})"
    },
    {
      "trigger": "NSPersistentStoreCoordinator.metadataForPersistentStoreOfType:URL:error:",
      "contents": "NSPersistentStoreCoordinator.metadataForPersistentStoreOfType(${1:NSString* storeType}, URL:${2:NSURL* url}, error:${3:NSError** error})"
    },
    {
      "trigger": "NSPersistentStoreCoordinator.registerStoreClass:forStoreType:",
      "contents": "NSPersistentStoreCoordinator.registerStoreClass(${1:Class storeClass}, forStoreType:${2:NSString* storeType})"
    },
    {
      "trigger": "NSPersistentStoreCoordinator.setMetadata:forPersistentStoreOfType:URL:error:",
      "contents": "NSPersistentStoreCoordinator.setMetadata(${1:NSDictionary* metadata}, forPersistentStoreOfType:${2:NSString* storeType}, URL:${3:NSURL* url}, error:${4:NSError** error})"
    },
    {
      "trigger": "NSPersistentStoreCoordinatorLockingError (132010)",
      "contents": "NSPersistentStoreCoordinatorLockingError"
    },
    {
      "trigger": "NSPersistentStoreCoordinatorStoresDidChangeNotification (NSString*)",
      "contents": "NSPersistentStoreCoordinatorStoresDidChangeNotification"
    },
    {
      "trigger": "NSPersistentStoreCoordinatorWillRemoveStoreNotification (NSString*)",
      "contents": "NSPersistentStoreCoordinatorWillRemoveStoreNotification"
    },
    {
      "trigger": "NSPersistentStoreDidImportUbiquitousContentChangesNotification (NSString*)",
      "contents": "NSPersistentStoreDidImportUbiquitousContentChangesNotification"
    },
    {
      "trigger": "NSPersistentStoreFileProtectionKey (NSString*)",
      "contents": "NSPersistentStoreFileProtectionKey"
    },
    {
      "trigger": "NSPersistentStoreIncompatibleSchemaError (134020)",
      "contents": "NSPersistentStoreIncompatibleSchemaError"
    },
    {
      "trigger": "NSPersistentStoreIncompatibleVersionHashError (134100)",
      "contents": "NSPersistentStoreIncompatibleVersionHashError"
    },
    {
      "trigger": "NSPersistentStoreIncompleteSaveError (134040)",
      "contents": "NSPersistentStoreIncompleteSaveError"
    },
    {
      "trigger": "NSPersistentStoreInvalidTypeError (134000)",
      "contents": "NSPersistentStoreInvalidTypeError"
    },
    {
      "trigger": "NSPersistentStoreOSCompatibility (NSString*)",
      "contents": "NSPersistentStoreOSCompatibility"
    },
    {
      "trigger": "NSPersistentStoreOpenError (134080)",
      "contents": "NSPersistentStoreOpenError"
    },
    {
      "trigger": "NSPersistentStoreOperationError (134070)",
      "contents": "NSPersistentStoreOperationError"
    },
    {
      "trigger": "NSPersistentStoreSaveConflictsError (134050)",
      "contents": "NSPersistentStoreSaveConflictsError"
    },
    {
      "trigger": "NSPersistentStoreSaveConflictsErrorKey (NSString*)",
      "contents": "NSPersistentStoreSaveConflictsErrorKey"
    },
    {
      "trigger": "NSPersistentStoreSaveError (134030)",
      "contents": "NSPersistentStoreSaveError"
    },
    {
      "trigger": "NSPersistentStoreTimeoutError (134090)",
      "contents": "NSPersistentStoreTimeoutError"
    },
    {
      "trigger": "NSPersistentStoreTimeoutOption (NSString*)",
      "contents": "NSPersistentStoreTimeoutOption"
    },
    {
      "trigger": "NSPersistentStoreTypeMismatchError (134010)",
      "contents": "NSPersistentStoreTypeMismatchError"
    },
    {
      "trigger": "NSPersistentStoreUbiquitousContentNameKey (NSString*)",
      "contents": "NSPersistentStoreUbiquitousContentNameKey"
    },
    {
      "trigger": "NSPersistentStoreUbiquitousContentURLKey (NSString*)",
      "contents": "NSPersistentStoreUbiquitousContentURLKey"
    },
    {
      "trigger": "NSPersistentStoreUnsupportedRequestTypeError (134091)",
      "contents": "NSPersistentStoreUnsupportedRequestTypeError"
    },
    {
      "trigger": "NSPicturesDirectory (19)",
      "contents": "NSPicturesDirectory"
    },
    {
      "trigger": "NSPortDidBecomeInvalidNotification (NSString*)",
      "contents": "NSPortDidBecomeInvalidNotification"
    },
    {
      "trigger": "NSPortReceiveException (NSString*)",
      "contents": "NSPortReceiveException"
    },
    {
      "trigger": "NSPortSendException (NSString*)",
      "contents": "NSPortSendException"
    },
    {
      "trigger": "NSPortTimeoutException (NSString*)",
      "contents": "NSPortTimeoutException"
    },
    {
      "trigger": "NSPostASAP (2)",
      "contents": "NSPostASAP"
    },
    {
      "trigger": "NSPostNow (3)",
      "contents": "NSPostNow"
    },
    {
      "trigger": "NSPostWhenIdle (1)",
      "contents": "NSPostWhenIdle"
    },
    {
      "trigger": "NSPredicate.predicateWithBlock:",
      "contents": "NSPredicate.predicateWithBlock(${1:BOOL (^)(id, NSDictionary *) block})"
    },
    {
      "trigger": "NSPredicate.predicateWithFormat:",
      "contents": "NSPredicate.predicateWithFormat(${1:NSString* predicateFormat})"
    },
    {
      "trigger": "NSPredicate.predicateWithFormat:argumentArray:",
      "contents": "NSPredicate.predicateWithFormat(${1:NSString* predicateFormat}, argumentArray:${2:NSArray* arguments})"
    },
    {
      "trigger": "NSPredicate.predicateWithFormat:arguments:",
      "contents": "NSPredicate.predicateWithFormat(${1:NSString* predicateFormat}, arguments:${2:va_list argList})"
    },
    {
      "trigger": "NSPredicate.predicateWithValue:",
      "contents": "NSPredicate.predicateWithValue(${1:BOOL value})"
    },
    {
      "trigger": "NSPreferencePanesDirectory (22)",
      "contents": "NSPreferencePanesDirectory"
    },
    {
      "trigger": "NSPrinterDescriptionDirectory (20)",
      "contents": "NSPrinterDescriptionDirectory"
    },
    {
      "trigger": "NSPrivateQueueConcurrencyType (1)",
      "contents": "NSPrivateQueueConcurrencyType"
    },
    {
      "trigger": "NSPropertyListBinaryFormat_v1_0 (200)",
      "contents": "NSPropertyListBinaryFormat_v1_0"
    },
    {
      "trigger": "NSPropertyListErrorMaximum (4095)",
      "contents": "NSPropertyListErrorMaximum"
    },
    {
      "trigger": "NSPropertyListErrorMinimum (3840)",
      "contents": "NSPropertyListErrorMinimum"
    },
    {
      "trigger": "NSPropertyListImmutable (0)",
      "contents": "NSPropertyListImmutable"
    },
    {
      "trigger": "NSPropertyListMutableContainers (1)",
      "contents": "NSPropertyListMutableContainers"
    },
    {
      "trigger": "NSPropertyListMutableContainersAndLeaves (2)",
      "contents": "NSPropertyListMutableContainersAndLeaves"
    },
    {
      "trigger": "NSPropertyListOpenStepFormat (1)",
      "contents": "NSPropertyListOpenStepFormat"
    },
    {
      "trigger": "NSPropertyListReadCorruptError (3840)",
      "contents": "NSPropertyListReadCorruptError"
    },
    {
      "trigger": "NSPropertyListReadStreamError (3842)",
      "contents": "NSPropertyListReadStreamError"
    },
    {
      "trigger": "NSPropertyListReadUnknownVersionError (3841)",
      "contents": "NSPropertyListReadUnknownVersionError"
    },
    {
      "trigger": "NSPropertyListSerialization.dataFromPropertyList:format:errorDescription:",
      "contents": "NSPropertyListSerialization.dataFromPropertyList(${1:id plist}, format:${2:NSPropertyListFormat format}, errorDescription:${3:NSString** errorString})"
    },
    {
      "trigger": "NSPropertyListSerialization.dataWithPropertyList:format:options:error:",
      "contents": "NSPropertyListSerialization.dataWithPropertyList(${1:id plist}, format:${2:NSPropertyListFormat format}, options:${3:NSPropertyListWriteOptions opt}, error:${4:NSError** error})"
    },
    {
      "trigger": "NSPropertyListSerialization.propertyList:isValidForFormat:",
      "contents": "NSPropertyListSerialization.propertyList(${1:id plist}, isValidForFormat:${2:NSPropertyListFormat format})"
    },
    {
      "trigger": "NSPropertyListSerialization.propertyListFromData:mutabilityOption:format:errorDescription:",
      "contents": "NSPropertyListSerialization.propertyListFromData(${1:NSData* data}, mutabilityOption:${2:NSPropertyListMutabilityOptions opt}, format:${3:NSPropertyListFormat* format}, errorDescription:${4:NSString** errorString})"
    },
    {
      "trigger": "NSPropertyListSerialization.propertyListWithData:options:format:error:",
      "contents": "NSPropertyListSerialization.propertyListWithData(${1:NSData* data}, options:${2:NSPropertyListReadOptions opt}, format:${3:NSPropertyListFormat* format}, error:${4:NSError** error})"
    },
    {
      "trigger": "NSPropertyListSerialization.propertyListWithStream:options:format:error:",
      "contents": "NSPropertyListSerialization.propertyListWithStream(${1:NSInputStream* stream}, options:${2:NSPropertyListReadOptions opt}, format:${3:NSPropertyListFormat* format}, error:${4:NSError** error})"
    },
    {
      "trigger": "NSPropertyListSerialization.writePropertyList:toStream:format:options:error:",
      "contents": "NSPropertyListSerialization.writePropertyList(${1:id plist}, toStream:${2:NSOutputStream* stream}, format:${3:NSPropertyListFormat format}, options:${4:NSPropertyListWriteOptions opt}, error:${5:NSError** error})"
    },
    {
      "trigger": "NSPropertyListWriteStreamError (3851)",
      "contents": "NSPropertyListWriteStreamError"
    },
    {
      "trigger": "NSPropertyListXMLFormat_v1_0 (100)",
      "contents": "NSPropertyListXMLFormat_v1_0"
    },
    {
      "trigger": "NSProprietaryStringEncoding (65536)",
      "contents": "NSProprietaryStringEncoding"
    },
    {
      "trigger": "NSProtocolFromString",
      "contents": "NSProtocolFromString(${1:NSString* namestr})"
    },
    {
      "trigger": "NSProxy.allocWithZone:",
      "contents": "NSProxy.allocWithZone(${1:NSZone* zone})"
    },
    {
      "trigger": "NSProxy.respondsToSelector:",
      "contents": "NSProxy.respondsToSelector(${1:SEL aSelector})"
    },
    {
      "trigger": "NSQuarterCalendarUnit (2048)",
      "contents": "NSQuarterCalendarUnit"
    },
    {
      "trigger": "NSRangeException (NSString*)",
      "contents": "NSRangeException"
    },
    {
      "trigger": "NSRangeFromString",
      "contents": "NSRangeFromString(${1:NSString* aString})"
    },
    {
      "trigger": "NSReadOnlyPersistentStoreOption (NSString*)",
      "contents": "NSReadOnlyPersistentStoreOption"
    },
    {
      "trigger": "NSRecoveryAttempterErrorKey (NSString*)",
      "contents": "NSRecoveryAttempterErrorKey"
    },
    {
      "trigger": "NSRecycleZone",
      "contents": "NSRecycleZone(${1:NSZone* zone})"
    },
    {
      "trigger": "NSRefreshedObjectsKey (NSString*)",
      "contents": "NSRefreshedObjectsKey"
    },
    {
      "trigger": "NSRegistrationDomain (NSString*)",
      "contents": "NSRegistrationDomain"
    },
    {
      "trigger": "NSRegularExpression.escapedPatternForString:",
      "contents": "NSRegularExpression.escapedPatternForString(${1:NSString* string})"
    },
    {
      "trigger": "NSRegularExpression.escapedTemplateForString:",
      "contents": "NSRegularExpression.escapedTemplateForString(${1:NSString* string})"
    },
    {
      "trigger": "NSRegularExpression.regularExpressionWithPattern:options:error:",
      "contents": "NSRegularExpression.regularExpressionWithPattern(${1:NSString* pattern}, options:${2:NSRegularExpressionOptions options}, error:${3:NSError** error})"
    },
    {
      "trigger": "NSRegularExpressionAllowCommentsAndWhitespace (2)",
      "contents": "NSRegularExpressionAllowCommentsAndWhitespace"
    },
    {
      "trigger": "NSRegularExpressionAnchorsMatchLines (16)",
      "contents": "NSRegularExpressionAnchorsMatchLines"
    },
    {
      "trigger": "NSRegularExpressionCaseInsensitive (1)",
      "contents": "NSRegularExpressionCaseInsensitive"
    },
    {
      "trigger": "NSRegularExpressionDotMatchesLineSeparators (8)",
      "contents": "NSRegularExpressionDotMatchesLineSeparators"
    },
    {
      "trigger": "NSRegularExpressionIgnoreMetacharacters (4)",
      "contents": "NSRegularExpressionIgnoreMetacharacters"
    },
    {
      "trigger": "NSRegularExpressionSearch (1024)",
      "contents": "NSRegularExpressionSearch"
    },
    {
      "trigger": "NSRegularExpressionUseUnicodeWordBoundaries (64)",
      "contents": "NSRegularExpressionUseUnicodeWordBoundaries"
    },
    {
      "trigger": "NSRegularExpressionUseUnixLineSeparators (32)",
      "contents": "NSRegularExpressionUseUnixLineSeparators"
    },
    {
      "trigger": "NSRemoveEntityMappingType (3)",
      "contents": "NSRemoveEntityMappingType"
    },
    {
      "trigger": "NSRemovedPersistentStoresKey (NSString*)",
      "contents": "NSRemovedPersistentStoresKey"
    },
    {
      "trigger": "NSRepublicOfChinaCalendar (NSString*)",
      "contents": "NSRepublicOfChinaCalendar"
    },
    {
      "trigger": "NSRollbackMergePolicy (id)",
      "contents": "NSRollbackMergePolicy"
    },
    {
      "trigger": "NSRollbackMergePolicyType (4)",
      "contents": "NSRollbackMergePolicyType"
    },
    {
      "trigger": "NSRoundBankers (3)",
      "contents": "NSRoundBankers"
    },
    {
      "trigger": "NSRoundDown (1)",
      "contents": "NSRoundDown"
    },
    {
      "trigger": "NSRoundDownToMultipleOfPageSize",
      "contents": "NSRoundDownToMultipleOfPageSize(${1:NSUInteger bytes})"
    },
    {
      "trigger": "NSRoundPlain (0)",
      "contents": "NSRoundPlain"
    },
    {
      "trigger": "NSRoundUp (2)",
      "contents": "NSRoundUp"
    },
    {
      "trigger": "NSRoundUpToMultipleOfPageSize",
      "contents": "NSRoundUpToMultipleOfPageSize(${1:NSUInteger bytes})"
    },
    {
      "trigger": "NSRunLoopCommonModes (NSString*)",
      "contents": "NSRunLoopCommonModes"
    },
    {
      "trigger": "NSSQLiteAnalyzeOption (NSString*)",
      "contents": "NSSQLiteAnalyzeOption"
    },
    {
      "trigger": "NSSQLiteError (134180)",
      "contents": "NSSQLiteError"
    },
    {
      "trigger": "NSSQLiteErrorDomain (NSString*)",
      "contents": "NSSQLiteErrorDomain"
    },
    {
      "trigger": "NSSQLiteManualVacuumOption (NSString*)",
      "contents": "NSSQLiteManualVacuumOption"
    },
    {
      "trigger": "NSSQLitePragmasOption (NSString*)",
      "contents": "NSSQLitePragmasOption"
    },
    {
      "trigger": "NSSQLiteStoreType (NSString*)",
      "contents": "NSSQLiteStoreType"
    },
    {
      "trigger": "NSSaveRequestType (2)",
      "contents": "NSSaveRequestType"
    },
    {
      "trigger": "NSScanner.localizedScannerWithString:",
      "contents": "NSScanner.localizedScannerWithString(${1:NSString* string})"
    },
    {
      "trigger": "NSScanner.scannerWithString:",
      "contents": "NSScanner.scannerWithString(${1:NSString* string})"
    },
    {
      "trigger": "NSSearchPathForDirectoriesInDomains",
      "contents": "NSSearchPathForDirectoriesInDomains(${1:NSSearchPathDirectory directory}, ${2:NSSearchPathDomainMask domainMask}, ${3:BOOL expandTilde})"
    },
    {
      "trigger": "NSSecondCalendarUnit (128)",
      "contents": "NSSecondCalendarUnit"
    },
    {
      "trigger": "NSSelectorFromString",
      "contents": "NSSelectorFromString(${1:NSString* aSelectorName})"
    },
    {
      "trigger": "NSSet.setWithArray:",
      "contents": "NSSet.setWithArray(${1:NSArray* array})"
    },
    {
      "trigger": "NSSet.setWithObject:",
      "contents": "NSSet.setWithObject(${1:id object})"
    },
    {
      "trigger": "NSSet.setWithObjects:",
      "contents": "NSSet.setWithObjects(${1:id firstObj})"
    },
    {
      "trigger": "NSSet.setWithObjects:count:",
      "contents": "NSSet.setWithObjects(${1:id* objects}, count:${2:NSUInteger cnt})"
    },
    {
      "trigger": "NSSet.setWithSet:",
      "contents": "NSSet.setWithSet(${1:NSSet* set})"
    },
    {
      "trigger": "NSSetUncaughtExceptionHandler",
      "contents": "NSSetUncaughtExceptionHandler(${1:NSUncaughtExceptionHandler* })"
    },
    {
      "trigger": "NSSetZoneName",
      "contents": "NSSetZoneName(${1:NSZone* zone}, ${2:NSString* name})"
    },
    {
      "trigger": "NSSharedPublicDirectory (21)",
      "contents": "NSSharedPublicDirectory"
    },
    {
      "trigger": "NSShiftJISStringEncoding (8)",
      "contents": "NSShiftJISStringEncoding"
    },
    {
      "trigger": "NSShouldRetainWithZone",
      "contents": "NSShouldRetainWithZone(${1:id anObject}, ${2:NSZone* requestedZone})"
    },
    {
      "trigger": "NSSnapshotEventMergePolicy (64)",
      "contents": "NSSnapshotEventMergePolicy"
    },
    {
      "trigger": "NSSnapshotEventRefresh (32)",
      "contents": "NSSnapshotEventRefresh"
    },
    {
      "trigger": "NSSnapshotEventRollback (16)",
      "contents": "NSSnapshotEventRollback"
    },
    {
      "trigger": "NSSnapshotEventUndoDeletion (4)",
      "contents": "NSSnapshotEventUndoDeletion"
    },
    {
      "trigger": "NSSnapshotEventUndoInsertion (2)",
      "contents": "NSSnapshotEventUndoInsertion"
    },
    {
      "trigger": "NSSnapshotEventUndoUpdate (8)",
      "contents": "NSSnapshotEventUndoUpdate"
    },
    {
      "trigger": "NSSolarisOperatingSystem (3)",
      "contents": "NSSolarisOperatingSystem"
    },
    {
      "trigger": "NSSortConcurrent (1)",
      "contents": "NSSortConcurrent"
    },
    {
      "trigger": "NSSortDescriptor.sortDescriptorWithKey:ascending:",
      "contents": "NSSortDescriptor.sortDescriptorWithKey(${1:NSString* key}, ascending:${2:BOOL ascending})"
    },
    {
      "trigger": "NSSortDescriptor.sortDescriptorWithKey:ascending:comparator:",
      "contents": "NSSortDescriptor.sortDescriptorWithKey(${1:NSString* key}, ascending:${2:BOOL ascending}, comparator:${3:NSComparator cmptr})"
    },
    {
      "trigger": "NSSortDescriptor.sortDescriptorWithKey:ascending:selector:",
      "contents": "NSSortDescriptor.sortDescriptorWithKey(${1:NSString* key}, ascending:${2:BOOL ascending}, selector:${3:SEL selector})"
    },
    {
      "trigger": "NSSortStable (16)",
      "contents": "NSSortStable"
    },
    {
      "trigger": "NSStoreModelVersionHashesKey (NSString*)",
      "contents": "NSStoreModelVersionHashesKey"
    },
    {
      "trigger": "NSStoreModelVersionIdentifiersKey (NSString*)",
      "contents": "NSStoreModelVersionIdentifiersKey"
    },
    {
      "trigger": "NSStoreTypeKey (NSString*)",
      "contents": "NSStoreTypeKey"
    },
    {
      "trigger": "NSStoreUUIDKey (NSString*)",
      "contents": "NSStoreUUIDKey"
    },
    {
      "trigger": "NSStreamDataWrittenToMemoryStreamKey (NSString*)",
      "contents": "NSStreamDataWrittenToMemoryStreamKey"
    },
    {
      "trigger": "NSStreamEventEndEncountered (16)",
      "contents": "NSStreamEventEndEncountered"
    },
    {
      "trigger": "NSStreamEventErrorOccurred (8)",
      "contents": "NSStreamEventErrorOccurred"
    },
    {
      "trigger": "NSStreamEventHasBytesAvailable (2)",
      "contents": "NSStreamEventHasBytesAvailable"
    },
    {
      "trigger": "NSStreamEventHasSpaceAvailable (4)",
      "contents": "NSStreamEventHasSpaceAvailable"
    },
    {
      "trigger": "NSStreamEventNone (0)",
      "contents": "NSStreamEventNone"
    },
    {
      "trigger": "NSStreamEventOpenCompleted (1)",
      "contents": "NSStreamEventOpenCompleted"
    },
    {
      "trigger": "NSStreamFileCurrentOffsetKey (NSString*)",
      "contents": "NSStreamFileCurrentOffsetKey"
    },
    {
      "trigger": "NSStreamNetworkServiceType (NSString*)",
      "contents": "NSStreamNetworkServiceType"
    },
    {
      "trigger": "NSStreamNetworkServiceTypeBackground (NSString*)",
      "contents": "NSStreamNetworkServiceTypeBackground"
    },
    {
      "trigger": "NSStreamNetworkServiceTypeVideo (NSString*)",
      "contents": "NSStreamNetworkServiceTypeVideo"
    },
    {
      "trigger": "NSStreamNetworkServiceTypeVoIP (NSString*)",
      "contents": "NSStreamNetworkServiceTypeVoIP"
    },
    {
      "trigger": "NSStreamNetworkServiceTypeVoice (NSString*)",
      "contents": "NSStreamNetworkServiceTypeVoice"
    },
    {
      "trigger": "NSStreamSOCKSErrorDomain (NSString*)",
      "contents": "NSStreamSOCKSErrorDomain"
    },
    {
      "trigger": "NSStreamSOCKSProxyConfigurationKey (NSString*)",
      "contents": "NSStreamSOCKSProxyConfigurationKey"
    },
    {
      "trigger": "NSStreamSOCKSProxyHostKey (NSString*)",
      "contents": "NSStreamSOCKSProxyHostKey"
    },
    {
      "trigger": "NSStreamSOCKSProxyPasswordKey (NSString*)",
      "contents": "NSStreamSOCKSProxyPasswordKey"
    },
    {
      "trigger": "NSStreamSOCKSProxyPortKey (NSString*)",
      "contents": "NSStreamSOCKSProxyPortKey"
    },
    {
      "trigger": "NSStreamSOCKSProxyUserKey (NSString*)",
      "contents": "NSStreamSOCKSProxyUserKey"
    },
    {
      "trigger": "NSStreamSOCKSProxyVersion4 (NSString*)",
      "contents": "NSStreamSOCKSProxyVersion4"
    },
    {
      "trigger": "NSStreamSOCKSProxyVersion5 (NSString*)",
      "contents": "NSStreamSOCKSProxyVersion5"
    },
    {
      "trigger": "NSStreamSOCKSProxyVersionKey (NSString*)",
      "contents": "NSStreamSOCKSProxyVersionKey"
    },
    {
      "trigger": "NSStreamSocketSSLErrorDomain (NSString*)",
      "contents": "NSStreamSocketSSLErrorDomain"
    },
    {
      "trigger": "NSStreamSocketSecurityLevelKey (NSString*)",
      "contents": "NSStreamSocketSecurityLevelKey"
    },
    {
      "trigger": "NSStreamSocketSecurityLevelNegotiatedSSL (NSString*)",
      "contents": "NSStreamSocketSecurityLevelNegotiatedSSL"
    },
    {
      "trigger": "NSStreamSocketSecurityLevelNone (NSString*)",
      "contents": "NSStreamSocketSecurityLevelNone"
    },
    {
      "trigger": "NSStreamSocketSecurityLevelSSLv2 (NSString*)",
      "contents": "NSStreamSocketSecurityLevelSSLv2"
    },
    {
      "trigger": "NSStreamSocketSecurityLevelSSLv3 (NSString*)",
      "contents": "NSStreamSocketSecurityLevelSSLv3"
    },
    {
      "trigger": "NSStreamSocketSecurityLevelTLSv1 (NSString*)",
      "contents": "NSStreamSocketSecurityLevelTLSv1"
    },
    {
      "trigger": "NSStreamStatusAtEnd (5)",
      "contents": "NSStreamStatusAtEnd"
    },
    {
      "trigger": "NSStreamStatusClosed (6)",
      "contents": "NSStreamStatusClosed"
    },
    {
      "trigger": "NSStreamStatusError (7)",
      "contents": "NSStreamStatusError"
    },
    {
      "trigger": "NSStreamStatusNotOpen (0)",
      "contents": "NSStreamStatusNotOpen"
    },
    {
      "trigger": "NSStreamStatusOpen (2)",
      "contents": "NSStreamStatusOpen"
    },
    {
      "trigger": "NSStreamStatusOpening (1)",
      "contents": "NSStreamStatusOpening"
    },
    {
      "trigger": "NSStreamStatusReading (3)",
      "contents": "NSStreamStatusReading"
    },
    {
      "trigger": "NSStreamStatusWriting (4)",
      "contents": "NSStreamStatusWriting"
    },
    {
      "trigger": "NSString.localizedNameOfStringEncoding:",
      "contents": "NSString.localizedNameOfStringEncoding(${1:NSStringEncoding encoding})"
    },
    {
      "trigger": "NSString.localizedStringWithFormat:",
      "contents": "NSString.localizedStringWithFormat(${1:NSString* format})"
    },
    {
      "trigger": "NSString.pathWithComponents:",
      "contents": "NSString.pathWithComponents(${1:NSArray* components})"
    },
    {
      "trigger": "NSString.stringWithCString:",
      "contents": "NSString.stringWithCString(${1:char* bytes})"
    },
    {
      "trigger": "NSString.stringWithCString:encoding:",
      "contents": "NSString.stringWithCString(${1:char* cString}, encoding:${2:NSStringEncoding enc})"
    },
    {
      "trigger": "NSString.stringWithCString:length:",
      "contents": "NSString.stringWithCString(${1:char* bytes}, length:${2:NSUInteger length})"
    },
    {
      "trigger": "NSString.stringWithCharacters:length:",
      "contents": "NSString.stringWithCharacters(${1:unichar* characters}, length:${2:NSUInteger length})"
    },
    {
      "trigger": "NSString.stringWithContentsOfFile:",
      "contents": "NSString.stringWithContentsOfFile(${1:NSString* path})"
    },
    {
      "trigger": "NSString.stringWithContentsOfFile:encoding:error:",
      "contents": "NSString.stringWithContentsOfFile(${1:NSString* path}, encoding:${2:NSStringEncoding enc}, error:${3:NSError** error})"
    },
    {
      "trigger": "NSString.stringWithContentsOfFile:usedEncoding:error:",
      "contents": "NSString.stringWithContentsOfFile(${1:NSString* path}, usedEncoding:${2:NSStringEncoding* enc}, error:${3:NSError** error})"
    },
    {
      "trigger": "NSString.stringWithContentsOfURL:",
      "contents": "NSString.stringWithContentsOfURL(${1:NSURL* url})"
    },
    {
      "trigger": "NSString.stringWithContentsOfURL:encoding:error:",
      "contents": "NSString.stringWithContentsOfURL(${1:NSURL* url}, encoding:${2:NSStringEncoding enc}, error:${3:NSError** error})"
    },
    {
      "trigger": "NSString.stringWithContentsOfURL:usedEncoding:error:",
      "contents": "NSString.stringWithContentsOfURL(${1:NSURL* url}, usedEncoding:${2:NSStringEncoding* enc}, error:${3:NSError** error})"
    },
    {
      "trigger": "NSString.stringWithFormat:",
      "contents": "NSString.stringWithFormat(${1:NSString* format})"
    },
    {
      "trigger": "NSString.stringWithString:",
      "contents": "NSString.stringWithString(${1:NSString* string})"
    },
    {
      "trigger": "NSString.stringWithUTF8String:",
      "contents": "NSString.stringWithUTF8String(${1:char* nullTerminatedCString})"
    },
    {
      "trigger": "NSStringAttributeType (700)",
      "contents": "NSStringAttributeType"
    },
    {
      "trigger": "NSStringEncodingConversionAllowLossy (1)",
      "contents": "NSStringEncodingConversionAllowLossy"
    },
    {
      "trigger": "NSStringEncodingConversionExternalRepresentation (2)",
      "contents": "NSStringEncodingConversionExternalRepresentation"
    },
    {
      "trigger": "NSStringEncodingErrorKey (NSString*)",
      "contents": "NSStringEncodingErrorKey"
    },
    {
      "trigger": "NSStringEnumerationByComposedCharacterSequences (2)",
      "contents": "NSStringEnumerationByComposedCharacterSequences"
    },
    {
      "trigger": "NSStringEnumerationByLines (0)",
      "contents": "NSStringEnumerationByLines"
    },
    {
      "trigger": "NSStringEnumerationByParagraphs (1)",
      "contents": "NSStringEnumerationByParagraphs"
    },
    {
      "trigger": "NSStringEnumerationBySentences (4)",
      "contents": "NSStringEnumerationBySentences"
    },
    {
      "trigger": "NSStringEnumerationByWords (3)",
      "contents": "NSStringEnumerationByWords"
    },
    {
      "trigger": "NSStringEnumerationLocalized (1024)",
      "contents": "NSStringEnumerationLocalized"
    },
    {
      "trigger": "NSStringEnumerationReverse (256)",
      "contents": "NSStringEnumerationReverse"
    },
    {
      "trigger": "NSStringEnumerationSubstringNotRequired (512)",
      "contents": "NSStringEnumerationSubstringNotRequired"
    },
    {
      "trigger": "NSStringFromCGAffineTransform",
      "contents": "NSStringFromCGAffineTransform(${1:CGAffineTransform transform})"
    },
    {
      "trigger": "NSStringFromCGPoint",
      "contents": "NSStringFromCGPoint(${1:CGPoint point})"
    },
    {
      "trigger": "NSStringFromCGRect",
      "contents": "NSStringFromCGRect(${1:CGRect rect})"
    },
    {
      "trigger": "NSStringFromCGSize",
      "contents": "NSStringFromCGSize(${1:CGSize size})"
    },
    {
      "trigger": "NSStringFromClass",
      "contents": "NSStringFromClass(${1:Class aClass})"
    },
    {
      "trigger": "NSStringFromGLKMatrix2",
      "contents": "NSStringFromGLKMatrix2(${1:GLKMatrix2 matrix})"
    },
    {
      "trigger": "NSStringFromGLKMatrix3",
      "contents": "NSStringFromGLKMatrix3(${1:GLKMatrix3 matrix})"
    },
    {
      "trigger": "NSStringFromGLKMatrix4",
      "contents": "NSStringFromGLKMatrix4(${1:GLKMatrix4 matrix})"
    },
    {
      "trigger": "NSStringFromGLKQuaternion",
      "contents": "NSStringFromGLKQuaternion(${1:GLKQuaternion quaternion})"
    },
    {
      "trigger": "NSStringFromGLKVector2",
      "contents": "NSStringFromGLKVector2(${1:GLKVector2 vector})"
    },
    {
      "trigger": "NSStringFromGLKVector3",
      "contents": "NSStringFromGLKVector3(${1:GLKVector3 vector})"
    },
    {
      "trigger": "NSStringFromGLKVector4",
      "contents": "NSStringFromGLKVector4(${1:GLKVector4 vector})"
    },
    {
      "trigger": "NSStringFromProtocol",
      "contents": "NSStringFromProtocol(${1:Protocol* proto})"
    },
    {
      "trigger": "NSStringFromRange",
      "contents": "NSStringFromRange(${1:NSRange range})"
    },
    {
      "trigger": "NSStringFromSelector",
      "contents": "NSStringFromSelector(${1:SEL aSelector})"
    },
    {
      "trigger": "NSStringFromUIEdgeInsets",
      "contents": "NSStringFromUIEdgeInsets(${1:UIEdgeInsets insets})"
    },
    {
      "trigger": "NSStringFromUIOffset",
      "contents": "NSStringFromUIOffset(${1:UIOffset offset})"
    },
    {
      "trigger": "NSSubqueryExpressionType (13)",
      "contents": "NSSubqueryExpressionType"
    },
    {
      "trigger": "NSSumKeyValueOperator (NSString*)",
      "contents": "NSSumKeyValueOperator"
    },
    {
      "trigger": "NSSunOSOperatingSystem (6)",
      "contents": "NSSunOSOperatingSystem"
    },
    {
      "trigger": "NSSwapBigDoubleToHost",
      "contents": "NSSwapBigDoubleToHost(${1:NSSwappedDouble x})"
    },
    {
      "trigger": "NSSwapBigFloatToHost",
      "contents": "NSSwapBigFloatToHost(${1:NSSwappedFloat x})"
    },
    {
      "trigger": "NSSwapBigIntToHost",
      "contents": "NSSwapBigIntToHost(${1:unsigned int x})"
    },
    {
      "trigger": "NSSwapBigLongLongToHost",
      "contents": "NSSwapBigLongLongToHost(${1:unsigned long long x})"
    },
    {
      "trigger": "NSSwapBigLongToHost",
      "contents": "NSSwapBigLongToHost(${1:unsigned long x})"
    },
    {
      "trigger": "NSSwapBigShortToHost",
      "contents": "NSSwapBigShortToHost(${1:unsigned short x})"
    },
    {
      "trigger": "NSSwapDouble",
      "contents": "NSSwapDouble(${1:NSSwappedDouble x})"
    },
    {
      "trigger": "NSSwapFloat",
      "contents": "NSSwapFloat(${1:NSSwappedFloat x})"
    },
    {
      "trigger": "NSSwapHostDoubleToBig",
      "contents": "NSSwapHostDoubleToBig(${1:double x})"
    },
    {
      "trigger": "NSSwapHostDoubleToLittle",
      "contents": "NSSwapHostDoubleToLittle(${1:double x})"
    },
    {
      "trigger": "NSSwapHostFloatToBig",
      "contents": "NSSwapHostFloatToBig(${1:float x})"
    },
    {
      "trigger": "NSSwapHostFloatToLittle",
      "contents": "NSSwapHostFloatToLittle(${1:float x})"
    },
    {
      "trigger": "NSSwapHostIntToBig",
      "contents": "NSSwapHostIntToBig(${1:unsigned int x})"
    },
    {
      "trigger": "NSSwapHostIntToLittle",
      "contents": "NSSwapHostIntToLittle(${1:unsigned int x})"
    },
    {
      "trigger": "NSSwapHostLongLongToBig",
      "contents": "NSSwapHostLongLongToBig(${1:unsigned long long x})"
    },
    {
      "trigger": "NSSwapHostLongLongToLittle",
      "contents": "NSSwapHostLongLongToLittle(${1:unsigned long long x})"
    },
    {
      "trigger": "NSSwapHostLongToBig",
      "contents": "NSSwapHostLongToBig(${1:unsigned long x})"
    },
    {
      "trigger": "NSSwapHostLongToLittle",
      "contents": "NSSwapHostLongToLittle(${1:unsigned long x})"
    },
    {
      "trigger": "NSSwapHostShortToBig",
      "contents": "NSSwapHostShortToBig(${1:unsigned short x})"
    },
    {
      "trigger": "NSSwapHostShortToLittle",
      "contents": "NSSwapHostShortToLittle(${1:unsigned short x})"
    },
    {
      "trigger": "NSSwapInt",
      "contents": "NSSwapInt(${1:unsigned int inv})"
    },
    {
      "trigger": "NSSwapLittleDoubleToHost",
      "contents": "NSSwapLittleDoubleToHost(${1:NSSwappedDouble x})"
    },
    {
      "trigger": "NSSwapLittleFloatToHost",
      "contents": "NSSwapLittleFloatToHost(${1:NSSwappedFloat x})"
    },
    {
      "trigger": "NSSwapLittleIntToHost",
      "contents": "NSSwapLittleIntToHost(${1:unsigned int x})"
    },
    {
      "trigger": "NSSwapLittleLongLongToHost",
      "contents": "NSSwapLittleLongLongToHost(${1:unsigned long long x})"
    },
    {
      "trigger": "NSSwapLittleLongToHost",
      "contents": "NSSwapLittleLongToHost(${1:unsigned long x})"
    },
    {
      "trigger": "NSSwapLittleShortToHost",
      "contents": "NSSwapLittleShortToHost(${1:unsigned short x})"
    },
    {
      "trigger": "NSSwapLong",
      "contents": "NSSwapLong(${1:unsigned long inv})"
    },
    {
      "trigger": "NSSwapLongLong",
      "contents": "NSSwapLongLong(${1:unsigned long long inv})"
    },
    {
      "trigger": "NSSwapShort",
      "contents": "NSSwapShort(${1:unsigned short inv})"
    },
    {
      "trigger": "NSSymbolStringEncoding (6)",
      "contents": "NSSymbolStringEncoding"
    },
    {
      "trigger": "NSSystemClockDidChangeNotification (NSString*)",
      "contents": "NSSystemClockDidChangeNotification"
    },
    {
      "trigger": "NSSystemDomainMask (8)",
      "contents": "NSSystemDomainMask"
    },
    {
      "trigger": "NSSystemTimeZoneDidChangeNotification (NSString*)",
      "contents": "NSSystemTimeZoneDidChangeNotification"
    },
    {
      "trigger": "NSTextCheckingAirlineKey (NSString*)",
      "contents": "NSTextCheckingAirlineKey"
    },
    {
      "trigger": "NSTextCheckingAllCustomTypes (18446744069414584320)",
      "contents": "NSTextCheckingAllCustomTypes"
    },
    {
      "trigger": "NSTextCheckingAllSystemTypes (4294967295)",
      "contents": "NSTextCheckingAllSystemTypes"
    },
    {
      "trigger": "NSTextCheckingAllTypes (18446744073709551615)",
      "contents": "NSTextCheckingAllTypes"
    },
    {
      "trigger": "NSTextCheckingCityKey (NSString*)",
      "contents": "NSTextCheckingCityKey"
    },
    {
      "trigger": "NSTextCheckingCountryKey (NSString*)",
      "contents": "NSTextCheckingCountryKey"
    },
    {
      "trigger": "NSTextCheckingFlightKey (NSString*)",
      "contents": "NSTextCheckingFlightKey"
    },
    {
      "trigger": "NSTextCheckingJobTitleKey (NSString*)",
      "contents": "NSTextCheckingJobTitleKey"
    },
    {
      "trigger": "NSTextCheckingNameKey (NSString*)",
      "contents": "NSTextCheckingNameKey"
    },
    {
      "trigger": "NSTextCheckingOrganizationKey (NSString*)",
      "contents": "NSTextCheckingOrganizationKey"
    },
    {
      "trigger": "NSTextCheckingPhoneKey (NSString*)",
      "contents": "NSTextCheckingPhoneKey"
    },
    {
      "trigger": "NSTextCheckingResult.addressCheckingResultWithRange:components:",
      "contents": "NSTextCheckingResult.addressCheckingResultWithRange(${1:NSRange range}, components:${2:NSDictionary* components})"
    },
    {
      "trigger": "NSTextCheckingResult.correctionCheckingResultWithRange:replacementString:",
      "contents": "NSTextCheckingResult.correctionCheckingResultWithRange(${1:NSRange range}, replacementString:${2:NSString* replacementString})"
    },
    {
      "trigger": "NSTextCheckingResult.dashCheckingResultWithRange:replacementString:",
      "contents": "NSTextCheckingResult.dashCheckingResultWithRange(${1:NSRange range}, replacementString:${2:NSString* replacementString})"
    },
    {
      "trigger": "NSTextCheckingResult.dateCheckingResultWithRange:date:",
      "contents": "NSTextCheckingResult.dateCheckingResultWithRange(${1:NSRange range}, date:${2:NSDate* date})"
    },
    {
      "trigger": "NSTextCheckingResult.dateCheckingResultWithRange:date:timeZone:duration:",
      "contents": "NSTextCheckingResult.dateCheckingResultWithRange(${1:NSRange range}, date:${2:NSDate* date}, timeZone:${3:NSTimeZone* timeZone}, duration:${4:NSTimeInterval duration})"
    },
    {
      "trigger": "NSTextCheckingResult.grammarCheckingResultWithRange:details:",
      "contents": "NSTextCheckingResult.grammarCheckingResultWithRange(${1:NSRange range}, details:${2:NSArray* details})"
    },
    {
      "trigger": "NSTextCheckingResult.linkCheckingResultWithRange:URL:",
      "contents": "NSTextCheckingResult.linkCheckingResultWithRange(${1:NSRange range}, URL:${2:NSURL* url})"
    },
    {
      "trigger": "NSTextCheckingResult.orthographyCheckingResultWithRange:orthography:",
      "contents": "NSTextCheckingResult.orthographyCheckingResultWithRange(${1:NSRange range}, orthography:${2:NSOrthography* orthography})"
    },
    {
      "trigger": "NSTextCheckingResult.phoneNumberCheckingResultWithRange:phoneNumber:",
      "contents": "NSTextCheckingResult.phoneNumberCheckingResultWithRange(${1:NSRange range}, phoneNumber:${2:NSString* phoneNumber})"
    },
    {
      "trigger": "NSTextCheckingResult.quoteCheckingResultWithRange:replacementString:",
      "contents": "NSTextCheckingResult.quoteCheckingResultWithRange(${1:NSRange range}, replacementString:${2:NSString* replacementString})"
    },
    {
      "trigger": "NSTextCheckingResult.regularExpressionCheckingResultWithRanges:count:regularExpression:",
      "contents": "NSTextCheckingResult.regularExpressionCheckingResultWithRanges(${1:NSRangePointer ranges}, count:${2:NSUInteger count}, regularExpression:${3:NSRegularExpression* regularExpression})"
    },
    {
      "trigger": "NSTextCheckingResult.replacementCheckingResultWithRange:replacementString:",
      "contents": "NSTextCheckingResult.replacementCheckingResultWithRange(${1:NSRange range}, replacementString:${2:NSString* replacementString})"
    },
    {
      "trigger": "NSTextCheckingResult.spellCheckingResultWithRange:",
      "contents": "NSTextCheckingResult.spellCheckingResultWithRange(${1:NSRange range})"
    },
    {
      "trigger": "NSTextCheckingResult.transitInformationCheckingResultWithRange:components:",
      "contents": "NSTextCheckingResult.transitInformationCheckingResultWithRange(${1:NSRange range}, components:${2:NSDictionary* components})"
    },
    {
      "trigger": "NSTextCheckingStateKey (NSString*)",
      "contents": "NSTextCheckingStateKey"
    },
    {
      "trigger": "NSTextCheckingStreetKey (NSString*)",
      "contents": "NSTextCheckingStreetKey"
    },
    {
      "trigger": "NSTextCheckingTypeAddress (16)",
      "contents": "NSTextCheckingTypeAddress"
    },
    {
      "trigger": "NSTextCheckingTypeCorrection (512)",
      "contents": "NSTextCheckingTypeCorrection"
    },
    {
      "trigger": "NSTextCheckingTypeDash (128)",
      "contents": "NSTextCheckingTypeDash"
    },
    {
      "trigger": "NSTextCheckingTypeDate (8)",
      "contents": "NSTextCheckingTypeDate"
    },
    {
      "trigger": "NSTextCheckingTypeGrammar (4)",
      "contents": "NSTextCheckingTypeGrammar"
    },
    {
      "trigger": "NSTextCheckingTypeLink (32)",
      "contents": "NSTextCheckingTypeLink"
    },
    {
      "trigger": "NSTextCheckingTypeOrthography (1)",
      "contents": "NSTextCheckingTypeOrthography"
    },
    {
      "trigger": "NSTextCheckingTypePhoneNumber (2048)",
      "contents": "NSTextCheckingTypePhoneNumber"
    },
    {
      "trigger": "NSTextCheckingTypeQuote (64)",
      "contents": "NSTextCheckingTypeQuote"
    },
    {
      "trigger": "NSTextCheckingTypeRegularExpression (1024)",
      "contents": "NSTextCheckingTypeRegularExpression"
    },
    {
      "trigger": "NSTextCheckingTypeReplacement (256)",
      "contents": "NSTextCheckingTypeReplacement"
    },
    {
      "trigger": "NSTextCheckingTypeSpelling (2)",
      "contents": "NSTextCheckingTypeSpelling"
    },
    {
      "trigger": "NSTextCheckingTypeTransitInformation (4096)",
      "contents": "NSTextCheckingTypeTransitInformation"
    },
    {
      "trigger": "NSTextCheckingZIPKey (NSString*)",
      "contents": "NSTextCheckingZIPKey"
    },
    {
      "trigger": "NSThread.detachNewThreadSelector:toTarget:withObject:",
      "contents": "NSThread.detachNewThreadSelector(${1:SEL selector}, toTarget:${2:id target}, withObject:${3:id argument})"
    },
    {
      "trigger": "NSThread.setThreadPriority:",
      "contents": "NSThread.setThreadPriority(${1:double p})"
    },
    {
      "trigger": "NSThread.sleepForTimeInterval:",
      "contents": "NSThread.sleepForTimeInterval(${1:NSTimeInterval ti})"
    },
    {
      "trigger": "NSThread.sleepUntilDate:",
      "contents": "NSThread.sleepUntilDate(${1:NSDate* date})"
    },
    {
      "trigger": "NSThreadWillExitNotification (NSString*)",
      "contents": "NSThreadWillExitNotification"
    },
    {
      "trigger": "NSTimeIntervalSince1970 (978307200.0)",
      "contents": "NSTimeIntervalSince1970"
    },
    {
      "trigger": "NSTimeZone.setAbbreviationDictionary:",
      "contents": "NSTimeZone.setAbbreviationDictionary(${1:NSDictionary* dict})"
    },
    {
      "trigger": "NSTimeZone.setDefaultTimeZone:",
      "contents": "NSTimeZone.setDefaultTimeZone(${1:NSTimeZone* aTimeZone})"
    },
    {
      "trigger": "NSTimeZone.timeZoneForSecondsFromGMT:",
      "contents": "NSTimeZone.timeZoneForSecondsFromGMT(${1:NSInteger seconds})"
    },
    {
      "trigger": "NSTimeZone.timeZoneWithAbbreviation:",
      "contents": "NSTimeZone.timeZoneWithAbbreviation(${1:NSString* abbreviation})"
    },
    {
      "trigger": "NSTimeZone.timeZoneWithName:",
      "contents": "NSTimeZone.timeZoneWithName(${1:NSString* tzName})"
    },
    {
      "trigger": "NSTimeZone.timeZoneWithName:data:",
      "contents": "NSTimeZone.timeZoneWithName(${1:NSString* tzName}, data:${2:NSData* aData})"
    },
    {
      "trigger": "NSTimeZoneCalendarUnit (2097152)",
      "contents": "NSTimeZoneCalendarUnit"
    },
    {
      "trigger": "NSTimeZoneNameStyleDaylightSaving (2)",
      "contents": "NSTimeZoneNameStyleDaylightSaving"
    },
    {
      "trigger": "NSTimeZoneNameStyleGeneric (4)",
      "contents": "NSTimeZoneNameStyleGeneric"
    },
    {
      "trigger": "NSTimeZoneNameStyleShortDaylightSaving (3)",
      "contents": "NSTimeZoneNameStyleShortDaylightSaving"
    },
    {
      "trigger": "NSTimeZoneNameStyleShortGeneric (5)",
      "contents": "NSTimeZoneNameStyleShortGeneric"
    },
    {
      "trigger": "NSTimeZoneNameStyleShortStandard (1)",
      "contents": "NSTimeZoneNameStyleShortStandard"
    },
    {
      "trigger": "NSTimeZoneNameStyleStandard (0)",
      "contents": "NSTimeZoneNameStyleStandard"
    },
    {
      "trigger": "NSTimer.scheduledTimerWithTimeInterval:invocation:repeats:",
      "contents": "NSTimer.scheduledTimerWithTimeInterval(${1:NSTimeInterval ti}, invocation:${2:NSInvocation* invocation}, repeats:${3:BOOL yesOrNo})"
    },
    {
      "trigger": "NSTimer.scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:",
      "contents": "NSTimer.scheduledTimerWithTimeInterval(${1:NSTimeInterval ti}, target:${2:id aTarget}, selector:${3:SEL aSelector}, userInfo:${4:id userInfo}, repeats:${5:BOOL yesOrNo})"
    },
    {
      "trigger": "NSTimer.timerWithTimeInterval:invocation:repeats:",
      "contents": "NSTimer.timerWithTimeInterval(${1:NSTimeInterval ti}, invocation:${2:NSInvocation* invocation}, repeats:${3:BOOL yesOrNo})"
    },
    {
      "trigger": "NSTimer.timerWithTimeInterval:target:selector:userInfo:repeats:",
      "contents": "NSTimer.timerWithTimeInterval(${1:NSTimeInterval ti}, target:${2:id aTarget}, selector:${3:SEL aSelector}, userInfo:${4:id userInfo}, repeats:${5:BOOL yesOrNo})"
    },
    {
      "trigger": "NSTransformEntityMappingType (5)",
      "contents": "NSTransformEntityMappingType"
    },
    {
      "trigger": "NSTransformableAttributeType (1800)",
      "contents": "NSTransformableAttributeType"
    },
    {
      "trigger": "NSUIntegerMax (4294967295)",
      "contents": "NSUIntegerMax"
    },
    {
      "trigger": "NSURL.URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:",
      "contents": "NSURL.URLByResolvingBookmarkData(${1:NSData* bookmarkData}, options:${2:NSURLBookmarkResolutionOptions options}, relativeToURL:${3:NSURL* relativeURL}, bookmarkDataIsStale:${4:BOOL* isStale}, error:${5:NSError** error})"
    },
    {
      "trigger": "NSURL.URLWithString:",
      "contents": "NSURL.URLWithString(${1:NSString* URLString})"
    },
    {
      "trigger": "NSURL.URLWithString:relativeToURL:",
      "contents": "NSURL.URLWithString(${1:NSString* URLString}, relativeToURL:${2:NSURL* baseURL})"
    },
    {
      "trigger": "NSURL.bookmarkDataWithContentsOfURL:error:",
      "contents": "NSURL.bookmarkDataWithContentsOfURL(${1:NSURL* bookmarkFileURL}, error:${2:NSError** error})"
    },
    {
      "trigger": "NSURL.fileURLWithPath:",
      "contents": "NSURL.fileURLWithPath(${1:NSString* path})"
    },
    {
      "trigger": "NSURL.fileURLWithPath:isDirectory:",
      "contents": "NSURL.fileURLWithPath(${1:NSString* path}, isDirectory:${2:BOOL isDir})"
    },
    {
      "trigger": "NSURL.fileURLWithPathComponents:",
      "contents": "NSURL.fileURLWithPathComponents(${1:NSArray* components})"
    },
    {
      "trigger": "NSURL.resourceValuesForKeys:fromBookmarkData:",
      "contents": "NSURL.resourceValuesForKeys(${1:NSArray* keys}, fromBookmarkData:${2:NSData* bookmarkData})"
    },
    {
      "trigger": "NSURL.writeBookmarkData:toURL:options:error:",
      "contents": "NSURL.writeBookmarkData(${1:NSData* bookmarkData}, toURL:${2:NSURL* bookmarkFileURL}, options:${3:NSURLBookmarkFileCreationOptions options}, error:${4:NSError** error})"
    },
    {
      "trigger": "NSURLAttributeModificationDateKey (NSString*)",
      "contents": "NSURLAttributeModificationDateKey"
    },
    {
      "trigger": "NSURLAuthenticationMethodClientCertificate (NSString*)",
      "contents": "NSURLAuthenticationMethodClientCertificate"
    },
    {
      "trigger": "NSURLAuthenticationMethodDefault (NSString*)",
      "contents": "NSURLAuthenticationMethodDefault"
    },
    {
      "trigger": "NSURLAuthenticationMethodHTMLForm (NSString*)",
      "contents": "NSURLAuthenticationMethodHTMLForm"
    },
    {
      "trigger": "NSURLAuthenticationMethodHTTPBasic (NSString*)",
      "contents": "NSURLAuthenticationMethodHTTPBasic"
    },
    {
      "trigger": "NSURLAuthenticationMethodHTTPDigest (NSString*)",
      "contents": "NSURLAuthenticationMethodHTTPDigest"
    },
    {
      "trigger": "NSURLAuthenticationMethodNTLM (NSString*)",
      "contents": "NSURLAuthenticationMethodNTLM"
    },
    {
      "trigger": "NSURLAuthenticationMethodNegotiate (NSString*)",
      "contents": "NSURLAuthenticationMethodNegotiate"
    },
    {
      "trigger": "NSURLAuthenticationMethodServerTrust (NSString*)",
      "contents": "NSURLAuthenticationMethodServerTrust"
    },
    {
      "trigger": "NSURLBookmarkCreationMinimalBookmark (512)",
      "contents": "NSURLBookmarkCreationMinimalBookmark"
    },
    {
      "trigger": "NSURLBookmarkCreationPreferFileIDResolution (256)",
      "contents": "NSURLBookmarkCreationPreferFileIDResolution"
    },
    {
      "trigger": "NSURLBookmarkCreationSuitableForBookmarkFile (1024)",
      "contents": "NSURLBookmarkCreationSuitableForBookmarkFile"
    },
    {
      "trigger": "NSURLBookmarkResolutionWithoutMounting (512)",
      "contents": "NSURLBookmarkResolutionWithoutMounting"
    },
    {
      "trigger": "NSURLBookmarkResolutionWithoutUI (256)",
      "contents": "NSURLBookmarkResolutionWithoutUI"
    },
    {
      "trigger": "NSURLCache.setSharedURLCache:",
      "contents": "NSURLCache.setSharedURLCache(${1:NSURLCache* cache})"
    },
    {
      "trigger": "NSURLCacheStorageAllowed (0)",
      "contents": "NSURLCacheStorageAllowed"
    },
    {
      "trigger": "NSURLCacheStorageAllowedInMemoryOnly (1)",
      "contents": "NSURLCacheStorageAllowedInMemoryOnly"
    },
    {
      "trigger": "NSURLCacheStorageNotAllowed (2)",
      "contents": "NSURLCacheStorageNotAllowed"
    },
    {
      "trigger": "NSURLConnection.canHandleRequest:",
      "contents": "NSURLConnection.canHandleRequest(${1:NSURLRequest* request})"
    },
    {
      "trigger": "NSURLConnection.connectionWithRequest:delegate:",
      "contents": "NSURLConnection.connectionWithRequest(${1:NSURLRequest* request}, delegate:${2:id delegate})"
    },
    {
      "trigger": "NSURLConnection.sendAsynchronousRequest:queue:completionHandler:",
      "contents": "NSURLConnection.sendAsynchronousRequest(${1:NSURLRequest* request}, queue:${2:NSOperationQueue* queue}, completionHandler:${3:void (^)(NSURLResponse *, NSData *, NSError *) handler})"
    },
    {
      "trigger": "NSURLConnection.sendSynchronousRequest:returningResponse:error:",
      "contents": "NSURLConnection.sendSynchronousRequest(${1:NSURLRequest* request}, returningResponse:${2:NSURLResponse** response}, error:${3:NSError** error})"
    },
    {
      "trigger": "NSURLContentAccessDateKey (NSString*)",
      "contents": "NSURLContentAccessDateKey"
    },
    {
      "trigger": "NSURLContentModificationDateKey (NSString*)",
      "contents": "NSURLContentModificationDateKey"
    },
    {
      "trigger": "NSURLCreationDateKey (NSString*)",
      "contents": "NSURLCreationDateKey"
    },
    {
      "trigger": "NSURLCredential.credentialForTrust:",
      "contents": "NSURLCredential.credentialForTrust(${1:SecTrustRef trust})"
    },
    {
      "trigger": "NSURLCredential.credentialWithIdentity:certificates:persistence:",
      "contents": "NSURLCredential.credentialWithIdentity(${1:SecIdentityRef identity}, certificates:${2:NSArray* certArray}, persistence:${3:NSURLCredentialPersistence persistence})"
    },
    {
      "trigger": "NSURLCredential.credentialWithUser:password:persistence:",
      "contents": "NSURLCredential.credentialWithUser(${1:NSString* user}, password:${2:NSString* password}, persistence:${3:NSURLCredentialPersistence persistence})"
    },
    {
      "trigger": "NSURLCredentialPersistenceForSession (1)",
      "contents": "NSURLCredentialPersistenceForSession"
    },
    {
      "trigger": "NSURLCredentialPersistenceNone (0)",
      "contents": "NSURLCredentialPersistenceNone"
    },
    {
      "trigger": "NSURLCredentialPersistencePermanent (2)",
      "contents": "NSURLCredentialPersistencePermanent"
    },
    {
      "trigger": "NSURLCredentialStorageChangedNotification (NSString*)",
      "contents": "NSURLCredentialStorageChangedNotification"
    },
    {
      "trigger": "NSURLCustomIconKey (NSString*)",
      "contents": "NSURLCustomIconKey"
    },
    {
      "trigger": "NSURLEffectiveIconKey (NSString*)",
      "contents": "NSURLEffectiveIconKey"
    },
    {
      "trigger": "NSURLErrorBadServerResponse (-1011)",
      "contents": "NSURLErrorBadServerResponse"
    },
    {
      "trigger": "NSURLErrorBadURL (-1000)",
      "contents": "NSURLErrorBadURL"
    },
    {
      "trigger": "NSURLErrorCallIsActive (-1019)",
      "contents": "NSURLErrorCallIsActive"
    },
    {
      "trigger": "NSURLErrorCancelled (-999)",
      "contents": "NSURLErrorCancelled"
    },
    {
      "trigger": "NSURLErrorCannotCloseFile (-3002)",
      "contents": "NSURLErrorCannotCloseFile"
    },
    {
      "trigger": "NSURLErrorCannotConnectToHost (-1004)",
      "contents": "NSURLErrorCannotConnectToHost"
    },
    {
      "trigger": "NSURLErrorCannotCreateFile (-3000)",
      "contents": "NSURLErrorCannotCreateFile"
    },
    {
      "trigger": "NSURLErrorCannotDecodeContentData (-1016)",
      "contents": "NSURLErrorCannotDecodeContentData"
    },
    {
      "trigger": "NSURLErrorCannotDecodeRawData (-1015)",
      "contents": "NSURLErrorCannotDecodeRawData"
    },
    {
      "trigger": "NSURLErrorCannotFindHost (-1003)",
      "contents": "NSURLErrorCannotFindHost"
    },
    {
      "trigger": "NSURLErrorCannotLoadFromNetwork (-2000)",
      "contents": "NSURLErrorCannotLoadFromNetwork"
    },
    {
      "trigger": "NSURLErrorCannotMoveFile (-3005)",
      "contents": "NSURLErrorCannotMoveFile"
    },
    {
      "trigger": "NSURLErrorCannotOpenFile (-3001)",
      "contents": "NSURLErrorCannotOpenFile"
    },
    {
      "trigger": "NSURLErrorCannotParseResponse (-1017)",
      "contents": "NSURLErrorCannotParseResponse"
    },
    {
      "trigger": "NSURLErrorCannotRemoveFile (-3004)",
      "contents": "NSURLErrorCannotRemoveFile"
    },
    {
      "trigger": "NSURLErrorCannotWriteToFile (-3003)",
      "contents": "NSURLErrorCannotWriteToFile"
    },
    {
      "trigger": "NSURLErrorClientCertificateRejected (-1205)",
      "contents": "NSURLErrorClientCertificateRejected"
    },
    {
      "trigger": "NSURLErrorClientCertificateRequired (-1206)",
      "contents": "NSURLErrorClientCertificateRequired"
    },
    {
      "trigger": "NSURLErrorDNSLookupFailed (-1006)",
      "contents": "NSURLErrorDNSLookupFailed"
    },
    {
      "trigger": "NSURLErrorDataLengthExceedsMaximum (-1103)",
      "contents": "NSURLErrorDataLengthExceedsMaximum"
    },
    {
      "trigger": "NSURLErrorDataNotAllowed (-1020)",
      "contents": "NSURLErrorDataNotAllowed"
    },
    {
      "trigger": "NSURLErrorDomain (NSString*)",
      "contents": "NSURLErrorDomain"
    },
    {
      "trigger": "NSURLErrorDownloadDecodingFailedMidStream (-3006)",
      "contents": "NSURLErrorDownloadDecodingFailedMidStream"
    },
    {
      "trigger": "NSURLErrorDownloadDecodingFailedToComplete (-3007)",
      "contents": "NSURLErrorDownloadDecodingFailedToComplete"
    },
    {
      "trigger": "NSURLErrorFailingURLErrorKey (NSString*)",
      "contents": "NSURLErrorFailingURLErrorKey"
    },
    {
      "trigger": "NSURLErrorFailingURLPeerTrustErrorKey (NSString*)",
      "contents": "NSURLErrorFailingURLPeerTrustErrorKey"
    },
    {
      "trigger": "NSURLErrorFailingURLStringErrorKey (NSString*)",
      "contents": "NSURLErrorFailingURLStringErrorKey"
    },
    {
      "trigger": "NSURLErrorFileDoesNotExist (-1100)",
      "contents": "NSURLErrorFileDoesNotExist"
    },
    {
      "trigger": "NSURLErrorFileIsDirectory (-1101)",
      "contents": "NSURLErrorFileIsDirectory"
    },
    {
      "trigger": "NSURLErrorHTTPTooManyRedirects (-1007)",
      "contents": "NSURLErrorHTTPTooManyRedirects"
    },
    {
      "trigger": "NSURLErrorInternationalRoamingOff (-1018)",
      "contents": "NSURLErrorInternationalRoamingOff"
    },
    {
      "trigger": "NSURLErrorKey (NSString*)",
      "contents": "NSURLErrorKey"
    },
    {
      "trigger": "NSURLErrorNetworkConnectionLost (-1005)",
      "contents": "NSURLErrorNetworkConnectionLost"
    },
    {
      "trigger": "NSURLErrorNoPermissionsToReadFile (-1102)",
      "contents": "NSURLErrorNoPermissionsToReadFile"
    },
    {
      "trigger": "NSURLErrorNotConnectedToInternet (-1009)",
      "contents": "NSURLErrorNotConnectedToInternet"
    },
    {
      "trigger": "NSURLErrorRedirectToNonExistentLocation (-1010)",
      "contents": "NSURLErrorRedirectToNonExistentLocation"
    },
    {
      "trigger": "NSURLErrorRequestBodyStreamExhausted (-1021)",
      "contents": "NSURLErrorRequestBodyStreamExhausted"
    },
    {
      "trigger": "NSURLErrorResourceUnavailable (-1008)",
      "contents": "NSURLErrorResourceUnavailable"
    },
    {
      "trigger": "NSURLErrorSecureConnectionFailed (-1200)",
      "contents": "NSURLErrorSecureConnectionFailed"
    },
    {
      "trigger": "NSURLErrorServerCertificateHasBadDate (-1201)",
      "contents": "NSURLErrorServerCertificateHasBadDate"
    },
    {
      "trigger": "NSURLErrorServerCertificateHasUnknownRoot (-1203)",
      "contents": "NSURLErrorServerCertificateHasUnknownRoot"
    },
    {
      "trigger": "NSURLErrorServerCertificateNotYetValid (-1204)",
      "contents": "NSURLErrorServerCertificateNotYetValid"
    },
    {
      "trigger": "NSURLErrorServerCertificateUntrusted (-1202)",
      "contents": "NSURLErrorServerCertificateUntrusted"
    },
    {
      "trigger": "NSURLErrorTimedOut (-1001)",
      "contents": "NSURLErrorTimedOut"
    },
    {
      "trigger": "NSURLErrorUnknown (-1)",
      "contents": "NSURLErrorUnknown"
    },
    {
      "trigger": "NSURLErrorUnsupportedURL (-1002)",
      "contents": "NSURLErrorUnsupportedURL"
    },
    {
      "trigger": "NSURLErrorUserAuthenticationRequired (-1013)",
      "contents": "NSURLErrorUserAuthenticationRequired"
    },
    {
      "trigger": "NSURLErrorUserCancelledAuthentication (-1012)",
      "contents": "NSURLErrorUserCancelledAuthentication"
    },
    {
      "trigger": "NSURLErrorZeroByteResource (-1014)",
      "contents": "NSURLErrorZeroByteResource"
    },
    {
      "trigger": "NSURLFileAllocatedSizeKey (NSString*)",
      "contents": "NSURLFileAllocatedSizeKey"
    },
    {
      "trigger": "NSURLFileResourceIdentifierKey (NSString*)",
      "contents": "NSURLFileResourceIdentifierKey"
    },
    {
      "trigger": "NSURLFileResourceTypeBlockSpecial (NSString*)",
      "contents": "NSURLFileResourceTypeBlockSpecial"
    },
    {
      "trigger": "NSURLFileResourceTypeCharacterSpecial (NSString*)",
      "contents": "NSURLFileResourceTypeCharacterSpecial"
    },
    {
      "trigger": "NSURLFileResourceTypeDirectory (NSString*)",
      "contents": "NSURLFileResourceTypeDirectory"
    },
    {
      "trigger": "NSURLFileResourceTypeKey (NSString*)",
      "contents": "NSURLFileResourceTypeKey"
    },
    {
      "trigger": "NSURLFileResourceTypeNamedPipe (NSString*)",
      "contents": "NSURLFileResourceTypeNamedPipe"
    },
    {
      "trigger": "NSURLFileResourceTypeRegular (NSString*)",
      "contents": "NSURLFileResourceTypeRegular"
    },
    {
      "trigger": "NSURLFileResourceTypeSocket (NSString*)",
      "contents": "NSURLFileResourceTypeSocket"
    },
    {
      "trigger": "NSURLFileResourceTypeSymbolicLink (NSString*)",
      "contents": "NSURLFileResourceTypeSymbolicLink"
    },
    {
      "trigger": "NSURLFileResourceTypeUnknown (NSString*)",
      "contents": "NSURLFileResourceTypeUnknown"
    },
    {
      "trigger": "NSURLFileScheme (NSString*)",
      "contents": "NSURLFileScheme"
    },
    {
      "trigger": "NSURLFileSecurityKey (NSString*)",
      "contents": "NSURLFileSecurityKey"
    },
    {
      "trigger": "NSURLFileSizeKey (NSString*)",
      "contents": "NSURLFileSizeKey"
    },
    {
      "trigger": "NSURLHasHiddenExtensionKey (NSString*)",
      "contents": "NSURLHasHiddenExtensionKey"
    },
    {
      "trigger": "NSURLIsAliasFileKey (NSString*)",
      "contents": "NSURLIsAliasFileKey"
    },
    {
      "trigger": "NSURLIsDirectoryKey (NSString*)",
      "contents": "NSURLIsDirectoryKey"
    },
    {
      "trigger": "NSURLIsExcludedFromBackupKey (NSString*)",
      "contents": "NSURLIsExcludedFromBackupKey"
    },
    {
      "trigger": "NSURLIsExecutableKey (NSString*)",
      "contents": "NSURLIsExecutableKey"
    },
    {
      "trigger": "NSURLIsHiddenKey (NSString*)",
      "contents": "NSURLIsHiddenKey"
    },
    {
      "trigger": "NSURLIsMountTriggerKey (NSString*)",
      "contents": "NSURLIsMountTriggerKey"
    },
    {
      "trigger": "NSURLIsPackageKey (NSString*)",
      "contents": "NSURLIsPackageKey"
    },
    {
      "trigger": "NSURLIsReadableKey (NSString*)",
      "contents": "NSURLIsReadableKey"
    },
    {
      "trigger": "NSURLIsRegularFileKey (NSString*)",
      "contents": "NSURLIsRegularFileKey"
    },
    {
      "trigger": "NSURLIsSymbolicLinkKey (NSString*)",
      "contents": "NSURLIsSymbolicLinkKey"
    },
    {
      "trigger": "NSURLIsSystemImmutableKey (NSString*)",
      "contents": "NSURLIsSystemImmutableKey"
    },
    {
      "trigger": "NSURLIsUbiquitousItemKey (NSString*)",
      "contents": "NSURLIsUbiquitousItemKey"
    },
    {
      "trigger": "NSURLIsUserImmutableKey (NSString*)",
      "contents": "NSURLIsUserImmutableKey"
    },
    {
      "trigger": "NSURLIsVolumeKey (NSString*)",
      "contents": "NSURLIsVolumeKey"
    },
    {
      "trigger": "NSURLIsWritableKey (NSString*)",
      "contents": "NSURLIsWritableKey"
    },
    {
      "trigger": "NSURLKeysOfUnsetValuesKey (NSString*)",
      "contents": "NSURLKeysOfUnsetValuesKey"
    },
    {
      "trigger": "NSURLLabelColorKey (NSString*)",
      "contents": "NSURLLabelColorKey"
    },
    {
      "trigger": "NSURLLabelNumberKey (NSString*)",
      "contents": "NSURLLabelNumberKey"
    },
    {
      "trigger": "NSURLLinkCountKey (NSString*)",
      "contents": "NSURLLinkCountKey"
    },
    {
      "trigger": "NSURLLocalizedLabelKey (NSString*)",
      "contents": "NSURLLocalizedLabelKey"
    },
    {
      "trigger": "NSURLLocalizedNameKey (NSString*)",
      "contents": "NSURLLocalizedNameKey"
    },
    {
      "trigger": "NSURLLocalizedTypeDescriptionKey (NSString*)",
      "contents": "NSURLLocalizedTypeDescriptionKey"
    },
    {
      "trigger": "NSURLNameKey (NSString*)",
      "contents": "NSURLNameKey"
    },
    {
      "trigger": "NSURLNetworkServiceTypeBackground (3)",
      "contents": "NSURLNetworkServiceTypeBackground"
    },
    {
      "trigger": "NSURLNetworkServiceTypeDefault (0)",
      "contents": "NSURLNetworkServiceTypeDefault"
    },
    {
      "trigger": "NSURLNetworkServiceTypeVideo (2)",
      "contents": "NSURLNetworkServiceTypeVideo"
    },
    {
      "trigger": "NSURLNetworkServiceTypeVoIP (1)",
      "contents": "NSURLNetworkServiceTypeVoIP"
    },
    {
      "trigger": "NSURLNetworkServiceTypeVoice (4)",
      "contents": "NSURLNetworkServiceTypeVoice"
    },
    {
      "trigger": "NSURLParentDirectoryURLKey (NSString*)",
      "contents": "NSURLParentDirectoryURLKey"
    },
    {
      "trigger": "NSURLPreferredIOBlockSizeKey (NSString*)",
      "contents": "NSURLPreferredIOBlockSizeKey"
    },
    {
      "trigger": "NSURLProtectionSpaceFTP (NSString*)",
      "contents": "NSURLProtectionSpaceFTP"
    },
    {
      "trigger": "NSURLProtectionSpaceFTPProxy (NSString*)",
      "contents": "NSURLProtectionSpaceFTPProxy"
    },
    {
      "trigger": "NSURLProtectionSpaceHTTP (NSString*)",
      "contents": "NSURLProtectionSpaceHTTP"
    },
    {
      "trigger": "NSURLProtectionSpaceHTTPProxy (NSString*)",
      "contents": "NSURLProtectionSpaceHTTPProxy"
    },
    {
      "trigger": "NSURLProtectionSpaceHTTPS (NSString*)",
      "contents": "NSURLProtectionSpaceHTTPS"
    },
    {
      "trigger": "NSURLProtectionSpaceHTTPSProxy (NSString*)",
      "contents": "NSURLProtectionSpaceHTTPSProxy"
    },
    {
      "trigger": "NSURLProtectionSpaceSOCKSProxy (NSString*)",
      "contents": "NSURLProtectionSpaceSOCKSProxy"
    },
    {
      "trigger": "NSURLProtocol.canInitWithRequest:",
      "contents": "NSURLProtocol.canInitWithRequest(${1:NSURLRequest* request})"
    },
    {
      "trigger": "NSURLProtocol.canonicalRequestForRequest:",
      "contents": "NSURLProtocol.canonicalRequestForRequest(${1:NSURLRequest* request})"
    },
    {
      "trigger": "NSURLProtocol.propertyForKey:inRequest:",
      "contents": "NSURLProtocol.propertyForKey(${1:NSString* key}, inRequest:${2:NSURLRequest* request})"
    },
    {
      "trigger": "NSURLProtocol.registerClass:",
      "contents": "NSURLProtocol.registerClass(${1:Class protocolClass})"
    },
    {
      "trigger": "NSURLProtocol.removePropertyForKey:inRequest:",
      "contents": "NSURLProtocol.removePropertyForKey(${1:NSString* key}, inRequest:${2:NSMutableURLRequest* request})"
    },
    {
      "trigger": "NSURLProtocol.requestIsCacheEquivalent:toRequest:",
      "contents": "NSURLProtocol.requestIsCacheEquivalent(${1:NSURLRequest* a}, toRequest:${2:NSURLRequest* b})"
    },
    {
      "trigger": "NSURLProtocol.setProperty:forKey:inRequest:",
      "contents": "NSURLProtocol.setProperty(${1:id value}, forKey:${2:NSString* key}, inRequest:${3:NSMutableURLRequest* request})"
    },
    {
      "trigger": "NSURLProtocol.unregisterClass:",
      "contents": "NSURLProtocol.unregisterClass(${1:Class protocolClass})"
    },
    {
      "trigger": "NSURLRequest.requestWithURL:",
      "contents": "NSURLRequest.requestWithURL(${1:NSURL* URL})"
    },
    {
      "trigger": "NSURLRequest.requestWithURL:cachePolicy:timeoutInterval:",
      "contents": "NSURLRequest.requestWithURL(${1:NSURL* URL}, cachePolicy:${2:NSURLRequestCachePolicy cachePolicy}, timeoutInterval:${3:NSTimeInterval timeoutInterval})"
    },
    {
      "trigger": "NSURLRequestReloadIgnoringCacheData (1)",
      "contents": "NSURLRequestReloadIgnoringCacheData"
    },
    {
      "trigger": "NSURLRequestReloadIgnoringLocalAndRemoteCacheData (4)",
      "contents": "NSURLRequestReloadIgnoringLocalAndRemoteCacheData"
    },
    {
      "trigger": "NSURLRequestReloadIgnoringLocalCacheData (1)",
      "contents": "NSURLRequestReloadIgnoringLocalCacheData"
    },
    {
      "trigger": "NSURLRequestReloadRevalidatingCacheData (5)",
      "contents": "NSURLRequestReloadRevalidatingCacheData"
    },
    {
      "trigger": "NSURLRequestReturnCacheDataDontLoad (3)",
      "contents": "NSURLRequestReturnCacheDataDontLoad"
    },
    {
      "trigger": "NSURLRequestReturnCacheDataElseLoad (2)",
      "contents": "NSURLRequestReturnCacheDataElseLoad"
    },
    {
      "trigger": "NSURLRequestUseProtocolCachePolicy (0)",
      "contents": "NSURLRequestUseProtocolCachePolicy"
    },
    {
      "trigger": "NSURLResponseUnknownLength (-1)",
      "contents": "NSURLResponseUnknownLength"
    },
    {
      "trigger": "NSURLTotalFileAllocatedSizeKey (NSString*)",
      "contents": "NSURLTotalFileAllocatedSizeKey"
    },
    {
      "trigger": "NSURLTotalFileSizeKey (NSString*)",
      "contents": "NSURLTotalFileSizeKey"
    },
    {
      "trigger": "NSURLTypeIdentifierKey (NSString*)",
      "contents": "NSURLTypeIdentifierKey"
    },
    {
      "trigger": "NSURLUbiquitousItemHasUnresolvedConflictsKey (NSString*)",
      "contents": "NSURLUbiquitousItemHasUnresolvedConflictsKey"
    },
    {
      "trigger": "NSURLUbiquitousItemIsDownloadedKey (NSString*)",
      "contents": "NSURLUbiquitousItemIsDownloadedKey"
    },
    {
      "trigger": "NSURLUbiquitousItemIsDownloadingKey (NSString*)",
      "contents": "NSURLUbiquitousItemIsDownloadingKey"
    },
    {
      "trigger": "NSURLUbiquitousItemIsUploadedKey (NSString*)",
      "contents": "NSURLUbiquitousItemIsUploadedKey"
    },
    {
      "trigger": "NSURLUbiquitousItemIsUploadingKey (NSString*)",
      "contents": "NSURLUbiquitousItemIsUploadingKey"
    },
    {
      "trigger": "NSURLUbiquitousItemPercentDownloadedKey (NSString*)",
      "contents": "NSURLUbiquitousItemPercentDownloadedKey"
    },
    {
      "trigger": "NSURLUbiquitousItemPercentUploadedKey (NSString*)",
      "contents": "NSURLUbiquitousItemPercentUploadedKey"
    },
    {
      "trigger": "NSURLVolumeAvailableCapacityKey (NSString*)",
      "contents": "NSURLVolumeAvailableCapacityKey"
    },
    {
      "trigger": "NSURLVolumeCreationDateKey (NSString*)",
      "contents": "NSURLVolumeCreationDateKey"
    },
    {
      "trigger": "NSURLVolumeIdentifierKey (NSString*)",
      "contents": "NSURLVolumeIdentifierKey"
    },
    {
      "trigger": "NSURLVolumeIsAutomountedKey (NSString*)",
      "contents": "NSURLVolumeIsAutomountedKey"
    },
    {
      "trigger": "NSURLVolumeIsBrowsableKey (NSString*)",
      "contents": "NSURLVolumeIsBrowsableKey"
    },
    {
      "trigger": "NSURLVolumeIsEjectableKey (NSString*)",
      "contents": "NSURLVolumeIsEjectableKey"
    },
    {
      "trigger": "NSURLVolumeIsInternalKey (NSString*)",
      "contents": "NSURLVolumeIsInternalKey"
    },
    {
      "trigger": "NSURLVolumeIsJournalingKey (NSString*)",
      "contents": "NSURLVolumeIsJournalingKey"
    },
    {
      "trigger": "NSURLVolumeIsLocalKey (NSString*)",
      "contents": "NSURLVolumeIsLocalKey"
    },
    {
      "trigger": "NSURLVolumeIsReadOnlyKey (NSString*)",
      "contents": "NSURLVolumeIsReadOnlyKey"
    },
    {
      "trigger": "NSURLVolumeIsRemovableKey (NSString*)",
      "contents": "NSURLVolumeIsRemovableKey"
    },
    {
      "trigger": "NSURLVolumeLocalizedFormatDescriptionKey (NSString*)",
      "contents": "NSURLVolumeLocalizedFormatDescriptionKey"
    },
    {
      "trigger": "NSURLVolumeLocalizedNameKey (NSString*)",
      "contents": "NSURLVolumeLocalizedNameKey"
    },
    {
      "trigger": "NSURLVolumeMaximumFileSizeKey (NSString*)",
      "contents": "NSURLVolumeMaximumFileSizeKey"
    },
    {
      "trigger": "NSURLVolumeNameKey (NSString*)",
      "contents": "NSURLVolumeNameKey"
    },
    {
      "trigger": "NSURLVolumeResourceCountKey (NSString*)",
      "contents": "NSURLVolumeResourceCountKey"
    },
    {
      "trigger": "NSURLVolumeSupportsAdvisoryFileLockingKey (NSString*)",
      "contents": "NSURLVolumeSupportsAdvisoryFileLockingKey"
    },
    {
      "trigger": "NSURLVolumeSupportsCasePreservedNamesKey (NSString*)",
      "contents": "NSURLVolumeSupportsCasePreservedNamesKey"
    },
    {
      "trigger": "NSURLVolumeSupportsCaseSensitiveNamesKey (NSString*)",
      "contents": "NSURLVolumeSupportsCaseSensitiveNamesKey"
    },
    {
      "trigger": "NSURLVolumeSupportsExtendedSecurityKey (NSString*)",
      "contents": "NSURLVolumeSupportsExtendedSecurityKey"
    },
    {
      "trigger": "NSURLVolumeSupportsHardLinksKey (NSString*)",
      "contents": "NSURLVolumeSupportsHardLinksKey"
    },
    {
      "trigger": "NSURLVolumeSupportsJournalingKey (NSString*)",
      "contents": "NSURLVolumeSupportsJournalingKey"
    },
    {
      "trigger": "NSURLVolumeSupportsPersistentIDsKey (NSString*)",
      "contents": "NSURLVolumeSupportsPersistentIDsKey"
    },
    {
      "trigger": "NSURLVolumeSupportsRenamingKey (NSString*)",
      "contents": "NSURLVolumeSupportsRenamingKey"
    },
    {
      "trigger": "NSURLVolumeSupportsRootDirectoryDatesKey (NSString*)",
      "contents": "NSURLVolumeSupportsRootDirectoryDatesKey"
    },
    {
      "trigger": "NSURLVolumeSupportsSparseFilesKey (NSString*)",
      "contents": "NSURLVolumeSupportsSparseFilesKey"
    },
    {
      "trigger": "NSURLVolumeSupportsSymbolicLinksKey (NSString*)",
      "contents": "NSURLVolumeSupportsSymbolicLinksKey"
    },
    {
      "trigger": "NSURLVolumeSupportsVolumeSizesKey (NSString*)",
      "contents": "NSURLVolumeSupportsVolumeSizesKey"
    },
    {
      "trigger": "NSURLVolumeSupportsZeroRunsKey (NSString*)",
      "contents": "NSURLVolumeSupportsZeroRunsKey"
    },
    {
      "trigger": "NSURLVolumeTotalCapacityKey (NSString*)",
      "contents": "NSURLVolumeTotalCapacityKey"
    },
    {
      "trigger": "NSURLVolumeURLForRemountingKey (NSString*)",
      "contents": "NSURLVolumeURLForRemountingKey"
    },
    {
      "trigger": "NSURLVolumeURLKey (NSString*)",
      "contents": "NSURLVolumeURLKey"
    },
    {
      "trigger": "NSURLVolumeUUIDStringKey (NSString*)",
      "contents": "NSURLVolumeUUIDStringKey"
    },
    {
      "trigger": "NSUTF16BigEndianStringEncoding (2415919360)",
      "contents": "NSUTF16BigEndianStringEncoding"
    },
    {
      "trigger": "NSUTF16LittleEndianStringEncoding (2483028224)",
      "contents": "NSUTF16LittleEndianStringEncoding"
    },
    {
      "trigger": "NSUTF16StringEncoding (10)",
      "contents": "NSUTF16StringEncoding"
    },
    {
      "trigger": "NSUTF32BigEndianStringEncoding (2550137088)",
      "contents": "NSUTF32BigEndianStringEncoding"
    },
    {
      "trigger": "NSUTF32LittleEndianStringEncoding (2617245952)",
      "contents": "NSUTF32LittleEndianStringEncoding"
    },
    {
      "trigger": "NSUTF32StringEncoding (2348810496)",
      "contents": "NSUTF32StringEncoding"
    },
    {
      "trigger": "NSUTF8StringEncoding (4)",
      "contents": "NSUTF8StringEncoding"
    },
    {
      "trigger": "NSUUIDChangedPersistentStoresKey (NSString*)",
      "contents": "NSUUIDChangedPersistentStoresKey"
    },
    {
      "trigger": "NSUbiquitousKeyValueStoreChangeReasonKey (NSString*)",
      "contents": "NSUbiquitousKeyValueStoreChangeReasonKey"
    },
    {
      "trigger": "NSUbiquitousKeyValueStoreChangedKeysKey (NSString*)",
      "contents": "NSUbiquitousKeyValueStoreChangedKeysKey"
    },
    {
      "trigger": "NSUbiquitousKeyValueStoreDidChangeExternallyNotification (NSString*)",
      "contents": "NSUbiquitousKeyValueStoreDidChangeExternallyNotification"
    },
    {
      "trigger": "NSUbiquitousKeyValueStoreInitialSyncChange (1)",
      "contents": "NSUbiquitousKeyValueStoreInitialSyncChange"
    },
    {
      "trigger": "NSUbiquitousKeyValueStoreQuotaViolationChange (2)",
      "contents": "NSUbiquitousKeyValueStoreQuotaViolationChange"
    },
    {
      "trigger": "NSUbiquitousKeyValueStoreServerChange (0)",
      "contents": "NSUbiquitousKeyValueStoreServerChange"
    },
    {
      "trigger": "NSUnarchiveFromDataTransformerName (NSString*)",
      "contents": "NSUnarchiveFromDataTransformerName"
    },
    {
      "trigger": "NSUncachedRead (2)",
      "contents": "NSUncachedRead"
    },
    {
      "trigger": "NSUndefinedAttributeType (0)",
      "contents": "NSUndefinedAttributeType"
    },
    {
      "trigger": "NSUndefinedDateComponent (2147483647)",
      "contents": "NSUndefinedDateComponent"
    },
    {
      "trigger": "NSUndefinedEntityMappingType (0)",
      "contents": "NSUndefinedEntityMappingType"
    },
    {
      "trigger": "NSUndefinedKeyException (NSString*)",
      "contents": "NSUndefinedKeyException"
    },
    {
      "trigger": "NSUnderlyingErrorKey (NSString*)",
      "contents": "NSUnderlyingErrorKey"
    },
    {
      "trigger": "NSUndoCloseGroupingRunLoopOrdering (350000)",
      "contents": "NSUndoCloseGroupingRunLoopOrdering"
    },
    {
      "trigger": "NSUndoManagerCheckpointNotification (NSString*)",
      "contents": "NSUndoManagerCheckpointNotification"
    },
    {
      "trigger": "NSUndoManagerDidCloseUndoGroupNotification (NSString*)",
      "contents": "NSUndoManagerDidCloseUndoGroupNotification"
    },
    {
      "trigger": "NSUndoManagerDidOpenUndoGroupNotification (NSString*)",
      "contents": "NSUndoManagerDidOpenUndoGroupNotification"
    },
    {
      "trigger": "NSUndoManagerDidRedoChangeNotification (NSString*)",
      "contents": "NSUndoManagerDidRedoChangeNotification"
    },
    {
      "trigger": "NSUndoManagerDidUndoChangeNotification (NSString*)",
      "contents": "NSUndoManagerDidUndoChangeNotification"
    },
    {
      "trigger": "NSUndoManagerGroupIsDiscardableKey (NSString*)",
      "contents": "NSUndoManagerGroupIsDiscardableKey"
    },
    {
      "trigger": "NSUndoManagerWillCloseUndoGroupNotification (NSString*)",
      "contents": "NSUndoManagerWillCloseUndoGroupNotification"
    },
    {
      "trigger": "NSUndoManagerWillRedoChangeNotification (NSString*)",
      "contents": "NSUndoManagerWillRedoChangeNotification"
    },
    {
      "trigger": "NSUndoManagerWillUndoChangeNotification (NSString*)",
      "contents": "NSUndoManagerWillUndoChangeNotification"
    },
    {
      "trigger": "NSUnicodeStringEncoding (10)",
      "contents": "NSUnicodeStringEncoding"
    },
    {
      "trigger": "NSUnionOfArraysKeyValueOperator (NSString*)",
      "contents": "NSUnionOfArraysKeyValueOperator"
    },
    {
      "trigger": "NSUnionOfObjectsKeyValueOperator (NSString*)",
      "contents": "NSUnionOfObjectsKeyValueOperator"
    },
    {
      "trigger": "NSUnionOfSetsKeyValueOperator (NSString*)",
      "contents": "NSUnionOfSetsKeyValueOperator"
    },
    {
      "trigger": "NSUnionRange",
      "contents": "NSUnionRange(${1:NSRange range1}, ${2:NSRange range2})"
    },
    {
      "trigger": "NSUnionSetExpressionType (5)",
      "contents": "NSUnionSetExpressionType"
    },
    {
      "trigger": "NSUpdatedObjectsKey (NSString*)",
      "contents": "NSUpdatedObjectsKey"
    },
    {
      "trigger": "NSUserCancelledError (3072)",
      "contents": "NSUserCancelledError"
    },
    {
      "trigger": "NSUserDefaultsDidChangeNotification (NSString*)",
      "contents": "NSUserDefaultsDidChangeNotification"
    },
    {
      "trigger": "NSUserDirectory (7)",
      "contents": "NSUserDirectory"
    },
    {
      "trigger": "NSUserDomainMask (1)",
      "contents": "NSUserDomainMask"
    },
    {
      "trigger": "NSValidationDateTooLateError (1630)",
      "contents": "NSValidationDateTooLateError"
    },
    {
      "trigger": "NSValidationDateTooSoonError (1640)",
      "contents": "NSValidationDateTooSoonError"
    },
    {
      "trigger": "NSValidationErrorMaximum (2047)",
      "contents": "NSValidationErrorMaximum"
    },
    {
      "trigger": "NSValidationErrorMinimum (1024)",
      "contents": "NSValidationErrorMinimum"
    },
    {
      "trigger": "NSValidationInvalidDateError (1650)",
      "contents": "NSValidationInvalidDateError"
    },
    {
      "trigger": "NSValidationKeyErrorKey (NSString*)",
      "contents": "NSValidationKeyErrorKey"
    },
    {
      "trigger": "NSValidationMissingMandatoryPropertyError (1570)",
      "contents": "NSValidationMissingMandatoryPropertyError"
    },
    {
      "trigger": "NSValidationMultipleErrorsError (1560)",
      "contents": "NSValidationMultipleErrorsError"
    },
    {
      "trigger": "NSValidationNumberTooLargeError (1610)",
      "contents": "NSValidationNumberTooLargeError"
    },
    {
      "trigger": "NSValidationNumberTooSmallError (1620)",
      "contents": "NSValidationNumberTooSmallError"
    },
    {
      "trigger": "NSValidationObjectErrorKey (NSString*)",
      "contents": "NSValidationObjectErrorKey"
    },
    {
      "trigger": "NSValidationPredicateErrorKey (NSString*)",
      "contents": "NSValidationPredicateErrorKey"
    },
    {
      "trigger": "NSValidationRelationshipDeniedDeleteError (1600)",
      "contents": "NSValidationRelationshipDeniedDeleteError"
    },
    {
      "trigger": "NSValidationRelationshipExceedsMaximumCountError (1590)",
      "contents": "NSValidationRelationshipExceedsMaximumCountError"
    },
    {
      "trigger": "NSValidationRelationshipLacksMinimumCountError (1580)",
      "contents": "NSValidationRelationshipLacksMinimumCountError"
    },
    {
      "trigger": "NSValidationStringPatternMatchingError (1680)",
      "contents": "NSValidationStringPatternMatchingError"
    },
    {
      "trigger": "NSValidationStringTooLongError (1660)",
      "contents": "NSValidationStringTooLongError"
    },
    {
      "trigger": "NSValidationStringTooShortError (1670)",
      "contents": "NSValidationStringTooShortError"
    },
    {
      "trigger": "NSValidationValueErrorKey (NSString*)",
      "contents": "NSValidationValueErrorKey"
    },
    {
      "trigger": "NSValue.value:withObjCType:",
      "contents": "NSValue.value(${1:void* value}, withObjCType:${2:char* type})"
    },
    {
      "trigger": "NSValue.valueWithBytes:objCType:",
      "contents": "NSValue.valueWithBytes(${1:void* value}, objCType:${2:char* type})"
    },
    {
      "trigger": "NSValue.valueWithCATransform3D:",
      "contents": "NSValue.valueWithCATransform3D(${1:CATransform3D t})"
    },
    {
      "trigger": "NSValue.valueWithCGAffineTransform:",
      "contents": "NSValue.valueWithCGAffineTransform(${1:CGAffineTransform transform})"
    },
    {
      "trigger": "NSValue.valueWithCGPoint:",
      "contents": "NSValue.valueWithCGPoint(${1:CGPoint point})"
    },
    {
      "trigger": "NSValue.valueWithCGRect:",
      "contents": "NSValue.valueWithCGRect(${1:CGRect rect})"
    },
    {
      "trigger": "NSValue.valueWithCGSize:",
      "contents": "NSValue.valueWithCGSize(${1:CGSize size})"
    },
    {
      "trigger": "NSValue.valueWithCMTime:",
      "contents": "NSValue.valueWithCMTime(${1:CMTime time})"
    },
    {
      "trigger": "NSValue.valueWithCMTimeMapping:",
      "contents": "NSValue.valueWithCMTimeMapping(${1:CMTimeMapping timeMapping})"
    },
    {
      "trigger": "NSValue.valueWithCMTimeRange:",
      "contents": "NSValue.valueWithCMTimeRange(${1:CMTimeRange timeRange})"
    },
    {
      "trigger": "NSValue.valueWithNonretainedObject:",
      "contents": "NSValue.valueWithNonretainedObject(${1:id anObject})"
    },
    {
      "trigger": "NSValue.valueWithPointer:",
      "contents": "NSValue.valueWithPointer(${1:void* pointer})"
    },
    {
      "trigger": "NSValue.valueWithRange:",
      "contents": "NSValue.valueWithRange(${1:NSRange range})"
    },
    {
      "trigger": "NSValue.valueWithUIEdgeInsets:",
      "contents": "NSValue.valueWithUIEdgeInsets(${1:UIEdgeInsets insets})"
    },
    {
      "trigger": "NSValue.valueWithUIOffset:",
      "contents": "NSValue.valueWithUIOffset(${1:UIOffset insets})"
    },
    {
      "trigger": "NSValueTransformer.setValueTransformer:forName:",
      "contents": "NSValueTransformer.setValueTransformer(${1:NSValueTransformer* transformer}, forName:${2:NSString* name})"
    },
    {
      "trigger": "NSValueTransformer.valueTransformerForName:",
      "contents": "NSValueTransformer.valueTransformerForName(${1:NSString* name})"
    },
    {
      "trigger": "NSVariableExpressionType (2)",
      "contents": "NSVariableExpressionType"
    },
    {
      "trigger": "NSVolumeEnumerationProduceFileReferenceURLs (4)",
      "contents": "NSVolumeEnumerationProduceFileReferenceURLs"
    },
    {
      "trigger": "NSVolumeEnumerationSkipHiddenVolumes (2)",
      "contents": "NSVolumeEnumerationSkipHiddenVolumes"
    },
    {
      "trigger": "NSWeekCalendarUnit (256)",
      "contents": "NSWeekCalendarUnit"
    },
    {
      "trigger": "NSWeekOfMonthCalendarUnit (4096)",
      "contents": "NSWeekOfMonthCalendarUnit"
    },
    {
      "trigger": "NSWeekOfYearCalendarUnit (8192)",
      "contents": "NSWeekOfYearCalendarUnit"
    },
    {
      "trigger": "NSWeekdayCalendarUnit (512)",
      "contents": "NSWeekdayCalendarUnit"
    },
    {
      "trigger": "NSWeekdayOrdinalCalendarUnit (1024)",
      "contents": "NSWeekdayOrdinalCalendarUnit"
    },
    {
      "trigger": "NSWidthInsensitiveSearch (256)",
      "contents": "NSWidthInsensitiveSearch"
    },
    {
      "trigger": "NSWillBecomeMultiThreadedNotification (NSString*)",
      "contents": "NSWillBecomeMultiThreadedNotification"
    },
    {
      "trigger": "NSWindows95OperatingSystem (2)",
      "contents": "NSWindows95OperatingSystem"
    },
    {
      "trigger": "NSWindowsCP1250StringEncoding (15)",
      "contents": "NSWindowsCP1250StringEncoding"
    },
    {
      "trigger": "NSWindowsCP1251StringEncoding (11)",
      "contents": "NSWindowsCP1251StringEncoding"
    },
    {
      "trigger": "NSWindowsCP1252StringEncoding (12)",
      "contents": "NSWindowsCP1252StringEncoding"
    },
    {
      "trigger": "NSWindowsCP1253StringEncoding (13)",
      "contents": "NSWindowsCP1253StringEncoding"
    },
    {
      "trigger": "NSWindowsCP1254StringEncoding (14)",
      "contents": "NSWindowsCP1254StringEncoding"
    },
    {
      "trigger": "NSWindowsNTOperatingSystem (1)",
      "contents": "NSWindowsNTOperatingSystem"
    },
    {
      "trigger": "NSWrapCalendarComponents (1)",
      "contents": "NSWrapCalendarComponents"
    },
    {
      "trigger": "NSXMLParserAttributeHasNoValueError (41)",
      "contents": "NSXMLParserAttributeHasNoValueError"
    },
    {
      "trigger": "NSXMLParserAttributeListNotFinishedError (51)",
      "contents": "NSXMLParserAttributeListNotFinishedError"
    },
    {
      "trigger": "NSXMLParserAttributeListNotStartedError (50)",
      "contents": "NSXMLParserAttributeListNotStartedError"
    },
    {
      "trigger": "NSXMLParserAttributeNotFinishedError (40)",
      "contents": "NSXMLParserAttributeNotFinishedError"
    },
    {
      "trigger": "NSXMLParserAttributeNotStartedError (39)",
      "contents": "NSXMLParserAttributeNotStartedError"
    },
    {
      "trigger": "NSXMLParserAttributeRedefinedError (42)",
      "contents": "NSXMLParserAttributeRedefinedError"
    },
    {
      "trigger": "NSXMLParserCDATANotFinishedError (63)",
      "contents": "NSXMLParserCDATANotFinishedError"
    },
    {
      "trigger": "NSXMLParserCharacterRefAtEOFError (10)",
      "contents": "NSXMLParserCharacterRefAtEOFError"
    },
    {
      "trigger": "NSXMLParserCharacterRefInDTDError (13)",
      "contents": "NSXMLParserCharacterRefInDTDError"
    },
    {
      "trigger": "NSXMLParserCharacterRefInEpilogError (12)",
      "contents": "NSXMLParserCharacterRefInEpilogError"
    },
    {
      "trigger": "NSXMLParserCharacterRefInPrologError (11)",
      "contents": "NSXMLParserCharacterRefInPrologError"
    },
    {
      "trigger": "NSXMLParserCommentContainsDoubleHyphenError (80)",
      "contents": "NSXMLParserCommentContainsDoubleHyphenError"
    },
    {
      "trigger": "NSXMLParserCommentNotFinishedError (45)",
      "contents": "NSXMLParserCommentNotFinishedError"
    },
    {
      "trigger": "NSXMLParserConditionalSectionNotFinishedError (59)",
      "contents": "NSXMLParserConditionalSectionNotFinishedError"
    },
    {
      "trigger": "NSXMLParserConditionalSectionNotStartedError (58)",
      "contents": "NSXMLParserConditionalSectionNotStartedError"
    },
    {
      "trigger": "NSXMLParserDOCTYPEDeclNotFinishedError (61)",
      "contents": "NSXMLParserDOCTYPEDeclNotFinishedError"
    },
    {
      "trigger": "NSXMLParserDelegateAbortedParseError (512)",
      "contents": "NSXMLParserDelegateAbortedParseError"
    },
    {
      "trigger": "NSXMLParserDocumentStartError (3)",
      "contents": "NSXMLParserDocumentStartError"
    },
    {
      "trigger": "NSXMLParserElementContentDeclNotFinishedError (55)",
      "contents": "NSXMLParserElementContentDeclNotFinishedError"
    },
    {
      "trigger": "NSXMLParserElementContentDeclNotStartedError (54)",
      "contents": "NSXMLParserElementContentDeclNotStartedError"
    },
    {
      "trigger": "NSXMLParserEmptyDocumentError (4)",
      "contents": "NSXMLParserEmptyDocumentError"
    },
    {
      "trigger": "NSXMLParserEncodingNotSupportedError (32)",
      "contents": "NSXMLParserEncodingNotSupportedError"
    },
    {
      "trigger": "NSXMLParserEntityBoundaryError (90)",
      "contents": "NSXMLParserEntityBoundaryError"
    },
    {
      "trigger": "NSXMLParserEntityIsExternalError (29)",
      "contents": "NSXMLParserEntityIsExternalError"
    },
    {
      "trigger": "NSXMLParserEntityIsParameterError (30)",
      "contents": "NSXMLParserEntityIsParameterError"
    },
    {
      "trigger": "NSXMLParserEntityNotFinishedError (37)",
      "contents": "NSXMLParserEntityNotFinishedError"
    },
    {
      "trigger": "NSXMLParserEntityNotStartedError (36)",
      "contents": "NSXMLParserEntityNotStartedError"
    },
    {
      "trigger": "NSXMLParserEntityRefAtEOFError (14)",
      "contents": "NSXMLParserEntityRefAtEOFError"
    },
    {
      "trigger": "NSXMLParserEntityRefInDTDError (17)",
      "contents": "NSXMLParserEntityRefInDTDError"
    },
    {
      "trigger": "NSXMLParserEntityRefInEpilogError (16)",
      "contents": "NSXMLParserEntityRefInEpilogError"
    },
    {
      "trigger": "NSXMLParserEntityRefInPrologError (15)",
      "contents": "NSXMLParserEntityRefInPrologError"
    },
    {
      "trigger": "NSXMLParserEntityRefLoopError (89)",
      "contents": "NSXMLParserEntityRefLoopError"
    },
    {
      "trigger": "NSXMLParserEntityReferenceMissingSemiError (23)",
      "contents": "NSXMLParserEntityReferenceMissingSemiError"
    },
    {
      "trigger": "NSXMLParserEntityReferenceWithoutNameError (22)",
      "contents": "NSXMLParserEntityReferenceWithoutNameError"
    },
    {
      "trigger": "NSXMLParserEntityValueRequiredError (84)",
      "contents": "NSXMLParserEntityValueRequiredError"
    },
    {
      "trigger": "NSXMLParserEqualExpectedError (75)",
      "contents": "NSXMLParserEqualExpectedError"
    },
    {
      "trigger": "NSXMLParserErrorDomain (NSString*)",
      "contents": "NSXMLParserErrorDomain"
    },
    {
      "trigger": "NSXMLParserExternalStandaloneEntityError (82)",
      "contents": "NSXMLParserExternalStandaloneEntityError"
    },
    {
      "trigger": "NSXMLParserExternalSubsetNotFinishedError (60)",
      "contents": "NSXMLParserExternalSubsetNotFinishedError"
    },
    {
      "trigger": "NSXMLParserExtraContentError (86)",
      "contents": "NSXMLParserExtraContentError"
    },
    {
      "trigger": "NSXMLParserGTRequiredError (73)",
      "contents": "NSXMLParserGTRequiredError"
    },
    {
      "trigger": "NSXMLParserInternalError (1)",
      "contents": "NSXMLParserInternalError"
    },
    {
      "trigger": "NSXMLParserInvalidCharacterError (9)",
      "contents": "NSXMLParserInvalidCharacterError"
    },
    {
      "trigger": "NSXMLParserInvalidCharacterInEntityError (87)",
      "contents": "NSXMLParserInvalidCharacterInEntityError"
    },
    {
      "trigger": "NSXMLParserInvalidCharacterRefError (8)",
      "contents": "NSXMLParserInvalidCharacterRefError"
    },
    {
      "trigger": "NSXMLParserInvalidConditionalSectionError (83)",
      "contents": "NSXMLParserInvalidConditionalSectionError"
    },
    {
      "trigger": "NSXMLParserInvalidDecimalCharacterRefError (7)",
      "contents": "NSXMLParserInvalidDecimalCharacterRefError"
    },
    {
      "trigger": "NSXMLParserInvalidEncodingError (81)",
      "contents": "NSXMLParserInvalidEncodingError"
    },
    {
      "trigger": "NSXMLParserInvalidEncodingNameError (79)",
      "contents": "NSXMLParserInvalidEncodingNameError"
    },
    {
      "trigger": "NSXMLParserInvalidHexCharacterRefError (6)",
      "contents": "NSXMLParserInvalidHexCharacterRefError"
    },
    {
      "trigger": "NSXMLParserInvalidURIError (91)",
      "contents": "NSXMLParserInvalidURIError"
    },
    {
      "trigger": "NSXMLParserLTRequiredError (72)",
      "contents": "NSXMLParserLTRequiredError"
    },
    {
      "trigger": "NSXMLParserLTSlashRequiredError (74)",
      "contents": "NSXMLParserLTSlashRequiredError"
    },
    {
      "trigger": "NSXMLParserLessThanSymbolInAttributeError (38)",
      "contents": "NSXMLParserLessThanSymbolInAttributeError"
    },
    {
      "trigger": "NSXMLParserLiteralNotFinishedError (44)",
      "contents": "NSXMLParserLiteralNotFinishedError"
    },
    {
      "trigger": "NSXMLParserLiteralNotStartedError (43)",
      "contents": "NSXMLParserLiteralNotStartedError"
    },
    {
      "trigger": "NSXMLParserMisplacedCDATAEndStringError (62)",
      "contents": "NSXMLParserMisplacedCDATAEndStringError"
    },
    {
      "trigger": "NSXMLParserMisplacedXMLDeclarationError (64)",
      "contents": "NSXMLParserMisplacedXMLDeclarationError"
    },
    {
      "trigger": "NSXMLParserMixedContentDeclNotFinishedError (53)",
      "contents": "NSXMLParserMixedContentDeclNotFinishedError"
    },
    {
      "trigger": "NSXMLParserMixedContentDeclNotStartedError (52)",
      "contents": "NSXMLParserMixedContentDeclNotStartedError"
    },
    {
      "trigger": "NSXMLParserNAMERequiredError (68)",
      "contents": "NSXMLParserNAMERequiredError"
    },
    {
      "trigger": "NSXMLParserNMTOKENRequiredError (67)",
      "contents": "NSXMLParserNMTOKENRequiredError"
    },
    {
      "trigger": "NSXMLParserNamespaceDeclarationError (35)",
      "contents": "NSXMLParserNamespaceDeclarationError"
    },
    {
      "trigger": "NSXMLParserNoDTDError (94)",
      "contents": "NSXMLParserNoDTDError"
    },
    {
      "trigger": "NSXMLParserNotWellBalancedError (85)",
      "contents": "NSXMLParserNotWellBalancedError"
    },
    {
      "trigger": "NSXMLParserNotationNotFinishedError (49)",
      "contents": "NSXMLParserNotationNotFinishedError"
    },
    {
      "trigger": "NSXMLParserNotationNotStartedError (48)",
      "contents": "NSXMLParserNotationNotStartedError"
    },
    {
      "trigger": "NSXMLParserOutOfMemoryError (2)",
      "contents": "NSXMLParserOutOfMemoryError"
    },
    {
      "trigger": "NSXMLParserPCDATARequiredError (69)",
      "contents": "NSXMLParserPCDATARequiredError"
    },
    {
      "trigger": "NSXMLParserParsedEntityRefAtEOFError (18)",
      "contents": "NSXMLParserParsedEntityRefAtEOFError"
    },
    {
      "trigger": "NSXMLParserParsedEntityRefInEpilogError (20)",
      "contents": "NSXMLParserParsedEntityRefInEpilogError"
    },
    {
      "trigger": "NSXMLParserParsedEntityRefInInternalError (88)",
      "contents": "NSXMLParserParsedEntityRefInInternalError"
    },
    {
      "trigger": "NSXMLParserParsedEntityRefInInternalSubsetError (21)",
      "contents": "NSXMLParserParsedEntityRefInInternalSubsetError"
    },
    {
      "trigger": "NSXMLParserParsedEntityRefInPrologError (19)",
      "contents": "NSXMLParserParsedEntityRefInPrologError"
    },
    {
      "trigger": "NSXMLParserParsedEntityRefMissingSemiError (25)",
      "contents": "NSXMLParserParsedEntityRefMissingSemiError"
    },
    {
      "trigger": "NSXMLParserParsedEntityRefNoNameError (24)",
      "contents": "NSXMLParserParsedEntityRefNoNameError"
    },
    {
      "trigger": "NSXMLParserPrematureDocumentEndError (5)",
      "contents": "NSXMLParserPrematureDocumentEndError"
    },
    {
      "trigger": "NSXMLParserProcessingInstructionNotFinishedError (47)",
      "contents": "NSXMLParserProcessingInstructionNotFinishedError"
    },
    {
      "trigger": "NSXMLParserProcessingInstructionNotStartedError (46)",
      "contents": "NSXMLParserProcessingInstructionNotStartedError"
    },
    {
      "trigger": "NSXMLParserPublicIdentifierRequiredError (71)",
      "contents": "NSXMLParserPublicIdentifierRequiredError"
    },
    {
      "trigger": "NSXMLParserSeparatorRequiredError (66)",
      "contents": "NSXMLParserSeparatorRequiredError"
    },
    {
      "trigger": "NSXMLParserSpaceRequiredError (65)",
      "contents": "NSXMLParserSpaceRequiredError"
    },
    {
      "trigger": "NSXMLParserStandaloneValueError (78)",
      "contents": "NSXMLParserStandaloneValueError"
    },
    {
      "trigger": "NSXMLParserStringNotClosedError (34)",
      "contents": "NSXMLParserStringNotClosedError"
    },
    {
      "trigger": "NSXMLParserStringNotStartedError (33)",
      "contents": "NSXMLParserStringNotStartedError"
    },
    {
      "trigger": "NSXMLParserTagNameMismatchError (76)",
      "contents": "NSXMLParserTagNameMismatchError"
    },
    {
      "trigger": "NSXMLParserURIFragmentError (92)",
      "contents": "NSXMLParserURIFragmentError"
    },
    {
      "trigger": "NSXMLParserURIRequiredError (70)",
      "contents": "NSXMLParserURIRequiredError"
    },
    {
      "trigger": "NSXMLParserUndeclaredEntityError (26)",
      "contents": "NSXMLParserUndeclaredEntityError"
    },
    {
      "trigger": "NSXMLParserUnfinishedTagError (77)",
      "contents": "NSXMLParserUnfinishedTagError"
    },
    {
      "trigger": "NSXMLParserUnknownEncodingError (31)",
      "contents": "NSXMLParserUnknownEncodingError"
    },
    {
      "trigger": "NSXMLParserUnparsedEntityError (28)",
      "contents": "NSXMLParserUnparsedEntityError"
    },
    {
      "trigger": "NSXMLParserXMLDeclNotFinishedError (57)",
      "contents": "NSXMLParserXMLDeclNotFinishedError"
    },
    {
      "trigger": "NSXMLParserXMLDeclNotStartedError (56)",
      "contents": "NSXMLParserXMLDeclNotStartedError"
    },
    {
      "trigger": "NSYearCalendarUnit (4)",
      "contents": "NSYearCalendarUnit"
    },
    {
      "trigger": "NSYearForWeekOfYearCalendarUnit (16384)",
      "contents": "NSYearForWeekOfYearCalendarUnit"
    },
    {
      "trigger": "NSZoneCalloc",
      "contents": "NSZoneCalloc(${1:NSZone* zone}, ${2:NSUInteger numElems}, ${3:NSUInteger byteSize})"
    },
    {
      "trigger": "NSZoneFree",
      "contents": "NSZoneFree(${1:NSZone* zone}, ${2:void* ptr})"
    },
    {
      "trigger": "NSZoneFromPointer",
      "contents": "NSZoneFromPointer(${1:void* ptr})"
    },
    {
      "trigger": "NSZoneMalloc",
      "contents": "NSZoneMalloc(${1:NSZone* zone}, ${2:NSUInteger size})"
    },
    {
      "trigger": "NSZoneName",
      "contents": "NSZoneName(${1:NSZone* zone})"
    },
    {
      "trigger": "NSZoneRealloc",
      "contents": "NSZoneRealloc(${1:NSZone* zone}, ${2:void* ptr}, ${3:NSUInteger size})"
    },
    {
      "trigger": "NS_BLOCKS_AVAILABLE (1)",
      "contents": "NS_BLOCKS_AVAILABLE"
    },
    {
      "trigger": "NS_BigEndian (2)",
      "contents": "NS_BigEndian"
    },
    {
      "trigger": "NS_LittleEndian (1)",
      "contents": "NS_LittleEndian"
    },
    {
      "trigger": "NS_UNICHAR_IS_EIGHT_BIT (0)",
      "contents": "NS_UNICHAR_IS_EIGHT_BIT"
    },
    {
      "trigger": "NS_UnknownByteOrder (0)",
      "contents": "NS_UnknownByteOrder"
    },
    {
      "trigger": "NewAUGraph",
      "contents": "NewAUGraph(${1:AUGraph* outGraph})"
    },
    {
      "trigger": "NewMusicEventIterator",
      "contents": "NewMusicEventIterator(${1:MusicTrack inTrack}, ${2:MusicEventIterator* outIterator})"
    },
    {
      "trigger": "NewMusicPlayer",
      "contents": "NewMusicPlayer(${1:MusicPlayer* outPlayer})"
    },
    {
      "trigger": "NewMusicSequence",
      "contents": "NewMusicSequence(${1:MusicSequence* outSequence})"
    },
    {
      "trigger": "QLPreviewController.canPreviewItem:",
      "contents": "QLPreviewController.canPreviewItem(${1:id item})"
    },
    {
      "trigger": "SCErrorString",
      "contents": "SCErrorString(${1:int status})"
    },
    {
      "trigger": "SCNetworkReachabilityCreateWithAddress",
      "contents": "SCNetworkReachabilityCreateWithAddress(${1:CFAllocatorRef allocator}, ${2:struct sockaddr* address})"
    },
    {
      "trigger": "SCNetworkReachabilityCreateWithAddressPair",
      "contents": "SCNetworkReachabilityCreateWithAddressPair(${1:CFAllocatorRef allocator}, ${2:struct sockaddr* localAddress}, ${3:struct sockaddr* remoteAddress})"
    },
    {
      "trigger": "SCNetworkReachabilityCreateWithName",
      "contents": "SCNetworkReachabilityCreateWithName(${1:CFAllocatorRef allocator}, ${2:char* nodename})"
    },
    {
      "trigger": "SCNetworkReachabilityGetFlags",
      "contents": "SCNetworkReachabilityGetFlags(${1:SCNetworkReachabilityRef target}, ${2:SCNetworkReachabilityFlags* flags})"
    },
    {
      "trigger": "SCNetworkReachabilityScheduleWithRunLoop",
      "contents": "SCNetworkReachabilityScheduleWithRunLoop(${1:SCNetworkReachabilityRef target}, ${2:CFRunLoopRef runLoop}, ${3:CFStringRef runLoopMode})"
    },
    {
      "trigger": "SCNetworkReachabilitySetCallback",
      "contents": "SCNetworkReachabilitySetCallback(${1:SCNetworkReachabilityRef target}, ${2:SCNetworkReachabilityCallBack callout}, ${3:SCNetworkReachabilityContext* context})"
    },
    {
      "trigger": "SCNetworkReachabilitySetDispatchQueue",
      "contents": "SCNetworkReachabilitySetDispatchQueue(${1:SCNetworkReachabilityRef target}, ${2:dispatch_queue_t queue})"
    },
    {
      "trigger": "SCNetworkReachabilityUnscheduleFromRunLoop",
      "contents": "SCNetworkReachabilityUnscheduleFromRunLoop(${1:SCNetworkReachabilityRef target}, ${2:CFRunLoopRef runLoop}, ${3:CFStringRef runLoopMode})"
    },
    {
      "trigger": "SEVERITY_ERROR (1)",
      "contents": "SEVERITY_ERROR"
    },
    {
      "trigger": "SEVERITY_SUCCESS (0)",
      "contents": "SEVERITY_SUCCESS"
    },
    {
      "trigger": "SKErrorClientInvalid (1)",
      "contents": "SKErrorClientInvalid"
    },
    {
      "trigger": "SKErrorDomain (NSString*)",
      "contents": "SKErrorDomain"
    },
    {
      "trigger": "SKErrorPaymentCancelled (2)",
      "contents": "SKErrorPaymentCancelled"
    },
    {
      "trigger": "SKErrorPaymentInvalid (3)",
      "contents": "SKErrorPaymentInvalid"
    },
    {
      "trigger": "SKErrorPaymentNotAllowed (4)",
      "contents": "SKErrorPaymentNotAllowed"
    },
    {
      "trigger": "SKErrorUnknown (0)",
      "contents": "SKErrorUnknown"
    },
    {
      "trigger": "SKPayment.paymentWithProduct:",
      "contents": "SKPayment.paymentWithProduct(${1:SKProduct* product})"
    },
    {
      "trigger": "SKPayment.paymentWithProductIdentifier:",
      "contents": "SKPayment.paymentWithProductIdentifier(${1:NSString* identifier})"
    },
    {
      "trigger": "SKPaymentTransactionStateFailed (2)",
      "contents": "SKPaymentTransactionStateFailed"
    },
    {
      "trigger": "SKPaymentTransactionStatePurchased (1)",
      "contents": "SKPaymentTransactionStatePurchased"
    },
    {
      "trigger": "SKPaymentTransactionStatePurchasing (0)",
      "contents": "SKPaymentTransactionStatePurchasing"
    },
    {
      "trigger": "SKPaymentTransactionStateRestored (3)",
      "contents": "SKPaymentTransactionStateRestored"
    },
    {
      "trigger": "SSLAddDistinguishedName",
      "contents": "SSLAddDistinguishedName(${1:SSLContextRef context}, ${2:void* derDN}, ${3:size_t derDNLen})"
    },
    {
      "trigger": "SSLClose",
      "contents": "SSLClose(${1:SSLContextRef context})"
    },
    {
      "trigger": "SSLCopyDistinguishedNames",
      "contents": "SSLCopyDistinguishedNames(${1:SSLContextRef context}, ${2:CFArrayRef* names})"
    },
    {
      "trigger": "SSLCopyPeerTrust",
      "contents": "SSLCopyPeerTrust(${1:SSLContextRef context}, ${2:SecTrustRef* trust})"
    },
    {
      "trigger": "SSLCreateContext",
      "contents": "SSLCreateContext(${1:CFAllocatorRef alloc}, ${2:SSLProtocolSide protocolSide}, ${3:SSLConnectionType connectionType})"
    },
    {
      "trigger": "SSLGetBufferedReadSize",
      "contents": "SSLGetBufferedReadSize(${1:SSLContextRef context}, ${2:size_t* bufSize})"
    },
    {
      "trigger": "SSLGetClientCertificateState",
      "contents": "SSLGetClientCertificateState(${1:SSLContextRef context}, ${2:SSLClientCertificateState* clientState})"
    },
    {
      "trigger": "SSLGetConnection",
      "contents": "SSLGetConnection(${1:SSLContextRef context}, ${2:SSLConnectionRef* connection})"
    },
    {
      "trigger": "SSLGetDatagramWriteSize",
      "contents": "SSLGetDatagramWriteSize(${1:SSLContextRef dtlsContext}, ${2:size_t* bufSize})"
    },
    {
      "trigger": "SSLGetEnabledCiphers",
      "contents": "SSLGetEnabledCiphers(${1:SSLContextRef context}, ${2:SSLCipherSuite* ciphers}, ${3:size_t* numCiphers})"
    },
    {
      "trigger": "SSLGetMaxDatagramRecordSize",
      "contents": "SSLGetMaxDatagramRecordSize(${1:SSLContextRef dtlsContext}, ${2:size_t* maxSize})"
    },
    {
      "trigger": "SSLGetNegotiatedCipher",
      "contents": "SSLGetNegotiatedCipher(${1:SSLContextRef context}, ${2:SSLCipherSuite* cipherSuite})"
    },
    {
      "trigger": "SSLGetNegotiatedProtocolVersion",
      "contents": "SSLGetNegotiatedProtocolVersion(${1:SSLContextRef context}, ${2:SSLProtocol* protocol})"
    },
    {
      "trigger": "SSLGetNumberEnabledCiphers",
      "contents": "SSLGetNumberEnabledCiphers(${1:SSLContextRef context}, ${2:size_t* numCiphers})"
    },
    {
      "trigger": "SSLGetNumberSupportedCiphers",
      "contents": "SSLGetNumberSupportedCiphers(${1:SSLContextRef context}, ${2:size_t* numCiphers})"
    },
    {
      "trigger": "SSLGetPeerDomainName",
      "contents": "SSLGetPeerDomainName(${1:SSLContextRef context}, ${2:char* peerName}, ${3:size_t* peerNameLen})"
    },
    {
      "trigger": "SSLGetPeerDomainNameLength",
      "contents": "SSLGetPeerDomainNameLength(${1:SSLContextRef context}, ${2:size_t* peerNameLen})"
    },
    {
      "trigger": "SSLGetPeerID",
      "contents": "SSLGetPeerID(${1:SSLContextRef context}, ${2:void** peerID}, ${3:size_t* peerIDLen})"
    },
    {
      "trigger": "SSLGetProtocolVersionMax",
      "contents": "SSLGetProtocolVersionMax(${1:SSLContextRef context}, ${2:SSLProtocol* maxVersion})"
    },
    {
      "trigger": "SSLGetProtocolVersionMin",
      "contents": "SSLGetProtocolVersionMin(${1:SSLContextRef context}, ${2:SSLProtocol* minVersion})"
    },
    {
      "trigger": "SSLGetSessionOption",
      "contents": "SSLGetSessionOption(${1:SSLContextRef context}, ${2:SSLSessionOption option}, ${3:Boolean* value})"
    },
    {
      "trigger": "SSLGetSessionState",
      "contents": "SSLGetSessionState(${1:SSLContextRef context}, ${2:SSLSessionState* state})"
    },
    {
      "trigger": "SSLGetSupportedCiphers",
      "contents": "SSLGetSupportedCiphers(${1:SSLContextRef context}, ${2:SSLCipherSuite* ciphers}, ${3:size_t* numCiphers})"
    },
    {
      "trigger": "SSLHandshake",
      "contents": "SSLHandshake(${1:SSLContextRef context})"
    },
    {
      "trigger": "SSLRead",
      "contents": "SSLRead(${1:SSLContextRef context}, ${2:void* data}, ${3:size_t dataLength}, ${4:size_t* processed})"
    },
    {
      "trigger": "SSLSetCertificate",
      "contents": "SSLSetCertificate(${1:SSLContextRef context}, ${2:CFArrayRef certRefs})"
    },
    {
      "trigger": "SSLSetClientSideAuthenticate",
      "contents": "SSLSetClientSideAuthenticate(${1:SSLContextRef context}, ${2:SSLAuthenticate auth})"
    },
    {
      "trigger": "SSLSetConnection",
      "contents": "SSLSetConnection(${1:SSLContextRef context}, ${2:SSLConnectionRef connection})"
    },
    {
      "trigger": "SSLSetDatagramHelloCookie",
      "contents": "SSLSetDatagramHelloCookie(${1:SSLContextRef dtlsContext}, ${2:void* cookie}, ${3:size_t cookieLen})"
    },
    {
      "trigger": "SSLSetEnabledCiphers",
      "contents": "SSLSetEnabledCiphers(${1:SSLContextRef context}, ${2:SSLCipherSuite* ciphers}, ${3:size_t numCiphers})"
    },
    {
      "trigger": "SSLSetEncryptionCertificate",
      "contents": "SSLSetEncryptionCertificate(${1:SSLContextRef context}, ${2:CFArrayRef certRefs})"
    },
    {
      "trigger": "SSLSetIOFuncs",
      "contents": "SSLSetIOFuncs(${1:SSLContextRef context}, ${2:SSLReadFunc readFunc}, ${3:SSLWriteFunc writeFunc})"
    },
    {
      "trigger": "SSLSetMaxDatagramRecordSize",
      "contents": "SSLSetMaxDatagramRecordSize(${1:SSLContextRef dtlsContext}, ${2:size_t maxSize})"
    },
    {
      "trigger": "SSLSetPeerDomainName",
      "contents": "SSLSetPeerDomainName(${1:SSLContextRef context}, ${2:char* peerName}, ${3:size_t peerNameLen})"
    },
    {
      "trigger": "SSLSetPeerID",
      "contents": "SSLSetPeerID(${1:SSLContextRef context}, ${2:void* peerID}, ${3:size_t peerIDLen})"
    },
    {
      "trigger": "SSLSetProtocolVersionMax",
      "contents": "SSLSetProtocolVersionMax(${1:SSLContextRef context}, ${2:SSLProtocol maxVersion})"
    },
    {
      "trigger": "SSLSetProtocolVersionMin",
      "contents": "SSLSetProtocolVersionMin(${1:SSLContextRef context}, ${2:SSLProtocol minVersion})"
    },
    {
      "trigger": "SSLSetSessionOption",
      "contents": "SSLSetSessionOption(${1:SSLContextRef context}, ${2:SSLSessionOption option}, ${3:Boolean value})"
    },
    {
      "trigger": "SSLWrite",
      "contents": "SSLWrite(${1:SSLContextRef context}, ${2:void* data}, ${3:size_t dataLength}, ${4:size_t* processed})"
    },
    {
      "trigger": "SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA (17)",
      "contents": "SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA"
    },
    {
      "trigger": "SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA (19)",
      "contents": "SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA"
    },
    {
      "trigger": "SSL_DHE_DSS_WITH_DES_CBC_SHA (18)",
      "contents": "SSL_DHE_DSS_WITH_DES_CBC_SHA"
    },
    {
      "trigger": "SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA (20)",
      "contents": "SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA"
    },
    {
      "trigger": "SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA (22)",
      "contents": "SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA"
    },
    {
      "trigger": "SSL_DHE_RSA_WITH_DES_CBC_SHA (21)",
      "contents": "SSL_DHE_RSA_WITH_DES_CBC_SHA"
    },
    {
      "trigger": "SSL_DH_DSS_EXPORT_WITH_DES40_CBC_SHA (11)",
      "contents": "SSL_DH_DSS_EXPORT_WITH_DES40_CBC_SHA"
    },
    {
      "trigger": "SSL_DH_DSS_WITH_3DES_EDE_CBC_SHA (13)",
      "contents": "SSL_DH_DSS_WITH_3DES_EDE_CBC_SHA"
    },
    {
      "trigger": "SSL_DH_DSS_WITH_DES_CBC_SHA (12)",
      "contents": "SSL_DH_DSS_WITH_DES_CBC_SHA"
    },
    {
      "trigger": "SSL_DH_RSA_EXPORT_WITH_DES40_CBC_SHA (14)",
      "contents": "SSL_DH_RSA_EXPORT_WITH_DES40_CBC_SHA"
    },
    {
      "trigger": "SSL_DH_RSA_WITH_3DES_EDE_CBC_SHA (16)",
      "contents": "SSL_DH_RSA_WITH_3DES_EDE_CBC_SHA"
    },
    {
      "trigger": "SSL_DH_RSA_WITH_DES_CBC_SHA (15)",
      "contents": "SSL_DH_RSA_WITH_DES_CBC_SHA"
    },
    {
      "trigger": "SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA (25)",
      "contents": "SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA"
    },
    {
      "trigger": "SSL_DH_anon_EXPORT_WITH_RC4_40_MD5 (23)",
      "contents": "SSL_DH_anon_EXPORT_WITH_RC4_40_MD5"
    },
    {
      "trigger": "SSL_DH_anon_WITH_3DES_EDE_CBC_SHA (27)",
      "contents": "SSL_DH_anon_WITH_3DES_EDE_CBC_SHA"
    },
    {
      "trigger": "SSL_DH_anon_WITH_DES_CBC_SHA (26)",
      "contents": "SSL_DH_anon_WITH_DES_CBC_SHA"
    },
    {
      "trigger": "SSL_DH_anon_WITH_RC4_128_MD5 (24)",
      "contents": "SSL_DH_anon_WITH_RC4_128_MD5"
    },
    {
      "trigger": "SSL_FORTEZZA_DMS_WITH_FORTEZZA_CBC_SHA (29)",
      "contents": "SSL_FORTEZZA_DMS_WITH_FORTEZZA_CBC_SHA"
    },
    {
      "trigger": "SSL_FORTEZZA_DMS_WITH_NULL_SHA (28)",
      "contents": "SSL_FORTEZZA_DMS_WITH_NULL_SHA"
    },
    {
      "trigger": "SSL_NO_SUCH_CIPHERSUITE (65535)",
      "contents": "SSL_NO_SUCH_CIPHERSUITE"
    },
    {
      "trigger": "SSL_NULL_WITH_NULL_NULL (0)",
      "contents": "SSL_NULL_WITH_NULL_NULL"
    },
    {
      "trigger": "SSL_RSA_EXPORT_WITH_DES40_CBC_SHA (8)",
      "contents": "SSL_RSA_EXPORT_WITH_DES40_CBC_SHA"
    },
    {
      "trigger": "SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5 (6)",
      "contents": "SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5"
    },
    {
      "trigger": "SSL_RSA_EXPORT_WITH_RC4_40_MD5 (3)",
      "contents": "SSL_RSA_EXPORT_WITH_RC4_40_MD5"
    },
    {
      "trigger": "SSL_RSA_WITH_3DES_EDE_CBC_MD5 (65411)",
      "contents": "SSL_RSA_WITH_3DES_EDE_CBC_MD5"
    },
    {
      "trigger": "SSL_RSA_WITH_3DES_EDE_CBC_SHA (10)",
      "contents": "SSL_RSA_WITH_3DES_EDE_CBC_SHA"
    },
    {
      "trigger": "SSL_RSA_WITH_DES_CBC_MD5 (65410)",
      "contents": "SSL_RSA_WITH_DES_CBC_MD5"
    },
    {
      "trigger": "SSL_RSA_WITH_DES_CBC_SHA (9)",
      "contents": "SSL_RSA_WITH_DES_CBC_SHA"
    },
    {
      "trigger": "SSL_RSA_WITH_IDEA_CBC_MD5 (65409)",
      "contents": "SSL_RSA_WITH_IDEA_CBC_MD5"
    },
    {
      "trigger": "SSL_RSA_WITH_IDEA_CBC_SHA (7)",
      "contents": "SSL_RSA_WITH_IDEA_CBC_SHA"
    },
    {
      "trigger": "SSL_RSA_WITH_NULL_MD5 (1)",
      "contents": "SSL_RSA_WITH_NULL_MD5"
    },
    {
      "trigger": "SSL_RSA_WITH_NULL_SHA (2)",
      "contents": "SSL_RSA_WITH_NULL_SHA"
    },
    {
      "trigger": "SSL_RSA_WITH_RC2_CBC_MD5 (65408)",
      "contents": "SSL_RSA_WITH_RC2_CBC_MD5"
    },
    {
      "trigger": "SSL_RSA_WITH_RC4_128_MD5 (4)",
      "contents": "SSL_RSA_WITH_RC4_128_MD5"
    },
    {
      "trigger": "SSL_RSA_WITH_RC4_128_SHA (5)",
      "contents": "SSL_RSA_WITH_RC4_128_SHA"
    },
    {
      "trigger": "S_FALSE (1)",
      "contents": "S_FALSE"
    },
    {
      "trigger": "S_OK (0)",
      "contents": "S_OK"
    },
    {
      "trigger": "SecCertificateCopyData",
      "contents": "SecCertificateCopyData(${1:SecCertificateRef certificate})"
    },
    {
      "trigger": "SecCertificateCopySubjectSummary",
      "contents": "SecCertificateCopySubjectSummary(${1:SecCertificateRef certificate})"
    },
    {
      "trigger": "SecCertificateCreateWithData",
      "contents": "SecCertificateCreateWithData(${1:CFAllocatorRef allocator}, ${2:CFDataRef data})"
    },
    {
      "trigger": "SecIdentityCopyCertificate",
      "contents": "SecIdentityCopyCertificate(${1:SecIdentityRef identityRef}, ${2:SecCertificateRef* certificateRef})"
    },
    {
      "trigger": "SecIdentityCopyPrivateKey",
      "contents": "SecIdentityCopyPrivateKey(${1:SecIdentityRef identityRef}, ${2:SecKeyRef* privateKeyRef})"
    },
    {
      "trigger": "SecItemAdd",
      "contents": "SecItemAdd(${1:CFDictionaryRef attributes}, ${2:CFTypeRef* result})"
    },
    {
      "trigger": "SecItemCopyMatching",
      "contents": "SecItemCopyMatching(${1:CFDictionaryRef query}, ${2:CFTypeRef* result})"
    },
    {
      "trigger": "SecItemDelete",
      "contents": "SecItemDelete(${1:CFDictionaryRef query})"
    },
    {
      "trigger": "SecItemUpdate",
      "contents": "SecItemUpdate(${1:CFDictionaryRef query}, ${2:CFDictionaryRef attributesToUpdate})"
    },
    {
      "trigger": "SecKeyDecrypt",
      "contents": "SecKeyDecrypt(${1:SecKeyRef key}, ${2:SecPadding padding}, ${3:uint8_t* cipherText}, ${4:size_t cipherTextLen}, ${5:uint8_t* plainText}, ${6:size_t* plainTextLen})"
    },
    {
      "trigger": "SecKeyEncrypt",
      "contents": "SecKeyEncrypt(${1:SecKeyRef key}, ${2:SecPadding padding}, ${3:uint8_t* plainText}, ${4:size_t plainTextLen}, ${5:uint8_t* cipherText}, ${6:size_t* cipherTextLen})"
    },
    {
      "trigger": "SecKeyGeneratePair",
      "contents": "SecKeyGeneratePair(${1:CFDictionaryRef parameters}, ${2:SecKeyRef* publicKey}, ${3:SecKeyRef* privateKey})"
    },
    {
      "trigger": "SecKeyGetBlockSize",
      "contents": "SecKeyGetBlockSize(${1:SecKeyRef key})"
    },
    {
      "trigger": "SecKeyRawSign",
      "contents": "SecKeyRawSign(${1:SecKeyRef key}, ${2:SecPadding padding}, ${3:uint8_t* dataToSign}, ${4:size_t dataToSignLen}, ${5:uint8_t* sig}, ${6:size_t* sigLen})"
    },
    {
      "trigger": "SecKeyRawVerify",
      "contents": "SecKeyRawVerify(${1:SecKeyRef key}, ${2:SecPadding padding}, ${3:uint8_t* signedData}, ${4:size_t signedDataLen}, ${5:uint8_t* sig}, ${6:size_t sigLen})"
    },
    {
      "trigger": "SecPKCS12Import",
      "contents": "SecPKCS12Import(${1:CFDataRef pkcs12_data}, ${2:CFDictionaryRef options}, ${3:CFArrayRef* items})"
    },
    {
      "trigger": "SecPolicyCreateSSL",
      "contents": "SecPolicyCreateSSL(${1:Boolean server}, ${2:CFStringRef hostname})"
    },
    {
      "trigger": "SecRandomCopyBytes",
      "contents": "SecRandomCopyBytes(${1:SecRandomRef rnd}, ${2:size_t count}, ${3:uint8_t* bytes})"
    },
    {
      "trigger": "SecTrustCopyExceptions",
      "contents": "SecTrustCopyExceptions(${1:SecTrustRef trust})"
    },
    {
      "trigger": "SecTrustCopyPublicKey",
      "contents": "SecTrustCopyPublicKey(${1:SecTrustRef trust})"
    },
    {
      "trigger": "SecTrustCreateWithCertificates",
      "contents": "SecTrustCreateWithCertificates(${1:CFTypeRef certificates}, ${2:CFTypeRef policies}, ${3:SecTrustRef* trustRef})"
    },
    {
      "trigger": "SecTrustEvaluate",
      "contents": "SecTrustEvaluate(${1:SecTrustRef trust}, ${2:SecTrustResultType* result})"
    },
    {
      "trigger": "SecTrustGetCertificateAtIndex",
      "contents": "SecTrustGetCertificateAtIndex(${1:SecTrustRef trust}, ${2:CFIndex ix})"
    },
    {
      "trigger": "SecTrustGetCertificateCount",
      "contents": "SecTrustGetCertificateCount(${1:SecTrustRef trust})"
    },
    {
      "trigger": "SecTrustGetVerifyTime",
      "contents": "SecTrustGetVerifyTime(${1:SecTrustRef trust})"
    },
    {
      "trigger": "SecTrustSetAnchorCertificates",
      "contents": "SecTrustSetAnchorCertificates(${1:SecTrustRef trust}, ${2:CFArrayRef anchorCertificates})"
    },
    {
      "trigger": "SecTrustSetAnchorCertificatesOnly",
      "contents": "SecTrustSetAnchorCertificatesOnly(${1:SecTrustRef trust}, ${2:Boolean anchorCertificatesOnly})"
    },
    {
      "trigger": "SecTrustSetExceptions",
      "contents": "SecTrustSetExceptions(${1:SecTrustRef trust}, ${2:CFDataRef exceptions})"
    },
    {
      "trigger": "SecTrustSetVerifyDate",
      "contents": "SecTrustSetVerifyDate(${1:SecTrustRef trust}, ${2:CFDateRef verifyDate})"
    },
    {
      "trigger": "TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA (19)",
      "contents": "TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA"
    },
    {
      "trigger": "TLS_DHE_DSS_WITH_AES_128_CBC_SHA (50)",
      "contents": "TLS_DHE_DSS_WITH_AES_128_CBC_SHA"
    },
    {
      "trigger": "TLS_DHE_DSS_WITH_AES_128_CBC_SHA256 (64)",
      "contents": "TLS_DHE_DSS_WITH_AES_128_CBC_SHA256"
    },
    {
      "trigger": "TLS_DHE_DSS_WITH_AES_128_GCM_SHA256 (162)",
      "contents": "TLS_DHE_DSS_WITH_AES_128_GCM_SHA256"
    },
    {
      "trigger": "TLS_DHE_DSS_WITH_AES_256_CBC_SHA (56)",
      "contents": "TLS_DHE_DSS_WITH_AES_256_CBC_SHA"
    },
    {
      "trigger": "TLS_DHE_DSS_WITH_AES_256_CBC_SHA256 (106)",
      "contents": "TLS_DHE_DSS_WITH_AES_256_CBC_SHA256"
    },
    {
      "trigger": "TLS_DHE_DSS_WITH_AES_256_GCM_SHA384 (163)",
      "contents": "TLS_DHE_DSS_WITH_AES_256_GCM_SHA384"
    },
    {
      "trigger": "TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA (22)",
      "contents": "TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA"
    },
    {
      "trigger": "TLS_DHE_RSA_WITH_AES_128_CBC_SHA (51)",
      "contents": "TLS_DHE_RSA_WITH_AES_128_CBC_SHA"
    },
    {
      "trigger": "TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 (103)",
      "contents": "TLS_DHE_RSA_WITH_AES_128_CBC_SHA256"
    },
    {
      "trigger": "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 (158)",
      "contents": "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256"
    },
    {
      "trigger": "TLS_DHE_RSA_WITH_AES_256_CBC_SHA (57)",
      "contents": "TLS_DHE_RSA_WITH_AES_256_CBC_SHA"
    },
    {
      "trigger": "TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 (107)",
      "contents": "TLS_DHE_RSA_WITH_AES_256_CBC_SHA256"
    },
    {
      "trigger": "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 (159)",
      "contents": "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384"
    },
    {
      "trigger": "TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA (13)",
      "contents": "TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA"
    },
    {
      "trigger": "TLS_DH_DSS_WITH_AES_128_CBC_SHA (48)",
      "contents": "TLS_DH_DSS_WITH_AES_128_CBC_SHA"
    },
    {
      "trigger": "TLS_DH_DSS_WITH_AES_128_CBC_SHA256 (62)",
      "contents": "TLS_DH_DSS_WITH_AES_128_CBC_SHA256"
    },
    {
      "trigger": "TLS_DH_DSS_WITH_AES_128_GCM_SHA256 (164)",
      "contents": "TLS_DH_DSS_WITH_AES_128_GCM_SHA256"
    },
    {
      "trigger": "TLS_DH_DSS_WITH_AES_256_CBC_SHA (54)",
      "contents": "TLS_DH_DSS_WITH_AES_256_CBC_SHA"
    },
    {
      "trigger": "TLS_DH_DSS_WITH_AES_256_CBC_SHA256 (104)",
      "contents": "TLS_DH_DSS_WITH_AES_256_CBC_SHA256"
    },
    {
      "trigger": "TLS_DH_DSS_WITH_AES_256_GCM_SHA384 (165)",
      "contents": "TLS_DH_DSS_WITH_AES_256_GCM_SHA384"
    },
    {
      "trigger": "TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA (16)",
      "contents": "TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA"
    },
    {
      "trigger": "TLS_DH_RSA_WITH_AES_128_CBC_SHA (49)",
      "contents": "TLS_DH_RSA_WITH_AES_128_CBC_SHA"
    },
    {
      "trigger": "TLS_DH_RSA_WITH_AES_128_CBC_SHA256 (63)",
      "contents": "TLS_DH_RSA_WITH_AES_128_CBC_SHA256"
    },
    {
      "trigger": "TLS_DH_RSA_WITH_AES_128_GCM_SHA256 (160)",
      "contents": "TLS_DH_RSA_WITH_AES_128_GCM_SHA256"
    },
    {
      "trigger": "TLS_DH_RSA_WITH_AES_256_CBC_SHA (55)",
      "contents": "TLS_DH_RSA_WITH_AES_256_CBC_SHA"
    },
    {
      "trigger": "TLS_DH_RSA_WITH_AES_256_CBC_SHA256 (105)",
      "contents": "TLS_DH_RSA_WITH_AES_256_CBC_SHA256"
    },
    {
      "trigger": "TLS_DH_RSA_WITH_AES_256_GCM_SHA384 (161)",
      "contents": "TLS_DH_RSA_WITH_AES_256_GCM_SHA384"
    },
    {
      "trigger": "TLS_DH_anon_WITH_3DES_EDE_CBC_SHA (27)",
      "contents": "TLS_DH_anon_WITH_3DES_EDE_CBC_SHA"
    },
    {
      "trigger": "TLS_DH_anon_WITH_AES_128_CBC_SHA (52)",
      "contents": "TLS_DH_anon_WITH_AES_128_CBC_SHA"
    },
    {
      "trigger": "TLS_DH_anon_WITH_AES_128_CBC_SHA256 (108)",
      "contents": "TLS_DH_anon_WITH_AES_128_CBC_SHA256"
    },
    {
      "trigger": "TLS_DH_anon_WITH_AES_128_GCM_SHA256 (166)",
      "contents": "TLS_DH_anon_WITH_AES_128_GCM_SHA256"
    },
    {
      "trigger": "TLS_DH_anon_WITH_AES_256_CBC_SHA (58)",
      "contents": "TLS_DH_anon_WITH_AES_256_CBC_SHA"
    },
    {
      "trigger": "TLS_DH_anon_WITH_AES_256_CBC_SHA256 (109)",
      "contents": "TLS_DH_anon_WITH_AES_256_CBC_SHA256"
    },
    {
      "trigger": "TLS_DH_anon_WITH_AES_256_GCM_SHA384 (167)",
      "contents": "TLS_DH_anon_WITH_AES_256_GCM_SHA384"
    },
    {
      "trigger": "TLS_DH_anon_WITH_RC4_128_MD5 (24)",
      "contents": "TLS_DH_anon_WITH_RC4_128_MD5"
    },
    {
      "trigger": "TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA (49160)",
      "contents": "TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA"
    },
    {
      "trigger": "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA (49161)",
      "contents": "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA"
    },
    {
      "trigger": "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 (49187)",
      "contents": "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256"
    },
    {
      "trigger": "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 (49195)",
      "contents": "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256"
    },
    {
      "trigger": "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA (49162)",
      "contents": "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA"
    },
    {
      "trigger": "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 (49188)",
      "contents": "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384"
    },
    {
      "trigger": "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 (49196)",
      "contents": "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"
    },
    {
      "trigger": "TLS_ECDHE_ECDSA_WITH_NULL_SHA (49158)",
      "contents": "TLS_ECDHE_ECDSA_WITH_NULL_SHA"
    },
    {
      "trigger": "TLS_ECDHE_ECDSA_WITH_RC4_128_SHA (49159)",
      "contents": "TLS_ECDHE_ECDSA_WITH_RC4_128_SHA"
    },
    {
      "trigger": "TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA (49170)",
      "contents": "TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA"
    },
    {
      "trigger": "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA (49171)",
      "contents": "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA"
    },
    {
      "trigger": "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 (49191)",
      "contents": "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256"
    },
    {
      "trigger": "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 (49199)",
      "contents": "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"
    },
    {
      "trigger": "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA (49172)",
      "contents": "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA"
    },
    {
      "trigger": "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 (49192)",
      "contents": "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384"
    },
    {
      "trigger": "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 (49200)",
      "contents": "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384"
    },
    {
      "trigger": "TLS_ECDHE_RSA_WITH_NULL_SHA (49168)",
      "contents": "TLS_ECDHE_RSA_WITH_NULL_SHA"
    },
    {
      "trigger": "TLS_ECDHE_RSA_WITH_RC4_128_SHA (49169)",
      "contents": "TLS_ECDHE_RSA_WITH_RC4_128_SHA"
    },
    {
      "trigger": "TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA (49155)",
      "contents": "TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA"
    },
    {
      "trigger": "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA (49156)",
      "contents": "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA"
    },
    {
      "trigger": "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256 (49189)",
      "contents": "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256"
    },
    {
      "trigger": "TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 (49197)",
      "contents": "TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256"
    },
    {
      "trigger": "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA (49157)",
      "contents": "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA"
    },
    {
      "trigger": "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384 (49190)",
      "contents": "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384"
    },
    {
      "trigger": "TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 (49198)",
      "contents": "TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384"
    },
    {
      "trigger": "TLS_ECDH_ECDSA_WITH_NULL_SHA (49153)",
      "contents": "TLS_ECDH_ECDSA_WITH_NULL_SHA"
    },
    {
      "trigger": "TLS_ECDH_ECDSA_WITH_RC4_128_SHA (49154)",
      "contents": "TLS_ECDH_ECDSA_WITH_RC4_128_SHA"
    },
    {
      "trigger": "TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA (49165)",
      "contents": "TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA"
    },
    {
      "trigger": "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA (49166)",
      "contents": "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA"
    },
    {
      "trigger": "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256 (49193)",
      "contents": "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256"
    },
    {
      "trigger": "TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256 (49201)",
      "contents": "TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256"
    },
    {
      "trigger": "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA (49167)",
      "contents": "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA"
    },
    {
      "trigger": "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384 (49194)",
      "contents": "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384"
    },
    {
      "trigger": "TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384 (49202)",
      "contents": "TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384"
    },
    {
      "trigger": "TLS_ECDH_RSA_WITH_NULL_SHA (49163)",
      "contents": "TLS_ECDH_RSA_WITH_NULL_SHA"
    },
    {
      "trigger": "TLS_ECDH_RSA_WITH_RC4_128_SHA (49164)",
      "contents": "TLS_ECDH_RSA_WITH_RC4_128_SHA"
    },
    {
      "trigger": "TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA (49175)",
      "contents": "TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA"
    },
    {
      "trigger": "TLS_ECDH_anon_WITH_AES_128_CBC_SHA (49176)",
      "contents": "TLS_ECDH_anon_WITH_AES_128_CBC_SHA"
    },
    {
      "trigger": "TLS_ECDH_anon_WITH_AES_256_CBC_SHA (49177)",
      "contents": "TLS_ECDH_anon_WITH_AES_256_CBC_SHA"
    },
    {
      "trigger": "TLS_ECDH_anon_WITH_NULL_SHA (49173)",
      "contents": "TLS_ECDH_anon_WITH_NULL_SHA"
    },
    {
      "trigger": "TLS_ECDH_anon_WITH_RC4_128_SHA (49174)",
      "contents": "TLS_ECDH_anon_WITH_RC4_128_SHA"
    },
    {
      "trigger": "TLS_EMPTY_RENEGOTIATION_INFO_SCSV (255)",
      "contents": "TLS_EMPTY_RENEGOTIATION_INFO_SCSV"
    },
    {
      "trigger": "TLS_NULL_WITH_NULL_NULL (0)",
      "contents": "TLS_NULL_WITH_NULL_NULL"
    },
    {
      "trigger": "TLS_RSA_WITH_3DES_EDE_CBC_SHA (10)",
      "contents": "TLS_RSA_WITH_3DES_EDE_CBC_SHA"
    },
    {
      "trigger": "TLS_RSA_WITH_AES_128_CBC_SHA (47)",
      "contents": "TLS_RSA_WITH_AES_128_CBC_SHA"
    },
    {
      "trigger": "TLS_RSA_WITH_AES_128_CBC_SHA256 (60)",
      "contents": "TLS_RSA_WITH_AES_128_CBC_SHA256"
    },
    {
      "trigger": "TLS_RSA_WITH_AES_128_GCM_SHA256 (156)",
      "contents": "TLS_RSA_WITH_AES_128_GCM_SHA256"
    },
    {
      "trigger": "TLS_RSA_WITH_AES_256_CBC_SHA (53)",
      "contents": "TLS_RSA_WITH_AES_256_CBC_SHA"
    },
    {
      "trigger": "TLS_RSA_WITH_AES_256_CBC_SHA256 (61)",
      "contents": "TLS_RSA_WITH_AES_256_CBC_SHA256"
    },
    {
      "trigger": "TLS_RSA_WITH_AES_256_GCM_SHA384 (157)",
      "contents": "TLS_RSA_WITH_AES_256_GCM_SHA384"
    },
    {
      "trigger": "TLS_RSA_WITH_NULL_MD5 (1)",
      "contents": "TLS_RSA_WITH_NULL_MD5"
    },
    {
      "trigger": "TLS_RSA_WITH_NULL_SHA (2)",
      "contents": "TLS_RSA_WITH_NULL_SHA"
    },
    {
      "trigger": "TLS_RSA_WITH_NULL_SHA256 (59)",
      "contents": "TLS_RSA_WITH_NULL_SHA256"
    },
    {
      "trigger": "TLS_RSA_WITH_RC4_128_MD5 (4)",
      "contents": "TLS_RSA_WITH_RC4_128_MD5"
    },
    {
      "trigger": "TLS_RSA_WITH_RC4_128_SHA (5)",
      "contents": "TLS_RSA_WITH_RC4_128_SHA"
    },
    {
      "trigger": "TRUE (1)",
      "contents": "TRUE"
    },
    {
      "trigger": "TWRequestMethodDELETE (2)",
      "contents": "TWRequestMethodDELETE"
    },
    {
      "trigger": "TWRequestMethodGET (0)",
      "contents": "TWRequestMethodGET"
    },
    {
      "trigger": "TWRequestMethodPOST (1)",
      "contents": "TWRequestMethodPOST"
    },
    {
      "trigger": "TWTweetComposeViewControllerResultCancelled (0)",
      "contents": "TWTweetComposeViewControllerResultCancelled"
    },
    {
      "trigger": "TWTweetComposeViewControllerResultDone (1)",
      "contents": "TWTweetComposeViewControllerResultDone"
    },
    {
      "trigger": "UIAccessibilityAnnouncementNotification (UIAccessibilityNotifications)",
      "contents": "UIAccessibilityAnnouncementNotification"
    },
    {
      "trigger": "UIAccessibilityClosedCaptioningStatusDidChangeNotification (NSString*)",
      "contents": "UIAccessibilityClosedCaptioningStatusDidChangeNotification"
    },
    {
      "trigger": "UIAccessibilityLayoutChangedNotification (UIAccessibilityNotifications)",
      "contents": "UIAccessibilityLayoutChangedNotification"
    },
    {
      "trigger": "UIAccessibilityMonoAudioStatusDidChangeNotification (NSString*)",
      "contents": "UIAccessibilityMonoAudioStatusDidChangeNotification"
    },
    {
      "trigger": "UIAccessibilityPageScrolledNotification (UIAccessibilityNotifications)",
      "contents": "UIAccessibilityPageScrolledNotification"
    },
    {
      "trigger": "UIAccessibilityPostNotification",
      "contents": "UIAccessibilityPostNotification(${1:UIAccessibilityNotifications notification}, ${2:id argument})"
    },
    {
      "trigger": "UIAccessibilityScreenChangedNotification (UIAccessibilityNotifications)",
      "contents": "UIAccessibilityScreenChangedNotification"
    },
    {
      "trigger": "UIAccessibilityScrollDirectionDown (4)",
      "contents": "UIAccessibilityScrollDirectionDown"
    },
    {
      "trigger": "UIAccessibilityScrollDirectionLeft (2)",
      "contents": "UIAccessibilityScrollDirectionLeft"
    },
    {
      "trigger": "UIAccessibilityScrollDirectionNext (5)",
      "contents": "UIAccessibilityScrollDirectionNext"
    },
    {
      "trigger": "UIAccessibilityScrollDirectionPrevious (6)",
      "contents": "UIAccessibilityScrollDirectionPrevious"
    },
    {
      "trigger": "UIAccessibilityScrollDirectionRight (1)",
      "contents": "UIAccessibilityScrollDirectionRight"
    },
    {
      "trigger": "UIAccessibilityScrollDirectionUp (3)",
      "contents": "UIAccessibilityScrollDirectionUp"
    },
    {
      "trigger": "UIAccessibilityTraitAdjustable (UIAccessibilityTraits)",
      "contents": "UIAccessibilityTraitAdjustable"
    },
    {
      "trigger": "UIAccessibilityTraitAllowsDirectInteraction (UIAccessibilityTraits)",
      "contents": "UIAccessibilityTraitAllowsDirectInteraction"
    },
    {
      "trigger": "UIAccessibilityTraitButton (UIAccessibilityTraits)",
      "contents": "UIAccessibilityTraitButton"
    },
    {
      "trigger": "UIAccessibilityTraitCausesPageTurn (UIAccessibilityTraits)",
      "contents": "UIAccessibilityTraitCausesPageTurn"
    },
    {
      "trigger": "UIAccessibilityTraitImage (UIAccessibilityTraits)",
      "contents": "UIAccessibilityTraitImage"
    },
    {
      "trigger": "UIAccessibilityTraitKeyboardKey (UIAccessibilityTraits)",
      "contents": "UIAccessibilityTraitKeyboardKey"
    },
    {
      "trigger": "UIAccessibilityTraitLink (UIAccessibilityTraits)",
      "contents": "UIAccessibilityTraitLink"
    },
    {
      "trigger": "UIAccessibilityTraitNone (UIAccessibilityTraits)",
      "contents": "UIAccessibilityTraitNone"
    },
    {
      "trigger": "UIAccessibilityTraitNotEnabled (UIAccessibilityTraits)",
      "contents": "UIAccessibilityTraitNotEnabled"
    },
    {
      "trigger": "UIAccessibilityTraitPlaysSound (UIAccessibilityTraits)",
      "contents": "UIAccessibilityTraitPlaysSound"
    },
    {
      "trigger": "UIAccessibilityTraitSearchField (UIAccessibilityTraits)",
      "contents": "UIAccessibilityTraitSearchField"
    },
    {
      "trigger": "UIAccessibilityTraitSelected (UIAccessibilityTraits)",
      "contents": "UIAccessibilityTraitSelected"
    },
    {
      "trigger": "UIAccessibilityTraitStartsMediaSession (UIAccessibilityTraits)",
      "contents": "UIAccessibilityTraitStartsMediaSession"
    },
    {
      "trigger": "UIAccessibilityTraitStaticText (UIAccessibilityTraits)",
      "contents": "UIAccessibilityTraitStaticText"
    },
    {
      "trigger": "UIAccessibilityTraitSummaryElement (UIAccessibilityTraits)",
      "contents": "UIAccessibilityTraitSummaryElement"
    },
    {
      "trigger": "UIAccessibilityTraitUpdatesFrequently (UIAccessibilityTraits)",
      "contents": "UIAccessibilityTraitUpdatesFrequently"
    },
    {
      "trigger": "UIAccessibilityVoiceOverStatusChanged (NSString*)",
      "contents": "UIAccessibilityVoiceOverStatusChanged"
    },
    {
      "trigger": "UIAccessibilityZoomFocusChanged",
      "contents": "UIAccessibilityZoomFocusChanged(${1:UIAccessibilityZoomType type}, ${2:CGRect frame}, ${3:UIView* view})"
    },
    {
      "trigger": "UIAccessibilityZoomTypeInsertionPoint (0)",
      "contents": "UIAccessibilityZoomTypeInsertionPoint"
    },
    {
      "trigger": "UIActionSheetStyleAutomatic (-1)",
      "contents": "UIActionSheetStyleAutomatic"
    },
    {
      "trigger": "UIActionSheetStyleBlackOpaque (1)",
      "contents": "UIActionSheetStyleBlackOpaque"
    },
    {
      "trigger": "UIActionSheetStyleBlackTranslucent (2)",
      "contents": "UIActionSheetStyleBlackTranslucent"
    },
    {
      "trigger": "UIActionSheetStyleDefault (0)",
      "contents": "UIActionSheetStyleDefault"
    },
    {
      "trigger": "UIActivityIndicatorViewStyleGray (2)",
      "contents": "UIActivityIndicatorViewStyleGray"
    },
    {
      "trigger": "UIActivityIndicatorViewStyleWhite (1)",
      "contents": "UIActivityIndicatorViewStyleWhite"
    },
    {
      "trigger": "UIActivityIndicatorViewStyleWhiteLarge (0)",
      "contents": "UIActivityIndicatorViewStyleWhiteLarge"
    },
    {
      "trigger": "UIAlertViewStyleDefault (0)",
      "contents": "UIAlertViewStyleDefault"
    },
    {
      "trigger": "UIAlertViewStyleLoginAndPasswordInput (3)",
      "contents": "UIAlertViewStyleLoginAndPasswordInput"
    },
    {
      "trigger": "UIAlertViewStylePlainTextInput (2)",
      "contents": "UIAlertViewStylePlainTextInput"
    },
    {
      "trigger": "UIAlertViewStyleSecureTextInput (1)",
      "contents": "UIAlertViewStyleSecureTextInput"
    },
    {
      "trigger": "UIAppearance.appearanceWhenContainedIn:",
      "contents": "UIAppearance.appearanceWhenContainedIn(${1:Class* ContainerClass})"
    },
    {
      "trigger": "UIApplicationDidBecomeActiveNotification (NSString*)",
      "contents": "UIApplicationDidBecomeActiveNotification"
    },
    {
      "trigger": "UIApplicationDidChangeStatusBarFrameNotification (NSString*)",
      "contents": "UIApplicationDidChangeStatusBarFrameNotification"
    },
    {
      "trigger": "UIApplicationDidChangeStatusBarOrientationNotification (NSString*)",
      "contents": "UIApplicationDidChangeStatusBarOrientationNotification"
    },
    {
      "trigger": "UIApplicationDidEnterBackgroundNotification (NSString*)",
      "contents": "UIApplicationDidEnterBackgroundNotification"
    },
    {
      "trigger": "UIApplicationDidFinishLaunchingNotification (NSString*)",
      "contents": "UIApplicationDidFinishLaunchingNotification"
    },
    {
      "trigger": "UIApplicationDidReceiveMemoryWarningNotification (NSString*)",
      "contents": "UIApplicationDidReceiveMemoryWarningNotification"
    },
    {
      "trigger": "UIApplicationLaunchOptionsAnnotationKey (NSString*)",
      "contents": "UIApplicationLaunchOptionsAnnotationKey"
    },
    {
      "trigger": "UIApplicationLaunchOptionsLocalNotificationKey (NSString*)",
      "contents": "UIApplicationLaunchOptionsLocalNotificationKey"
    },
    {
      "trigger": "UIApplicationLaunchOptionsLocationKey (NSString*)",
      "contents": "UIApplicationLaunchOptionsLocationKey"
    },
    {
      "trigger": "UIApplicationLaunchOptionsNewsstandDownloadsKey (NSString*)",
      "contents": "UIApplicationLaunchOptionsNewsstandDownloadsKey"
    },
    {
      "trigger": "UIApplicationLaunchOptionsRemoteNotificationKey (NSString*)",
      "contents": "UIApplicationLaunchOptionsRemoteNotificationKey"
    },
    {
      "trigger": "UIApplicationLaunchOptionsSourceApplicationKey (NSString*)",
      "contents": "UIApplicationLaunchOptionsSourceApplicationKey"
    },
    {
      "trigger": "UIApplicationLaunchOptionsURLKey (NSString*)",
      "contents": "UIApplicationLaunchOptionsURLKey"
    },
    {
      "trigger": "UIApplicationMain",
      "contents": "UIApplicationMain(${1:int argc}, ${2:char** argv}, ${3:NSString* principalClassName}, ${4:NSString* delegateClassName})"
    },
    {
      "trigger": "UIApplicationProtectedDataDidBecomeAvailable (NSString*)",
      "contents": "UIApplicationProtectedDataDidBecomeAvailable"
    },
    {
      "trigger": "UIApplicationProtectedDataWillBecomeUnavailable (NSString*)",
      "contents": "UIApplicationProtectedDataWillBecomeUnavailable"
    },
    {
      "trigger": "UIApplicationSignificantTimeChangeNotification (NSString*)",
      "contents": "UIApplicationSignificantTimeChangeNotification"
    },
    {
      "trigger": "UIApplicationStateActive (0)",
      "contents": "UIApplicationStateActive"
    },
    {
      "trigger": "UIApplicationStateBackground (2)",
      "contents": "UIApplicationStateBackground"
    },
    {
      "trigger": "UIApplicationStateInactive (1)",
      "contents": "UIApplicationStateInactive"
    },
    {
      "trigger": "UIApplicationStatusBarFrameUserInfoKey (NSString*)",
      "contents": "UIApplicationStatusBarFrameUserInfoKey"
    },
    {
      "trigger": "UIApplicationStatusBarOrientationUserInfoKey (NSString*)",
      "contents": "UIApplicationStatusBarOrientationUserInfoKey"
    },
    {
      "trigger": "UIApplicationWillChangeStatusBarFrameNotification (NSString*)",
      "contents": "UIApplicationWillChangeStatusBarFrameNotification"
    },
    {
      "trigger": "UIApplicationWillChangeStatusBarOrientationNotification (NSString*)",
      "contents": "UIApplicationWillChangeStatusBarOrientationNotification"
    },
    {
      "trigger": "UIApplicationWillEnterForegroundNotification (NSString*)",
      "contents": "UIApplicationWillEnterForegroundNotification"
    },
    {
      "trigger": "UIApplicationWillResignActiveNotification (NSString*)",
      "contents": "UIApplicationWillResignActiveNotification"
    },
    {
      "trigger": "UIApplicationWillTerminateNotification (NSString*)",
      "contents": "UIApplicationWillTerminateNotification"
    },
    {
      "trigger": "UIBackgroundTaskInvalid (UIBackgroundTaskIdentifier)",
      "contents": "UIBackgroundTaskInvalid"
    },
    {
      "trigger": "UIBarButtonItemStyleBordered (1)",
      "contents": "UIBarButtonItemStyleBordered"
    },
    {
      "trigger": "UIBarButtonItemStyleDone (2)",
      "contents": "UIBarButtonItemStyleDone"
    },
    {
      "trigger": "UIBarButtonItemStylePlain (0)",
      "contents": "UIBarButtonItemStylePlain"
    },
    {
      "trigger": "UIBarButtonSystemItemAction (9)",
      "contents": "UIBarButtonSystemItemAction"
    },
    {
      "trigger": "UIBarButtonSystemItemAdd (4)",
      "contents": "UIBarButtonSystemItemAdd"
    },
    {
      "trigger": "UIBarButtonSystemItemBookmarks (11)",
      "contents": "UIBarButtonSystemItemBookmarks"
    },
    {
      "trigger": "UIBarButtonSystemItemCamera (15)",
      "contents": "UIBarButtonSystemItemCamera"
    },
    {
      "trigger": "UIBarButtonSystemItemCancel (1)",
      "contents": "UIBarButtonSystemItemCancel"
    },
    {
      "trigger": "UIBarButtonSystemItemCompose (7)",
      "contents": "UIBarButtonSystemItemCompose"
    },
    {
      "trigger": "UIBarButtonSystemItemDone (0)",
      "contents": "UIBarButtonSystemItemDone"
    },
    {
      "trigger": "UIBarButtonSystemItemEdit (2)",
      "contents": "UIBarButtonSystemItemEdit"
    },
    {
      "trigger": "UIBarButtonSystemItemFastForward (20)",
      "contents": "UIBarButtonSystemItemFastForward"
    },
    {
      "trigger": "UIBarButtonSystemItemFixedSpace (6)",
      "contents": "UIBarButtonSystemItemFixedSpace"
    },
    {
      "trigger": "UIBarButtonSystemItemFlexibleSpace (5)",
      "contents": "UIBarButtonSystemItemFlexibleSpace"
    },
    {
      "trigger": "UIBarButtonSystemItemOrganize (10)",
      "contents": "UIBarButtonSystemItemOrganize"
    },
    {
      "trigger": "UIBarButtonSystemItemPageCurl (23)",
      "contents": "UIBarButtonSystemItemPageCurl"
    },
    {
      "trigger": "UIBarButtonSystemItemPause (18)",
      "contents": "UIBarButtonSystemItemPause"
    },
    {
      "trigger": "UIBarButtonSystemItemPlay (17)",
      "contents": "UIBarButtonSystemItemPlay"
    },
    {
      "trigger": "UIBarButtonSystemItemRedo (22)",
      "contents": "UIBarButtonSystemItemRedo"
    },
    {
      "trigger": "UIBarButtonSystemItemRefresh (13)",
      "contents": "UIBarButtonSystemItemRefresh"
    },
    {
      "trigger": "UIBarButtonSystemItemReply (8)",
      "contents": "UIBarButtonSystemItemReply"
    },
    {
      "trigger": "UIBarButtonSystemItemRewind (19)",
      "contents": "UIBarButtonSystemItemRewind"
    },
    {
      "trigger": "UIBarButtonSystemItemSave (3)",
      "contents": "UIBarButtonSystemItemSave"
    },
    {
      "trigger": "UIBarButtonSystemItemSearch (12)",
      "contents": "UIBarButtonSystemItemSearch"
    },
    {
      "trigger": "UIBarButtonSystemItemStop (14)",
      "contents": "UIBarButtonSystemItemStop"
    },
    {
      "trigger": "UIBarButtonSystemItemTrash (16)",
      "contents": "UIBarButtonSystemItemTrash"
    },
    {
      "trigger": "UIBarButtonSystemItemUndo (21)",
      "contents": "UIBarButtonSystemItemUndo"
    },
    {
      "trigger": "UIBarMetricsDefault (0)",
      "contents": "UIBarMetricsDefault"
    },
    {
      "trigger": "UIBarMetricsLandscapePhone (1)",
      "contents": "UIBarMetricsLandscapePhone"
    },
    {
      "trigger": "UIBarStyleBlack (1)",
      "contents": "UIBarStyleBlack"
    },
    {
      "trigger": "UIBarStyleBlackOpaque (1)",
      "contents": "UIBarStyleBlackOpaque"
    },
    {
      "trigger": "UIBarStyleBlackTranslucent (2)",
      "contents": "UIBarStyleBlackTranslucent"
    },
    {
      "trigger": "UIBarStyleDefault (0)",
      "contents": "UIBarStyleDefault"
    },
    {
      "trigger": "UIBaselineAdjustmentAlignBaselines (0)",
      "contents": "UIBaselineAdjustmentAlignBaselines"
    },
    {
      "trigger": "UIBaselineAdjustmentAlignCenters (1)",
      "contents": "UIBaselineAdjustmentAlignCenters"
    },
    {
      "trigger": "UIBaselineAdjustmentNone (2)",
      "contents": "UIBaselineAdjustmentNone"
    },
    {
      "trigger": "UIBezierPath.bezierPathWithArcCenter:radius:startAngle:endAngle:clockwise:",
      "contents": "UIBezierPath.bezierPathWithArcCenter(${1:CGPoint center}, radius:${2:CGFloat radius}, startAngle:${3:CGFloat startAngle}, endAngle:${4:CGFloat endAngle}, clockwise:${5:BOOL clockwise})"
    },
    {
      "trigger": "UIBezierPath.bezierPathWithCGPath:",
      "contents": "UIBezierPath.bezierPathWithCGPath(${1:CGPathRef CGPath})"
    },
    {
      "trigger": "UIBezierPath.bezierPathWithOvalInRect:",
      "contents": "UIBezierPath.bezierPathWithOvalInRect(${1:CGRect rect})"
    },
    {
      "trigger": "UIBezierPath.bezierPathWithRect:",
      "contents": "UIBezierPath.bezierPathWithRect(${1:CGRect rect})"
    },
    {
      "trigger": "UIBezierPath.bezierPathWithRoundedRect:byRoundingCorners:cornerRadii:",
      "contents": "UIBezierPath.bezierPathWithRoundedRect(${1:CGRect rect}, byRoundingCorners:${2:UIRectCorner corners}, cornerRadii:${3:CGSize cornerRadii})"
    },
    {
      "trigger": "UIBezierPath.bezierPathWithRoundedRect:cornerRadius:",
      "contents": "UIBezierPath.bezierPathWithRoundedRect(${1:CGRect rect}, cornerRadius:${2:CGFloat cornerRadius})"
    },
    {
      "trigger": "UIButton.buttonWithType:",
      "contents": "UIButton.buttonWithType(${1:UIButtonType buttonType})"
    },
    {
      "trigger": "UIButtonTypeContactAdd (5)",
      "contents": "UIButtonTypeContactAdd"
    },
    {
      "trigger": "UIButtonTypeCustom (0)",
      "contents": "UIButtonTypeCustom"
    },
    {
      "trigger": "UIButtonTypeDetailDisclosure (2)",
      "contents": "UIButtonTypeDetailDisclosure"
    },
    {
      "trigger": "UIButtonTypeInfoDark (4)",
      "contents": "UIButtonTypeInfoDark"
    },
    {
      "trigger": "UIButtonTypeInfoLight (3)",
      "contents": "UIButtonTypeInfoLight"
    },
    {
      "trigger": "UIButtonTypeRoundedRect (1)",
      "contents": "UIButtonTypeRoundedRect"
    },
    {
      "trigger": "UIColor.colorWithCGColor:",
      "contents": "UIColor.colorWithCGColor(${1:CGColorRef cgColor})"
    },
    {
      "trigger": "UIColor.colorWithCIColor:",
      "contents": "UIColor.colorWithCIColor(${1:CIColor* ciColor})"
    },
    {
      "trigger": "UIColor.colorWithHue:saturation:brightness:alpha:",
      "contents": "UIColor.colorWithHue(${1:CGFloat hue}, saturation:${2:CGFloat saturation}, brightness:${3:CGFloat brightness}, alpha:${4:CGFloat alpha})"
    },
    {
      "trigger": "UIColor.colorWithPatternImage:",
      "contents": "UIColor.colorWithPatternImage(${1:UIImage* image})"
    },
    {
      "trigger": "UIColor.colorWithRed:green:blue:alpha:",
      "contents": "UIColor.colorWithRed(${1:CGFloat red}, green:${2:CGFloat green}, blue:${3:CGFloat blue}, alpha:${4:CGFloat alpha})"
    },
    {
      "trigger": "UIColor.colorWithWhite:alpha:",
      "contents": "UIColor.colorWithWhite(${1:CGFloat white}, alpha:${2:CGFloat alpha})"
    },
    {
      "trigger": "UIControlContentHorizontalAlignmentCenter (0)",
      "contents": "UIControlContentHorizontalAlignmentCenter"
    },
    {
      "trigger": "UIControlContentHorizontalAlignmentFill (3)",
      "contents": "UIControlContentHorizontalAlignmentFill"
    },
    {
      "trigger": "UIControlContentHorizontalAlignmentLeft (1)",
      "contents": "UIControlContentHorizontalAlignmentLeft"
    },
    {
      "trigger": "UIControlContentHorizontalAlignmentRight (2)",
      "contents": "UIControlContentHorizontalAlignmentRight"
    },
    {
      "trigger": "UIControlContentVerticalAlignmentBottom (2)",
      "contents": "UIControlContentVerticalAlignmentBottom"
    },
    {
      "trigger": "UIControlContentVerticalAlignmentCenter (0)",
      "contents": "UIControlContentVerticalAlignmentCenter"
    },
    {
      "trigger": "UIControlContentVerticalAlignmentFill (3)",
      "contents": "UIControlContentVerticalAlignmentFill"
    },
    {
      "trigger": "UIControlContentVerticalAlignmentTop (1)",
      "contents": "UIControlContentVerticalAlignmentTop"
    },
    {
      "trigger": "UIControlEventAllEditingEvents (983040)",
      "contents": "UIControlEventAllEditingEvents"
    },
    {
      "trigger": "UIControlEventAllEvents (4294967295)",
      "contents": "UIControlEventAllEvents"
    },
    {
      "trigger": "UIControlEventAllTouchEvents (4095)",
      "contents": "UIControlEventAllTouchEvents"
    },
    {
      "trigger": "UIControlEventApplicationReserved (251658240)",
      "contents": "UIControlEventApplicationReserved"
    },
    {
      "trigger": "UIControlEventEditingChanged (131072)",
      "contents": "UIControlEventEditingChanged"
    },
    {
      "trigger": "UIControlEventEditingDidBegin (65536)",
      "contents": "UIControlEventEditingDidBegin"
    },
    {
      "trigger": "UIControlEventEditingDidEnd (262144)",
      "contents": "UIControlEventEditingDidEnd"
    },
    {
      "trigger": "UIControlEventEditingDidEndOnExit (524288)",
      "contents": "UIControlEventEditingDidEndOnExit"
    },
    {
      "trigger": "UIControlEventSystemReserved (4026531840)",
      "contents": "UIControlEventSystemReserved"
    },
    {
      "trigger": "UIControlEventTouchCancel (256)",
      "contents": "UIControlEventTouchCancel"
    },
    {
      "trigger": "UIControlEventTouchDown (1)",
      "contents": "UIControlEventTouchDown"
    },
    {
      "trigger": "UIControlEventTouchDownRepeat (2)",
      "contents": "UIControlEventTouchDownRepeat"
    },
    {
      "trigger": "UIControlEventTouchDragEnter (16)",
      "contents": "UIControlEventTouchDragEnter"
    },
    {
      "trigger": "UIControlEventTouchDragExit (32)",
      "contents": "UIControlEventTouchDragExit"
    },
    {
      "trigger": "UIControlEventTouchDragInside (4)",
      "contents": "UIControlEventTouchDragInside"
    },
    {
      "trigger": "UIControlEventTouchDragOutside (8)",
      "contents": "UIControlEventTouchDragOutside"
    },
    {
      "trigger": "UIControlEventTouchUpInside (64)",
      "contents": "UIControlEventTouchUpInside"
    },
    {
      "trigger": "UIControlEventTouchUpOutside (128)",
      "contents": "UIControlEventTouchUpOutside"
    },
    {
      "trigger": "UIControlEventValueChanged (4096)",
      "contents": "UIControlEventValueChanged"
    },
    {
      "trigger": "UIControlStateApplication (16711680)",
      "contents": "UIControlStateApplication"
    },
    {
      "trigger": "UIControlStateDisabled (2)",
      "contents": "UIControlStateDisabled"
    },
    {
      "trigger": "UIControlStateHighlighted (1)",
      "contents": "UIControlStateHighlighted"
    },
    {
      "trigger": "UIControlStateNormal (0)",
      "contents": "UIControlStateNormal"
    },
    {
      "trigger": "UIControlStateReserved (4278190080)",
      "contents": "UIControlStateReserved"
    },
    {
      "trigger": "UIControlStateSelected (4)",
      "contents": "UIControlStateSelected"
    },
    {
      "trigger": "UIDataDetectorTypeAddress (4)",
      "contents": "UIDataDetectorTypeAddress"
    },
    {
      "trigger": "UIDataDetectorTypeAll (4294967295)",
      "contents": "UIDataDetectorTypeAll"
    },
    {
      "trigger": "UIDataDetectorTypeCalendarEvent (8)",
      "contents": "UIDataDetectorTypeCalendarEvent"
    },
    {
      "trigger": "UIDataDetectorTypeLink (2)",
      "contents": "UIDataDetectorTypeLink"
    },
    {
      "trigger": "UIDataDetectorTypeNone (0)",
      "contents": "UIDataDetectorTypeNone"
    },
    {
      "trigger": "UIDataDetectorTypePhoneNumber (1)",
      "contents": "UIDataDetectorTypePhoneNumber"
    },
    {
      "trigger": "UIDatePickerModeCountDownTimer (3)",
      "contents": "UIDatePickerModeCountDownTimer"
    },
    {
      "trigger": "UIDatePickerModeDate (1)",
      "contents": "UIDatePickerModeDate"
    },
    {
      "trigger": "UIDatePickerModeDateAndTime (2)",
      "contents": "UIDatePickerModeDateAndTime"
    },
    {
      "trigger": "UIDatePickerModeTime (0)",
      "contents": "UIDatePickerModeTime"
    },
    {
      "trigger": "UIDeviceBatteryLevelDidChangeNotification (NSString*)",
      "contents": "UIDeviceBatteryLevelDidChangeNotification"
    },
    {
      "trigger": "UIDeviceBatteryStateCharging (2)",
      "contents": "UIDeviceBatteryStateCharging"
    },
    {
      "trigger": "UIDeviceBatteryStateDidChangeNotification (NSString*)",
      "contents": "UIDeviceBatteryStateDidChangeNotification"
    },
    {
      "trigger": "UIDeviceBatteryStateFull (3)",
      "contents": "UIDeviceBatteryStateFull"
    },
    {
      "trigger": "UIDeviceBatteryStateUnknown (0)",
      "contents": "UIDeviceBatteryStateUnknown"
    },
    {
      "trigger": "UIDeviceBatteryStateUnplugged (1)",
      "contents": "UIDeviceBatteryStateUnplugged"
    },
    {
      "trigger": "UIDeviceOrientationDidChangeNotification (NSString*)",
      "contents": "UIDeviceOrientationDidChangeNotification"
    },
    {
      "trigger": "UIDeviceOrientationFaceDown (6)",
      "contents": "UIDeviceOrientationFaceDown"
    },
    {
      "trigger": "UIDeviceOrientationFaceUp (5)",
      "contents": "UIDeviceOrientationFaceUp"
    },
    {
      "trigger": "UIDeviceOrientationLandscapeLeft (3)",
      "contents": "UIDeviceOrientationLandscapeLeft"
    },
    {
      "trigger": "UIDeviceOrientationLandscapeRight (4)",
      "contents": "UIDeviceOrientationLandscapeRight"
    },
    {
      "trigger": "UIDeviceOrientationPortrait (1)",
      "contents": "UIDeviceOrientationPortrait"
    },
    {
      "trigger": "UIDeviceOrientationPortraitUpsideDown (2)",
      "contents": "UIDeviceOrientationPortraitUpsideDown"
    },
    {
      "trigger": "UIDeviceOrientationUnknown (0)",
      "contents": "UIDeviceOrientationUnknown"
    },
    {
      "trigger": "UIDeviceProximityStateDidChangeNotification (NSString*)",
      "contents": "UIDeviceProximityStateDidChangeNotification"
    },
    {
      "trigger": "UIDocumentChangeCleared (3)",
      "contents": "UIDocumentChangeCleared"
    },
    {
      "trigger": "UIDocumentChangeDone (0)",
      "contents": "UIDocumentChangeDone"
    },
    {
      "trigger": "UIDocumentChangeRedone (2)",
      "contents": "UIDocumentChangeRedone"
    },
    {
      "trigger": "UIDocumentChangeUndone (1)",
      "contents": "UIDocumentChangeUndone"
    },
    {
      "trigger": "UIDocumentInteractionController.interactionControllerWithURL:",
      "contents": "UIDocumentInteractionController.interactionControllerWithURL(${1:NSURL* url})"
    },
    {
      "trigger": "UIDocumentSaveForCreating (0)",
      "contents": "UIDocumentSaveForCreating"
    },
    {
      "trigger": "UIDocumentSaveForOverwriting (1)",
      "contents": "UIDocumentSaveForOverwriting"
    },
    {
      "trigger": "UIDocumentStateChangedNotification (NSString*)",
      "contents": "UIDocumentStateChangedNotification"
    },
    {
      "trigger": "UIDocumentStateClosed (1)",
      "contents": "UIDocumentStateClosed"
    },
    {
      "trigger": "UIDocumentStateEditingDisabled (8)",
      "contents": "UIDocumentStateEditingDisabled"
    },
    {
      "trigger": "UIDocumentStateInConflict (2)",
      "contents": "UIDocumentStateInConflict"
    },
    {
      "trigger": "UIDocumentStateNormal (0)",
      "contents": "UIDocumentStateNormal"
    },
    {
      "trigger": "UIDocumentStateSavingError (4)",
      "contents": "UIDocumentStateSavingError"
    },
    {
      "trigger": "UIEdgeInsetsEqualToEdgeInsets",
      "contents": "UIEdgeInsetsEqualToEdgeInsets(${1:UIEdgeInsets insets1}, ${2:UIEdgeInsets insets2})"
    },
    {
      "trigger": "UIEdgeInsetsFromString",
      "contents": "UIEdgeInsetsFromString(${1:NSString* string})"
    },
    {
      "trigger": "UIEdgeInsetsInsetRect",
      "contents": "UIEdgeInsetsInsetRect(${1:CGRect rect}, ${2:UIEdgeInsets insets})"
    },
    {
      "trigger": "UIEdgeInsetsMake",
      "contents": "UIEdgeInsetsMake(${1:CGFloat top}, ${2:CGFloat left}, ${3:CGFloat bottom}, ${4:CGFloat right})"
    },
    {
      "trigger": "UIEdgeInsetsZero (UIEdgeInsets)",
      "contents": "UIEdgeInsetsZero"
    },
    {
      "trigger": "UIEventSubtypeMotionShake (1)",
      "contents": "UIEventSubtypeMotionShake"
    },
    {
      "trigger": "UIEventSubtypeNone (0)",
      "contents": "UIEventSubtypeNone"
    },
    {
      "trigger": "UIEventSubtypeRemoteControlBeginSeekingBackward (106)",
      "contents": "UIEventSubtypeRemoteControlBeginSeekingBackward"
    },
    {
      "trigger": "UIEventSubtypeRemoteControlBeginSeekingForward (108)",
      "contents": "UIEventSubtypeRemoteControlBeginSeekingForward"
    },
    {
      "trigger": "UIEventSubtypeRemoteControlEndSeekingBackward (107)",
      "contents": "UIEventSubtypeRemoteControlEndSeekingBackward"
    },
    {
      "trigger": "UIEventSubtypeRemoteControlEndSeekingForward (109)",
      "contents": "UIEventSubtypeRemoteControlEndSeekingForward"
    },
    {
      "trigger": "UIEventSubtypeRemoteControlNextTrack (104)",
      "contents": "UIEventSubtypeRemoteControlNextTrack"
    },
    {
      "trigger": "UIEventSubtypeRemoteControlPause (101)",
      "contents": "UIEventSubtypeRemoteControlPause"
    },
    {
      "trigger": "UIEventSubtypeRemoteControlPlay (100)",
      "contents": "UIEventSubtypeRemoteControlPlay"
    },
    {
      "trigger": "UIEventSubtypeRemoteControlPreviousTrack (105)",
      "contents": "UIEventSubtypeRemoteControlPreviousTrack"
    },
    {
      "trigger": "UIEventSubtypeRemoteControlStop (102)",
      "contents": "UIEventSubtypeRemoteControlStop"
    },
    {
      "trigger": "UIEventSubtypeRemoteControlTogglePlayPause (103)",
      "contents": "UIEventSubtypeRemoteControlTogglePlayPause"
    },
    {
      "trigger": "UIEventTypeMotion (1)",
      "contents": "UIEventTypeMotion"
    },
    {
      "trigger": "UIEventTypeRemoteControl (2)",
      "contents": "UIEventTypeRemoteControl"
    },
    {
      "trigger": "UIEventTypeTouches (0)",
      "contents": "UIEventTypeTouches"
    },
    {
      "trigger": "UIFont.boldSystemFontOfSize:",
      "contents": "UIFont.boldSystemFontOfSize(${1:CGFloat fontSize})"
    },
    {
      "trigger": "UIFont.fontNamesForFamilyName:",
      "contents": "UIFont.fontNamesForFamilyName(${1:NSString* familyName})"
    },
    {
      "trigger": "UIFont.fontWithName:size:",
      "contents": "UIFont.fontWithName(${1:NSString* fontName}, size:${2:CGFloat fontSize})"
    },
    {
      "trigger": "UIFont.italicSystemFontOfSize:",
      "contents": "UIFont.italicSystemFontOfSize(${1:CGFloat fontSize})"
    },
    {
      "trigger": "UIFont.systemFontOfSize:",
      "contents": "UIFont.systemFontOfSize(${1:CGFloat fontSize})"
    },
    {
      "trigger": "UIGestureRecognizerStateBegan (1)",
      "contents": "UIGestureRecognizerStateBegan"
    },
    {
      "trigger": "UIGestureRecognizerStateCancelled (4)",
      "contents": "UIGestureRecognizerStateCancelled"
    },
    {
      "trigger": "UIGestureRecognizerStateChanged (2)",
      "contents": "UIGestureRecognizerStateChanged"
    },
    {
      "trigger": "UIGestureRecognizerStateEnded (3)",
      "contents": "UIGestureRecognizerStateEnded"
    },
    {
      "trigger": "UIGestureRecognizerStateFailed (5)",
      "contents": "UIGestureRecognizerStateFailed"
    },
    {
      "trigger": "UIGestureRecognizerStatePossible (0)",
      "contents": "UIGestureRecognizerStatePossible"
    },
    {
      "trigger": "UIGestureRecognizerStateRecognized (3)",
      "contents": "UIGestureRecognizerStateRecognized"
    },
    {
      "trigger": "UIGraphicsAddPDFContextDestinationAtPoint",
      "contents": "UIGraphicsAddPDFContextDestinationAtPoint(${1:NSString* name}, ${2:CGPoint point})"
    },
    {
      "trigger": "UIGraphicsBeginImageContext",
      "contents": "UIGraphicsBeginImageContext(${1:CGSize size})"
    },
    {
      "trigger": "UIGraphicsBeginImageContextWithOptions",
      "contents": "UIGraphicsBeginImageContextWithOptions(${1:CGSize size}, ${2:BOOL cftype}, ${3:CGFloat scale})"
    },
    {
      "trigger": "UIGraphicsBeginPDFContextToData",
      "contents": "UIGraphicsBeginPDFContextToData(${1:NSMutableData* data}, ${2:CGRect bounds}, ${3:NSDictionary* documentInfo})"
    },
    {
      "trigger": "UIGraphicsBeginPDFContextToFile",
      "contents": "UIGraphicsBeginPDFContextToFile(${1:NSString* path}, ${2:CGRect bounds}, ${3:NSDictionary* documentInfo})"
    },
    {
      "trigger": "UIGraphicsBeginPDFPageWithInfo",
      "contents": "UIGraphicsBeginPDFPageWithInfo(${1:CGRect bounds}, ${2:NSDictionary* pageInfo})"
    },
    {
      "trigger": "UIGraphicsPushContext",
      "contents": "UIGraphicsPushContext(${1:CGContextRef context})"
    },
    {
      "trigger": "UIGraphicsSetPDFContextDestinationForRect",
      "contents": "UIGraphicsSetPDFContextDestinationForRect(${1:NSString* name}, ${2:CGRect rect})"
    },
    {
      "trigger": "UIGraphicsSetPDFContextURLForRect",
      "contents": "UIGraphicsSetPDFContextURLForRect(${1:NSURL* url}, ${2:CGRect rect})"
    },
    {
      "trigger": "UIImage.animatedImageNamed:duration:",
      "contents": "UIImage.animatedImageNamed(${1:NSString* name}, duration:${2:NSTimeInterval duration})"
    },
    {
      "trigger": "UIImage.animatedImageWithImages:duration:",
      "contents": "UIImage.animatedImageWithImages(${1:NSArray* images}, duration:${2:NSTimeInterval duration})"
    },
    {
      "trigger": "UIImage.animatedResizableImageNamed:capInsets:duration:",
      "contents": "UIImage.animatedResizableImageNamed(${1:NSString* name}, capInsets:${2:UIEdgeInsets capInsets}, duration:${3:NSTimeInterval duration})"
    },
    {
      "trigger": "UIImage.imageNamed:",
      "contents": "UIImage.imageNamed(${1:NSString* name})"
    },
    {
      "trigger": "UIImage.imageWithCGImage:",
      "contents": "UIImage.imageWithCGImage(${1:CGImageRef cgImage})"
    },
    {
      "trigger": "UIImage.imageWithCGImage:scale:orientation:",
      "contents": "UIImage.imageWithCGImage(${1:CGImageRef cgImage}, scale:${2:CGFloat scale}, orientation:${3:UIImageOrientation orientation})"
    },
    {
      "trigger": "UIImage.imageWithCIImage:",
      "contents": "UIImage.imageWithCIImage(${1:CIImage* ciImage})"
    },
    {
      "trigger": "UIImage.imageWithContentsOfFile:",
      "contents": "UIImage.imageWithContentsOfFile(${1:NSString* path})"
    },
    {
      "trigger": "UIImage.imageWithData:",
      "contents": "UIImage.imageWithData(${1:NSData* data})"
    },
    {
      "trigger": "UIImageJPEGRepresentation",
      "contents": "UIImageJPEGRepresentation(${1:UIImage* image}, ${2:CGFloat compressionQuality})"
    },
    {
      "trigger": "UIImageOrientationDown (1)",
      "contents": "UIImageOrientationDown"
    },
    {
      "trigger": "UIImageOrientationDownMirrored (5)",
      "contents": "UIImageOrientationDownMirrored"
    },
    {
      "trigger": "UIImageOrientationLeft (2)",
      "contents": "UIImageOrientationLeft"
    },
    {
      "trigger": "UIImageOrientationLeftMirrored (6)",
      "contents": "UIImageOrientationLeftMirrored"
    },
    {
      "trigger": "UIImageOrientationRight (3)",
      "contents": "UIImageOrientationRight"
    },
    {
      "trigger": "UIImageOrientationRightMirrored (7)",
      "contents": "UIImageOrientationRightMirrored"
    },
    {
      "trigger": "UIImageOrientationUp (0)",
      "contents": "UIImageOrientationUp"
    },
    {
      "trigger": "UIImageOrientationUpMirrored (4)",
      "contents": "UIImageOrientationUpMirrored"
    },
    {
      "trigger": "UIImagePNGRepresentation",
      "contents": "UIImagePNGRepresentation(${1:UIImage* image})"
    },
    {
      "trigger": "UIImagePickerController.availableCaptureModesForCameraDevice:",
      "contents": "UIImagePickerController.availableCaptureModesForCameraDevice(${1:UIImagePickerControllerCameraDevice cameraDevice})"
    },
    {
      "trigger": "UIImagePickerController.availableMediaTypesForSourceType:",
      "contents": "UIImagePickerController.availableMediaTypesForSourceType(${1:UIImagePickerControllerSourceType sourceType})"
    },
    {
      "trigger": "UIImagePickerController.isCameraDeviceAvailable:",
      "contents": "UIImagePickerController.isCameraDeviceAvailable(${1:UIImagePickerControllerCameraDevice cameraDevice})"
    },
    {
      "trigger": "UIImagePickerController.isFlashAvailableForCameraDevice:",
      "contents": "UIImagePickerController.isFlashAvailableForCameraDevice(${1:UIImagePickerControllerCameraDevice cameraDevice})"
    },
    {
      "trigger": "UIImagePickerController.isSourceTypeAvailable:",
      "contents": "UIImagePickerController.isSourceTypeAvailable(${1:UIImagePickerControllerSourceType sourceType})"
    },
    {
      "trigger": "UIImagePickerControllerCameraCaptureModePhoto (0)",
      "contents": "UIImagePickerControllerCameraCaptureModePhoto"
    },
    {
      "trigger": "UIImagePickerControllerCameraCaptureModeVideo (1)",
      "contents": "UIImagePickerControllerCameraCaptureModeVideo"
    },
    {
      "trigger": "UIImagePickerControllerCameraDeviceFront (1)",
      "contents": "UIImagePickerControllerCameraDeviceFront"
    },
    {
      "trigger": "UIImagePickerControllerCameraDeviceRear (0)",
      "contents": "UIImagePickerControllerCameraDeviceRear"
    },
    {
      "trigger": "UIImagePickerControllerCameraFlashModeAuto (0)",
      "contents": "UIImagePickerControllerCameraFlashModeAuto"
    },
    {
      "trigger": "UIImagePickerControllerCameraFlashModeOff (-1)",
      "contents": "UIImagePickerControllerCameraFlashModeOff"
    },
    {
      "trigger": "UIImagePickerControllerCameraFlashModeOn (1)",
      "contents": "UIImagePickerControllerCameraFlashModeOn"
    },
    {
      "trigger": "UIImagePickerControllerCropRect (NSString*)",
      "contents": "UIImagePickerControllerCropRect"
    },
    {
      "trigger": "UIImagePickerControllerEditedImage (NSString*)",
      "contents": "UIImagePickerControllerEditedImage"
    },
    {
      "trigger": "UIImagePickerControllerMediaMetadata (NSString*)",
      "contents": "UIImagePickerControllerMediaMetadata"
    },
    {
      "trigger": "UIImagePickerControllerMediaType (NSString*)",
      "contents": "UIImagePickerControllerMediaType"
    },
    {
      "trigger": "UIImagePickerControllerMediaURL (NSString*)",
      "contents": "UIImagePickerControllerMediaURL"
    },
    {
      "trigger": "UIImagePickerControllerOriginalImage (NSString*)",
      "contents": "UIImagePickerControllerOriginalImage"
    },
    {
      "trigger": "UIImagePickerControllerQualityType640x480 (3)",
      "contents": "UIImagePickerControllerQualityType640x480"
    },
    {
      "trigger": "UIImagePickerControllerQualityTypeHigh (0)",
      "contents": "UIImagePickerControllerQualityTypeHigh"
    },
    {
      "trigger": "UIImagePickerControllerQualityTypeIFrame1280x720 (4)",
      "contents": "UIImagePickerControllerQualityTypeIFrame1280x720"
    },
    {
      "trigger": "UIImagePickerControllerQualityTypeIFrame960x540 (5)",
      "contents": "UIImagePickerControllerQualityTypeIFrame960x540"
    },
    {
      "trigger": "UIImagePickerControllerQualityTypeLow (2)",
      "contents": "UIImagePickerControllerQualityTypeLow"
    },
    {
      "trigger": "UIImagePickerControllerQualityTypeMedium (1)",
      "contents": "UIImagePickerControllerQualityTypeMedium"
    },
    {
      "trigger": "UIImagePickerControllerReferenceURL (NSString*)",
      "contents": "UIImagePickerControllerReferenceURL"
    },
    {
      "trigger": "UIImagePickerControllerSourceTypeCamera (1)",
      "contents": "UIImagePickerControllerSourceTypeCamera"
    },
    {
      "trigger": "UIImagePickerControllerSourceTypePhotoLibrary (0)",
      "contents": "UIImagePickerControllerSourceTypePhotoLibrary"
    },
    {
      "trigger": "UIImagePickerControllerSourceTypeSavedPhotosAlbum (2)",
      "contents": "UIImagePickerControllerSourceTypeSavedPhotosAlbum"
    },
    {
      "trigger": "UIImageWriteToSavedPhotosAlbum",
      "contents": "UIImageWriteToSavedPhotosAlbum(${1:UIImage* image}, ${2:id completionTarget}, ${3:SEL completionSelector}, ${4:void* contextInfo})"
    },
    {
      "trigger": "UIInterfaceOrientationLandscapeLeft (4)",
      "contents": "UIInterfaceOrientationLandscapeLeft"
    },
    {
      "trigger": "UIInterfaceOrientationLandscapeRight (3)",
      "contents": "UIInterfaceOrientationLandscapeRight"
    },
    {
      "trigger": "UIInterfaceOrientationPortrait (1)",
      "contents": "UIInterfaceOrientationPortrait"
    },
    {
      "trigger": "UIInterfaceOrientationPortraitUpsideDown (2)",
      "contents": "UIInterfaceOrientationPortraitUpsideDown"
    },
    {
      "trigger": "UIKeyboardAnimationCurveUserInfoKey (NSString*)",
      "contents": "UIKeyboardAnimationCurveUserInfoKey"
    },
    {
      "trigger": "UIKeyboardAnimationDurationUserInfoKey (NSString*)",
      "contents": "UIKeyboardAnimationDurationUserInfoKey"
    },
    {
      "trigger": "UIKeyboardAppearanceAlert (1)",
      "contents": "UIKeyboardAppearanceAlert"
    },
    {
      "trigger": "UIKeyboardAppearanceDefault (0)",
      "contents": "UIKeyboardAppearanceDefault"
    },
    {
      "trigger": "UIKeyboardBoundsUserInfoKey (NSString*)",
      "contents": "UIKeyboardBoundsUserInfoKey"
    },
    {
      "trigger": "UIKeyboardCenterBeginUserInfoKey (NSString*)",
      "contents": "UIKeyboardCenterBeginUserInfoKey"
    },
    {
      "trigger": "UIKeyboardCenterEndUserInfoKey (NSString*)",
      "contents": "UIKeyboardCenterEndUserInfoKey"
    },
    {
      "trigger": "UIKeyboardDidChangeFrameNotification (NSString*)",
      "contents": "UIKeyboardDidChangeFrameNotification"
    },
    {
      "trigger": "UIKeyboardDidHideNotification (NSString*)",
      "contents": "UIKeyboardDidHideNotification"
    },
    {
      "trigger": "UIKeyboardDidShowNotification (NSString*)",
      "contents": "UIKeyboardDidShowNotification"
    },
    {
      "trigger": "UIKeyboardFrameBeginUserInfoKey (NSString*)",
      "contents": "UIKeyboardFrameBeginUserInfoKey"
    },
    {
      "trigger": "UIKeyboardFrameEndUserInfoKey (NSString*)",
      "contents": "UIKeyboardFrameEndUserInfoKey"
    },
    {
      "trigger": "UIKeyboardTypeASCIICapable (1)",
      "contents": "UIKeyboardTypeASCIICapable"
    },
    {
      "trigger": "UIKeyboardTypeAlphabet (1)",
      "contents": "UIKeyboardTypeAlphabet"
    },
    {
      "trigger": "UIKeyboardTypeDecimalPad (8)",
      "contents": "UIKeyboardTypeDecimalPad"
    },
    {
      "trigger": "UIKeyboardTypeDefault (0)",
      "contents": "UIKeyboardTypeDefault"
    },
    {
      "trigger": "UIKeyboardTypeEmailAddress (7)",
      "contents": "UIKeyboardTypeEmailAddress"
    },
    {
      "trigger": "UIKeyboardTypeNamePhonePad (6)",
      "contents": "UIKeyboardTypeNamePhonePad"
    },
    {
      "trigger": "UIKeyboardTypeNumberPad (4)",
      "contents": "UIKeyboardTypeNumberPad"
    },
    {
      "trigger": "UIKeyboardTypeNumbersAndPunctuation (2)",
      "contents": "UIKeyboardTypeNumbersAndPunctuation"
    },
    {
      "trigger": "UIKeyboardTypePhonePad (5)",
      "contents": "UIKeyboardTypePhonePad"
    },
    {
      "trigger": "UIKeyboardTypeTwitter (9)",
      "contents": "UIKeyboardTypeTwitter"
    },
    {
      "trigger": "UIKeyboardTypeURL (3)",
      "contents": "UIKeyboardTypeURL"
    },
    {
      "trigger": "UIKeyboardWillChangeFrameNotification (NSString*)",
      "contents": "UIKeyboardWillChangeFrameNotification"
    },
    {
      "trigger": "UIKeyboardWillHideNotification (NSString*)",
      "contents": "UIKeyboardWillHideNotification"
    },
    {
      "trigger": "UIKeyboardWillShowNotification (NSString*)",
      "contents": "UIKeyboardWillShowNotification"
    },
    {
      "trigger": "UILineBreakModeCharacterWrap (1)",
      "contents": "UILineBreakModeCharacterWrap"
    },
    {
      "trigger": "UILineBreakModeClip (2)",
      "contents": "UILineBreakModeClip"
    },
    {
      "trigger": "UILineBreakModeHeadTruncation (3)",
      "contents": "UILineBreakModeHeadTruncation"
    },
    {
      "trigger": "UILineBreakModeMiddleTruncation (5)",
      "contents": "UILineBreakModeMiddleTruncation"
    },
    {
      "trigger": "UILineBreakModeTailTruncation (4)",
      "contents": "UILineBreakModeTailTruncation"
    },
    {
      "trigger": "UILineBreakModeWordWrap (0)",
      "contents": "UILineBreakModeWordWrap"
    },
    {
      "trigger": "UILocalNotificationDefaultSoundName (NSString*)",
      "contents": "UILocalNotificationDefaultSoundName"
    },
    {
      "trigger": "UIMenuControllerArrowDefault (0)",
      "contents": "UIMenuControllerArrowDefault"
    },
    {
      "trigger": "UIMenuControllerArrowDown (2)",
      "contents": "UIMenuControllerArrowDown"
    },
    {
      "trigger": "UIMenuControllerArrowLeft (3)",
      "contents": "UIMenuControllerArrowLeft"
    },
    {
      "trigger": "UIMenuControllerArrowRight (4)",
      "contents": "UIMenuControllerArrowRight"
    },
    {
      "trigger": "UIMenuControllerArrowUp (1)",
      "contents": "UIMenuControllerArrowUp"
    },
    {
      "trigger": "UIMenuControllerDidHideMenuNotification (NSString*)",
      "contents": "UIMenuControllerDidHideMenuNotification"
    },
    {
      "trigger": "UIMenuControllerDidShowMenuNotification (NSString*)",
      "contents": "UIMenuControllerDidShowMenuNotification"
    },
    {
      "trigger": "UIMenuControllerMenuFrameDidChangeNotification (NSString*)",
      "contents": "UIMenuControllerMenuFrameDidChangeNotification"
    },
    {
      "trigger": "UIMenuControllerWillHideMenuNotification (NSString*)",
      "contents": "UIMenuControllerWillHideMenuNotification"
    },
    {
      "trigger": "UIMenuControllerWillShowMenuNotification (NSString*)",
      "contents": "UIMenuControllerWillShowMenuNotification"
    },
    {
      "trigger": "UIMinimumKeepAliveTimeout (NSTimeInterval)",
      "contents": "UIMinimumKeepAliveTimeout"
    },
    {
      "trigger": "UIModalPresentationCurrentContext (3)",
      "contents": "UIModalPresentationCurrentContext"
    },
    {
      "trigger": "UIModalPresentationFormSheet (2)",
      "contents": "UIModalPresentationFormSheet"
    },
    {
      "trigger": "UIModalPresentationFullScreen (0)",
      "contents": "UIModalPresentationFullScreen"
    },
    {
      "trigger": "UIModalPresentationPageSheet (1)",
      "contents": "UIModalPresentationPageSheet"
    },
    {
      "trigger": "UIModalTransitionStyleCoverVertical (0)",
      "contents": "UIModalTransitionStyleCoverVertical"
    },
    {
      "trigger": "UIModalTransitionStyleCrossDissolve (2)",
      "contents": "UIModalTransitionStyleCrossDissolve"
    },
    {
      "trigger": "UIModalTransitionStyleFlipHorizontal (1)",
      "contents": "UIModalTransitionStyleFlipHorizontal"
    },
    {
      "trigger": "UIModalTransitionStylePartialCurl (3)",
      "contents": "UIModalTransitionStylePartialCurl"
    },
    {
      "trigger": "UINavigationControllerHideShowBarDuration (CGFloat)",
      "contents": "UINavigationControllerHideShowBarDuration"
    },
    {
      "trigger": "UINib.nibWithData:bundle:",
      "contents": "UINib.nibWithData(${1:NSData* data}, bundle:${2:NSBundle* bundleOrNil})"
    },
    {
      "trigger": "UINib.nibWithNibName:bundle:",
      "contents": "UINib.nibWithNibName(${1:NSString* name}, bundle:${2:NSBundle* bundleOrNil})"
    },
    {
      "trigger": "UINibExternalObjects (NSString*)",
      "contents": "UINibExternalObjects"
    },
    {
      "trigger": "UINibProxiedObjectsKey (NSString*)",
      "contents": "UINibProxiedObjectsKey"
    },
    {
      "trigger": "UIOffsetEqualToOffset",
      "contents": "UIOffsetEqualToOffset(${1:UIOffset offset1}, ${2:UIOffset offset2})"
    },
    {
      "trigger": "UIOffsetFromString",
      "contents": "UIOffsetFromString(${1:NSString* string})"
    },
    {
      "trigger": "UIOffsetMake",
      "contents": "UIOffsetMake(${1:CGFloat horizontal}, ${2:CGFloat vertical})"
    },
    {
      "trigger": "UIOffsetZero (UIOffset)",
      "contents": "UIOffsetZero"
    },
    {
      "trigger": "UIPageViewControllerNavigationDirectionForward (0)",
      "contents": "UIPageViewControllerNavigationDirectionForward"
    },
    {
      "trigger": "UIPageViewControllerNavigationDirectionReverse (1)",
      "contents": "UIPageViewControllerNavigationDirectionReverse"
    },
    {
      "trigger": "UIPageViewControllerNavigationOrientationHorizontal (0)",
      "contents": "UIPageViewControllerNavigationOrientationHorizontal"
    },
    {
      "trigger": "UIPageViewControllerNavigationOrientationVertical (1)",
      "contents": "UIPageViewControllerNavigationOrientationVertical"
    },
    {
      "trigger": "UIPageViewControllerOptionSpineLocationKey (NSString*)",
      "contents": "UIPageViewControllerOptionSpineLocationKey"
    },
    {
      "trigger": "UIPageViewControllerSpineLocationMax (3)",
      "contents": "UIPageViewControllerSpineLocationMax"
    },
    {
      "trigger": "UIPageViewControllerSpineLocationMid (2)",
      "contents": "UIPageViewControllerSpineLocationMid"
    },
    {
      "trigger": "UIPageViewControllerSpineLocationMin (1)",
      "contents": "UIPageViewControllerSpineLocationMin"
    },
    {
      "trigger": "UIPageViewControllerSpineLocationNone (0)",
      "contents": "UIPageViewControllerSpineLocationNone"
    },
    {
      "trigger": "UIPageViewControllerTransitionStylePageCurl (0)",
      "contents": "UIPageViewControllerTransitionStylePageCurl"
    },
    {
      "trigger": "UIPasteboard.pasteboardWithName:create:",
      "contents": "UIPasteboard.pasteboardWithName(${1:NSString* pasteboardName}, create:${2:BOOL create})"
    },
    {
      "trigger": "UIPasteboard.removePasteboardWithName:",
      "contents": "UIPasteboard.removePasteboardWithName(${1:NSString* pasteboardName})"
    },
    {
      "trigger": "UIPasteboardChangedNotification (NSString*)",
      "contents": "UIPasteboardChangedNotification"
    },
    {
      "trigger": "UIPasteboardChangedTypesAddedKey (NSString*)",
      "contents": "UIPasteboardChangedTypesAddedKey"
    },
    {
      "trigger": "UIPasteboardChangedTypesRemovedKey (NSString*)",
      "contents": "UIPasteboardChangedTypesRemovedKey"
    },
    {
      "trigger": "UIPasteboardNameFind (NSString*)",
      "contents": "UIPasteboardNameFind"
    },
    {
      "trigger": "UIPasteboardNameGeneral (NSString*)",
      "contents": "UIPasteboardNameGeneral"
    },
    {
      "trigger": "UIPasteboardRemovedNotification (NSString*)",
      "contents": "UIPasteboardRemovedNotification"
    },
    {
      "trigger": "UIPasteboardTypeListColor (NSArray*)",
      "contents": "UIPasteboardTypeListColor"
    },
    {
      "trigger": "UIPasteboardTypeListImage (NSArray*)",
      "contents": "UIPasteboardTypeListImage"
    },
    {
      "trigger": "UIPasteboardTypeListString (NSArray*)",
      "contents": "UIPasteboardTypeListString"
    },
    {
      "trigger": "UIPasteboardTypeListURL (NSArray*)",
      "contents": "UIPasteboardTypeListURL"
    },
    {
      "trigger": "UIPopoverArrowDirectionAny (15)",
      "contents": "UIPopoverArrowDirectionAny"
    },
    {
      "trigger": "UIPopoverArrowDirectionDown (2)",
      "contents": "UIPopoverArrowDirectionDown"
    },
    {
      "trigger": "UIPopoverArrowDirectionLeft (4)",
      "contents": "UIPopoverArrowDirectionLeft"
    },
    {
      "trigger": "UIPopoverArrowDirectionRight (8)",
      "contents": "UIPopoverArrowDirectionRight"
    },
    {
      "trigger": "UIPopoverArrowDirectionUnknown (4294967295)",
      "contents": "UIPopoverArrowDirectionUnknown"
    },
    {
      "trigger": "UIPopoverArrowDirectionUp (1)",
      "contents": "UIPopoverArrowDirectionUp"
    },
    {
      "trigger": "UIPrintErrorDomain (NSString*)",
      "contents": "UIPrintErrorDomain"
    },
    {
      "trigger": "UIPrintInfo.printInfoWithDictionary:",
      "contents": "UIPrintInfo.printInfoWithDictionary(${1:NSDictionary* dictionary})"
    },
    {
      "trigger": "UIPrintInfoDuplexLongEdge (1)",
      "contents": "UIPrintInfoDuplexLongEdge"
    },
    {
      "trigger": "UIPrintInfoDuplexNone (0)",
      "contents": "UIPrintInfoDuplexNone"
    },
    {
      "trigger": "UIPrintInfoDuplexShortEdge (2)",
      "contents": "UIPrintInfoDuplexShortEdge"
    },
    {
      "trigger": "UIPrintInfoOrientationLandscape (1)",
      "contents": "UIPrintInfoOrientationLandscape"
    },
    {
      "trigger": "UIPrintInfoOrientationPortrait (0)",
      "contents": "UIPrintInfoOrientationPortrait"
    },
    {
      "trigger": "UIPrintInfoOutputGeneral (0)",
      "contents": "UIPrintInfoOutputGeneral"
    },
    {
      "trigger": "UIPrintInfoOutputGrayscale (2)",
      "contents": "UIPrintInfoOutputGrayscale"
    },
    {
      "trigger": "UIPrintInfoOutputPhoto (1)",
      "contents": "UIPrintInfoOutputPhoto"
    },
    {
      "trigger": "UIPrintInteractionController.canPrintData:",
      "contents": "UIPrintInteractionController.canPrintData(${1:NSData* data})"
    },
    {
      "trigger": "UIPrintInteractionController.canPrintURL:",
      "contents": "UIPrintInteractionController.canPrintURL(${1:NSURL* url})"
    },
    {
      "trigger": "UIPrintJobFailedError (4)",
      "contents": "UIPrintJobFailedError"
    },
    {
      "trigger": "UIPrintNoContentError (2)",
      "contents": "UIPrintNoContentError"
    },
    {
      "trigger": "UIPrintPaper.bestPaperForPageSize:withPapersFromArray:",
      "contents": "UIPrintPaper.bestPaperForPageSize(${1:CGSize contentSize}, withPapersFromArray:${2:NSArray* paperList})"
    },
    {
      "trigger": "UIPrintUnknownImageFormatError (3)",
      "contents": "UIPrintUnknownImageFormatError"
    },
    {
      "trigger": "UIPrintingNotAvailableError (1)",
      "contents": "UIPrintingNotAvailableError"
    },
    {
      "trigger": "UIProgressViewStyleBar (1)",
      "contents": "UIProgressViewStyleBar"
    },
    {
      "trigger": "UIProgressViewStyleDefault (0)",
      "contents": "UIProgressViewStyleDefault"
    },
    {
      "trigger": "UIRectClip",
      "contents": "UIRectClip(${1:CGRect rect})"
    },
    {
      "trigger": "UIRectCornerAllCorners (-1)",
      "contents": "UIRectCornerAllCorners"
    },
    {
      "trigger": "UIRectCornerBottomLeft (4)",
      "contents": "UIRectCornerBottomLeft"
    },
    {
      "trigger": "UIRectCornerBottomRight (8)",
      "contents": "UIRectCornerBottomRight"
    },
    {
      "trigger": "UIRectCornerTopLeft (1)",
      "contents": "UIRectCornerTopLeft"
    },
    {
      "trigger": "UIRectCornerTopRight (2)",
      "contents": "UIRectCornerTopRight"
    },
    {
      "trigger": "UIRectFill",
      "contents": "UIRectFill(${1:CGRect rect})"
    },
    {
      "trigger": "UIRectFillUsingBlendMode",
      "contents": "UIRectFillUsingBlendMode(${1:CGRect rect}, ${2:CGBlendMode blendMode})"
    },
    {
      "trigger": "UIRectFrame",
      "contents": "UIRectFrame(${1:CGRect rect})"
    },
    {
      "trigger": "UIRectFrameUsingBlendMode",
      "contents": "UIRectFrameUsingBlendMode(${1:CGRect rect}, ${2:CGBlendMode blendMode})"
    },
    {
      "trigger": "UIReferenceLibraryViewController.dictionaryHasDefinitionForTerm:",
      "contents": "UIReferenceLibraryViewController.dictionaryHasDefinitionForTerm(${1:NSString* term})"
    },
    {
      "trigger": "UIRemoteNotificationTypeAlert (4)",
      "contents": "UIRemoteNotificationTypeAlert"
    },
    {
      "trigger": "UIRemoteNotificationTypeBadge (1)",
      "contents": "UIRemoteNotificationTypeBadge"
    },
    {
      "trigger": "UIRemoteNotificationTypeNewsstandContentAvailability (8)",
      "contents": "UIRemoteNotificationTypeNewsstandContentAvailability"
    },
    {
      "trigger": "UIRemoteNotificationTypeNone (0)",
      "contents": "UIRemoteNotificationTypeNone"
    },
    {
      "trigger": "UIRemoteNotificationTypeSound (2)",
      "contents": "UIRemoteNotificationTypeSound"
    },
    {
      "trigger": "UIReturnKeyDefault (0)",
      "contents": "UIReturnKeyDefault"
    },
    {
      "trigger": "UIReturnKeyDone (9)",
      "contents": "UIReturnKeyDone"
    },
    {
      "trigger": "UIReturnKeyEmergencyCall (10)",
      "contents": "UIReturnKeyEmergencyCall"
    },
    {
      "trigger": "UIReturnKeyGo (1)",
      "contents": "UIReturnKeyGo"
    },
    {
      "trigger": "UIReturnKeyGoogle (2)",
      "contents": "UIReturnKeyGoogle"
    },
    {
      "trigger": "UIReturnKeyJoin (3)",
      "contents": "UIReturnKeyJoin"
    },
    {
      "trigger": "UIReturnKeyNext (4)",
      "contents": "UIReturnKeyNext"
    },
    {
      "trigger": "UIReturnKeyRoute (5)",
      "contents": "UIReturnKeyRoute"
    },
    {
      "trigger": "UIReturnKeySearch (6)",
      "contents": "UIReturnKeySearch"
    },
    {
      "trigger": "UIReturnKeySend (7)",
      "contents": "UIReturnKeySend"
    },
    {
      "trigger": "UIReturnKeyYahoo (8)",
      "contents": "UIReturnKeyYahoo"
    },
    {
      "trigger": "UISaveVideoAtPathToSavedPhotosAlbum",
      "contents": "UISaveVideoAtPathToSavedPhotosAlbum(${1:NSString* videoPath}, ${2:id completionTarget}, ${3:SEL completionSelector}, ${4:void* contextInfo})"
    },
    {
      "trigger": "UIScreenBrightnessDidChangeNotification (NSString*)",
      "contents": "UIScreenBrightnessDidChangeNotification"
    },
    {
      "trigger": "UIScreenDidConnectNotification (NSString*)",
      "contents": "UIScreenDidConnectNotification"
    },
    {
      "trigger": "UIScreenDidDisconnectNotification (NSString*)",
      "contents": "UIScreenDidDisconnectNotification"
    },
    {
      "trigger": "UIScreenModeDidChangeNotification (NSString*)",
      "contents": "UIScreenModeDidChangeNotification"
    },
    {
      "trigger": "UIScreenOverscanCompensationInsetApplicationFrame (2)",
      "contents": "UIScreenOverscanCompensationInsetApplicationFrame"
    },
    {
      "trigger": "UIScreenOverscanCompensationInsetBounds (1)",
      "contents": "UIScreenOverscanCompensationInsetBounds"
    },
    {
      "trigger": "UIScreenOverscanCompensationScale (0)",
      "contents": "UIScreenOverscanCompensationScale"
    },
    {
      "trigger": "UIScrollViewDecelerationRateFast (float)",
      "contents": "UIScrollViewDecelerationRateFast"
    },
    {
      "trigger": "UIScrollViewDecelerationRateNormal (float)",
      "contents": "UIScrollViewDecelerationRateNormal"
    },
    {
      "trigger": "UIScrollViewIndicatorStyleBlack (1)",
      "contents": "UIScrollViewIndicatorStyleBlack"
    },
    {
      "trigger": "UIScrollViewIndicatorStyleDefault (0)",
      "contents": "UIScrollViewIndicatorStyleDefault"
    },
    {
      "trigger": "UIScrollViewIndicatorStyleWhite (2)",
      "contents": "UIScrollViewIndicatorStyleWhite"
    },
    {
      "trigger": "UISearchBarIconBookmark (2)",
      "contents": "UISearchBarIconBookmark"
    },
    {
      "trigger": "UISearchBarIconClear (1)",
      "contents": "UISearchBarIconClear"
    },
    {
      "trigger": "UISearchBarIconResultsList (3)",
      "contents": "UISearchBarIconResultsList"
    },
    {
      "trigger": "UISearchBarIconSearch (0)",
      "contents": "UISearchBarIconSearch"
    },
    {
      "trigger": "UISegmentedControlNoSegment (-1)",
      "contents": "UISegmentedControlNoSegment"
    },
    {
      "trigger": "UISegmentedControlSegmentAlone (4)",
      "contents": "UISegmentedControlSegmentAlone"
    },
    {
      "trigger": "UISegmentedControlSegmentAny (0)",
      "contents": "UISegmentedControlSegmentAny"
    },
    {
      "trigger": "UISegmentedControlSegmentCenter (2)",
      "contents": "UISegmentedControlSegmentCenter"
    },
    {
      "trigger": "UISegmentedControlSegmentLeft (1)",
      "contents": "UISegmentedControlSegmentLeft"
    },
    {
      "trigger": "UISegmentedControlSegmentRight (3)",
      "contents": "UISegmentedControlSegmentRight"
    },
    {
      "trigger": "UISegmentedControlStyleBar (2)",
      "contents": "UISegmentedControlStyleBar"
    },
    {
      "trigger": "UISegmentedControlStyleBezeled (3)",
      "contents": "UISegmentedControlStyleBezeled"
    },
    {
      "trigger": "UISegmentedControlStyleBordered (1)",
      "contents": "UISegmentedControlStyleBordered"
    },
    {
      "trigger": "UISegmentedControlStylePlain (0)",
      "contents": "UISegmentedControlStylePlain"
    },
    {
      "trigger": "UIStatusBarAnimationFade (1)",
      "contents": "UIStatusBarAnimationFade"
    },
    {
      "trigger": "UIStatusBarAnimationNone (0)",
      "contents": "UIStatusBarAnimationNone"
    },
    {
      "trigger": "UIStatusBarAnimationSlide (2)",
      "contents": "UIStatusBarAnimationSlide"
    },
    {
      "trigger": "UIStatusBarStyleBlackOpaque (2)",
      "contents": "UIStatusBarStyleBlackOpaque"
    },
    {
      "trigger": "UIStatusBarStyleBlackTranslucent (1)",
      "contents": "UIStatusBarStyleBlackTranslucent"
    },
    {
      "trigger": "UIStatusBarStyleDefault (0)",
      "contents": "UIStatusBarStyleDefault"
    },
    {
      "trigger": "UIStoryboard.storyboardWithName:bundle:",
      "contents": "UIStoryboard.storyboardWithName(${1:NSString* name}, bundle:${2:NSBundle* storyboardBundleOrNil})"
    },
    {
      "trigger": "UISwipeGestureRecognizerDirectionDown (8)",
      "contents": "UISwipeGestureRecognizerDirectionDown"
    },
    {
      "trigger": "UISwipeGestureRecognizerDirectionLeft (2)",
      "contents": "UISwipeGestureRecognizerDirectionLeft"
    },
    {
      "trigger": "UISwipeGestureRecognizerDirectionRight (1)",
      "contents": "UISwipeGestureRecognizerDirectionRight"
    },
    {
      "trigger": "UISwipeGestureRecognizerDirectionUp (4)",
      "contents": "UISwipeGestureRecognizerDirectionUp"
    },
    {
      "trigger": "UITabBarSystemItemBookmarks (7)",
      "contents": "UITabBarSystemItemBookmarks"
    },
    {
      "trigger": "UITabBarSystemItemContacts (5)",
      "contents": "UITabBarSystemItemContacts"
    },
    {
      "trigger": "UITabBarSystemItemDownloads (9)",
      "contents": "UITabBarSystemItemDownloads"
    },
    {
      "trigger": "UITabBarSystemItemFavorites (1)",
      "contents": "UITabBarSystemItemFavorites"
    },
    {
      "trigger": "UITabBarSystemItemFeatured (2)",
      "contents": "UITabBarSystemItemFeatured"
    },
    {
      "trigger": "UITabBarSystemItemHistory (6)",
      "contents": "UITabBarSystemItemHistory"
    },
    {
      "trigger": "UITabBarSystemItemMore (0)",
      "contents": "UITabBarSystemItemMore"
    },
    {
      "trigger": "UITabBarSystemItemMostRecent (10)",
      "contents": "UITabBarSystemItemMostRecent"
    },
    {
      "trigger": "UITabBarSystemItemMostViewed (11)",
      "contents": "UITabBarSystemItemMostViewed"
    },
    {
      "trigger": "UITabBarSystemItemRecents (4)",
      "contents": "UITabBarSystemItemRecents"
    },
    {
      "trigger": "UITabBarSystemItemSearch (8)",
      "contents": "UITabBarSystemItemSearch"
    },
    {
      "trigger": "UITabBarSystemItemTopRated (3)",
      "contents": "UITabBarSystemItemTopRated"
    },
    {
      "trigger": "UITableViewAutomaticDimension (CGFloat)",
      "contents": "UITableViewAutomaticDimension"
    },
    {
      "trigger": "UITableViewCellAccessoryCheckmark (3)",
      "contents": "UITableViewCellAccessoryCheckmark"
    },
    {
      "trigger": "UITableViewCellAccessoryDetailDisclosureButton (2)",
      "contents": "UITableViewCellAccessoryDetailDisclosureButton"
    },
    {
      "trigger": "UITableViewCellAccessoryDisclosureIndicator (1)",
      "contents": "UITableViewCellAccessoryDisclosureIndicator"
    },
    {
      "trigger": "UITableViewCellAccessoryNone (0)",
      "contents": "UITableViewCellAccessoryNone"
    },
    {
      "trigger": "UITableViewCellEditingStyleDelete (1)",
      "contents": "UITableViewCellEditingStyleDelete"
    },
    {
      "trigger": "UITableViewCellEditingStyleInsert (2)",
      "contents": "UITableViewCellEditingStyleInsert"
    },
    {
      "trigger": "UITableViewCellEditingStyleNone (0)",
      "contents": "UITableViewCellEditingStyleNone"
    },
    {
      "trigger": "UITableViewCellSelectionStyleBlue (1)",
      "contents": "UITableViewCellSelectionStyleBlue"
    },
    {
      "trigger": "UITableViewCellSelectionStyleGray (2)",
      "contents": "UITableViewCellSelectionStyleGray"
    },
    {
      "trigger": "UITableViewCellSelectionStyleNone (0)",
      "contents": "UITableViewCellSelectionStyleNone"
    },
    {
      "trigger": "UITableViewCellSeparatorStyleNone (0)",
      "contents": "UITableViewCellSeparatorStyleNone"
    },
    {
      "trigger": "UITableViewCellSeparatorStyleSingleLine (1)",
      "contents": "UITableViewCellSeparatorStyleSingleLine"
    },
    {
      "trigger": "UITableViewCellSeparatorStyleSingleLineEtched (2)",
      "contents": "UITableViewCellSeparatorStyleSingleLineEtched"
    },
    {
      "trigger": "UITableViewCellStateDefaultMask (0)",
      "contents": "UITableViewCellStateDefaultMask"
    },
    {
      "trigger": "UITableViewCellStateEditingMask (1)",
      "contents": "UITableViewCellStateEditingMask"
    },
    {
      "trigger": "UITableViewCellStateShowingDeleteConfirmationMask (2)",
      "contents": "UITableViewCellStateShowingDeleteConfirmationMask"
    },
    {
      "trigger": "UITableViewCellStateShowingEditControlMask (1)",
      "contents": "UITableViewCellStateShowingEditControlMask"
    },
    {
      "trigger": "UITableViewCellStyleDefault (0)",
      "contents": "UITableViewCellStyleDefault"
    },
    {
      "trigger": "UITableViewCellStyleSubtitle (3)",
      "contents": "UITableViewCellStyleSubtitle"
    },
    {
      "trigger": "UITableViewCellStyleValue1 (1)",
      "contents": "UITableViewCellStyleValue1"
    },
    {
      "trigger": "UITableViewCellStyleValue2 (2)",
      "contents": "UITableViewCellStyleValue2"
    },
    {
      "trigger": "UITableViewIndexSearch (NSString*)",
      "contents": "UITableViewIndexSearch"
    },
    {
      "trigger": "UITableViewRowAnimationAutomatic (100)",
      "contents": "UITableViewRowAnimationAutomatic"
    },
    {
      "trigger": "UITableViewRowAnimationBottom (4)",
      "contents": "UITableViewRowAnimationBottom"
    },
    {
      "trigger": "UITableViewRowAnimationFade (0)",
      "contents": "UITableViewRowAnimationFade"
    },
    {
      "trigger": "UITableViewRowAnimationLeft (2)",
      "contents": "UITableViewRowAnimationLeft"
    },
    {
      "trigger": "UITableViewRowAnimationMiddle (6)",
      "contents": "UITableViewRowAnimationMiddle"
    },
    {
      "trigger": "UITableViewRowAnimationNone (5)",
      "contents": "UITableViewRowAnimationNone"
    },
    {
      "trigger": "UITableViewRowAnimationRight (1)",
      "contents": "UITableViewRowAnimationRight"
    },
    {
      "trigger": "UITableViewRowAnimationTop (3)",
      "contents": "UITableViewRowAnimationTop"
    },
    {
      "trigger": "UITableViewScrollPositionBottom (3)",
      "contents": "UITableViewScrollPositionBottom"
    },
    {
      "trigger": "UITableViewScrollPositionMiddle (2)",
      "contents": "UITableViewScrollPositionMiddle"
    },
    {
      "trigger": "UITableViewScrollPositionNone (0)",
      "contents": "UITableViewScrollPositionNone"
    },
    {
      "trigger": "UITableViewScrollPositionTop (1)",
      "contents": "UITableViewScrollPositionTop"
    },
    {
      "trigger": "UITableViewSelectionDidChangeNotification (NSString*)",
      "contents": "UITableViewSelectionDidChangeNotification"
    },
    {
      "trigger": "UITableViewStyleGrouped (1)",
      "contents": "UITableViewStyleGrouped"
    },
    {
      "trigger": "UITableViewStylePlain (0)",
      "contents": "UITableViewStylePlain"
    },
    {
      "trigger": "UITextAlignmentCenter (1)",
      "contents": "UITextAlignmentCenter"
    },
    {
      "trigger": "UITextAlignmentLeft (0)",
      "contents": "UITextAlignmentLeft"
    },
    {
      "trigger": "UITextAlignmentRight (2)",
      "contents": "UITextAlignmentRight"
    },
    {
      "trigger": "UITextAttributeFont (NSString*)",
      "contents": "UITextAttributeFont"
    },
    {
      "trigger": "UITextAttributeTextColor (NSString*)",
      "contents": "UITextAttributeTextColor"
    },
    {
      "trigger": "UITextAttributeTextShadowColor (NSString*)",
      "contents": "UITextAttributeTextShadowColor"
    },
    {
      "trigger": "UITextAttributeTextShadowOffset (NSString*)",
      "contents": "UITextAttributeTextShadowOffset"
    },
    {
      "trigger": "UITextAutocapitalizationTypeAllCharacters (3)",
      "contents": "UITextAutocapitalizationTypeAllCharacters"
    },
    {
      "trigger": "UITextAutocapitalizationTypeNone (0)",
      "contents": "UITextAutocapitalizationTypeNone"
    },
    {
      "trigger": "UITextAutocapitalizationTypeSentences (2)",
      "contents": "UITextAutocapitalizationTypeSentences"
    },
    {
      "trigger": "UITextAutocapitalizationTypeWords (1)",
      "contents": "UITextAutocapitalizationTypeWords"
    },
    {
      "trigger": "UITextAutocorrectionTypeDefault (0)",
      "contents": "UITextAutocorrectionTypeDefault"
    },
    {
      "trigger": "UITextAutocorrectionTypeNo (1)",
      "contents": "UITextAutocorrectionTypeNo"
    },
    {
      "trigger": "UITextAutocorrectionTypeYes (2)",
      "contents": "UITextAutocorrectionTypeYes"
    },
    {
      "trigger": "UITextBorderStyleBezel (2)",
      "contents": "UITextBorderStyleBezel"
    },
    {
      "trigger": "UITextBorderStyleLine (1)",
      "contents": "UITextBorderStyleLine"
    },
    {
      "trigger": "UITextBorderStyleNone (0)",
      "contents": "UITextBorderStyleNone"
    },
    {
      "trigger": "UITextBorderStyleRoundedRect (3)",
      "contents": "UITextBorderStyleRoundedRect"
    },
    {
      "trigger": "UITextChecker.hasLearnedWord:",
      "contents": "UITextChecker.hasLearnedWord(${1:NSString* word})"
    },
    {
      "trigger": "UITextChecker.learnWord:",
      "contents": "UITextChecker.learnWord(${1:NSString* word})"
    },
    {
      "trigger": "UITextChecker.unlearnWord:",
      "contents": "UITextChecker.unlearnWord(${1:NSString* word})"
    },
    {
      "trigger": "UITextFieldTextDidBeginEditingNotification (NSString*)",
      "contents": "UITextFieldTextDidBeginEditingNotification"
    },
    {
      "trigger": "UITextFieldTextDidChangeNotification (NSString*)",
      "contents": "UITextFieldTextDidChangeNotification"
    },
    {
      "trigger": "UITextFieldTextDidEndEditingNotification (NSString*)",
      "contents": "UITextFieldTextDidEndEditingNotification"
    },
    {
      "trigger": "UITextFieldViewModeAlways (3)",
      "contents": "UITextFieldViewModeAlways"
    },
    {
      "trigger": "UITextFieldViewModeNever (0)",
      "contents": "UITextFieldViewModeNever"
    },
    {
      "trigger": "UITextFieldViewModeUnlessEditing (2)",
      "contents": "UITextFieldViewModeUnlessEditing"
    },
    {
      "trigger": "UITextFieldViewModeWhileEditing (1)",
      "contents": "UITextFieldViewModeWhileEditing"
    },
    {
      "trigger": "UITextGranularityCharacter (0)",
      "contents": "UITextGranularityCharacter"
    },
    {
      "trigger": "UITextGranularityDocument (5)",
      "contents": "UITextGranularityDocument"
    },
    {
      "trigger": "UITextGranularityLine (4)",
      "contents": "UITextGranularityLine"
    },
    {
      "trigger": "UITextGranularityParagraph (3)",
      "contents": "UITextGranularityParagraph"
    },
    {
      "trigger": "UITextGranularitySentence (2)",
      "contents": "UITextGranularitySentence"
    },
    {
      "trigger": "UITextGranularityWord (1)",
      "contents": "UITextGranularityWord"
    },
    {
      "trigger": "UITextInputCurrentInputModeDidChangeNotification (NSString*)",
      "contents": "UITextInputCurrentInputModeDidChangeNotification"
    },
    {
      "trigger": "UITextInputTextBackgroundColorKey (NSString*)",
      "contents": "UITextInputTextBackgroundColorKey"
    },
    {
      "trigger": "UITextInputTextColorKey (NSString*)",
      "contents": "UITextInputTextColorKey"
    },
    {
      "trigger": "UITextInputTextFontKey (NSString*)",
      "contents": "UITextInputTextFontKey"
    },
    {
      "trigger": "UITextLayoutDirectionDown (5)",
      "contents": "UITextLayoutDirectionDown"
    },
    {
      "trigger": "UITextLayoutDirectionLeft (3)",
      "contents": "UITextLayoutDirectionLeft"
    },
    {
      "trigger": "UITextLayoutDirectionRight (2)",
      "contents": "UITextLayoutDirectionRight"
    },
    {
      "trigger": "UITextLayoutDirectionUp (4)",
      "contents": "UITextLayoutDirectionUp"
    },
    {
      "trigger": "UITextSpellCheckingTypeDefault (0)",
      "contents": "UITextSpellCheckingTypeDefault"
    },
    {
      "trigger": "UITextSpellCheckingTypeNo (1)",
      "contents": "UITextSpellCheckingTypeNo"
    },
    {
      "trigger": "UITextSpellCheckingTypeYes (2)",
      "contents": "UITextSpellCheckingTypeYes"
    },
    {
      "trigger": "UITextStorageDirectionBackward (1)",
      "contents": "UITextStorageDirectionBackward"
    },
    {
      "trigger": "UITextStorageDirectionForward (0)",
      "contents": "UITextStorageDirectionForward"
    },
    {
      "trigger": "UITextViewTextDidBeginEditingNotification (NSString*)",
      "contents": "UITextViewTextDidBeginEditingNotification"
    },
    {
      "trigger": "UITextViewTextDidChangeNotification (NSString*)",
      "contents": "UITextViewTextDidChangeNotification"
    },
    {
      "trigger": "UITextViewTextDidEndEditingNotification (NSString*)",
      "contents": "UITextViewTextDidEndEditingNotification"
    },
    {
      "trigger": "UITextWritingDirectionLeftToRight (0)",
      "contents": "UITextWritingDirectionLeftToRight"
    },
    {
      "trigger": "UITextWritingDirectionNatural (-1)",
      "contents": "UITextWritingDirectionNatural"
    },
    {
      "trigger": "UITextWritingDirectionRightToLeft (1)",
      "contents": "UITextWritingDirectionRightToLeft"
    },
    {
      "trigger": "UIToolbarPositionAny (0)",
      "contents": "UIToolbarPositionAny"
    },
    {
      "trigger": "UIToolbarPositionBottom (1)",
      "contents": "UIToolbarPositionBottom"
    },
    {
      "trigger": "UIToolbarPositionTop (2)",
      "contents": "UIToolbarPositionTop"
    },
    {
      "trigger": "UITouchPhaseBegan (0)",
      "contents": "UITouchPhaseBegan"
    },
    {
      "trigger": "UITouchPhaseCancelled (4)",
      "contents": "UITouchPhaseCancelled"
    },
    {
      "trigger": "UITouchPhaseEnded (3)",
      "contents": "UITouchPhaseEnded"
    },
    {
      "trigger": "UITouchPhaseMoved (1)",
      "contents": "UITouchPhaseMoved"
    },
    {
      "trigger": "UITouchPhaseStationary (2)",
      "contents": "UITouchPhaseStationary"
    },
    {
      "trigger": "UITrackingRunLoopMode (NSString*)",
      "contents": "UITrackingRunLoopMode"
    },
    {
      "trigger": "UIUserInterfaceIdiomPad (1)",
      "contents": "UIUserInterfaceIdiomPad"
    },
    {
      "trigger": "UIUserInterfaceIdiomPhone (0)",
      "contents": "UIUserInterfaceIdiomPhone"
    },
    {
      "trigger": "UIUserInterfaceLayoutDirectionLeftToRight (0)",
      "contents": "UIUserInterfaceLayoutDirectionLeftToRight"
    },
    {
      "trigger": "UIUserInterfaceLayoutDirectionRightToLeft (1)",
      "contents": "UIUserInterfaceLayoutDirectionRightToLeft"
    },
    {
      "trigger": "UIVideoAtPathIsCompatibleWithSavedPhotosAlbum",
      "contents": "UIVideoAtPathIsCompatibleWithSavedPhotosAlbum(${1:NSString* videoPath})"
    },
    {
      "trigger": "UIVideoEditorController.canEditVideoAtPath:",
      "contents": "UIVideoEditorController.canEditVideoAtPath(${1:NSString* videoPath})"
    },
    {
      "trigger": "UIView.animateWithDuration:animations:",
      "contents": "UIView.animateWithDuration(${1:NSTimeInterval duration}, animations:${2:void (^)(void) animations})"
    },
    {
      "trigger": "UIView.animateWithDuration:animations:completion:",
      "contents": "UIView.animateWithDuration(${1:NSTimeInterval duration}, animations:${2:void (^)(void) animations}, completion:${3:void (^)(BOOL) completion})"
    },
    {
      "trigger": "UIView.animateWithDuration:delay:options:animations:completion:",
      "contents": "UIView.animateWithDuration(${1:NSTimeInterval duration}, delay:${2:NSTimeInterval delay}, options:${3:UIViewAnimationOptions options}, animations:${4:void (^)(void) animations}, completion:${5:void (^)(BOOL) completion})"
    },
    {
      "trigger": "UIView.beginAnimations:context:",
      "contents": "UIView.beginAnimations(${1:NSString* animationID}, context:${2:void* context})"
    },
    {
      "trigger": "UIView.setAnimationBeginsFromCurrentState:",
      "contents": "UIView.setAnimationBeginsFromCurrentState(${1:BOOL fromCurrentState})"
    },
    {
      "trigger": "UIView.setAnimationCurve:",
      "contents": "UIView.setAnimationCurve(${1:UIViewAnimationCurve curve})"
    },
    {
      "trigger": "UIView.setAnimationDelay:",
      "contents": "UIView.setAnimationDelay(${1:NSTimeInterval delay})"
    },
    {
      "trigger": "UIView.setAnimationDelegate:",
      "contents": "UIView.setAnimationDelegate(${1:id delegate})"
    },
    {
      "trigger": "UIView.setAnimationDidStopSelector:",
      "contents": "UIView.setAnimationDidStopSelector(${1:SEL selector})"
    },
    {
      "trigger": "UIView.setAnimationDuration:",
      "contents": "UIView.setAnimationDuration(${1:NSTimeInterval duration})"
    },
    {
      "trigger": "UIView.setAnimationRepeatAutoreverses:",
      "contents": "UIView.setAnimationRepeatAutoreverses(${1:BOOL repeatAutoreverses})"
    },
    {
      "trigger": "UIView.setAnimationRepeatCount:",
      "contents": "UIView.setAnimationRepeatCount(${1:float repeatCount})"
    },
    {
      "trigger": "UIView.setAnimationStartDate:",
      "contents": "UIView.setAnimationStartDate(${1:NSDate* startDate})"
    },
    {
      "trigger": "UIView.setAnimationTransition:forView:cache:",
      "contents": "UIView.setAnimationTransition(${1:UIViewAnimationTransition transition}, forView:${2:UIView* view}, cache:${3:BOOL cache})"
    },
    {
      "trigger": "UIView.setAnimationWillStartSelector:",
      "contents": "UIView.setAnimationWillStartSelector(${1:SEL selector})"
    },
    {
      "trigger": "UIView.setAnimationsEnabled:",
      "contents": "UIView.setAnimationsEnabled(${1:BOOL enabled})"
    },
    {
      "trigger": "UIView.transitionFromView:toView:duration:options:completion:",
      "contents": "UIView.transitionFromView(${1:UIView* fromView}, toView:${2:UIView* toView}, duration:${3:NSTimeInterval duration}, options:${4:UIViewAnimationOptions options}, completion:${5:void (^)(BOOL) completion})"
    },
    {
      "trigger": "UIView.transitionWithView:duration:options:animations:completion:",
      "contents": "UIView.transitionWithView(${1:UIView* view}, duration:${2:NSTimeInterval duration}, options:${3:UIViewAnimationOptions options}, animations:${4:void (^)(void) animations}, completion:${5:void (^)(BOOL) completion})"
    },
    {
      "trigger": "UIViewAnimationCurveEaseIn (1)",
      "contents": "UIViewAnimationCurveEaseIn"
    },
    {
      "trigger": "UIViewAnimationCurveEaseInOut (0)",
      "contents": "UIViewAnimationCurveEaseInOut"
    },
    {
      "trigger": "UIViewAnimationCurveEaseOut (2)",
      "contents": "UIViewAnimationCurveEaseOut"
    },
    {
      "trigger": "UIViewAnimationCurveLinear (3)",
      "contents": "UIViewAnimationCurveLinear"
    },
    {
      "trigger": "UIViewAnimationOptionAllowAnimatedContent (128)",
      "contents": "UIViewAnimationOptionAllowAnimatedContent"
    },
    {
      "trigger": "UIViewAnimationOptionAllowUserInteraction (2)",
      "contents": "UIViewAnimationOptionAllowUserInteraction"
    },
    {
      "trigger": "UIViewAnimationOptionAutoreverse (16)",
      "contents": "UIViewAnimationOptionAutoreverse"
    },
    {
      "trigger": "UIViewAnimationOptionBeginFromCurrentState (4)",
      "contents": "UIViewAnimationOptionBeginFromCurrentState"
    },
    {
      "trigger": "UIViewAnimationOptionCurveEaseIn (65536)",
      "contents": "UIViewAnimationOptionCurveEaseIn"
    },
    {
      "trigger": "UIViewAnimationOptionCurveEaseInOut (0)",
      "contents": "UIViewAnimationOptionCurveEaseInOut"
    },
    {
      "trigger": "UIViewAnimationOptionCurveEaseOut (131072)",
      "contents": "UIViewAnimationOptionCurveEaseOut"
    },
    {
      "trigger": "UIViewAnimationOptionCurveLinear (196608)",
      "contents": "UIViewAnimationOptionCurveLinear"
    },
    {
      "trigger": "UIViewAnimationOptionLayoutSubviews (1)",
      "contents": "UIViewAnimationOptionLayoutSubviews"
    },
    {
      "trigger": "UIViewAnimationOptionOverrideInheritedCurve (64)",
      "contents": "UIViewAnimationOptionOverrideInheritedCurve"
    },
    {
      "trigger": "UIViewAnimationOptionOverrideInheritedDuration (32)",
      "contents": "UIViewAnimationOptionOverrideInheritedDuration"
    },
    {
      "trigger": "UIViewAnimationOptionRepeat (8)",
      "contents": "UIViewAnimationOptionRepeat"
    },
    {
      "trigger": "UIViewAnimationOptionShowHideTransitionViews (256)",
      "contents": "UIViewAnimationOptionShowHideTransitionViews"
    },
    {
      "trigger": "UIViewAnimationOptionTransitionCrossDissolve (5242880)",
      "contents": "UIViewAnimationOptionTransitionCrossDissolve"
    },
    {
      "trigger": "UIViewAnimationOptionTransitionCurlDown (4194304)",
      "contents": "UIViewAnimationOptionTransitionCurlDown"
    },
    {
      "trigger": "UIViewAnimationOptionTransitionCurlUp (3145728)",
      "contents": "UIViewAnimationOptionTransitionCurlUp"
    },
    {
      "trigger": "UIViewAnimationOptionTransitionFlipFromBottom (7340032)",
      "contents": "UIViewAnimationOptionTransitionFlipFromBottom"
    },
    {
      "trigger": "UIViewAnimationOptionTransitionFlipFromLeft (1048576)",
      "contents": "UIViewAnimationOptionTransitionFlipFromLeft"
    },
    {
      "trigger": "UIViewAnimationOptionTransitionFlipFromRight (2097152)",
      "contents": "UIViewAnimationOptionTransitionFlipFromRight"
    },
    {
      "trigger": "UIViewAnimationOptionTransitionFlipFromTop (6291456)",
      "contents": "UIViewAnimationOptionTransitionFlipFromTop"
    },
    {
      "trigger": "UIViewAnimationOptionTransitionNone (0)",
      "contents": "UIViewAnimationOptionTransitionNone"
    },
    {
      "trigger": "UIViewAnimationTransitionCurlDown (4)",
      "contents": "UIViewAnimationTransitionCurlDown"
    },
    {
      "trigger": "UIViewAnimationTransitionCurlUp (3)",
      "contents": "UIViewAnimationTransitionCurlUp"
    },
    {
      "trigger": "UIViewAnimationTransitionFlipFromLeft (1)",
      "contents": "UIViewAnimationTransitionFlipFromLeft"
    },
    {
      "trigger": "UIViewAnimationTransitionFlipFromRight (2)",
      "contents": "UIViewAnimationTransitionFlipFromRight"
    },
    {
      "trigger": "UIViewAnimationTransitionNone (0)",
      "contents": "UIViewAnimationTransitionNone"
    },
    {
      "trigger": "UIViewAutoresizingFlexibleBottomMargin (32)",
      "contents": "UIViewAutoresizingFlexibleBottomMargin"
    },
    {
      "trigger": "UIViewAutoresizingFlexibleHeight (16)",
      "contents": "UIViewAutoresizingFlexibleHeight"
    },
    {
      "trigger": "UIViewAutoresizingFlexibleLeftMargin (1)",
      "contents": "UIViewAutoresizingFlexibleLeftMargin"
    },
    {
      "trigger": "UIViewAutoresizingFlexibleRightMargin (4)",
      "contents": "UIViewAutoresizingFlexibleRightMargin"
    },
    {
      "trigger": "UIViewAutoresizingFlexibleTopMargin (8)",
      "contents": "UIViewAutoresizingFlexibleTopMargin"
    },
    {
      "trigger": "UIViewAutoresizingFlexibleWidth (2)",
      "contents": "UIViewAutoresizingFlexibleWidth"
    },
    {
      "trigger": "UIViewAutoresizingNone (0)",
      "contents": "UIViewAutoresizingNone"
    },
    {
      "trigger": "UIViewContentModeBottom (6)",
      "contents": "UIViewContentModeBottom"
    },
    {
      "trigger": "UIViewContentModeBottomLeft (11)",
      "contents": "UIViewContentModeBottomLeft"
    },
    {
      "trigger": "UIViewContentModeBottomRight (12)",
      "contents": "UIViewContentModeBottomRight"
    },
    {
      "trigger": "UIViewContentModeCenter (4)",
      "contents": "UIViewContentModeCenter"
    },
    {
      "trigger": "UIViewContentModeLeft (7)",
      "contents": "UIViewContentModeLeft"
    },
    {
      "trigger": "UIViewContentModeRedraw (3)",
      "contents": "UIViewContentModeRedraw"
    },
    {
      "trigger": "UIViewContentModeRight (8)",
      "contents": "UIViewContentModeRight"
    },
    {
      "trigger": "UIViewContentModeScaleAspectFill (2)",
      "contents": "UIViewContentModeScaleAspectFill"
    },
    {
      "trigger": "UIViewContentModeScaleAspectFit (1)",
      "contents": "UIViewContentModeScaleAspectFit"
    },
    {
      "trigger": "UIViewContentModeScaleToFill (0)",
      "contents": "UIViewContentModeScaleToFill"
    },
    {
      "trigger": "UIViewContentModeTop (5)",
      "contents": "UIViewContentModeTop"
    },
    {
      "trigger": "UIViewContentModeTopLeft (9)",
      "contents": "UIViewContentModeTopLeft"
    },
    {
      "trigger": "UIViewContentModeTopRight (10)",
      "contents": "UIViewContentModeTopRight"
    },
    {
      "trigger": "UIViewControllerHierarchyInconsistencyException (NSString*)",
      "contents": "UIViewControllerHierarchyInconsistencyException"
    },
    {
      "trigger": "UIWebViewNavigationTypeBackForward (2)",
      "contents": "UIWebViewNavigationTypeBackForward"
    },
    {
      "trigger": "UIWebViewNavigationTypeFormResubmitted (4)",
      "contents": "UIWebViewNavigationTypeFormResubmitted"
    },
    {
      "trigger": "UIWebViewNavigationTypeFormSubmitted (1)",
      "contents": "UIWebViewNavigationTypeFormSubmitted"
    },
    {
      "trigger": "UIWebViewNavigationTypeLinkClicked (0)",
      "contents": "UIWebViewNavigationTypeLinkClicked"
    },
    {
      "trigger": "UIWebViewNavigationTypeOther (5)",
      "contents": "UIWebViewNavigationTypeOther"
    },
    {
      "trigger": "UIWebViewNavigationTypeReload (3)",
      "contents": "UIWebViewNavigationTypeReload"
    },
    {
      "trigger": "UIWindowDidBecomeHiddenNotification (NSString*)",
      "contents": "UIWindowDidBecomeHiddenNotification"
    },
    {
      "trigger": "UIWindowDidBecomeKeyNotification (NSString*)",
      "contents": "UIWindowDidBecomeKeyNotification"
    },
    {
      "trigger": "UIWindowDidBecomeVisibleNotification (NSString*)",
      "contents": "UIWindowDidBecomeVisibleNotification"
    },
    {
      "trigger": "UIWindowDidResignKeyNotification (NSString*)",
      "contents": "UIWindowDidResignKeyNotification"
    },
    {
      "trigger": "UIWindowLevelAlert (UIWindowLevel)",
      "contents": "UIWindowLevelAlert"
    },
    {
      "trigger": "UIWindowLevelNormal (UIWindowLevel)",
      "contents": "UIWindowLevelNormal"
    },
    {
      "trigger": "UIWindowLevelStatusBar (UIWindowLevel)",
      "contents": "UIWindowLevelStatusBar"
    },
    {
      "trigger": "URLByAppendingPathComponent:",
      "contents": "URLByAppendingPathComponent(${1:NSString* pathComponent})"
    },
    {
      "trigger": "URLByAppendingPathComponent:isDirectory:",
      "contents": "URLByAppendingPathComponent(${1:NSString* pathComponent}, isDirectory:${2:BOOL isDirectory})"
    },
    {
      "trigger": "URLByAppendingPathExtension:",
      "contents": "URLByAppendingPathExtension(${1:NSString* pathExtension})"
    },
    {
      "trigger": "URLForAuxiliaryExecutable:",
      "contents": "URLForAuxiliaryExecutable(${1:NSString* executableName})"
    },
    {
      "trigger": "URLForDirectory:inDomain:appropriateForURL:create:error:",
      "contents": "URLForDirectory(${1:NSSearchPathDirectory directory}, inDomain:${2:NSSearchPathDomainMask domain}, appropriateForURL:${3:NSURL* url}, create:${4:BOOL shouldCreate}, error:${5:NSError** error})"
    },
    {
      "trigger": "URLForKey:",
      "contents": "URLForKey(${1:NSString* defaultName})"
    },
    {
      "trigger": "URLForPersistentStore:",
      "contents": "URLForPersistentStore(${1:NSPersistentStore* store})"
    },
    {
      "trigger": "URLForPublishingUbiquitousItemAtURL:expirationDate:error:",
      "contents": "URLForPublishingUbiquitousItemAtURL(${1:NSURL* url}, expirationDate:${2:NSDate** outDate}, error:${3:NSError** error})"
    },
    {
      "trigger": "URLForResource:withExtension:",
      "contents": "URLForResource(${1:NSString* name}, withExtension:${2:NSString* ext})"
    },
    {
      "trigger": "URLForResource:withExtension:subdirectory:",
      "contents": "URLForResource(${1:NSString* name}, withExtension:${2:NSString* ext}, subdirectory:${3:NSString* subpath})"
    },
    {
      "trigger": "URLForResource:withExtension:subdirectory:localization:",
      "contents": "URLForResource(${1:NSString* name}, withExtension:${2:NSString* ext}, subdirectory:${3:NSString* subpath}, localization:${4:NSString* localizationName})"
    },
    {
      "trigger": "URLForUbiquityContainerIdentifier:",
      "contents": "URLForUbiquityContainerIdentifier(${1:NSString* containerIdentifier})"
    },
    {
      "trigger": "URLProtocol:cachedResponseIsValid:",
      "contents": "URLProtocol(${1:NSURLProtocol* protocol}, cachedResponseIsValid:${2:NSCachedURLResponse* cachedResponse})"
    },
    {
      "trigger": "URLProtocol:didCancelAuthenticationChallenge:",
      "contents": "URLProtocol(${1:NSURLProtocol* protocol}, didCancelAuthenticationChallenge:${2:NSURLAuthenticationChallenge* challenge})"
    },
    {
      "trigger": "URLProtocol:didFailWithError:",
      "contents": "URLProtocol(${1:NSURLProtocol* protocol}, didFailWithError:${2:NSError* error})"
    },
    {
      "trigger": "URLProtocol:didLoadData:",
      "contents": "URLProtocol(${1:NSURLProtocol* protocol}, didLoadData:${2:NSData* data})"
    },
    {
      "trigger": "URLProtocol:didReceiveAuthenticationChallenge:",
      "contents": "URLProtocol(${1:NSURLProtocol* protocol}, didReceiveAuthenticationChallenge:${2:NSURLAuthenticationChallenge* challenge})"
    },
    {
      "trigger": "URLProtocol:didReceiveResponse:cacheStoragePolicy:",
      "contents": "URLProtocol(${1:NSURLProtocol* protocol}, didReceiveResponse:${2:NSURLResponse* response}, cacheStoragePolicy:${3:NSURLCacheStoragePolicy policy})"
    },
    {
      "trigger": "URLProtocol:wasRedirectedToRequest:redirectResponse:",
      "contents": "URLProtocol(${1:NSURLProtocol* protocol}, wasRedirectedToRequest:${2:NSURLRequest* request}, redirectResponse:${3:NSURLResponse* redirectResponse})"
    },
    {
      "trigger": "URLProtocolDidFinishLoading:",
      "contents": "URLProtocolDidFinishLoading(${1:NSURLProtocol* protocol})"
    },
    {
      "trigger": "URLsForDirectory:inDomains:",
      "contents": "URLsForDirectory(${1:NSSearchPathDirectory directory}, inDomains:${2:NSSearchPathDomainMask domainMask})"
    },
    {
      "trigger": "URLsForResourcesWithExtension:subdirectory:",
      "contents": "URLsForResourcesWithExtension(${1:NSString* ext}, subdirectory:${2:NSString* subpath})"
    },
    {
      "trigger": "URLsForResourcesWithExtension:subdirectory:localization:",
      "contents": "URLsForResourcesWithExtension(${1:NSString* ext}, subdirectory:${2:NSString* subpath}, localization:${3:NSString* localizationName})"
    },
    {
      "trigger": "UTTypeConformsTo",
      "contents": "UTTypeConformsTo(${1:CFStringRef inUTI}, ${2:CFStringRef inConformsToUTI})"
    },
    {
      "trigger": "UTTypeCopyDeclaration",
      "contents": "UTTypeCopyDeclaration(${1:CFStringRef inUTI})"
    },
    {
      "trigger": "UTTypeCopyDeclaringBundleURL",
      "contents": "UTTypeCopyDeclaringBundleURL(${1:CFStringRef inUTI})"
    },
    {
      "trigger": "UTTypeCopyDescription",
      "contents": "UTTypeCopyDescription(${1:CFStringRef inUTI})"
    },
    {
      "trigger": "UTTypeCopyPreferredTagWithClass",
      "contents": "UTTypeCopyPreferredTagWithClass(${1:CFStringRef inUTI}, ${2:CFStringRef inTagClass})"
    },
    {
      "trigger": "UTTypeCreateAllIdentifiersForTag",
      "contents": "UTTypeCreateAllIdentifiersForTag(${1:CFStringRef inTagClass}, ${2:CFStringRef inTag}, ${3:CFStringRef inConformingToUTI})"
    },
    {
      "trigger": "UTTypeCreatePreferredIdentifierForTag",
      "contents": "UTTypeCreatePreferredIdentifierForTag(${1:CFStringRef inTagClass}, ${2:CFStringRef inTag}, ${3:CFStringRef inConformingToUTI})"
    },
    {
      "trigger": "UTTypeEqual",
      "contents": "UTTypeEqual(${1:CFStringRef inUTI1}, ${2:CFStringRef inUTI2})"
    },
    {
      "trigger": "__CGAffineTransformMake",
      "contents": "__CGAffineTransformMake(${1:CGFloat a}, ${2:CGFloat b}, ${3:CGFloat c}, ${4:CGFloat d}, ${5:CGFloat tx}, ${6:CGFloat ty})"
    },
    {
      "trigger": "__CGPointApplyAffineTransform",
      "contents": "__CGPointApplyAffineTransform(${1:CGPoint point}, ${2:CGAffineTransform t})"
    },
    {
      "trigger": "__CGPointEqualToPoint",
      "contents": "__CGPointEqualToPoint(${1:CGPoint point1}, ${2:CGPoint point2})"
    },
    {
      "trigger": "__CGSizeApplyAffineTransform",
      "contents": "__CGSizeApplyAffineTransform(${1:CGSize size}, ${2:CGAffineTransform t})"
    },
    {
      "trigger": "__CGSizeEqualToSize",
      "contents": "__CGSizeEqualToSize(${1:CGSize size1}, ${2:CGSize size2})"
    },
    {
      "trigger": "abbreviationForDate:",
      "contents": "abbreviationForDate(${1:NSDate* aDate})"
    },
    {
      "trigger": "accelerometer:didAccelerate:",
      "contents": "accelerometer(${1:UIAccelerometer* accelerometer}, didAccelerate:${2:UIAcceleration* acceleration})"
    },
    {
      "trigger": "acceptCallID:error:",
      "contents": "acceptCallID(${1:NSInteger callID}, error:${2:NSError** error})"
    },
    {
      "trigger": "acceptConnectionFromPeer:error:",
      "contents": "acceptConnectionFromPeer(${1:NSString* peerID}, error:${2:NSError** error})"
    },
    {
      "trigger": "acceptConnectionInBackgroundAndNotifyForModes:",
      "contents": "acceptConnectionInBackgroundAndNotifyForModes(${1:NSArray* modes})"
    },
    {
      "trigger": "acceptInputForMode:beforeDate:",
      "contents": "acceptInputForMode(${1:NSString* mode}, beforeDate:${2:NSDate* limitDate})"
    },
    {
      "trigger": "accessibilityContentForLineNumber:",
      "contents": "accessibilityContentForLineNumber(${1:NSInteger lineNumber})"
    },
    {
      "trigger": "accessibilityElementAtIndex:",
      "contents": "accessibilityElementAtIndex(${1:NSInteger index})"
    },
    {
      "trigger": "accessibilityFrameForLineNumber:",
      "contents": "accessibilityFrameForLineNumber(${1:NSInteger lineNumber})"
    },
    {
      "trigger": "accessibilityLineNumberForPoint:",
      "contents": "accessibilityLineNumberForPoint(${1:CGPoint point})"
    },
    {
      "trigger": "accessibilityScroll:",
      "contents": "accessibilityScroll(${1:UIAccessibilityScrollDirection direction})"
    },
    {
      "trigger": "accessoryDidDisconnect:",
      "contents": "accessoryDidDisconnect(${1:EAAccessory* accessory})"
    },
    {
      "trigger": "accommodatePresentedItemDeletionWithCompletionHandler:",
      "contents": "accommodatePresentedItemDeletionWithCompletionHandler(${1:void (^)(NSError *) completionHandler})"
    },
    {
      "trigger": "accommodatePresentedSubitemDeletionAtURL:completionHandler:",
      "contents": "accommodatePresentedSubitemDeletionAtURL(${1:NSURL* url}, completionHandler:${2:void (^)(NSError *) completionHandler})"
    },
    {
      "trigger": "accountTypeWithAccountTypeIdentifier:",
      "contents": "accountTypeWithAccountTypeIdentifier(${1:NSString* typeIdentifier})"
    },
    {
      "trigger": "accountWithIdentifier:",
      "contents": "accountWithIdentifier(${1:NSString* identifier})"
    },
    {
      "trigger": "accountsWithAccountType:",
      "contents": "accountsWithAccountType(${1:ACAccountType* accountType})"
    },
    {
      "trigger": "achievementViewControllerDidFinish:",
      "contents": "achievementViewControllerDidFinish(${1:GKAchievementViewController* viewController})"
    },
    {
      "trigger": "actionForKey:",
      "contents": "actionForKey(${1:NSString* event})"
    },
    {
      "trigger": "actionForLayer:forKey:",
      "contents": "actionForLayer(${1:CALayer* layer}, forKey:${2:NSString* event})"
    },
    {
      "trigger": "actionSheet:clickedButtonAtIndex:",
      "contents": "actionSheet(${1:UIActionSheet* actionSheet}, clickedButtonAtIndex:${2:NSInteger buttonIndex})"
    },
    {
      "trigger": "actionSheet:didDismissWithButtonIndex:",
      "contents": "actionSheet(${1:UIActionSheet* actionSheet}, didDismissWithButtonIndex:${2:NSInteger buttonIndex})"
    },
    {
      "trigger": "actionSheet:willDismissWithButtonIndex:",
      "contents": "actionSheet(${1:UIActionSheet* actionSheet}, willDismissWithButtonIndex:${2:NSInteger buttonIndex})"
    },
    {
      "trigger": "actionSheetCancel:",
      "contents": "actionSheetCancel(${1:UIActionSheet* actionSheet})"
    },
    {
      "trigger": "actionsForTarget:forControlEvent:",
      "contents": "actionsForTarget(${1:id target}, forControlEvent:${2:UIControlEvents controlEvent})"
    },
    {
      "trigger": "addAlarm:",
      "contents": "addAlarm(${1:EKAlarm* alarm})"
    },
    {
      "trigger": "addAnimation:forKey:",
      "contents": "addAnimation(${1:CAAnimation* anim}, forKey:${2:NSString* key})"
    },
    {
      "trigger": "addAnnotation:",
      "contents": "addAnnotation(${1:id annotation})"
    },
    {
      "trigger": "addAnnotations:",
      "contents": "addAnnotations(${1:NSArray* annotations})"
    },
    {
      "trigger": "addArcWithCenter:radius:startAngle:endAngle:clockwise:",
      "contents": "addArcWithCenter(${1:CGPoint center}, radius:${2:CGFloat radius}, startAngle:${3:CGFloat startAngle}, endAngle:${4:CGFloat endAngle}, clockwise:${5:BOOL clockwise})"
    },
    {
      "trigger": "addAsset:",
      "contents": "addAsset(${1:ALAsset* asset})"
    },
    {
      "trigger": "addAssetWithRequest:",
      "contents": "addAssetWithRequest(${1:NSURLRequest* request})"
    },
    {
      "trigger": "addAssetsGroupAlbumWithName:resultBlock:failureBlock:",
      "contents": "addAssetsGroupAlbumWithName(${1:NSString* name}, resultBlock:${2:ALAssetsLibraryGroupResultBlock resultBlock}, failureBlock:${3:ALAssetsLibraryAccessFailureBlock failureBlock})"
    },
    {
      "trigger": "addAttachmentData:mimeType:fileName:",
      "contents": "addAttachmentData(${1:NSData* attachment}, mimeType:${2:NSString* mimeType}, fileName:${3:NSString* filename})"
    },
    {
      "trigger": "addAttribute:value:range:",
      "contents": "addAttribute(${1:NSString* name}, value:${2:id value}, range:${3:NSRange range})"
    },
    {
      "trigger": "addAttributes:range:",
      "contents": "addAttributes(${1:NSDictionary* attrs}, range:${2:NSRange range})"
    },
    {
      "trigger": "addBoundaryTimeObserverForTimes:queue:usingBlock:",
      "contents": "addBoundaryTimeObserverForTimes(${1:NSArray* times}, queue:${2:dispatch_queue_t queue}, usingBlock:${3:void (^)(void) block})"
    },
    {
      "trigger": "addButtonWithTitle:",
      "contents": "addButtonWithTitle(${1:NSString* title})"
    },
    {
      "trigger": "addCacheNodes:",
      "contents": "addCacheNodes(${1:NSSet* cacheNodes})"
    },
    {
      "trigger": "addCharactersInRange:",
      "contents": "addCharactersInRange(${1:NSRange aRange})"
    },
    {
      "trigger": "addCharactersInString:",
      "contents": "addCharactersInString(${1:NSString* aString})"
    },
    {
      "trigger": "addChildViewController:",
      "contents": "addChildViewController(${1:UIViewController* childController})"
    },
    {
      "trigger": "addConnection:",
      "contents": "addConnection(${1:MIDINetworkConnection* connection})"
    },
    {
      "trigger": "addContact:",
      "contents": "addContact(${1:MIDINetworkHost* contact})"
    },
    {
      "trigger": "addCurveToPoint:controlPoint1:controlPoint2:",
      "contents": "addCurveToPoint(${1:CGPoint endPoint}, controlPoint1:${2:CGPoint controlPoint1}, controlPoint2:${3:CGPoint controlPoint2})"
    },
    {
      "trigger": "addDependency:",
      "contents": "addDependency(${1:NSOperation* op})"
    },
    {
      "trigger": "addEntriesFromDictionary:",
      "contents": "addEntriesFromDictionary(${1:NSDictionary* otherDictionary})"
    },
    {
      "trigger": "addExecutionBlock:",
      "contents": "addExecutionBlock(${1:void (^)(void) block})"
    },
    {
      "trigger": "addFileWrapper:",
      "contents": "addFileWrapper(${1:NSFileWrapper* child})"
    },
    {
      "trigger": "addFilterPredicate:",
      "contents": "addFilterPredicate(${1:MPMediaPredicate* predicate})"
    },
    {
      "trigger": "addGestureRecognizer:",
      "contents": "addGestureRecognizer(${1:UIGestureRecognizer* gestureRecognizer})"
    },
    {
      "trigger": "addImage:",
      "contents": "addImage(${1:UIImage* image})"
    },
    {
      "trigger": "addIndex:",
      "contents": "addIndex(${1:NSUInteger value})"
    },
    {
      "trigger": "addIndexes:",
      "contents": "addIndexes(${1:NSIndexSet* indexSet})"
    },
    {
      "trigger": "addIndexesInRange:",
      "contents": "addIndexesInRange(${1:NSRange range})"
    },
    {
      "trigger": "addInput:",
      "contents": "addInput(${1:AVAssetWriterInput* input})"
    },
    {
      "trigger": "addInput:",
      "contents": "addInput(${1:AVCaptureInput* input})"
    },
    {
      "trigger": "addIssueWithName:date:",
      "contents": "addIssueWithName(${1:NSString* name}, date:${2:NSDate* date})"
    },
    {
      "trigger": "addItems:",
      "contents": "addItems(${1:NSArray* items})"
    },
    {
      "trigger": "addLineToPoint:",
      "contents": "addLineToPoint(${1:CGPoint point})"
    },
    {
      "trigger": "addMultiPartData:withName:type:",
      "contents": "addMultiPartData(${1:NSData* data}, withName:${2:NSString* name}, type:${3:NSString* type})"
    },
    {
      "trigger": "addMutableTrackWithMediaType:preferredTrackID:",
      "contents": "addMutableTrackWithMediaType(${1:NSString* mediaType}, preferredTrackID:${2:CMPersistentTrackID preferredTrackID})"
    },
    {
      "trigger": "addObject:",
      "contents": "addObject(${1:id anObject})"
    },
    {
      "trigger": "addObject:",
      "contents": "addObject(${1:id object})"
    },
    {
      "trigger": "addObjects:count:",
      "contents": "addObjects(${1:id* objects}, count:${2:NSUInteger count})"
    },
    {
      "trigger": "addObjectsFromArray:",
      "contents": "addObjectsFromArray(${1:NSArray* array})"
    },
    {
      "trigger": "addObjectsFromArray:",
      "contents": "addObjectsFromArray(${1:NSArray* otherArray})"
    },
    {
      "trigger": "addObserver:forKeyPath:options:context:",
      "contents": "addObserver(${1:NSObject* observer}, forKeyPath:${2:NSString* keyPath}, options:${3:NSKeyValueObservingOptions options}, context:${4:void* context})"
    },
    {
      "trigger": "addObserver:selector:name:object:",
      "contents": "addObserver(${1:id observer}, selector:${2:SEL aSelector}, name:${3:NSString* aName}, object:${4:id anObject})"
    },
    {
      "trigger": "addObserver:toObjectsAtIndexes:forKeyPath:options:context:",
      "contents": "addObserver(${1:NSObject* observer}, toObjectsAtIndexes:${2:NSIndexSet* indexes}, forKeyPath:${3:NSString* keyPath}, options:${4:NSKeyValueObservingOptions options}, context:${5:void* context})"
    },
    {
      "trigger": "addObserverForName:object:queue:usingBlock:",
      "contents": "addObserverForName(${1:NSString* name}, object:${2:id obj}, queue:${3:NSOperationQueue* queue}, usingBlock:${4:void (^)(NSNotification *) block})"
    },
    {
      "trigger": "addOperation:",
      "contents": "addOperation(${1:NSOperation* op})"
    },
    {
      "trigger": "addOperationWithBlock:",
      "contents": "addOperationWithBlock(${1:void (^)(void) block})"
    },
    {
      "trigger": "addOperations:waitUntilFinished:",
      "contents": "addOperations(${1:NSArray* ops}, waitUntilFinished:${2:BOOL wait})"
    },
    {
      "trigger": "addOutput:",
      "contents": "addOutput(${1:AVAssetReaderOutput* output})"
    },
    {
      "trigger": "addOutput:",
      "contents": "addOutput(${1:AVCaptureOutput* output})"
    },
    {
      "trigger": "addOverlay:",
      "contents": "addOverlay(${1:id overlay})"
    },
    {
      "trigger": "addOverlays:",
      "contents": "addOverlays(${1:NSArray* overlays})"
    },
    {
      "trigger": "addPayment:",
      "contents": "addPayment(${1:SKPayment* payment})"
    },
    {
      "trigger": "addPeriodicTimeObserverForInterval:queue:usingBlock:",
      "contents": "addPeriodicTimeObserverForInterval(${1:CMTime interval}, queue:${2:dispatch_queue_t queue}, usingBlock:${3:void (^)(CMTime) block})"
    },
    {
      "trigger": "addPersistentStoreWithType:configuration:URL:options:error:",
      "contents": "addPersistentStoreWithType(${1:NSString* storeType}, configuration:${2:NSString* configuration}, URL:${3:NSURL* storeURL}, options:${4:NSDictionary* options}, error:${5:NSError** error})"
    },
    {
      "trigger": "addPlayersToMatch:",
      "contents": "addPlayersToMatch(${1:GKMatch* match})"
    },
    {
      "trigger": "addPlayersToMatch:matchRequest:completionHandler:",
      "contents": "addPlayersToMatch(${1:GKMatch* match}, matchRequest:${2:GKMatchRequest* matchRequest}, completionHandler:${3:void (^)(NSError *) completionHandler})"
    },
    {
      "trigger": "addPort:forMode:",
      "contents": "addPort(${1:NSPort* aPort}, forMode:${2:NSString* mode})"
    },
    {
      "trigger": "addPrintFormatter:startingAtPageAtIndex:",
      "contents": "addPrintFormatter(${1:UIPrintFormatter* formatter}, startingAtPageAtIndex:${2:NSInteger pageIndex})"
    },
    {
      "trigger": "addQuadCurveToPoint:controlPoint:",
      "contents": "addQuadCurveToPoint(${1:CGPoint endPoint}, controlPoint:${2:CGPoint controlPoint})"
    },
    {
      "trigger": "addRecipientsWithEmailAddresses:",
      "contents": "addRecipientsWithEmailAddresses(${1:NSArray* emailAddresses})"
    },
    {
      "trigger": "addRecipientsWithPlayerIDs:",
      "contents": "addRecipientsWithPlayerIDs(${1:NSArray* playerIDs})"
    },
    {
      "trigger": "addRecurrenceRule:",
      "contents": "addRecurrenceRule(${1:EKRecurrenceRule* rule})"
    },
    {
      "trigger": "addRegularFileWithContents:preferredFilename:",
      "contents": "addRegularFileWithContents(${1:NSData* data}, preferredFilename:${2:NSString* fileName})"
    },
    {
      "trigger": "addSublayer:",
      "contents": "addSublayer(${1:CALayer* layer})"
    },
    {
      "trigger": "addSubview:",
      "contents": "addSubview(${1:UIView* view})"
    },
    {
      "trigger": "addSuiteNamed:",
      "contents": "addSuiteNamed(${1:NSString* suiteName})"
    },
    {
      "trigger": "addTarget:action:",
      "contents": "addTarget(${1:id target}, action:${2:SEL action})"
    },
    {
      "trigger": "addTarget:action:forControlEvents:",
      "contents": "addTarget(${1:id target}, action:${2:SEL action}, forControlEvents:${3:UIControlEvents controlEvents})"
    },
    {
      "trigger": "addTimeInterval:",
      "contents": "addTimeInterval(${1:NSTimeInterval seconds})"
    },
    {
      "trigger": "addTimer:forMode:",
      "contents": "addTimer(${1:NSTimer* timer}, forMode:${2:NSString* mode})"
    },
    {
      "trigger": "addToRunLoop:forMode:",
      "contents": "addToRunLoop(${1:NSRunLoop* runloop}, forMode:${2:NSString* mode})"
    },
    {
      "trigger": "addTransactionObserver:",
      "contents": "addTransactionObserver(${1:id observer})"
    },
    {
      "trigger": "addURL:",
      "contents": "addURL(${1:NSURL* url})"
    },
    {
      "trigger": "addValue:forHTTPHeaderField:",
      "contents": "addValue(${1:NSString* value}, forHTTPHeaderField:${2:NSString* field})"
    },
    {
      "trigger": "additionalContentForURL:error:",
      "contents": "additionalContentForURL(${1:NSURL* absoluteURL}, error:${2:NSError** error})"
    },
    {
      "trigger": "alBuffer3f",
      "contents": "alBuffer3f(${1:ALuint bid}, ${2:ALenum param}, ${3:ALfloat value1}, ${4:ALfloat value2}, ${5:ALfloat value3})"
    },
    {
      "trigger": "alBuffer3i",
      "contents": "alBuffer3i(${1:ALuint bid}, ${2:ALenum param}, ${3:ALint value1}, ${4:ALint value2}, ${5:ALint value3})"
    },
    {
      "trigger": "alBufferData",
      "contents": "alBufferData(${1:ALuint bid}, ${2:ALenum format}, ${3:ALvoid* data}, ${4:ALsizei size}, ${5:ALsizei freq})"
    },
    {
      "trigger": "alBufferf",
      "contents": "alBufferf(${1:ALuint bid}, ${2:ALenum param}, ${3:ALfloat value})"
    },
    {
      "trigger": "alBufferfv",
      "contents": "alBufferfv(${1:ALuint bid}, ${2:ALenum param}, ${3:ALfloat* values})"
    },
    {
      "trigger": "alBufferi",
      "contents": "alBufferi(${1:ALuint bid}, ${2:ALenum param}, ${3:ALint value})"
    },
    {
      "trigger": "alBufferiv",
      "contents": "alBufferiv(${1:ALuint bid}, ${2:ALenum param}, ${3:ALint* values})"
    },
    {
      "trigger": "alDeleteBuffers",
      "contents": "alDeleteBuffers(${1:ALsizei n}, ${2:ALuint* buffers})"
    },
    {
      "trigger": "alDeleteSources",
      "contents": "alDeleteSources(${1:ALsizei n}, ${2:ALuint* sources})"
    },
    {
      "trigger": "alDisable",
      "contents": "alDisable(${1:ALenum capability})"
    },
    {
      "trigger": "alDistanceModel",
      "contents": "alDistanceModel(${1:ALenum distanceModel})"
    },
    {
      "trigger": "alDopplerFactor",
      "contents": "alDopplerFactor(${1:ALfloat value})"
    },
    {
      "trigger": "alDopplerVelocity",
      "contents": "alDopplerVelocity(${1:ALfloat value})"
    },
    {
      "trigger": "alEnable",
      "contents": "alEnable(${1:ALenum capability})"
    },
    {
      "trigger": "alGenBuffers",
      "contents": "alGenBuffers(${1:ALsizei n}, ${2:ALuint* buffers})"
    },
    {
      "trigger": "alGenSources",
      "contents": "alGenSources(${1:ALsizei n}, ${2:ALuint* sources})"
    },
    {
      "trigger": "alGetBoolean",
      "contents": "alGetBoolean(${1:ALenum param})"
    },
    {
      "trigger": "alGetBooleanv",
      "contents": "alGetBooleanv(${1:ALenum param}, ${2:ALboolean* data})"
    },
    {
      "trigger": "alGetBuffer3f",
      "contents": "alGetBuffer3f(${1:ALuint bid}, ${2:ALenum param}, ${3:ALfloat* value1}, ${4:ALfloat* value2}, ${5:ALfloat* value3})"
    },
    {
      "trigger": "alGetBuffer3i",
      "contents": "alGetBuffer3i(${1:ALuint bid}, ${2:ALenum param}, ${3:ALint* value1}, ${4:ALint* value2}, ${5:ALint* value3})"
    },
    {
      "trigger": "alGetBufferf",
      "contents": "alGetBufferf(${1:ALuint bid}, ${2:ALenum param}, ${3:ALfloat* value})"
    },
    {
      "trigger": "alGetBufferfv",
      "contents": "alGetBufferfv(${1:ALuint bid}, ${2:ALenum param}, ${3:ALfloat* values})"
    },
    {
      "trigger": "alGetBufferi",
      "contents": "alGetBufferi(${1:ALuint bid}, ${2:ALenum param}, ${3:ALint* value})"
    },
    {
      "trigger": "alGetBufferiv",
      "contents": "alGetBufferiv(${1:ALuint bid}, ${2:ALenum param}, ${3:ALint* values})"
    },
    {
      "trigger": "alGetDouble",
      "contents": "alGetDouble(${1:ALenum param})"
    },
    {
      "trigger": "alGetDoublev",
      "contents": "alGetDoublev(${1:ALenum param}, ${2:ALdouble* data})"
    },
    {
      "trigger": "alGetEnumValue",
      "contents": "alGetEnumValue(${1:ALchar* ename})"
    },
    {
      "trigger": "alGetFloat",
      "contents": "alGetFloat(${1:ALenum param})"
    },
    {
      "trigger": "alGetFloatv",
      "contents": "alGetFloatv(${1:ALenum param}, ${2:ALfloat* data})"
    },
    {
      "trigger": "alGetInteger",
      "contents": "alGetInteger(${1:ALenum param})"
    },
    {
      "trigger": "alGetIntegerv",
      "contents": "alGetIntegerv(${1:ALenum param}, ${2:ALint* data})"
    },
    {
      "trigger": "alGetListener3f",
      "contents": "alGetListener3f(${1:ALenum param}, ${2:ALfloat* value1}, ${3:ALfloat* value2}, ${4:ALfloat* value3})"
    },
    {
      "trigger": "alGetListener3i",
      "contents": "alGetListener3i(${1:ALenum param}, ${2:ALint* value1}, ${3:ALint* value2}, ${4:ALint* value3})"
    },
    {
      "trigger": "alGetListenerf",
      "contents": "alGetListenerf(${1:ALenum param}, ${2:ALfloat* value})"
    },
    {
      "trigger": "alGetListenerfv",
      "contents": "alGetListenerfv(${1:ALenum param}, ${2:ALfloat* values})"
    },
    {
      "trigger": "alGetListeneri",
      "contents": "alGetListeneri(${1:ALenum param}, ${2:ALint* value})"
    },
    {
      "trigger": "alGetListeneriv",
      "contents": "alGetListeneriv(${1:ALenum param}, ${2:ALint* values})"
    },
    {
      "trigger": "alGetProcAddress",
      "contents": "alGetProcAddress(${1:ALchar* fname})"
    },
    {
      "trigger": "alGetSource3f",
      "contents": "alGetSource3f(${1:ALuint sid}, ${2:ALenum param}, ${3:ALfloat* value1}, ${4:ALfloat* value2}, ${5:ALfloat* value3})"
    },
    {
      "trigger": "alGetSource3i",
      "contents": "alGetSource3i(${1:ALuint sid}, ${2:ALenum param}, ${3:ALint* value1}, ${4:ALint* value2}, ${5:ALint* value3})"
    },
    {
      "trigger": "alGetSourcef",
      "contents": "alGetSourcef(${1:ALuint sid}, ${2:ALenum param}, ${3:ALfloat* value})"
    },
    {
      "trigger": "alGetSourcefv",
      "contents": "alGetSourcefv(${1:ALuint sid}, ${2:ALenum param}, ${3:ALfloat* values})"
    },
    {
      "trigger": "alGetSourcei",
      "contents": "alGetSourcei(${1:ALuint sid}, ${2:ALenum param}, ${3:ALint* value})"
    },
    {
      "trigger": "alGetSourceiv",
      "contents": "alGetSourceiv(${1:ALuint sid}, ${2:ALenum param}, ${3:ALint* values})"
    },
    {
      "trigger": "alGetString",
      "contents": "alGetString(${1:ALenum param})"
    },
    {
      "trigger": "alIsBuffer",
      "contents": "alIsBuffer(${1:ALuint bid})"
    },
    {
      "trigger": "alIsEnabled",
      "contents": "alIsEnabled(${1:ALenum capability})"
    },
    {
      "trigger": "alIsExtensionPresent",
      "contents": "alIsExtensionPresent(${1:ALchar* extname})"
    },
    {
      "trigger": "alIsSource",
      "contents": "alIsSource(${1:ALuint sid})"
    },
    {
      "trigger": "alListener3f",
      "contents": "alListener3f(${1:ALenum param}, ${2:ALfloat value1}, ${3:ALfloat value2}, ${4:ALfloat value3})"
    },
    {
      "trigger": "alListener3i",
      "contents": "alListener3i(${1:ALenum param}, ${2:ALint value1}, ${3:ALint value2}, ${4:ALint value3})"
    },
    {
      "trigger": "alListenerf",
      "contents": "alListenerf(${1:ALenum param}, ${2:ALfloat value})"
    },
    {
      "trigger": "alListenerfv",
      "contents": "alListenerfv(${1:ALenum param}, ${2:ALfloat* values})"
    },
    {
      "trigger": "alListeneri",
      "contents": "alListeneri(${1:ALenum param}, ${2:ALint value})"
    },
    {
      "trigger": "alListeneriv",
      "contents": "alListeneriv(${1:ALenum param}, ${2:ALint* values})"
    },
    {
      "trigger": "alSource3f",
      "contents": "alSource3f(${1:ALuint sid}, ${2:ALenum param}, ${3:ALfloat value1}, ${4:ALfloat value2}, ${5:ALfloat value3})"
    },
    {
      "trigger": "alSource3i",
      "contents": "alSource3i(${1:ALuint sid}, ${2:ALenum param}, ${3:ALint value1}, ${4:ALint value2}, ${5:ALint value3})"
    },
    {
      "trigger": "alSourcePause",
      "contents": "alSourcePause(${1:ALuint sid})"
    },
    {
      "trigger": "alSourcePausev",
      "contents": "alSourcePausev(${1:ALsizei ns}, ${2:ALuint* sids})"
    },
    {
      "trigger": "alSourcePlay",
      "contents": "alSourcePlay(${1:ALuint sid})"
    },
    {
      "trigger": "alSourcePlayv",
      "contents": "alSourcePlayv(${1:ALsizei ns}, ${2:ALuint* sids})"
    },
    {
      "trigger": "alSourceQueueBuffers",
      "contents": "alSourceQueueBuffers(${1:ALuint sid}, ${2:ALsizei numEntries}, ${3:ALuint* bids})"
    },
    {
      "trigger": "alSourceRewind",
      "contents": "alSourceRewind(${1:ALuint sid})"
    },
    {
      "trigger": "alSourceRewindv",
      "contents": "alSourceRewindv(${1:ALsizei ns}, ${2:ALuint* sids})"
    },
    {
      "trigger": "alSourceStop",
      "contents": "alSourceStop(${1:ALuint sid})"
    },
    {
      "trigger": "alSourceStopv",
      "contents": "alSourceStopv(${1:ALsizei ns}, ${2:ALuint* sids})"
    },
    {
      "trigger": "alSourceUnqueueBuffers",
      "contents": "alSourceUnqueueBuffers(${1:ALuint sid}, ${2:ALsizei numEntries}, ${3:ALuint* bids})"
    },
    {
      "trigger": "alSourcef",
      "contents": "alSourcef(${1:ALuint sid}, ${2:ALenum param}, ${3:ALfloat value})"
    },
    {
      "trigger": "alSourcefv",
      "contents": "alSourcefv(${1:ALuint sid}, ${2:ALenum param}, ${3:ALfloat* values})"
    },
    {
      "trigger": "alSourcei",
      "contents": "alSourcei(${1:ALuint sid}, ${2:ALenum param}, ${3:ALint value})"
    },
    {
      "trigger": "alSourceiv",
      "contents": "alSourceiv(${1:ALuint sid}, ${2:ALenum param}, ${3:ALint* values})"
    },
    {
      "trigger": "alSpeedOfSound",
      "contents": "alSpeedOfSound(${1:ALfloat value})"
    },
    {
      "trigger": "alcCaptureCloseDevice",
      "contents": "alcCaptureCloseDevice(${1:ALCdevice* device})"
    },
    {
      "trigger": "alcCaptureOpenDevice",
      "contents": "alcCaptureOpenDevice(${1:ALCchar* devicename}, ${2:ALCuint frequency}, ${3:ALCenum format}, ${4:ALCsizei buffersize})"
    },
    {
      "trigger": "alcCaptureSamples",
      "contents": "alcCaptureSamples(${1:ALCdevice* device}, ${2:ALCvoid* buffer}, ${3:ALCsizei samples})"
    },
    {
      "trigger": "alcCaptureStart",
      "contents": "alcCaptureStart(${1:ALCdevice* device})"
    },
    {
      "trigger": "alcCaptureStop",
      "contents": "alcCaptureStop(${1:ALCdevice* device})"
    },
    {
      "trigger": "alcCloseDevice",
      "contents": "alcCloseDevice(${1:ALCdevice* device})"
    },
    {
      "trigger": "alcCreateContext",
      "contents": "alcCreateContext(${1:ALCdevice* device}, ${2:ALCint* attrlist})"
    },
    {
      "trigger": "alcDestroyContext",
      "contents": "alcDestroyContext(${1:ALCcontext* context})"
    },
    {
      "trigger": "alcGetContextsDevice",
      "contents": "alcGetContextsDevice(${1:ALCcontext* context})"
    },
    {
      "trigger": "alcGetEnumValue",
      "contents": "alcGetEnumValue(${1:ALCdevice* device}, ${2:ALCchar* enumname})"
    },
    {
      "trigger": "alcGetError",
      "contents": "alcGetError(${1:ALCdevice* device})"
    },
    {
      "trigger": "alcGetIntegerv",
      "contents": "alcGetIntegerv(${1:ALCdevice* device}, ${2:ALCenum param}, ${3:ALCsizei size}, ${4:ALCint* data})"
    },
    {
      "trigger": "alcGetProcAddress",
      "contents": "alcGetProcAddress(${1:ALCdevice* device}, ${2:ALCchar* funcname})"
    },
    {
      "trigger": "alcGetString",
      "contents": "alcGetString(${1:ALCdevice* device}, ${2:ALCenum param})"
    },
    {
      "trigger": "alcIsExtensionPresent",
      "contents": "alcIsExtensionPresent(${1:ALCdevice* device}, ${2:ALCchar* extname})"
    },
    {
      "trigger": "alcMakeContextCurrent",
      "contents": "alcMakeContextCurrent(${1:ALCcontext* context})"
    },
    {
      "trigger": "alcOpenDevice",
      "contents": "alcOpenDevice(${1:ALCchar* devicename})"
    },
    {
      "trigger": "alcProcessContext",
      "contents": "alcProcessContext(${1:ALCcontext* context})"
    },
    {
      "trigger": "alcSuspendContext",
      "contents": "alcSuspendContext(${1:ALCcontext* context})"
    },
    {
      "trigger": "alertView:clickedButtonAtIndex:",
      "contents": "alertView(${1:UIAlertView* alertView}, clickedButtonAtIndex:${2:NSInteger buttonIndex})"
    },
    {
      "trigger": "alertView:didDismissWithButtonIndex:",
      "contents": "alertView(${1:UIAlertView* alertView}, didDismissWithButtonIndex:${2:NSInteger buttonIndex})"
    },
    {
      "trigger": "alertView:willDismissWithButtonIndex:",
      "contents": "alertView(${1:UIAlertView* alertView}, willDismissWithButtonIndex:${2:NSInteger buttonIndex})"
    },
    {
      "trigger": "alertViewCancel:",
      "contents": "alertViewCancel(${1:UIAlertView* alertView})"
    },
    {
      "trigger": "alertViewShouldEnableFirstOtherButton:",
      "contents": "alertViewShouldEnableFirstOtherButton(${1:UIAlertView* alertView})"
    },
    {
      "trigger": "allKeysForObject:",
      "contents": "allKeysForObject(${1:id anObject})"
    },
    {
      "trigger": "animationDidStart:",
      "contents": "animationDidStart(${1:CAAnimation* anim})"
    },
    {
      "trigger": "animationDidStop:finished:",
      "contents": "animationDidStop(${1:CAAnimation* anim}, finished:${2:BOOL flag})"
    },
    {
      "trigger": "animationForKey:",
      "contents": "animationForKey(${1:NSString* key})"
    },
    {
      "trigger": "annotationsInMapRect:",
      "contents": "annotationsInMapRect(${1:MKMapRect mapRect})"
    },
    {
      "trigger": "appendAttributedString:",
      "contents": "appendAttributedString(${1:NSAttributedString* attrString})"
    },
    {
      "trigger": "appendBytes:length:",
      "contents": "appendBytes(${1:void* bytes}, length:${2:NSUInteger length})"
    },
    {
      "trigger": "appendData:",
      "contents": "appendData(${1:NSData* other})"
    },
    {
      "trigger": "appendFormat:",
      "contents": "appendFormat(${1:NSString* format})"
    },
    {
      "trigger": "appendPath:",
      "contents": "appendPath(${1:UIBezierPath* bezierPath})"
    },
    {
      "trigger": "appendPixelBuffer:withPresentationTime:",
      "contents": "appendPixelBuffer(${1:CVPixelBufferRef pixelBuffer}, withPresentationTime:${2:CMTime presentationTime})"
    },
    {
      "trigger": "appendSampleBuffer:",
      "contents": "appendSampleBuffer(${1:CMSampleBufferRef sampleBuffer})"
    },
    {
      "trigger": "appendString:",
      "contents": "appendString(${1:NSString* aString})"
    },
    {
      "trigger": "application:didChangeStatusBarFrame:",
      "contents": "application(${1:UIApplication* application}, didChangeStatusBarFrame:${2:CGRect oldStatusBarFrame})"
    },
    {
      "trigger": "application:didChangeStatusBarOrientation:",
      "contents": "application(${1:UIApplication* application}, didChangeStatusBarOrientation:${2:UIInterfaceOrientation oldStatusBarOrientation})"
    },
    {
      "trigger": "application:didFailToRegisterForRemoteNotificationsWithError:",
      "contents": "application(${1:UIApplication* application}, didFailToRegisterForRemoteNotificationsWithError:${2:NSError* error})"
    },
    {
      "trigger": "application:didFinishLaunchingWithOptions:",
      "contents": "application(${1:UIApplication* application}, didFinishLaunchingWithOptions:${2:NSDictionary* launchOptions})"
    },
    {
      "trigger": "application:didReceiveLocalNotification:",
      "contents": "application(${1:UIApplication* application}, didReceiveLocalNotification:${2:UILocalNotification* notification})"
    },
    {
      "trigger": "application:didReceiveRemoteNotification:",
      "contents": "application(${1:UIApplication* application}, didReceiveRemoteNotification:${2:NSDictionary* userInfo})"
    },
    {
      "trigger": "application:didRegisterForRemoteNotificationsWithDeviceToken:",
      "contents": "application(${1:UIApplication* application}, didRegisterForRemoteNotificationsWithDeviceToken:${2:NSData* deviceToken})"
    },
    {
      "trigger": "application:handleOpenURL:",
      "contents": "application(${1:UIApplication* application}, handleOpenURL:${2:NSURL* url})"
    },
    {
      "trigger": "application:openURL:sourceApplication:annotation:",
      "contents": "application(${1:UIApplication* application}, openURL:${2:NSURL* url}, sourceApplication:${3:NSString* sourceApplication}, annotation:${4:id annotation})"
    },
    {
      "trigger": "application:willChangeStatusBarFrame:",
      "contents": "application(${1:UIApplication* application}, willChangeStatusBarFrame:${2:CGRect newStatusBarFrame})"
    },
    {
      "trigger": "application:willChangeStatusBarOrientation:duration:",
      "contents": "application(${1:UIApplication* application}, willChangeStatusBarOrientation:${2:UIInterfaceOrientation newStatusBarOrientation}, duration:${3:NSTimeInterval duration})"
    },
    {
      "trigger": "applicationDidBecomeActive:",
      "contents": "applicationDidBecomeActive(${1:UIApplication* application})"
    },
    {
      "trigger": "applicationDidEnterBackground:",
      "contents": "applicationDidEnterBackground(${1:UIApplication* application})"
    },
    {
      "trigger": "applicationDidFinishLaunching:",
      "contents": "applicationDidFinishLaunching(${1:UIApplication* application})"
    },
    {
      "trigger": "applicationDidReceiveMemoryWarning:",
      "contents": "applicationDidReceiveMemoryWarning(${1:UIApplication* application})"
    },
    {
      "trigger": "applicationProtectedDataDidBecomeAvailable:",
      "contents": "applicationProtectedDataDidBecomeAvailable(${1:UIApplication* application})"
    },
    {
      "trigger": "applicationProtectedDataWillBecomeUnavailable:",
      "contents": "applicationProtectedDataWillBecomeUnavailable(${1:UIApplication* application})"
    },
    {
      "trigger": "applicationSignificantTimeChange:",
      "contents": "applicationSignificantTimeChange(${1:UIApplication* application})"
    },
    {
      "trigger": "applicationWillEnterForeground:",
      "contents": "applicationWillEnterForeground(${1:UIApplication* application})"
    },
    {
      "trigger": "applicationWillResignActive:",
      "contents": "applicationWillResignActive(${1:UIApplication* application})"
    },
    {
      "trigger": "applicationWillTerminate:",
      "contents": "applicationWillTerminate(${1:UIApplication* application})"
    },
    {
      "trigger": "applyFillPropertiesToContext:atZoomScale:",
      "contents": "applyFillPropertiesToContext(${1:CGContextRef context}, atZoomScale:${2:MKZoomScale zoomScale})"
    },
    {
      "trigger": "applyStrokePropertiesToContext:atZoomScale:",
      "contents": "applyStrokePropertiesToContext(${1:CGContextRef context}, atZoomScale:${2:MKZoomScale zoomScale})"
    },
    {
      "trigger": "applyTransform:",
      "contents": "applyTransform(${1:CGAffineTransform transform})"
    },
    {
      "trigger": "archiver:didEncodeObject:",
      "contents": "archiver(${1:NSKeyedArchiver* archiver}, didEncodeObject:${2:id object})"
    },
    {
      "trigger": "archiver:willEncodeObject:",
      "contents": "archiver(${1:NSKeyedArchiver* archiver}, willEncodeObject:${2:id object})"
    },
    {
      "trigger": "archiver:willReplaceObject:withObject:",
      "contents": "archiver(${1:NSKeyedArchiver* archiver}, willReplaceObject:${2:id object}, withObject:${3:id newObject})"
    },
    {
      "trigger": "archiverDidFinish:",
      "contents": "archiverDidFinish(${1:NSKeyedArchiver* archiver})"
    },
    {
      "trigger": "archiverWillFinish:",
      "contents": "archiverWillFinish(${1:NSKeyedArchiver* archiver})"
    },
    {
      "trigger": "arrayByAddingObject:",
      "contents": "arrayByAddingObject(${1:id anObject})"
    },
    {
      "trigger": "arrayByAddingObjectsFromArray:",
      "contents": "arrayByAddingObjectsFromArray(${1:NSArray* otherArray})"
    },
    {
      "trigger": "arrayForKey:",
      "contents": "arrayForKey(${1:NSString* aKey})"
    },
    {
      "trigger": "arrayForKey:",
      "contents": "arrayForKey(${1:NSString* defaultName})"
    },
    {
      "trigger": "assetForURL:resultBlock:failureBlock:",
      "contents": "assetForURL(${1:NSURL* assetURL}, resultBlock:${2:ALAssetsLibraryAssetForURLResultBlock resultBlock}, failureBlock:${3:ALAssetsLibraryAccessFailureBlock failureBlock})"
    },
    {
      "trigger": "assignObject:toPersistentStore:",
      "contents": "assignObject(${1:id object}, toPersistentStore:${2:NSPersistentStore* store})"
    },
    {
      "trigger": "associateSourceInstance:withDestinationInstance:forEntityMapping:",
      "contents": "associateSourceInstance(${1:NSManagedObject* sourceInstance}, withDestinationInstance:${2:NSManagedObject* destinationInstance}, forEntityMapping:${3:NSEntityMapping* entityMapping})"
    },
    {
      "trigger": "associatedMediaSelectionOptionInMediaSelectionGroup:",
      "contents": "associatedMediaSelectionOptionInMediaSelectionGroup(${1:AVMediaSelectionGroup* mediaSelectionGroup})"
    },
    {
      "trigger": "attemptRecoveryFromError:optionIndex:",
      "contents": "attemptRecoveryFromError(${1:NSError* error}, optionIndex:${2:NSUInteger recoveryOptionIndex})"
    },
    {
      "trigger": "attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:",
      "contents": "attemptRecoveryFromError(${1:NSError* error}, optionIndex:${2:NSUInteger recoveryOptionIndex}, delegate:${3:id delegate}, didRecoverSelector:${4:SEL didRecoverSelector}, contextInfo:${5:void* contextInfo})"
    },
    {
      "trigger": "attribute:atIndex:effectiveRange:",
      "contents": "attribute(${1:NSString* attrName}, atIndex:${2:NSUInteger location}, effectiveRange:${3:NSRangePointer range})"
    },
    {
      "trigger": "attribute:atIndex:longestEffectiveRange:inRange:",
      "contents": "attribute(${1:NSString* attrName}, atIndex:${2:NSUInteger location}, longestEffectiveRange:${3:NSRangePointer range}, inRange:${4:NSRange rangeLimit})"
    },
    {
      "trigger": "attributedStringForObjectValue:withDefaultAttributes:",
      "contents": "attributedStringForObjectValue(${1:id obj}, withDefaultAttributes:${2:NSDictionary* attrs})"
    },
    {
      "trigger": "attributedSubstringFromRange:",
      "contents": "attributedSubstringFromRange(${1:NSRange range})"
    },
    {
      "trigger": "attributesAtIndex:effectiveRange:",
      "contents": "attributesAtIndex(${1:NSUInteger location}, effectiveRange:${2:NSRangePointer range})"
    },
    {
      "trigger": "attributesAtIndex:longestEffectiveRange:inRange:",
      "contents": "attributesAtIndex(${1:NSUInteger location}, longestEffectiveRange:${2:NSRangePointer range}, inRange:${3:NSRange rangeLimit})"
    },
    {
      "trigger": "attributesOfFileSystemForPath:error:",
      "contents": "attributesOfFileSystemForPath(${1:NSString* path}, error:${2:NSError** error})"
    },
    {
      "trigger": "attributesOfItemAtPath:error:",
      "contents": "attributesOfItemAtPath(${1:NSString* path}, error:${2:NSError** error})"
    },
    {
      "trigger": "audioPlayerBeginInterruption:",
      "contents": "audioPlayerBeginInterruption(${1:AVAudioPlayer* player})"
    },
    {
      "trigger": "audioPlayerDecodeErrorDidOccur:error:",
      "contents": "audioPlayerDecodeErrorDidOccur(${1:AVAudioPlayer* player}, error:${2:NSError* error})"
    },
    {
      "trigger": "audioPlayerDidFinishPlaying:successfully:",
      "contents": "audioPlayerDidFinishPlaying(${1:AVAudioPlayer* player}, successfully:${2:BOOL flag})"
    },
    {
      "trigger": "audioPlayerEndInterruption:",
      "contents": "audioPlayerEndInterruption(${1:AVAudioPlayer* player})"
    },
    {
      "trigger": "audioPlayerEndInterruption:withFlags:",
      "contents": "audioPlayerEndInterruption(${1:AVAudioPlayer* player}, withFlags:${2:NSUInteger flags})"
    },
    {
      "trigger": "audioRecorderBeginInterruption:",
      "contents": "audioRecorderBeginInterruption(${1:AVAudioRecorder* recorder})"
    },
    {
      "trigger": "audioRecorderDidFinishRecording:successfully:",
      "contents": "audioRecorderDidFinishRecording(${1:AVAudioRecorder* recorder}, successfully:${2:BOOL flag})"
    },
    {
      "trigger": "audioRecorderEncodeErrorDidOccur:error:",
      "contents": "audioRecorderEncodeErrorDidOccur(${1:AVAudioRecorder* recorder}, error:${2:NSError* error})"
    },
    {
      "trigger": "audioRecorderEndInterruption:",
      "contents": "audioRecorderEndInterruption(${1:AVAudioRecorder* recorder})"
    },
    {
      "trigger": "audioRecorderEndInterruption:withFlags:",
      "contents": "audioRecorderEndInterruption(${1:AVAudioRecorder* recorder}, withFlags:${2:NSUInteger flags})"
    },
    {
      "trigger": "authenticateWithCompletionHandler:",
      "contents": "authenticateWithCompletionHandler(${1:void (^)(NSError *) completionHandler})"
    },
    {
      "trigger": "autoAdjustmentFiltersWithOptions:",
      "contents": "autoAdjustmentFiltersWithOptions(${1:NSDictionary* dict})"
    },
    {
      "trigger": "autosaveWithCompletionHandler:",
      "contents": "autosaveWithCompletionHandler(${1:void (^)(BOOL) completionHandler})"
    },
    {
      "trigger": "averagePowerForChannel:",
      "contents": "averagePowerForChannel(${1:NSUInteger channelNumber})"
    },
    {
      "trigger": "awakeAfterUsingCoder:",
      "contents": "awakeAfterUsingCoder(${1:NSCoder* aDecoder})"
    },
    {
      "trigger": "awakeFromSnapshotEvents:",
      "contents": "awakeFromSnapshotEvents(${1:NSSnapshotEventType flags})"
    },
    {
      "trigger": "backButtonBackgroundImageForState:barMetrics:",
      "contents": "backButtonBackgroundImageForState(${1:UIControlState state}, barMetrics:${2:UIBarMetrics barMetrics})"
    },
    {
      "trigger": "backButtonBackgroundVerticalPositionAdjustmentForBarMetrics:",
      "contents": "backButtonBackgroundVerticalPositionAdjustmentForBarMetrics(${1:UIBarMetrics barMetrics})"
    },
    {
      "trigger": "backButtonTitlePositionAdjustmentForBarMetrics:",
      "contents": "backButtonTitlePositionAdjustmentForBarMetrics(${1:UIBarMetrics barMetrics})"
    },
    {
      "trigger": "backgroundImageForBarMetrics:",
      "contents": "backgroundImageForBarMetrics(${1:UIBarMetrics barMetrics})"
    },
    {
      "trigger": "backgroundImageForState:",
      "contents": "backgroundImageForState(${1:UIControlState state})"
    },
    {
      "trigger": "backgroundImageForState:barMetrics:",
      "contents": "backgroundImageForState(${1:UIControlState state}, barMetrics:${2:UIBarMetrics barMetrics})"
    },
    {
      "trigger": "backgroundImageForToolbarPosition:barMetrics:",
      "contents": "backgroundImageForToolbarPosition(${1:UIToolbarPosition topOrBottom}, barMetrics:${2:UIBarMetrics barMetrics})"
    },
    {
      "trigger": "backgroundRectForBounds:",
      "contents": "backgroundRectForBounds(${1:CGRect bounds})"
    },
    {
      "trigger": "backgroundVerticalPositionAdjustmentForBarMetrics:",
      "contents": "backgroundVerticalPositionAdjustmentForBarMetrics(${1:UIBarMetrics barMetrics})"
    },
    {
      "trigger": "bannerView:didFailToReceiveAdWithError:",
      "contents": "bannerView(${1:ADBannerView* banner}, didFailToReceiveAdWithError:${2:NSError* error})"
    },
    {
      "trigger": "bannerViewActionDidFinish:",
      "contents": "bannerViewActionDidFinish(${1:ADBannerView* banner})"
    },
    {
      "trigger": "bannerViewActionShouldBegin:willLeaveApplication:",
      "contents": "bannerViewActionShouldBegin(${1:ADBannerView* banner}, willLeaveApplication:${2:BOOL willLeave})"
    },
    {
      "trigger": "bannerViewDidLoadAd:",
      "contents": "bannerViewDidLoadAd(${1:ADBannerView* banner})"
    },
    {
      "trigger": "bannerViewWillLoadAd:",
      "contents": "bannerViewWillLoadAd(${1:ADBannerView* banner})"
    },
    {
      "trigger": "baseWritingDirectionForPosition:inDirection:",
      "contents": "baseWritingDirectionForPosition(${1:UITextPosition* position}, inDirection:${2:UITextStorageDirection direction})"
    },
    {
      "trigger": "beginBackgroundTaskWithExpirationHandler:",
      "contents": "beginBackgroundTaskWithExpirationHandler(${1:void (^)(void) handler})"
    },
    {
      "trigger": "beginCustomizingItems:",
      "contents": "beginCustomizingItems(${1:NSArray* items})"
    },
    {
      "trigger": "beginEntityMapping:manager:error:",
      "contents": "beginEntityMapping(${1:NSEntityMapping* mapping}, manager:${2:NSMigrationManager* manager}, error:${3:NSError** error})"
    },
    {
      "trigger": "beginTrackingWithTouch:withEvent:",
      "contents": "beginTrackingWithTouch(${1:UITouch* touch}, withEvent:${2:UIEvent* event})"
    },
    {
      "trigger": "bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error:",
      "contents": "bookmarkDataWithOptions(${1:NSURLBookmarkCreationOptions options}, includingResourceValuesForKeys:${2:NSArray* keys}, relativeToURL:${3:NSURL* relativeURL}, error:${4:NSError** error})"
    },
    {
      "trigger": "boolForKey:",
      "contents": "boolForKey(${1:NSString* aKey})"
    },
    {
      "trigger": "boolForKey:",
      "contents": "boolForKey(${1:NSString* defaultName})"
    },
    {
      "trigger": "borderRectForBounds:",
      "contents": "borderRectForBounds(${1:CGRect bounds})"
    },
    {
      "trigger": "bringSubviewToFront:",
      "contents": "bringSubviewToFront(${1:UIView* view})"
    },
    {
      "trigger": "buttonTitleAtIndex:",
      "contents": "buttonTitleAtIndex(${1:NSInteger buttonIndex})"
    },
    {
      "trigger": "cStringUsingEncoding:",
      "contents": "cStringUsingEncoding(${1:NSStringEncoding encoding})"
    },
    {
      "trigger": "cache:willEvictObject:",
      "contents": "cache(${1:NSCache* cache}, willEvictObject:${2:id obj})"
    },
    {
      "trigger": "cacheNodeForObjectID:",
      "contents": "cacheNodeForObjectID(${1:NSManagedObjectID* objectID})"
    },
    {
      "trigger": "cachedResponseForRequest:",
      "contents": "cachedResponseForRequest(${1:NSURLRequest* request})"
    },
    {
      "trigger": "calendarChooserDidCancel:",
      "contents": "calendarChooserDidCancel(${1:EKCalendarChooser* calendarChooser})"
    },
    {
      "trigger": "calendarChooserDidFinish:",
      "contents": "calendarChooserDidFinish(${1:EKCalendarChooser* calendarChooser})"
    },
    {
      "trigger": "calendarChooserSelectionDidChange:",
      "contents": "calendarChooserSelectionDidChange(${1:EKCalendarChooser* calendarChooser})"
    },
    {
      "trigger": "calendarWithIdentifier:",
      "contents": "calendarWithIdentifier(${1:NSString* identifier})"
    },
    {
      "trigger": "canAddInput:",
      "contents": "canAddInput(${1:AVAssetWriterInput* input})"
    },
    {
      "trigger": "canAddInput:",
      "contents": "canAddInput(${1:AVCaptureInput* input})"
    },
    {
      "trigger": "canAddOutput:",
      "contents": "canAddOutput(${1:AVAssetReaderOutput* output})"
    },
    {
      "trigger": "canAddOutput:",
      "contents": "canAddOutput(${1:AVCaptureOutput* output})"
    },
    {
      "trigger": "canApplyOutputSettings:forMediaType:",
      "contents": "canApplyOutputSettings(${1:NSDictionary* outputSettings}, forMediaType:${2:NSString* mediaType})"
    },
    {
      "trigger": "canBeConvertedToEncoding:",
      "contents": "canBeConvertedToEncoding(${1:NSStringEncoding encoding})"
    },
    {
      "trigger": "canBePreventedByGestureRecognizer:",
      "contents": "canBePreventedByGestureRecognizer(${1:UIGestureRecognizer* preventingGestureRecognizer})"
    },
    {
      "trigger": "canDrawMapRect:zoomScale:",
      "contents": "canDrawMapRect(${1:MKMapRect mapRect}, zoomScale:${2:MKZoomScale zoomScale})"
    },
    {
      "trigger": "canInsertItem:afterItem:",
      "contents": "canInsertItem(${1:AVPlayerItem* item}, afterItem:${2:AVPlayerItem* afterItem})"
    },
    {
      "trigger": "canOpenURL:",
      "contents": "canOpenURL(${1:NSURL* url})"
    },
    {
      "trigger": "canPerformAction:withSender:",
      "contents": "canPerformAction(${1:SEL action}, withSender:${2:id sender})"
    },
    {
      "trigger": "canPreventGestureRecognizer:",
      "contents": "canPreventGestureRecognizer(${1:UIGestureRecognizer* preventedGestureRecognizer})"
    },
    {
      "trigger": "canSetSessionPreset:",
      "contents": "canSetSessionPreset(${1:NSString* preset})"
    },
    {
      "trigger": "cancelAuthenticationChallenge:",
      "contents": "cancelAuthenticationChallenge(${1:NSURLAuthenticationChallenge* challenge})"
    },
    {
      "trigger": "cancelConnectToPeer:",
      "contents": "cancelConnectToPeer(${1:NSString* peerID})"
    },
    {
      "trigger": "cancelLocalNotification:",
      "contents": "cancelLocalNotification(${1:UILocalNotification* notification})"
    },
    {
      "trigger": "cancelMigrationWithError:",
      "contents": "cancelMigrationWithError(${1:NSError* error})"
    },
    {
      "trigger": "cancelPerformSelector:target:argument:",
      "contents": "cancelPerformSelector(${1:SEL aSelector}, target:${2:id target}, argument:${3:id arg})"
    },
    {
      "trigger": "cancelPerformSelectorsWithTarget:",
      "contents": "cancelPerformSelectorsWithTarget(${1:id target})"
    },
    {
      "trigger": "cancelPeripheralConnection:",
      "contents": "cancelPeripheralConnection(${1:CBPeripheral* peripheral})"
    },
    {
      "trigger": "cancelTrackingWithEvent:",
      "contents": "cancelTrackingWithEvent(${1:UIEvent* event})"
    },
    {
      "trigger": "captureOutput:didFinishRecordingToOutputFileAtURL:fromConnections:error:",
      "contents": "captureOutput(${1:AVCaptureFileOutput* captureOutput}, didFinishRecordingToOutputFileAtURL:${2:NSURL* outputFileURL}, fromConnections:${3:NSArray* connections}, error:${4:NSError* error})"
    },
    {
      "trigger": "captureOutput:didOutputSampleBuffer:fromConnection:",
      "contents": "captureOutput(${1:AVCaptureOutput* captureOutput}, didOutputSampleBuffer:${2:CMSampleBufferRef sampleBuffer}, fromConnection:${3:AVCaptureConnection* connection})"
    },
    {
      "trigger": "captureOutput:didStartRecordingToOutputFileAtURL:fromConnections:",
      "contents": "captureOutput(${1:AVCaptureFileOutput* captureOutput}, didStartRecordingToOutputFileAtURL:${2:NSURL* fileURL}, fromConnections:${3:NSArray* connections})"
    },
    {
      "trigger": "captureStillImageAsynchronouslyFromConnection:completionHandler:",
      "contents": "captureStillImageAsynchronouslyFromConnection(${1:AVCaptureConnection* connection}, completionHandler:${2:void (^)(CMSampleBufferRef, NSError *) handler})"
    },
    {
      "trigger": "caretRectForPosition:",
      "contents": "caretRectForPosition(${1:UITextPosition* position})"
    },
    {
      "trigger": "caseInsensitiveCompare:",
      "contents": "caseInsensitiveCompare(${1:NSString* string})"
    },
    {
      "trigger": "cellForRowAtIndexPath:",
      "contents": "cellForRowAtIndexPath(${1:NSIndexPath* indexPath})"
    },
    {
      "trigger": "centralManager:didConnectPeripheral:",
      "contents": "centralManager(${1:CBCentralManager* central}, didConnectPeripheral:${2:CBPeripheral* peripheral})"
    },
    {
      "trigger": "centralManager:didDisconnectPeripheral:error:",
      "contents": "centralManager(${1:CBCentralManager* central}, didDisconnectPeripheral:${2:CBPeripheral* peripheral}, error:${3:NSError* error})"
    },
    {
      "trigger": "centralManager:didDiscoverPeripheral:advertisementData:RSSI:",
      "contents": "centralManager(${1:CBCentralManager* central}, didDiscoverPeripheral:${2:CBPeripheral* peripheral}, advertisementData:${3:NSDictionary* advertisementData}, RSSI:${4:NSNumber* RSSI})"
    },
    {
      "trigger": "centralManager:didFailToConnectPeripheral:error:",
      "contents": "centralManager(${1:CBCentralManager* central}, didFailToConnectPeripheral:${2:CBPeripheral* peripheral}, error:${3:NSError* error})"
    },
    {
      "trigger": "centralManager:didRetrieveConnectedPeripherals:",
      "contents": "centralManager(${1:CBCentralManager* central}, didRetrieveConnectedPeripherals:${2:NSArray* peripherals})"
    },
    {
      "trigger": "centralManager:didRetrievePeripherals:",
      "contents": "centralManager(${1:CBCentralManager* central}, didRetrievePeripherals:${2:NSArray* peripherals})"
    },
    {
      "trigger": "centralManagerDidUpdateState:",
      "contents": "centralManagerDidUpdateState(${1:CBCentralManager* central})"
    },
    {
      "trigger": "changeCountTokenForSaveOperation:",
      "contents": "changeCountTokenForSaveOperation(${1:UIDocumentSaveOperation saveOperation})"
    },
    {
      "trigger": "changeCurrentDirectoryPath:",
      "contents": "changeCurrentDirectoryPath(${1:NSString* path})"
    },
    {
      "trigger": "changeFileAttributes:atPath:",
      "contents": "changeFileAttributes(${1:NSDictionary* attributes}, atPath:${2:NSString* path})"
    },
    {
      "trigger": "chapterMetadataGroupsWithTitleLocale:containingItemsWithCommonKeys:",
      "contents": "chapterMetadataGroupsWithTitleLocale(${1:NSLocale* locale}, containingItemsWithCommonKeys:${2:NSArray* commonKeys})"
    },
    {
      "trigger": "characterAtIndex:",
      "contents": "characterAtIndex(${1:NSUInteger index})"
    },
    {
      "trigger": "characterIsMember:",
      "contents": "characterIsMember(${1:unichar aCharacter})"
    },
    {
      "trigger": "characterOffsetOfPosition:withinRange:",
      "contents": "characterOffsetOfPosition(${1:UITextPosition* position}, withinRange:${2:UITextRange* range})"
    },
    {
      "trigger": "characterRangeAtPoint:",
      "contents": "characterRangeAtPoint(${1:CGPoint point})"
    },
    {
      "trigger": "characterRangeByExtendingPosition:inDirection:",
      "contents": "characterRangeByExtendingPosition(${1:UITextPosition* position}, inDirection:${2:UITextLayoutDirection direction})"
    },
    {
      "trigger": "checkResourceIsReachableAndReturnError:",
      "contents": "checkResourceIsReachableAndReturnError(${1:NSError** error})"
    },
    {
      "trigger": "classForClassName:",
      "contents": "classForClassName(${1:NSString* codedName})"
    },
    {
      "trigger": "classNameForClass:",
      "contents": "classNameForClass(${1:Class cls})"
    },
    {
      "trigger": "classNamed:",
      "contents": "classNamed(${1:NSString* className})"
    },
    {
      "trigger": "clearButtonRectForBounds:",
      "contents": "clearButtonRectForBounds(${1:CGRect bounds})"
    },
    {
      "trigger": "closeWithCompletionHandler:",
      "contents": "closeWithCompletionHandler(${1:void (^)(BOOL) completionHandler})"
    },
    {
      "trigger": "closestPositionToPoint:",
      "contents": "closestPositionToPoint(${1:CGPoint point})"
    },
    {
      "trigger": "closestPositionToPoint:withinRange:",
      "contents": "closestPositionToPoint(${1:CGPoint point}, withinRange:${2:UITextRange* range})"
    },
    {
      "trigger": "cmapFontTableTag (1668112752)",
      "contents": "CmapFontTableTag"
    },
    {
      "trigger": "colorWithAlphaComponent:",
      "contents": "colorWithAlphaComponent(${1:CGFloat alpha})"
    },
    {
      "trigger": "commit:",
      "contents": "commit(${1:NSError** error})"
    },
    {
      "trigger": "committedValuesForKeys:",
      "contents": "committedValuesForKeys(${1:NSArray* keys})"
    },
    {
      "trigger": "commonPrefixWithString:options:",
      "contents": "commonPrefixWithString(${1:NSString* aString}, options:${2:NSStringCompareOptions mask})"
    },
    {
      "trigger": "compare:",
      "contents": "compare(${1:NSDate* other})"
    },
    {
      "trigger": "compare:",
      "contents": "compare(${1:NSIndexPath* otherObject})"
    },
    {
      "trigger": "compare:",
      "contents": "compare(${1:NSNumber* decimalNumber})"
    },
    {
      "trigger": "compare:",
      "contents": "compare(${1:NSNumber* otherNumber})"
    },
    {
      "trigger": "compare:",
      "contents": "compare(${1:NSString* string})"
    },
    {
      "trigger": "compare:options:",
      "contents": "compare(${1:NSString* string}, options:${2:NSStringCompareOptions mask})"
    },
    {
      "trigger": "compare:options:range:",
      "contents": "compare(${1:NSString* string}, options:${2:NSStringCompareOptions mask}, range:${3:NSRange compareRange})"
    },
    {
      "trigger": "compare:options:range:locale:",
      "contents": "compare(${1:NSString* string}, options:${2:NSStringCompareOptions mask}, range:${3:NSRange compareRange}, locale:${4:id locale})"
    },
    {
      "trigger": "compareObject:toObject:",
      "contents": "compareObject(${1:id object1}, toObject:${2:id object2})"
    },
    {
      "trigger": "comparePosition:toPosition:",
      "contents": "comparePosition(${1:UITextPosition* position}, toPosition:${2:UITextPosition* other})"
    },
    {
      "trigger": "compareStartDateWithEvent:",
      "contents": "compareStartDateWithEvent(${1:EKEvent* other})"
    },
    {
      "trigger": "compatibleTrackForCompositionTrack:",
      "contents": "compatibleTrackForCompositionTrack(${1:AVCompositionTrack* compositionTrack})"
    },
    {
      "trigger": "completePathIntoString:caseSensitive:matchesIntoArray:filterTypes:",
      "contents": "completePathIntoString(${1:NSString** outputName}, caseSensitive:${2:BOOL flag}, matchesIntoArray:${3:NSArray** outputArray}, filterTypes:${4:NSArray* filterTypes})"
    },
    {
      "trigger": "completionsForPartialWordRange:inString:language:",
      "contents": "completionsForPartialWordRange(${1:NSRange range}, inString:${2:NSString* string}, language:${3:NSString* language})"
    },
    {
      "trigger": "components:fromDate:",
      "contents": "components(${1:NSUInteger unitFlags}, fromDate:${2:NSDate* date})"
    },
    {
      "trigger": "components:fromDate:toDate:options:",
      "contents": "components(${1:NSUInteger unitFlags}, fromDate:${2:NSDate* startingDate}, toDate:${3:NSDate* resultDate}, options:${4:NSUInteger opts})"
    },
    {
      "trigger": "componentsJoinedByString:",
      "contents": "componentsJoinedByString(${1:NSString* separator})"
    },
    {
      "trigger": "componentsSeparatedByCharactersInSet:",
      "contents": "componentsSeparatedByCharactersInSet(${1:NSCharacterSet* separator})"
    },
    {
      "trigger": "componentsSeparatedByString:",
      "contents": "componentsSeparatedByString(${1:NSString* separator})"
    },
    {
      "trigger": "componentsToDisplayForPath:",
      "contents": "componentsToDisplayForPath(${1:NSString* path})"
    },
    {
      "trigger": "configurePersistentStoreCoordinatorForURL:ofType:modelConfiguration:storeOptions:error:",
      "contents": "configurePersistentStoreCoordinatorForURL(${1:NSURL* storeURL}, ofType:${2:NSString* fileType}, modelConfiguration:${3:NSString* configuration}, storeOptions:${4:NSDictionary* storeOptions}, error:${5:NSError** error})"
    },
    {
      "trigger": "conformsToProtocol:",
      "contents": "conformsToProtocol(${1:Protocol* aProtocol})"
    },
    {
      "trigger": "connectPeripheral:options:",
      "contents": "connectPeripheral(${1:CBPeripheral* peripheral}, options:${2:NSDictionary* options})"
    },
    {
      "trigger": "connectToPeer:withTimeout:",
      "contents": "connectToPeer(${1:NSString* peerID}, withTimeout:${2:NSTimeInterval timeout})"
    },
    {
      "trigger": "connection:canAuthenticateAgainstProtectionSpace:",
      "contents": "connection(${1:NSURLConnection* connection}, canAuthenticateAgainstProtectionSpace:${2:NSURLProtectionSpace* protectionSpace})"
    },
    {
      "trigger": "connection:didCancelAuthenticationChallenge:",
      "contents": "connection(${1:NSURLConnection* connection}, didCancelAuthenticationChallenge:${2:NSURLAuthenticationChallenge* challenge})"
    },
    {
      "trigger": "connection:didFailWithError:",
      "contents": "connection(${1:NSURLConnection* connection}, didFailWithError:${2:NSError* error})"
    },
    {
      "trigger": "connection:didReceiveAuthenticationChallenge:",
      "contents": "connection(${1:NSURLConnection* connection}, didReceiveAuthenticationChallenge:${2:NSURLAuthenticationChallenge* challenge})"
    },
    {
      "trigger": "connection:didReceiveData:",
      "contents": "connection(${1:NSURLConnection* connection}, didReceiveData:${2:NSData* data})"
    },
    {
      "trigger": "connection:didReceiveResponse:",
      "contents": "connection(${1:NSURLConnection* connection}, didReceiveResponse:${2:NSURLResponse* response})"
    },
    {
      "trigger": "connection:didSendBodyData:totalBytesWritten:totalBytesExpectedToWrite:",
      "contents": "connection(${1:NSURLConnection* connection}, didSendBodyData:${2:NSInteger bytesWritten}, totalBytesWritten:${3:NSInteger totalBytesWritten}, totalBytesExpectedToWrite:${4:NSInteger totalBytesExpectedToWrite})"
    },
    {
      "trigger": "connection:didWriteData:totalBytesWritten:expectedTotalBytes:",
      "contents": "connection(${1:NSURLConnection* connection}, didWriteData:${2:long long bytesWritten}, totalBytesWritten:${3:long long totalBytesWritten}, expectedTotalBytes:${4:long long expectedTotalBytes})"
    },
    {
      "trigger": "connection:needNewBodyStream:",
      "contents": "connection(${1:NSURLConnection* connection}, needNewBodyStream:${2:NSURLRequest* request})"
    },
    {
      "trigger": "connection:willCacheResponse:",
      "contents": "connection(${1:NSURLConnection* connection}, willCacheResponse:${2:NSCachedURLResponse* cachedResponse})"
    },
    {
      "trigger": "connection:willSendRequest:redirectResponse:",
      "contents": "connection(${1:NSURLConnection* connection}, willSendRequest:${2:NSURLRequest* request}, redirectResponse:${3:NSURLResponse* response})"
    },
    {
      "trigger": "connection:willSendRequestForAuthenticationChallenge:",
      "contents": "connection(${1:NSURLConnection* connection}, willSendRequestForAuthenticationChallenge:${2:NSURLAuthenticationChallenge* challenge})"
    },
    {
      "trigger": "connectionDidFinishDownloading:destinationURL:",
      "contents": "connectionDidFinishDownloading(${1:NSURLConnection* connection}, destinationURL:${2:NSURL* destinationURL})"
    },
    {
      "trigger": "connectionDidFinishLoading:",
      "contents": "connectionDidFinishLoading(${1:NSURLConnection* connection})"
    },
    {
      "trigger": "connectionDidResumeDownloading:totalBytesWritten:expectedTotalBytes:",
      "contents": "connectionDidResumeDownloading(${1:NSURLConnection* connection}, totalBytesWritten:${2:long long totalBytesWritten}, expectedTotalBytes:${3:long long expectedTotalBytes})"
    },
    {
      "trigger": "connectionShouldUseCredentialStorage:",
      "contents": "connectionShouldUseCredentialStorage(${1:NSURLConnection* connection})"
    },
    {
      "trigger": "connectionWithMediaType:",
      "contents": "connectionWithMediaType(${1:NSString* mediaType})"
    },
    {
      "trigger": "containsCoordinate:",
      "contents": "containsCoordinate(${1:CLLocationCoordinate2D coordinate})"
    },
    {
      "trigger": "containsIndex:",
      "contents": "containsIndex(${1:NSUInteger value})"
    },
    {
      "trigger": "containsIndexes:",
      "contents": "containsIndexes(${1:NSIndexSet* indexSet})"
    },
    {
      "trigger": "containsIndexesInRange:",
      "contents": "containsIndexesInRange(${1:NSRange range})"
    },
    {
      "trigger": "containsObject:",
      "contents": "containsObject(${1:id anObject})"
    },
    {
      "trigger": "containsObject:",
      "contents": "containsObject(${1:id object})"
    },
    {
      "trigger": "containsPasteboardTypes:",
      "contents": "containsPasteboardTypes(${1:NSArray* pasteboardTypes})"
    },
    {
      "trigger": "containsPasteboardTypes:inItemSet:",
      "contents": "containsPasteboardTypes(${1:NSArray* pasteboardTypes}, inItemSet:${2:NSIndexSet* itemSet})"
    },
    {
      "trigger": "containsPoint:",
      "contents": "containsPoint(${1:CGPoint point})"
    },
    {
      "trigger": "containsPoint:",
      "contents": "containsPoint(${1:CGPoint p})"
    },
    {
      "trigger": "containsValueForKey:",
      "contents": "containsValueForKey(${1:NSString* key})"
    },
    {
      "trigger": "contentOffsetForSegmentAtIndex:",
      "contents": "contentOffsetForSegmentAtIndex(${1:NSUInteger segment})"
    },
    {
      "trigger": "contentPositionAdjustmentForSegmentType:barMetrics:",
      "contents": "contentPositionAdjustmentForSegmentType(${1:UISegmentedControlSegment leftCenterRightOrAlone}, barMetrics:${2:UIBarMetrics barMetrics})"
    },
    {
      "trigger": "contentRectForBounds:",
      "contents": "contentRectForBounds(${1:CGRect bounds})"
    },
    {
      "trigger": "contentsAtPath:",
      "contents": "contentsAtPath(${1:NSString* path})"
    },
    {
      "trigger": "contentsEqualAtPath:andPath:",
      "contents": "contentsEqualAtPath(${1:NSString* path1}, andPath:${2:NSString* path2})"
    },
    {
      "trigger": "contentsForType:error:",
      "contents": "contentsForType(${1:NSString* typeName}, error:${2:NSError** outError})"
    },
    {
      "trigger": "contentsOfDirectoryAtPath:error:",
      "contents": "contentsOfDirectoryAtPath(${1:NSString* path}, error:${2:NSError** error})"
    },
    {
      "trigger": "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:",
      "contents": "contentsOfDirectoryAtURL(${1:NSURL* url}, includingPropertiesForKeys:${2:NSArray* keys}, options:${3:NSDirectoryEnumerationOptions mask}, error:${4:NSError** error})"
    },
    {
      "trigger": "continueTrackingWithTouch:withEvent:",
      "contents": "continueTrackingWithTouch(${1:UITouch* touch}, withEvent:${2:UIEvent* event})"
    },
    {
      "trigger": "continueWithoutCredentialForAuthenticationChallenge:",
      "contents": "continueWithoutCredentialForAuthenticationChallenge(${1:NSURLAuthenticationChallenge* challenge})"
    },
    {
      "trigger": "controller:didChangeObject:atIndexPath:forChangeType:newIndexPath:",
      "contents": "controller(${1:NSFetchedResultsController* controller}, didChangeObject:${2:id anObject}, atIndexPath:${3:NSIndexPath* indexPath}, forChangeType:${4:NSFetchedResultsChangeType type}, newIndexPath:${5:NSIndexPath* newIndexPath})"
    },
    {
      "trigger": "controller:didChangeSection:atIndex:forChangeType:",
      "contents": "controller(${1:NSFetchedResultsController* controller}, didChangeSection:${2:id sectionInfo}, atIndex:${3:NSUInteger sectionIndex}, forChangeType:${4:NSFetchedResultsChangeType type})"
    },
    {
      "trigger": "controller:sectionIndexTitleForSectionName:",
      "contents": "controller(${1:NSFetchedResultsController* controller}, sectionIndexTitleForSectionName:${2:NSString* sectionName})"
    },
    {
      "trigger": "controllerDidChangeContent:",
      "contents": "controllerDidChangeContent(${1:NSFetchedResultsController* controller})"
    },
    {
      "trigger": "controllerWillChangeContent:",
      "contents": "controllerWillChangeContent(${1:NSFetchedResultsController* controller})"
    },
    {
      "trigger": "convertCoordinate:toPointToView:",
      "contents": "convertCoordinate(${1:CLLocationCoordinate2D coordinate}, toPointToView:${2:UIView* view})"
    },
    {
      "trigger": "convertPoint:fromLayer:",
      "contents": "convertPoint(${1:CGPoint p}, fromLayer:${2:CALayer* l})"
    },
    {
      "trigger": "convertPoint:fromView:",
      "contents": "convertPoint(${1:CGPoint point}, fromView:${2:UIView* view})"
    },
    {
      "trigger": "convertPoint:fromWindow:",
      "contents": "convertPoint(${1:CGPoint point}, fromWindow:${2:UIWindow* window})"
    },
    {
      "trigger": "convertPoint:toCoordinateFromView:",
      "contents": "convertPoint(${1:CGPoint point}, toCoordinateFromView:${2:UIView* view})"
    },
    {
      "trigger": "convertPoint:toLayer:",
      "contents": "convertPoint(${1:CGPoint p}, toLayer:${2:CALayer* l})"
    },
    {
      "trigger": "convertPoint:toView:",
      "contents": "convertPoint(${1:CGPoint point}, toView:${2:UIView* view})"
    },
    {
      "trigger": "convertPoint:toWindow:",
      "contents": "convertPoint(${1:CGPoint point}, toWindow:${2:UIWindow* window})"
    },
    {
      "trigger": "convertRect:fromLayer:",
      "contents": "convertRect(${1:CGRect r}, fromLayer:${2:CALayer* l})"
    },
    {
      "trigger": "convertRect:fromView:",
      "contents": "convertRect(${1:CGRect rect}, fromView:${2:UIView* view})"
    },
    {
      "trigger": "convertRect:fromWindow:",
      "contents": "convertRect(${1:CGRect rect}, fromWindow:${2:UIWindow* window})"
    },
    {
      "trigger": "convertRect:toLayer:",
      "contents": "convertRect(${1:CGRect r}, toLayer:${2:CALayer* l})"
    },
    {
      "trigger": "convertRect:toRegionFromView:",
      "contents": "convertRect(${1:CGRect rect}, toRegionFromView:${2:UIView* view})"
    },
    {
      "trigger": "convertRect:toView:",
      "contents": "convertRect(${1:CGRect rect}, toView:${2:UIView* view})"
    },
    {
      "trigger": "convertRect:toWindow:",
      "contents": "convertRect(${1:CGRect rect}, toWindow:${2:UIWindow* window})"
    },
    {
      "trigger": "convertRegion:toRectToView:",
      "contents": "convertRegion(${1:MKCoordinateRegion region}, toRectToView:${2:UIView* view})"
    },
    {
      "trigger": "convertTime:fromLayer:",
      "contents": "convertTime(${1:CFTimeInterval t}, fromLayer:${2:CALayer* l})"
    },
    {
      "trigger": "convertTime:toLayer:",
      "contents": "convertTime(${1:CFTimeInterval t}, toLayer:${2:CALayer* l})"
    },
    {
      "trigger": "cookiesForURL:",
      "contents": "cookiesForURL(${1:NSURL* URL})"
    },
    {
      "trigger": "coordinateReadingItemAtURL:options:error:byAccessor:",
      "contents": "coordinateReadingItemAtURL(${1:NSURL* url}, options:${2:NSFileCoordinatorReadingOptions options}, error:${3:NSError** outError}, byAccessor:${4:void (^)(NSURL *) reader})"
    },
    {
      "trigger": "coordinateReadingItemAtURL:options:writingItemAtURL:options:error:byAccessor:",
      "contents": "coordinateReadingItemAtURL(${1:NSURL* readingURL}, options:${2:NSFileCoordinatorReadingOptions readingOptions}, writingItemAtURL:${3:NSURL* writingURL}, options:${4:NSFileCoordinatorWritingOptions writingOptions}, error:${5:NSError** outError}, byAccessor:${6:void (^)(NSURL *, NSURL *) readerWriter})"
    },
    {
      "trigger": "coordinateWritingItemAtURL:options:error:byAccessor:",
      "contents": "coordinateWritingItemAtURL(${1:NSURL* url}, options:${2:NSFileCoordinatorWritingOptions options}, error:${3:NSError** outError}, byAccessor:${4:void (^)(NSURL *) writer})"
    },
    {
      "trigger": "coordinateWritingItemAtURL:options:writingItemAtURL:options:error:byAccessor:",
      "contents": "coordinateWritingItemAtURL(${1:NSURL* url1}, options:${2:NSFileCoordinatorWritingOptions options1}, writingItemAtURL:${3:NSURL* url2}, options:${4:NSFileCoordinatorWritingOptions options2}, error:${5:NSError** outError}, byAccessor:${6:void (^)(NSURL *, NSURL *) writer})"
    },
    {
      "trigger": "copy:",
      "contents": "copy(${1:id sender})"
    },
    {
      "trigger": "copyCGImageAtTime:actualTime:error:",
      "contents": "copyCGImageAtTime(${1:CMTime requestedTime}, actualTime:${2:CMTime* actualTime}, error:${3:NSError** outError})"
    },
    {
      "trigger": "copyItemAtPath:toPath:error:",
      "contents": "copyItemAtPath(${1:NSString* srcPath}, toPath:${2:NSString* dstPath}, error:${3:NSError** error})"
    },
    {
      "trigger": "copyItemAtURL:toURL:error:",
      "contents": "copyItemAtURL(${1:NSURL* srcURL}, toURL:${2:NSURL* dstURL}, error:${3:NSError** error})"
    },
    {
      "trigger": "copyWithZone:",
      "contents": "copyWithZone(${1:NSZone* zone})"
    },
    {
      "trigger": "countByEnumeratingWithState:objects:count:",
      "contents": "countByEnumeratingWithState(${1:NSFastEnumerationState* state}, objects:${2:id* buffer}, count:${3:NSUInteger len})"
    },
    {
      "trigger": "countForFetchRequest:error:",
      "contents": "countForFetchRequest(${1:NSFetchRequest* request}, error:${2:NSError** error})"
    },
    {
      "trigger": "countForObject:",
      "contents": "countForObject(${1:id object})"
    },
    {
      "trigger": "countOfIndexesInRange:",
      "contents": "countOfIndexesInRange(${1:NSRange range})"
    },
    {
      "trigger": "createCGImage:fromRect:",
      "contents": "createCGImage(${1:CIImage* im}, fromRect:${2:CGRect r})"
    },
    {
      "trigger": "createCGImage:fromRect:format:colorSpace:",
      "contents": "createCGImage(${1:CIImage* im}, fromRect:${2:CGRect r}, format:${3:CIFormat f}, colorSpace:${4:CGColorSpaceRef cs})"
    },
    {
      "trigger": "createDestinationInstancesForSourceInstance:entityMapping:manager:error:",
      "contents": "createDestinationInstancesForSourceInstance(${1:NSManagedObject* sInstance}, entityMapping:${2:NSEntityMapping* mapping}, manager:${3:NSMigrationManager* manager}, error:${4:NSError** error})"
    },
    {
      "trigger": "createDirectoryAtPath:attributes:",
      "contents": "createDirectoryAtPath(${1:NSString* path}, attributes:${2:NSDictionary* attributes})"
    },
    {
      "trigger": "createDirectoryAtPath:withIntermediateDirectories:attributes:error:",
      "contents": "createDirectoryAtPath(${1:NSString* path}, withIntermediateDirectories:${2:BOOL createIntermediates}, attributes:${3:NSDictionary* attributes}, error:${4:NSError** error})"
    },
    {
      "trigger": "createDirectoryAtURL:withIntermediateDirectories:attributes:error:",
      "contents": "createDirectoryAtURL(${1:NSURL* url}, withIntermediateDirectories:${2:BOOL createIntermediates}, attributes:${3:NSDictionary* attributes}, error:${4:NSError** error})"
    },
    {
      "trigger": "createFileAtPath:contents:attributes:",
      "contents": "createFileAtPath(${1:NSString* path}, contents:${2:NSData* data}, attributes:${3:NSDictionary* attr})"
    },
    {
      "trigger": "createRelationshipsForDestinationInstance:entityMapping:manager:error:",
      "contents": "createRelationshipsForDestinationInstance(${1:NSManagedObject* dInstance}, entityMapping:${2:NSEntityMapping* mapping}, manager:${3:NSMigrationManager* manager}, error:${4:NSError** error})"
    },
    {
      "trigger": "createSymbolicLinkAtPath:pathContent:",
      "contents": "createSymbolicLinkAtPath(${1:NSString* path}, pathContent:${2:NSString* otherpath})"
    },
    {
      "trigger": "createSymbolicLinkAtPath:withDestinationPath:error:",
      "contents": "createSymbolicLinkAtPath(${1:NSString* path}, withDestinationPath:${2:NSString* destPath}, error:${3:NSError** error})"
    },
    {
      "trigger": "createSymbolicLinkAtURL:withDestinationURL:error:",
      "contents": "createSymbolicLinkAtURL(${1:NSURL* url}, withDestinationURL:${2:NSURL* destURL}, error:${3:NSError** error})"
    },
    {
      "trigger": "credentialsForProtectionSpace:",
      "contents": "credentialsForProtectionSpace(${1:NSURLProtectionSpace* space})"
    },
    {
      "trigger": "cubeMapWithContentsOfFile:options:queue:completionHandler:",
      "contents": "cubeMapWithContentsOfFile(${1:NSString* path}, options:${2:NSDictionary* options}, queue:${3:dispatch_queue_t queue}, completionHandler:${4:GLKTextureLoaderCallback block})"
    },
    {
      "trigger": "cubeMapWithContentsOfFiles:options:queue:completionHandler:",
      "contents": "cubeMapWithContentsOfFiles(${1:NSArray* paths}, options:${2:NSDictionary* options}, queue:${3:dispatch_queue_t queue}, completionHandler:${4:GLKTextureLoaderCallback block})"
    },
    {
      "trigger": "cubeMapWithContentsOfURL:options:queue:completionHandler:",
      "contents": "cubeMapWithContentsOfURL(${1:NSURL* url}, options:${2:NSDictionary* options}, queue:${3:dispatch_queue_t queue}, completionHandler:${4:GLKTextureLoaderCallback block})"
    },
    {
      "trigger": "cut:",
      "contents": "cut(${1:id sender})"
    },
    {
      "trigger": "dataForKey:",
      "contents": "dataForKey(${1:NSString* aKey})"
    },
    {
      "trigger": "dataForKey:",
      "contents": "dataForKey(${1:NSString* defaultName})"
    },
    {
      "trigger": "dataForPasteboardType:",
      "contents": "dataForPasteboardType(${1:NSString* pasteboardType})"
    },
    {
      "trigger": "dataForPasteboardType:inItemSet:",
      "contents": "dataForPasteboardType(${1:NSString* pasteboardType}, inItemSet:${2:NSIndexSet* itemSet})"
    },
    {
      "trigger": "dataUsingEncoding:",
      "contents": "dataUsingEncoding(${1:NSStringEncoding encoding})"
    },
    {
      "trigger": "dataUsingEncoding:allowLossyConversion:",
      "contents": "dataUsingEncoding(${1:NSStringEncoding encoding}, allowLossyConversion:${2:BOOL lossy})"
    },
    {
      "trigger": "dateByAddingComponents:toDate:options:",
      "contents": "dateByAddingComponents(${1:NSDateComponents* comps}, toDate:${2:NSDate* date}, options:${3:NSUInteger opts})"
    },
    {
      "trigger": "dateByAddingTimeInterval:",
      "contents": "dateByAddingTimeInterval(${1:NSTimeInterval ti})"
    },
    {
      "trigger": "dateFromComponents:",
      "contents": "dateFromComponents(${1:NSDateComponents* comps})"
    },
    {
      "trigger": "dateFromString:",
      "contents": "dateFromString(${1:NSString* string})"
    },
    {
      "trigger": "daylightSavingTimeOffsetForDate:",
      "contents": "daylightSavingTimeOffsetForDate(${1:NSDate* aDate})"
    },
    {
      "trigger": "decimalNumberByAdding:",
      "contents": "decimalNumberByAdding(${1:NSDecimalNumber* decimalNumber})"
    },
    {
      "trigger": "decimalNumberByAdding:withBehavior:",
      "contents": "decimalNumberByAdding(${1:NSDecimalNumber* decimalNumber}, withBehavior:${2:id behavior})"
    },
    {
      "trigger": "decimalNumberByDividingBy:",
      "contents": "decimalNumberByDividingBy(${1:NSDecimalNumber* decimalNumber})"
    },
    {
      "trigger": "decimalNumberByDividingBy:withBehavior:",
      "contents": "decimalNumberByDividingBy(${1:NSDecimalNumber* decimalNumber}, withBehavior:${2:id behavior})"
    },
    {
      "trigger": "decimalNumberByMultiplyingBy:",
      "contents": "decimalNumberByMultiplyingBy(${1:NSDecimalNumber* decimalNumber})"
    },
    {
      "trigger": "decimalNumberByMultiplyingBy:withBehavior:",
      "contents": "decimalNumberByMultiplyingBy(${1:NSDecimalNumber* decimalNumber}, withBehavior:${2:id behavior})"
    },
    {
      "trigger": "decimalNumberByMultiplyingByPowerOf10:",
      "contents": "decimalNumberByMultiplyingByPowerOf10(${1:short power})"
    },
    {
      "trigger": "decimalNumberByMultiplyingByPowerOf10:withBehavior:",
      "contents": "decimalNumberByMultiplyingByPowerOf10(${1:short power}, withBehavior:${2:id behavior})"
    },
    {
      "trigger": "decimalNumberByRaisingToPower:",
      "contents": "decimalNumberByRaisingToPower(${1:NSUInteger power})"
    },
    {
      "trigger": "decimalNumberByRaisingToPower:withBehavior:",
      "contents": "decimalNumberByRaisingToPower(${1:NSUInteger power}, withBehavior:${2:id behavior})"
    },
    {
      "trigger": "decimalNumberByRoundingAccordingToBehavior:",
      "contents": "decimalNumberByRoundingAccordingToBehavior(${1:id behavior})"
    },
    {
      "trigger": "decimalNumberBySubtracting:",
      "contents": "decimalNumberBySubtracting(${1:NSDecimalNumber* decimalNumber})"
    },
    {
      "trigger": "decimalNumberBySubtracting:withBehavior:",
      "contents": "decimalNumberBySubtracting(${1:NSDecimalNumber* decimalNumber}, withBehavior:${2:id behavior})"
    },
    {
      "trigger": "decodeArrayOfObjCType:count:at:",
      "contents": "decodeArrayOfObjCType(${1:char* itemType}, count:${2:NSUInteger count}, at:${3:void* array})"
    },
    {
      "trigger": "decodeBoolForKey:",
      "contents": "decodeBoolForKey(${1:NSString* key})"
    },
    {
      "trigger": "decodeBytesForKey:returnedLength:",
      "contents": "decodeBytesForKey(${1:NSString* key}, returnedLength:${2:NSUInteger* lengthp})"
    },
    {
      "trigger": "decodeBytesWithReturnedLength:",
      "contents": "decodeBytesWithReturnedLength(${1:NSUInteger* lengthp})"
    },
    {
      "trigger": "decodeCGAffineTransformForKey:",
      "contents": "decodeCGAffineTransformForKey(${1:NSString* key})"
    },
    {
      "trigger": "decodeCGPointForKey:",
      "contents": "decodeCGPointForKey(${1:NSString* key})"
    },
    {
      "trigger": "decodeCGRectForKey:",
      "contents": "decodeCGRectForKey(${1:NSString* key})"
    },
    {
      "trigger": "decodeCGSizeForKey:",
      "contents": "decodeCGSizeForKey(${1:NSString* key})"
    },
    {
      "trigger": "decodeCMTimeForKey:",
      "contents": "decodeCMTimeForKey(${1:NSString* key})"
    },
    {
      "trigger": "decodeCMTimeMappingForKey:",
      "contents": "decodeCMTimeMappingForKey(${1:NSString* key})"
    },
    {
      "trigger": "decodeCMTimeRangeForKey:",
      "contents": "decodeCMTimeRangeForKey(${1:NSString* key})"
    },
    {
      "trigger": "decodeDoubleForKey:",
      "contents": "decodeDoubleForKey(${1:NSString* key})"
    },
    {
      "trigger": "decodeFloatForKey:",
      "contents": "decodeFloatForKey(${1:NSString* key})"
    },
    {
      "trigger": "decodeInt32ForKey:",
      "contents": "decodeInt32ForKey(${1:NSString* key})"
    },
    {
      "trigger": "decodeInt64ForKey:",
      "contents": "decodeInt64ForKey(${1:NSString* key})"
    },
    {
      "trigger": "decodeIntForKey:",
      "contents": "decodeIntForKey(${1:NSString* key})"
    },
    {
      "trigger": "decodeIntegerForKey:",
      "contents": "decodeIntegerForKey(${1:NSString* key})"
    },
    {
      "trigger": "decodeObjectForKey:",
      "contents": "decodeObjectForKey(${1:NSString* key})"
    },
    {
      "trigger": "decodeUIEdgeInsetsForKey:",
      "contents": "decodeUIEdgeInsetsForKey(${1:NSString* key})"
    },
    {
      "trigger": "decodeUIOffsetForKey:",
      "contents": "decodeUIOffsetForKey(${1:NSString* key})"
    },
    {
      "trigger": "decodeValueOfObjCType:at:",
      "contents": "decodeValueOfObjCType(${1:char* type}, at:${2:void* data})"
    },
    {
      "trigger": "decodeValuesOfObjCTypes:",
      "contents": "decodeValuesOfObjCTypes(${1:char* types})"
    },
    {
      "trigger": "defaultCredentialForProtectionSpace:",
      "contents": "defaultCredentialForProtectionSpace(${1:NSURLProtectionSpace* space})"
    },
    {
      "trigger": "delete:",
      "contents": "delete(${1:id sender})"
    },
    {
      "trigger": "deleteCharactersInRange:",
      "contents": "deleteCharactersInRange(${1:NSRange range})"
    },
    {
      "trigger": "deleteCookie:",
      "contents": "deleteCookie(${1:NSHTTPCookie* cookie})"
    },
    {
      "trigger": "deleteObject:",
      "contents": "deleteObject(${1:NSManagedObject* object})"
    },
    {
      "trigger": "deleteRowsAtIndexPaths:withRowAnimation:",
      "contents": "deleteRowsAtIndexPaths(${1:NSArray* indexPaths}, withRowAnimation:${2:UITableViewRowAnimation animation})"
    },
    {
      "trigger": "deleteSections:withRowAnimation:",
      "contents": "deleteSections(${1:NSIndexSet* sections}, withRowAnimation:${2:UITableViewRowAnimation animation})"
    },
    {
      "trigger": "denyCallID:",
      "contents": "denyCallID(${1:NSInteger callID})"
    },
    {
      "trigger": "denyConnectionFromPeer:",
      "contents": "denyConnectionFromPeer(${1:NSString* peerID})"
    },
    {
      "trigger": "dequeueNotificationsMatching:coalesceMask:",
      "contents": "dequeueNotificationsMatching(${1:NSNotification* notification}, coalesceMask:${2:NSUInteger coalesceMask})"
    },
    {
      "trigger": "dequeueReusableAnnotationViewWithIdentifier:",
      "contents": "dequeueReusableAnnotationViewWithIdentifier(${1:NSString* identifier})"
    },
    {
      "trigger": "dequeueReusableCellWithIdentifier:",
      "contents": "dequeueReusableCellWithIdentifier(${1:NSString* identifier})"
    },
    {
      "trigger": "descriptionWithLocale:",
      "contents": "descriptionWithLocale(${1:id locale})"
    },
    {
      "trigger": "descriptionWithLocale:indent:",
      "contents": "descriptionWithLocale(${1:id locale}, indent:${2:NSUInteger level})"
    },
    {
      "trigger": "deselectAnnotation:animated:",
      "contents": "deselectAnnotation(${1:id annotation}, animated:${2:BOOL animated})"
    },
    {
      "trigger": "deselectRowAtIndexPath:animated:",
      "contents": "deselectRowAtIndexPath(${1:NSIndexPath* indexPath}, animated:${2:BOOL animated})"
    },
    {
      "trigger": "destinationEntityForEntityMapping:",
      "contents": "destinationEntityForEntityMapping(${1:NSEntityMapping* mEntity})"
    },
    {
      "trigger": "destinationInstancesForEntityMappingNamed:sourceInstances:",
      "contents": "destinationInstancesForEntityMappingNamed(${1:NSString* mappingName}, sourceInstances:${2:NSArray* sourceInstances})"
    },
    {
      "trigger": "destinationOfSymbolicLinkAtPath:error:",
      "contents": "destinationOfSymbolicLinkAtPath(${1:NSString* path}, error:${2:NSError** error})"
    },
    {
      "trigger": "detectConflictsForObject:",
      "contents": "detectConflictsForObject(${1:NSManagedObject* object})"
    },
    {
      "trigger": "dictionaryForKey:",
      "contents": "dictionaryForKey(${1:NSString* aKey})"
    },
    {
      "trigger": "dictionaryForKey:",
      "contents": "dictionaryForKey(${1:NSString* defaultName})"
    },
    {
      "trigger": "dictionaryWithValuesForKeys:",
      "contents": "dictionaryWithValuesForKeys(${1:NSArray* keys})"
    },
    {
      "trigger": "didAccessValueForKey:",
      "contents": "didAccessValueForKey(${1:NSString* key})"
    },
    {
      "trigger": "didAddSubview:",
      "contents": "didAddSubview(${1:UIView* subview})"
    },
    {
      "trigger": "didAddToPersistentStoreCoordinator:",
      "contents": "didAddToPersistentStoreCoordinator(${1:NSPersistentStoreCoordinator* coordinator})"
    },
    {
      "trigger": "didAnimateFirstHalfOfRotationToInterfaceOrientation:",
      "contents": "didAnimateFirstHalfOfRotationToInterfaceOrientation(${1:UIInterfaceOrientation toInterfaceOrientation})"
    },
    {
      "trigger": "didChange:valuesAtIndexes:forKey:",
      "contents": "didChange(${1:NSKeyValueChange changeKind}, valuesAtIndexes:${2:NSIndexSet* indexes}, forKey:${3:NSString* key})"
    },
    {
      "trigger": "didChangeValueForKey:",
      "contents": "didChangeValueForKey(${1:NSString* key})"
    },
    {
      "trigger": "didChangeValueForKey:withSetMutation:usingObjects:",
      "contents": "didChangeValueForKey(${1:NSString* inKey}, withSetMutation:${2:NSKeyValueSetMutationKind inMutationKind}, usingObjects:${3:NSSet* inObjects})"
    },
    {
      "trigger": "didChangeValueForKey:withSetMutation:usingObjects:",
      "contents": "didChangeValueForKey(${1:NSString* key}, withSetMutation:${2:NSKeyValueSetMutationKind mutationKind}, usingObjects:${3:NSSet* objects})"
    },
    {
      "trigger": "didMoveToParentViewController:",
      "contents": "didMoveToParentViewController(${1:UIViewController* parent})"
    },
    {
      "trigger": "didPresentActionSheet:",
      "contents": "didPresentActionSheet(${1:UIActionSheet* actionSheet})"
    },
    {
      "trigger": "didPresentAlertView:",
      "contents": "didPresentAlertView(${1:UIAlertView* alertView})"
    },
    {
      "trigger": "didRotateFromInterfaceOrientation:",
      "contents": "didRotateFromInterfaceOrientation(${1:UIInterfaceOrientation fromInterfaceOrientation})"
    },
    {
      "trigger": "didTransitionToState:",
      "contents": "didTransitionToState(${1:UITableViewCellStateMask state})"
    },
    {
      "trigger": "directoryContentsAtPath:",
      "contents": "directoryContentsAtPath(${1:NSString* path})"
    },
    {
      "trigger": "disconnectPeerFromAllPeers:",
      "contents": "disconnectPeerFromAllPeers(${1:NSString* peerID})"
    },
    {
      "trigger": "discoverCharacteristics:forService:",
      "contents": "discoverCharacteristics(${1:NSArray* characteristicUUIDs}, forService:${2:CBService* service})"
    },
    {
      "trigger": "discoverDescriptorsForCharacteristic:",
      "contents": "discoverDescriptorsForCharacteristic(${1:CBCharacteristic* characteristic})"
    },
    {
      "trigger": "discoverIncludedServices:forService:",
      "contents": "discoverIncludedServices(${1:NSArray* includedServiceUUIDs}, forService:${2:CBService* service})"
    },
    {
      "trigger": "discoverServices:",
      "contents": "discoverServices(${1:NSArray* serviceUUIDs})"
    },
    {
      "trigger": "dismissAnimated:",
      "contents": "dismissAnimated(${1:BOOL animated})"
    },
    {
      "trigger": "dismissMenuAnimated:",
      "contents": "dismissMenuAnimated(${1:BOOL animated})"
    },
    {
      "trigger": "dismissModalViewControllerAnimated:",
      "contents": "dismissModalViewControllerAnimated(${1:BOOL animated})"
    },
    {
      "trigger": "dismissPopoverAnimated:",
      "contents": "dismissPopoverAnimated(${1:BOOL animated})"
    },
    {
      "trigger": "dismissPreviewAnimated:",
      "contents": "dismissPreviewAnimated(${1:BOOL animated})"
    },
    {
      "trigger": "dismissViewControllerAnimated:completion:",
      "contents": "dismissViewControllerAnimated(${1:BOOL flag}, completion:${2:void (^)(void) completion})"
    },
    {
      "trigger": "dismissWithClickedButtonIndex:animated:",
      "contents": "dismissWithClickedButtonIndex(${1:NSInteger buttonIndex}, animated:${2:BOOL animated})"
    },
    {
      "trigger": "displayLayer:",
      "contents": "displayLayer(${1:CALayer* layer})"
    },
    {
      "trigger": "displayLinkWithTarget:selector:",
      "contents": "displayLinkWithTarget(${1:id target}, selector:${2:SEL sel})"
    },
    {
      "trigger": "displayNameAtPath:",
      "contents": "displayNameAtPath(${1:NSString* path})"
    },
    {
      "trigger": "displayNameForKey:value:",
      "contents": "displayNameForKey(${1:id key}, value:${2:id value})"
    },
    {
      "trigger": "displayNameForPeer:",
      "contents": "displayNameForPeer(${1:NSString* peerID})"
    },
    {
      "trigger": "distanceFromLocation:",
      "contents": "distanceFromLocation(${1:CLLocation* location})"
    },
    {
      "trigger": "dividerImageForLeftSegmentState:rightSegmentState:barMetrics:",
      "contents": "dividerImageForLeftSegmentState(${1:UIControlState leftState}, rightSegmentState:${2:UIControlState rightState}, barMetrics:${3:UIBarMetrics barMetrics})"
    },
    {
      "trigger": "documentInteractionController:canPerformAction:",
      "contents": "documentInteractionController(${1:UIDocumentInteractionController* controller}, canPerformAction:${2:SEL action})"
    },
    {
      "trigger": "documentInteractionController:didEndSendingToApplication:",
      "contents": "documentInteractionController(${1:UIDocumentInteractionController* controller}, didEndSendingToApplication:${2:NSString* application})"
    },
    {
      "trigger": "documentInteractionController:performAction:",
      "contents": "documentInteractionController(${1:UIDocumentInteractionController* controller}, performAction:${2:SEL action})"
    },
    {
      "trigger": "documentInteractionController:willBeginSendingToApplication:",
      "contents": "documentInteractionController(${1:UIDocumentInteractionController* controller}, willBeginSendingToApplication:${2:NSString* application})"
    },
    {
      "trigger": "documentInteractionControllerDidDismissOpenInMenu:",
      "contents": "documentInteractionControllerDidDismissOpenInMenu(${1:UIDocumentInteractionController* controller})"
    },
    {
      "trigger": "documentInteractionControllerDidDismissOptionsMenu:",
      "contents": "documentInteractionControllerDidDismissOptionsMenu(${1:UIDocumentInteractionController* controller})"
    },
    {
      "trigger": "documentInteractionControllerDidEndPreview:",
      "contents": "documentInteractionControllerDidEndPreview(${1:UIDocumentInteractionController* controller})"
    },
    {
      "trigger": "documentInteractionControllerRectForPreview:",
      "contents": "documentInteractionControllerRectForPreview(${1:UIDocumentInteractionController* controller})"
    },
    {
      "trigger": "documentInteractionControllerViewControllerForPreview:",
      "contents": "documentInteractionControllerViewControllerForPreview(${1:UIDocumentInteractionController* controller})"
    },
    {
      "trigger": "documentInteractionControllerViewForPreview:",
      "contents": "documentInteractionControllerViewForPreview(${1:UIDocumentInteractionController* controller})"
    },
    {
      "trigger": "documentInteractionControllerWillBeginPreview:",
      "contents": "documentInteractionControllerWillBeginPreview(${1:UIDocumentInteractionController* controller})"
    },
    {
      "trigger": "documentInteractionControllerWillPresentOpenInMenu:",
      "contents": "documentInteractionControllerWillPresentOpenInMenu(${1:UIDocumentInteractionController* controller})"
    },
    {
      "trigger": "documentInteractionControllerWillPresentOptionsMenu:",
      "contents": "documentInteractionControllerWillPresentOptionsMenu(${1:UIDocumentInteractionController* controller})"
    },
    {
      "trigger": "doesNotRecognizeSelector:",
      "contents": "doesNotRecognizeSelector(${1:SEL aSelector})"
    },
    {
      "trigger": "dominantLanguageForScript:",
      "contents": "dominantLanguageForScript(${1:NSString* script})"
    },
    {
      "trigger": "doubleForKey:",
      "contents": "doubleForKey(${1:NSString* aKey})"
    },
    {
      "trigger": "doubleForKey:",
      "contents": "doubleForKey(${1:NSString* defaultName})"
    },
    {
      "trigger": "downloadWithDelegate:",
      "contents": "downloadWithDelegate(${1:id delegate})"
    },
    {
      "trigger": "drawAsPatternInRect:",
      "contents": "drawAsPatternInRect(${1:CGRect rect})"
    },
    {
      "trigger": "drawAtPoint:",
      "contents": "drawAtPoint(${1:CGPoint point})"
    },
    {
      "trigger": "drawAtPoint:blendMode:alpha:",
      "contents": "drawAtPoint(${1:CGPoint point}, blendMode:${2:CGBlendMode blendMode}, alpha:${3:CGFloat alpha})"
    },
    {
      "trigger": "drawAtPoint:forWidth:withFont:fontSize:lineBreakMode:baselineAdjustment:",
      "contents": "drawAtPoint(${1:CGPoint point}, forWidth:${2:CGFloat width}, withFont:${3:UIFont* font}, fontSize:${4:CGFloat fontSize}, lineBreakMode:${5:UILineBreakMode lineBreakMode}, baselineAdjustment:${6:UIBaselineAdjustment baselineAdjustment})"
    },
    {
      "trigger": "drawAtPoint:forWidth:withFont:lineBreakMode:",
      "contents": "drawAtPoint(${1:CGPoint point}, forWidth:${2:CGFloat width}, withFont:${3:UIFont* font}, lineBreakMode:${4:UILineBreakMode lineBreakMode})"
    },
    {
      "trigger": "drawAtPoint:forWidth:withFont:minFontSize:actualFontSize:lineBreakMode:baselineAdjustment:",
      "contents": "drawAtPoint(${1:CGPoint point}, forWidth:${2:CGFloat width}, withFont:${3:UIFont* font}, minFontSize:${4:CGFloat minFontSize}, actualFontSize:${5:CGFloat* actualFontSize}, lineBreakMode:${6:UILineBreakMode lineBreakMode}, baselineAdjustment:${7:UIBaselineAdjustment baselineAdjustment})"
    },
    {
      "trigger": "drawAtPoint:withFont:",
      "contents": "drawAtPoint(${1:CGPoint point}, withFont:${2:UIFont* font})"
    },
    {
      "trigger": "drawContentForPageAtIndex:inRect:",
      "contents": "drawContentForPageAtIndex(${1:NSInteger pageIndex}, inRect:${2:CGRect contentRect})"
    },
    {
      "trigger": "drawFooterForPageAtIndex:inRect:",
      "contents": "drawFooterForPageAtIndex(${1:NSInteger pageIndex}, inRect:${2:CGRect footerRect})"
    },
    {
      "trigger": "drawHeaderForPageAtIndex:inRect:",
      "contents": "drawHeaderForPageAtIndex(${1:NSInteger pageIndex}, inRect:${2:CGRect headerRect})"
    },
    {
      "trigger": "drawImage:atPoint:fromRect:",
      "contents": "drawImage(${1:CIImage* im}, atPoint:${2:CGPoint p}, fromRect:${3:CGRect src})"
    },
    {
      "trigger": "drawImage:inRect:fromRect:",
      "contents": "drawImage(${1:CIImage* im}, inRect:${2:CGRect dest}, fromRect:${3:CGRect src})"
    },
    {
      "trigger": "drawInContext:",
      "contents": "drawInContext(${1:CGContextRef ctx})"
    },
    {
      "trigger": "drawInRect:",
      "contents": "drawInRect(${1:CGRect rect})"
    },
    {
      "trigger": "drawInRect:blendMode:alpha:",
      "contents": "drawInRect(${1:CGRect rect}, blendMode:${2:CGBlendMode blendMode}, alpha:${3:CGFloat alpha})"
    },
    {
      "trigger": "drawInRect:forPageAtIndex:",
      "contents": "drawInRect(${1:CGRect rect}, forPageAtIndex:${2:NSInteger pageIndex})"
    },
    {
      "trigger": "drawInRect:withFont:",
      "contents": "drawInRect(${1:CGRect rect}, withFont:${2:UIFont* font})"
    },
    {
      "trigger": "drawInRect:withFont:lineBreakMode:",
      "contents": "drawInRect(${1:CGRect rect}, withFont:${2:UIFont* font}, lineBreakMode:${3:UILineBreakMode lineBreakMode})"
    },
    {
      "trigger": "drawInRect:withFont:lineBreakMode:alignment:",
      "contents": "drawInRect(${1:CGRect rect}, withFont:${2:UIFont* font}, lineBreakMode:${3:UILineBreakMode lineBreakMode}, alignment:${4:UITextAlignment alignment})"
    },
    {
      "trigger": "drawLayer:inContext:",
      "contents": "drawLayer(${1:CALayer* layer}, inContext:${2:CGContextRef ctx})"
    },
    {
      "trigger": "drawMapRect:zoomScale:inContext:",
      "contents": "drawMapRect(${1:MKMapRect mapRect}, zoomScale:${2:MKZoomScale zoomScale}, inContext:${3:CGContextRef context})"
    },
    {
      "trigger": "drawPageAtIndex:inRect:",
      "contents": "drawPageAtIndex(${1:NSInteger pageIndex}, inRect:${2:CGRect printableRect})"
    },
    {
      "trigger": "drawPlaceholderInRect:",
      "contents": "drawPlaceholderInRect(${1:CGRect rect})"
    },
    {
      "trigger": "drawPrintFormatter:forPageAtIndex:",
      "contents": "drawPrintFormatter(${1:UIPrintFormatter* printFormatter}, forPageAtIndex:${2:NSInteger pageIndex})"
    },
    {
      "trigger": "drawRect:",
      "contents": "drawRect(${1:CGRect rect})"
    },
    {
      "trigger": "drawRect:forViewPrintFormatter:",
      "contents": "drawRect(${1:CGRect rect}, forViewPrintFormatter:${2:UIViewPrintFormatter* formatter})"
    },
    {
      "trigger": "drawTextInRect:",
      "contents": "drawTextInRect(${1:CGRect rect})"
    },
    {
      "trigger": "earlierDate:",
      "contents": "earlierDate(${1:NSDate* anotherDate})"
    },
    {
      "trigger": "editingRectForBounds:",
      "contents": "editingRectForBounds(${1:CGRect bounds})"
    },
    {
      "trigger": "editingStringForObjectValue:",
      "contents": "editingStringForObjectValue(${1:id obj})"
    },
    {
      "trigger": "encodeArrayOfObjCType:count:at:",
      "contents": "encodeArrayOfObjCType(${1:char* type}, count:${2:NSUInteger count}, at:${3:void* array})"
    },
    {
      "trigger": "encodeBool:forKey:",
      "contents": "encodeBool(${1:BOOL boolv}, forKey:${2:NSString* key})"
    },
    {
      "trigger": "encodeBycopyObject:",
      "contents": "encodeBycopyObject(${1:id anObject})"
    },
    {
      "trigger": "encodeByrefObject:",
      "contents": "encodeByrefObject(${1:id anObject})"
    },
    {
      "trigger": "encodeBytes:length:",
      "contents": "encodeBytes(${1:void* byteaddr}, length:${2:NSUInteger length})"
    },
    {
      "trigger": "encodeBytes:length:forKey:",
      "contents": "encodeBytes(${1:uint8_t* bytesp}, length:${2:NSUInteger lenv}, forKey:${3:NSString* key})"
    },
    {
      "trigger": "encodeCGAffineTransform:forKey:",
      "contents": "encodeCGAffineTransform(${1:CGAffineTransform transform}, forKey:${2:NSString* key})"
    },
    {
      "trigger": "encodeCGPoint:forKey:",
      "contents": "encodeCGPoint(${1:CGPoint point}, forKey:${2:NSString* key})"
    },
    {
      "trigger": "encodeCGRect:forKey:",
      "contents": "encodeCGRect(${1:CGRect rect}, forKey:${2:NSString* key})"
    },
    {
      "trigger": "encodeCGSize:forKey:",
      "contents": "encodeCGSize(${1:CGSize size}, forKey:${2:NSString* key})"
    },
    {
      "trigger": "encodeCMTime:forKey:",
      "contents": "encodeCMTime(${1:CMTime time}, forKey:${2:NSString* key})"
    },
    {
      "trigger": "encodeCMTimeMapping:forKey:",
      "contents": "encodeCMTimeMapping(${1:CMTimeMapping timeMapping}, forKey:${2:NSString* key})"
    },
    {
      "trigger": "encodeCMTimeRange:forKey:",
      "contents": "encodeCMTimeRange(${1:CMTimeRange timeRange}, forKey:${2:NSString* key})"
    },
    {
      "trigger": "encodeConditionalObject:",
      "contents": "encodeConditionalObject(${1:id object})"
    },
    {
      "trigger": "encodeConditionalObject:forKey:",
      "contents": "encodeConditionalObject(${1:id objv}, forKey:${2:NSString* key})"
    },
    {
      "trigger": "encodeDataObject:",
      "contents": "encodeDataObject(${1:NSData* data})"
    },
    {
      "trigger": "encodeDouble:forKey:",
      "contents": "encodeDouble(${1:double realv}, forKey:${2:NSString* key})"
    },
    {
      "trigger": "encodeFloat:forKey:",
      "contents": "encodeFloat(${1:float realv}, forKey:${2:NSString* key})"
    },
    {
      "trigger": "encodeInt32:forKey:",
      "contents": "encodeInt32(${1:int32_t intv}, forKey:${2:NSString* key})"
    },
    {
      "trigger": "encodeInt64:forKey:",
      "contents": "encodeInt64(${1:int64_t intv}, forKey:${2:NSString* key})"
    },
    {
      "trigger": "encodeInt:forKey:",
      "contents": "encodeInt(${1:int intv}, forKey:${2:NSString* key})"
    },
    {
      "trigger": "encodeInteger:forKey:",
      "contents": "encodeInteger(${1:NSInteger intv}, forKey:${2:NSString* key})"
    },
    {
      "trigger": "encodeObject:",
      "contents": "encodeObject(${1:id object})"
    },
    {
      "trigger": "encodeObject:forKey:",
      "contents": "encodeObject(${1:id objv}, forKey:${2:NSString* key})"
    },
    {
      "trigger": "encodeRootObject:",
      "contents": "encodeRootObject(${1:id rootObject})"
    },
    {
      "trigger": "encodeUIEdgeInsets:forKey:",
      "contents": "encodeUIEdgeInsets(${1:UIEdgeInsets insets}, forKey:${2:NSString* key})"
    },
    {
      "trigger": "encodeUIOffset:forKey:",
      "contents": "encodeUIOffset(${1:UIOffset offset}, forKey:${2:NSString* key})"
    },
    {
      "trigger": "encodeValueOfObjCType:at:",
      "contents": "encodeValueOfObjCType(${1:char* type}, at:${2:void* addr})"
    },
    {
      "trigger": "encodeValuesOfObjCTypes:",
      "contents": "encodeValuesOfObjCTypes(${1:char* types})"
    },
    {
      "trigger": "encodeWithCoder:",
      "contents": "encodeWithCoder(${1:NSCoder* aCoder})"
    },
    {
      "trigger": "endBackgroundTask:",
      "contents": "endBackgroundTask(${1:UIBackgroundTaskIdentifier identifier})"
    },
    {
      "trigger": "endCustomizingAnimated:",
      "contents": "endCustomizingAnimated(${1:BOOL animated})"
    },
    {
      "trigger": "endEditing:",
      "contents": "endEditing(${1:BOOL force})"
    },
    {
      "trigger": "endEntityMapping:manager:error:",
      "contents": "endEntityMapping(${1:NSEntityMapping* mapping}, manager:${2:NSMigrationManager* manager}, error:${3:NSError** error})"
    },
    {
      "trigger": "endInstanceCreationForEntityMapping:manager:error:",
      "contents": "endInstanceCreationForEntityMapping(${1:NSEntityMapping* mapping}, manager:${2:NSMigrationManager* manager}, error:${3:NSError** error})"
    },
    {
      "trigger": "endInterruptionWithFlags:",
      "contents": "endInterruptionWithFlags(${1:NSUInteger flags})"
    },
    {
      "trigger": "endMatchInTurnWithMatchData:completionHandler:",
      "contents": "endMatchInTurnWithMatchData(${1:NSData* matchData}, completionHandler:${2:void (^)(NSError *) completionHandler})"
    },
    {
      "trigger": "endRelationshipCreationForEntityMapping:manager:error:",
      "contents": "endRelationshipCreationForEntityMapping(${1:NSEntityMapping* mapping}, manager:${2:NSMigrationManager* manager}, error:${3:NSError** error})"
    },
    {
      "trigger": "endSessionAtSourceTime:",
      "contents": "endSessionAtSourceTime(${1:CMTime endTime})"
    },
    {
      "trigger": "endTrackingWithTouch:withEvent:",
      "contents": "endTrackingWithTouch(${1:UITouch* touch}, withEvent:${2:UIEvent* event})"
    },
    {
      "trigger": "endTurnWithNextParticipant:matchData:completionHandler:",
      "contents": "endTurnWithNextParticipant(${1:GKTurnBasedParticipant* nextParticipant}, matchData:${2:NSData* matchData}, completionHandler:${3:void (^)(NSError *) completionHandler})"
    },
    {
      "trigger": "enqueueNotification:postingStyle:",
      "contents": "enqueueNotification(${1:NSNotification* notification}, postingStyle:${2:NSPostingStyle postingStyle})"
    },
    {
      "trigger": "enqueueNotification:postingStyle:coalesceMask:forModes:",
      "contents": "enqueueNotification(${1:NSNotification* notification}, postingStyle:${2:NSPostingStyle postingStyle}, coalesceMask:${3:NSUInteger coalesceMask}, forModes:${4:NSArray* modes})"
    },
    {
      "trigger": "entitiesForConfiguration:",
      "contents": "entitiesForConfiguration(${1:NSString* configuration})"
    },
    {
      "trigger": "enumerateAssetsAtIndexes:options:usingBlock:",
      "contents": "enumerateAssetsAtIndexes(${1:NSIndexSet* indexSet}, options:${2:NSEnumerationOptions options}, usingBlock:${3:ALAssetsGroupEnumerationResultsBlock enumerationBlock})"
    },
    {
      "trigger": "enumerateAssetsUsingBlock:",
      "contents": "enumerateAssetsUsingBlock(${1:ALAssetsGroupEnumerationResultsBlock enumerationBlock})"
    },
    {
      "trigger": "enumerateAssetsWithOptions:usingBlock:",
      "contents": "enumerateAssetsWithOptions(${1:NSEnumerationOptions options}, usingBlock:${2:ALAssetsGroupEnumerationResultsBlock enumerationBlock})"
    },
    {
      "trigger": "enumerateAttribute:inRange:options:usingBlock:",
      "contents": "enumerateAttribute(${1:NSString* attrName}, inRange:${2:NSRange enumerationRange}, options:${3:NSAttributedStringEnumerationOptions opts}, usingBlock:${4:void (^)(id, NSRange, BOOL *) block})"
    },
    {
      "trigger": "enumerateAttributesInRange:options:usingBlock:",
      "contents": "enumerateAttributesInRange(${1:NSRange enumerationRange}, options:${2:NSAttributedStringEnumerationOptions opts}, usingBlock:${3:void (^)(NSDictionary *, NSRange, BOOL *) block})"
    },
    {
      "trigger": "enumerateEventsMatchingPredicate:usingBlock:",
      "contents": "enumerateEventsMatchingPredicate(${1:NSPredicate* predicate}, usingBlock:${2:EKEventSearchCallback block})"
    },
    {
      "trigger": "enumerateGroupsWithTypes:usingBlock:failureBlock:",
      "contents": "enumerateGroupsWithTypes(${1:ALAssetsGroupType types}, usingBlock:${2:ALAssetsLibraryGroupsEnumerationResultsBlock enumerationBlock}, failureBlock:${3:ALAssetsLibraryAccessFailureBlock failureBlock})"
    },
    {
      "trigger": "enumerateIndexesInRange:options:usingBlock:",
      "contents": "enumerateIndexesInRange(${1:NSRange range}, options:${2:NSEnumerationOptions opts}, usingBlock:${3:void (^)(NSUInteger, BOOL *) block})"
    },
    {
      "trigger": "enumerateIndexesUsingBlock:",
      "contents": "enumerateIndexesUsingBlock(${1:void (^)(NSUInteger, BOOL *) block})"
    },
    {
      "trigger": "enumerateIndexesWithOptions:usingBlock:",
      "contents": "enumerateIndexesWithOptions(${1:NSEnumerationOptions opts}, usingBlock:${2:void (^)(NSUInteger, BOOL *) block})"
    },
    {
      "trigger": "enumerateKeysAndObjectsUsingBlock:",
      "contents": "enumerateKeysAndObjectsUsingBlock(${1:void (^)(id, id, BOOL *) block})"
    },
    {
      "trigger": "enumerateKeysAndObjectsWithOptions:usingBlock:",
      "contents": "enumerateKeysAndObjectsWithOptions(${1:NSEnumerationOptions opts}, usingBlock:${2:void (^)(id, id, BOOL *) block})"
    },
    {
      "trigger": "enumerateLinesUsingBlock:",
      "contents": "enumerateLinesUsingBlock(${1:void (^)(NSString *, BOOL *) block})"
    },
    {
      "trigger": "enumerateLinguisticTagsInRange:scheme:options:orthography:usingBlock:",
      "contents": "enumerateLinguisticTagsInRange(${1:NSRange range}, scheme:${2:NSString* tagScheme}, options:${3:NSLinguisticTaggerOptions opts}, orthography:${4:NSOrthography* orthography}, usingBlock:${5:void (^)(NSString *, NSRange, NSRange, BOOL *) block})"
    },
    {
      "trigger": "enumerateMatchesInString:options:range:usingBlock:",
      "contents": "enumerateMatchesInString(${1:NSString* string}, options:${2:NSMatchingOptions options}, range:${3:NSRange range}, usingBlock:${4:void (^)(NSTextCheckingResult *, NSMatchingFlags, BOOL *) block})"
    },
    {
      "trigger": "enumerateObjectsAtIndexes:options:usingBlock:",
      "contents": "enumerateObjectsAtIndexes(${1:NSIndexSet* s}, options:${2:NSEnumerationOptions opts}, usingBlock:${3:void (^)(id, NSUInteger, BOOL *) block})"
    },
    {
      "trigger": "enumerateObjectsUsingBlock:",
      "contents": "enumerateObjectsUsingBlock(${1:void (^)(id, BOOL *) block})"
    },
    {
      "trigger": "enumerateObjectsUsingBlock:",
      "contents": "enumerateObjectsUsingBlock(${1:void (^)(id, NSUInteger, BOOL *) block})"
    },
    {
      "trigger": "enumerateObjectsWithOptions:usingBlock:",
      "contents": "enumerateObjectsWithOptions(${1:NSEnumerationOptions opts}, usingBlock:${2:void (^)(id, BOOL *) block})"
    },
    {
      "trigger": "enumerateObjectsWithOptions:usingBlock:",
      "contents": "enumerateObjectsWithOptions(${1:NSEnumerationOptions opts}, usingBlock:${2:void (^)(id, NSUInteger, BOOL *) block})"
    },
    {
      "trigger": "enumerateRangesInRange:options:usingBlock:",
      "contents": "enumerateRangesInRange(${1:NSRange range}, options:${2:NSEnumerationOptions opts}, usingBlock:${3:void (^)(NSRange, BOOL *) block})"
    },
    {
      "trigger": "enumerateRangesUsingBlock:",
      "contents": "enumerateRangesUsingBlock(${1:void (^)(NSRange, BOOL *) block})"
    },
    {
      "trigger": "enumerateRangesWithOptions:usingBlock:",
      "contents": "enumerateRangesWithOptions(${1:NSEnumerationOptions opts}, usingBlock:${2:void (^)(NSRange, BOOL *) block})"
    },
    {
      "trigger": "enumerateSubstringsInRange:options:usingBlock:",
      "contents": "enumerateSubstringsInRange(${1:NSRange range}, options:${2:NSStringEnumerationOptions opts}, usingBlock:${3:void (^)(NSString *, NSRange, NSRange, BOOL *) block})"
    },
    {
      "trigger": "enumerateTagsInRange:scheme:options:usingBlock:",
      "contents": "enumerateTagsInRange(${1:NSRange range}, scheme:${2:NSString* tagScheme}, options:${3:NSLinguisticTaggerOptions opts}, usingBlock:${4:void (^)(NSString *, NSRange, NSRange, BOOL *) block})"
    },
    {
      "trigger": "enumerateValuesForProperties:usingBlock:",
      "contents": "enumerateValuesForProperties(${1:NSSet* properties}, usingBlock:${2:void (^)(NSString *, id, BOOL *) block})"
    },
    {
      "trigger": "enumeratorAtPath:",
      "contents": "enumeratorAtPath(${1:NSString* path})"
    },
    {
      "trigger": "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:",
      "contents": "enumeratorAtURL(${1:NSURL* url}, includingPropertiesForKeys:${2:NSArray* keys}, options:${3:NSDirectoryEnumerationOptions mask}, errorHandler:${4:BOOL (^)(NSURL *, NSError *) handler})"
    },
    {
      "trigger": "errSSLBadCert (-9808)",
      "contents": "ErrSSLBadCert"
    },
    {
      "trigger": "errSSLBadCipherSuite (-9818)",
      "contents": "ErrSSLBadCipherSuite"
    },
    {
      "trigger": "errSSLBadConfiguration (-9848)",
      "contents": "ErrSSLBadConfiguration"
    },
    {
      "trigger": "errSSLBadRecordMac (-9846)",
      "contents": "ErrSSLBadRecordMac"
    },
    {
      "trigger": "errSSLBufferOverflow (-9817)",
      "contents": "ErrSSLBufferOverflow"
    },
    {
      "trigger": "errSSLCertExpired (-9814)",
      "contents": "ErrSSLCertExpired"
    },
    {
      "trigger": "errSSLCertNotYetValid (-9815)",
      "contents": "ErrSSLCertNotYetValid"
    },
    {
      "trigger": "errSSLClientAuthCompleted (-9841)",
      "contents": "ErrSSLClientAuthCompleted"
    },
    {
      "trigger": "errSSLClientCertRequested (-9842)",
      "contents": "ErrSSLClientCertRequested"
    },
    {
      "trigger": "errSSLClosedAbort (-9806)",
      "contents": "ErrSSLClosedAbort"
    },
    {
      "trigger": "errSSLClosedGraceful (-9805)",
      "contents": "ErrSSLClosedGraceful"
    },
    {
      "trigger": "errSSLClosedNoNotify (-9816)",
      "contents": "ErrSSLClosedNoNotify"
    },
    {
      "trigger": "errSSLConnectionRefused (-9844)",
      "contents": "ErrSSLConnectionRefused"
    },
    {
      "trigger": "errSSLCrypto (-9809)",
      "contents": "ErrSSLCrypto"
    },
    {
      "trigger": "errSSLDecryptionFail (-9845)",
      "contents": "ErrSSLDecryptionFail"
    },
    {
      "trigger": "errSSLFatalAlert (-9802)",
      "contents": "ErrSSLFatalAlert"
    },
    {
      "trigger": "errSSLHostNameMismatch (-9843)",
      "contents": "ErrSSLHostNameMismatch"
    },
    {
      "trigger": "errSSLIllegalParam (-9830)",
      "contents": "ErrSSLIllegalParam"
    },
    {
      "trigger": "errSSLInternal (-9810)",
      "contents": "ErrSSLInternal"
    },
    {
      "trigger": "errSSLLast (-9849)",
      "contents": "ErrSSLLast"
    },
    {
      "trigger": "errSSLModuleAttach (-9811)",
      "contents": "ErrSSLModuleAttach"
    },
    {
      "trigger": "errSSLNegotiation (-9801)",
      "contents": "ErrSSLNegotiation"
    },
    {
      "trigger": "errSSLNoRootCert (-9813)",
      "contents": "ErrSSLNoRootCert"
    },
    {
      "trigger": "errSSLPeerAccessDenied (-9832)",
      "contents": "ErrSSLPeerAccessDenied"
    },
    {
      "trigger": "errSSLPeerAuthCompleted (-9841)",
      "contents": "ErrSSLPeerAuthCompleted"
    },
    {
      "trigger": "errSSLPeerBadCert (-9825)",
      "contents": "ErrSSLPeerBadCert"
    },
    {
      "trigger": "errSSLPeerBadRecordMac (-9820)",
      "contents": "ErrSSLPeerBadRecordMac"
    },
    {
      "trigger": "errSSLPeerCertExpired (-9828)",
      "contents": "ErrSSLPeerCertExpired"
    },
    {
      "trigger": "errSSLPeerCertRevoked (-9827)",
      "contents": "ErrSSLPeerCertRevoked"
    },
    {
      "trigger": "errSSLPeerCertUnknown (-9829)",
      "contents": "ErrSSLPeerCertUnknown"
    },
    {
      "trigger": "errSSLPeerDecodeError (-9833)",
      "contents": "ErrSSLPeerDecodeError"
    },
    {
      "trigger": "errSSLPeerDecompressFail (-9823)",
      "contents": "ErrSSLPeerDecompressFail"
    },
    {
      "trigger": "errSSLPeerDecryptError (-9834)",
      "contents": "ErrSSLPeerDecryptError"
    },
    {
      "trigger": "errSSLPeerDecryptionFail (-9821)",
      "contents": "ErrSSLPeerDecryptionFail"
    },
    {
      "trigger": "errSSLPeerExportRestriction (-9835)",
      "contents": "ErrSSLPeerExportRestriction"
    },
    {
      "trigger": "errSSLPeerHandshakeFail (-9824)",
      "contents": "ErrSSLPeerHandshakeFail"
    },
    {
      "trigger": "errSSLPeerInsufficientSecurity (-9837)",
      "contents": "ErrSSLPeerInsufficientSecurity"
    },
    {
      "trigger": "errSSLPeerInternalError (-9838)",
      "contents": "ErrSSLPeerInternalError"
    },
    {
      "trigger": "errSSLPeerNoRenegotiation (-9840)",
      "contents": "ErrSSLPeerNoRenegotiation"
    },
    {
      "trigger": "errSSLPeerProtocolVersion (-9836)",
      "contents": "ErrSSLPeerProtocolVersion"
    },
    {
      "trigger": "errSSLPeerRecordOverflow (-9822)",
      "contents": "ErrSSLPeerRecordOverflow"
    },
    {
      "trigger": "errSSLPeerUnexpectedMsg (-9819)",
      "contents": "ErrSSLPeerUnexpectedMsg"
    },
    {
      "trigger": "errSSLPeerUnknownCA (-9831)",
      "contents": "ErrSSLPeerUnknownCA"
    },
    {
      "trigger": "errSSLPeerUnsupportedCert (-9826)",
      "contents": "ErrSSLPeerUnsupportedCert"
    },
    {
      "trigger": "errSSLPeerUserCancelled (-9839)",
      "contents": "ErrSSLPeerUserCancelled"
    },
    {
      "trigger": "errSSLProtocol (-9800)",
      "contents": "ErrSSLProtocol"
    },
    {
      "trigger": "errSSLRecordOverflow (-9847)",
      "contents": "ErrSSLRecordOverflow"
    },
    {
      "trigger": "errSSLServerAuthCompleted (-9841)",
      "contents": "ErrSSLServerAuthCompleted"
    },
    {
      "trigger": "errSSLSessionNotFound (-9804)",
      "contents": "ErrSSLSessionNotFound"
    },
    {
      "trigger": "errSSLUnknownRootCert (-9812)",
      "contents": "ErrSSLUnknownRootCert"
    },
    {
      "trigger": "errSSLWouldBlock (-9803)",
      "contents": "ErrSSLWouldBlock"
    },
    {
      "trigger": "errSSLXCertChainInvalid (-9807)",
      "contents": "ErrSSLXCertChainInvalid"
    },
    {
      "trigger": "errSecAllocate (-108)",
      "contents": "ErrSecAllocate"
    },
    {
      "trigger": "errSecAuthFailed (-25293)",
      "contents": "ErrSecAuthFailed"
    },
    {
      "trigger": "errSecDecode (-26275)",
      "contents": "ErrSecDecode"
    },
    {
      "trigger": "errSecDuplicateItem (-25299)",
      "contents": "ErrSecDuplicateItem"
    },
    {
      "trigger": "errSecInteractionNotAllowed (-25308)",
      "contents": "ErrSecInteractionNotAllowed"
    },
    {
      "trigger": "errSecItemNotFound (-25300)",
      "contents": "ErrSecItemNotFound"
    },
    {
      "trigger": "errSecNotAvailable (-25291)",
      "contents": "ErrSecNotAvailable"
    },
    {
      "trigger": "errSecParam (-50)",
      "contents": "ErrSecParam"
    },
    {
      "trigger": "errSecSuccess (0)",
      "contents": "ErrSecSuccess"
    },
    {
      "trigger": "errSecUnimplemented (-4)",
      "contents": "ErrSecUnimplemented"
    },
    {
      "trigger": "evaluateWithObject:",
      "contents": "evaluateWithObject(${1:id object})"
    },
    {
      "trigger": "evaluateWithObject:substitutionVariables:",
      "contents": "evaluateWithObject(${1:id object}, substitutionVariables:${2:NSDictionary* bindings})"
    },
    {
      "trigger": "eventEditViewController:didCompleteWithAction:",
      "contents": "eventEditViewController(${1:EKEventEditViewController* controller}, didCompleteWithAction:${2:EKEventEditViewAction action})"
    },
    {
      "trigger": "eventEditViewControllerDefaultCalendarForNewEvents:",
      "contents": "eventEditViewControllerDefaultCalendarForNewEvents(${1:EKEventEditViewController* controller})"
    },
    {
      "trigger": "eventViewController:didCompleteWithAction:",
      "contents": "eventViewController(${1:EKEventViewController* controller}, didCompleteWithAction:${2:EKEventViewAction action})"
    },
    {
      "trigger": "eventWithIdentifier:",
      "contents": "eventWithIdentifier(${1:NSString* identifier})"
    },
    {
      "trigger": "eventsMatchingPredicate:",
      "contents": "eventsMatchingPredicate(${1:NSPredicate* predicate})"
    },
    {
      "trigger": "evictUbiquitousItemAtURL:error:",
      "contents": "evictUbiquitousItemAtURL(${1:NSURL* url}, error:${2:NSError** error})"
    },
    {
      "trigger": "exceptionDuringOperation:error:leftOperand:rightOperand:",
      "contents": "exceptionDuringOperation(${1:SEL operation}, error:${2:NSCalculationError error}, leftOperand:${3:NSDecimalNumber* leftOperand}, rightOperand:${4:NSDecimalNumber* rightOperand})"
    },
    {
      "trigger": "exchangeObjectAtIndex:withObjectAtIndex:",
      "contents": "exchangeObjectAtIndex(${1:NSUInteger idx1}, withObjectAtIndex:${2:NSUInteger idx2})"
    },
    {
      "trigger": "exchangeOverlayAtIndex:withOverlayAtIndex:",
      "contents": "exchangeOverlayAtIndex(${1:NSUInteger index1}, withOverlayAtIndex:${2:NSUInteger index2})"
    },
    {
      "trigger": "exchangeSubviewAtIndex:withSubviewAtIndex:",
      "contents": "exchangeSubviewAtIndex(${1:NSInteger index1}, withSubviewAtIndex:${2:NSInteger index2})"
    },
    {
      "trigger": "executeFetchRequest:error:",
      "contents": "executeFetchRequest(${1:NSFetchRequest* request}, error:${2:NSError** error})"
    },
    {
      "trigger": "executeRequest:withContext:error:",
      "contents": "executeRequest(${1:NSPersistentStoreRequest* request}, withContext:${2:NSManagedObjectContext* context}, error:${3:NSError** error})"
    },
    {
      "trigger": "existingObjectWithID:error:",
      "contents": "existingObjectWithID(${1:NSManagedObjectID* objectID}, error:${2:NSError** error})"
    },
    {
      "trigger": "exportAsynchronouslyWithCompletionHandler:",
      "contents": "exportAsynchronouslyWithCompletionHandler(${1:void (^)(void) handler})"
    },
    {
      "trigger": "expressionValueWithObject:context:",
      "contents": "expressionValueWithObject(${1:id object}, context:${2:NSMutableDictionary* context})"
    },
    {
      "trigger": "featureFontTableTag (1717920116)",
      "contents": "FeatureFontTableTag"
    },
    {
      "trigger": "featuresInImage:",
      "contents": "featuresInImage(${1:CIImage* image})"
    },
    {
      "trigger": "featuresInImage:options:",
      "contents": "featuresInImage(${1:CIImage* image}, options:${2:NSDictionary* options})"
    },
    {
      "trigger": "fetchRequestFromTemplateWithName:substitutionVariables:",
      "contents": "fetchRequestFromTemplateWithName(${1:NSString* name}, substitutionVariables:${2:NSDictionary* variables})"
    },
    {
      "trigger": "fetchRequestTemplateForName:",
      "contents": "fetchRequestTemplateForName(${1:NSString* name})"
    },
    {
      "trigger": "fileAttributesAtPath:traverseLink:",
      "contents": "fileAttributesAtPath(${1:NSString* path}, traverseLink:${2:BOOL yorn})"
    },
    {
      "trigger": "fileAttributesToWriteToURL:forSaveOperation:error:",
      "contents": "fileAttributesToWriteToURL(${1:NSURL* url}, forSaveOperation:${2:UIDocumentSaveOperation saveOperation}, error:${3:NSError** outError})"
    },
    {
      "trigger": "fileExistsAtPath:",
      "contents": "fileExistsAtPath(${1:NSString* path})"
    },
    {
      "trigger": "fileExistsAtPath:isDirectory:",
      "contents": "fileExistsAtPath(${1:NSString* path}, isDirectory:${2:BOOL* isDirectory})"
    },
    {
      "trigger": "fileManager:shouldCopyItemAtPath:toPath:",
      "contents": "fileManager(${1:NSFileManager* fileManager}, shouldCopyItemAtPath:${2:NSString* srcPath}, toPath:${3:NSString* dstPath})"
    },
    {
      "trigger": "fileManager:shouldCopyItemAtURL:toURL:",
      "contents": "fileManager(${1:NSFileManager* fileManager}, shouldCopyItemAtURL:${2:NSURL* srcURL}, toURL:${3:NSURL* dstURL})"
    },
    {
      "trigger": "fileManager:shouldLinkItemAtPath:toPath:",
      "contents": "fileManager(${1:NSFileManager* fileManager}, shouldLinkItemAtPath:${2:NSString* srcPath}, toPath:${3:NSString* dstPath})"
    },
    {
      "trigger": "fileManager:shouldLinkItemAtURL:toURL:",
      "contents": "fileManager(${1:NSFileManager* fileManager}, shouldLinkItemAtURL:${2:NSURL* srcURL}, toURL:${3:NSURL* dstURL})"
    },
    {
      "trigger": "fileManager:shouldMoveItemAtPath:toPath:",
      "contents": "fileManager(${1:NSFileManager* fileManager}, shouldMoveItemAtPath:${2:NSString* srcPath}, toPath:${3:NSString* dstPath})"
    },
    {
      "trigger": "fileManager:shouldMoveItemAtURL:toURL:",
      "contents": "fileManager(${1:NSFileManager* fileManager}, shouldMoveItemAtURL:${2:NSURL* srcURL}, toURL:${3:NSURL* dstURL})"
    },
    {
      "trigger": "fileManager:shouldProceedAfterError:",
      "contents": "fileManager(${1:NSFileManager* fm}, shouldProceedAfterError:${2:NSDictionary* errorInfo})"
    },
    {
      "trigger": "fileManager:shouldProceedAfterError:copyingItemAtPath:toPath:",
      "contents": "fileManager(${1:NSFileManager* fileManager}, shouldProceedAfterError:${2:NSError* error}, copyingItemAtPath:${3:NSString* srcPath}, toPath:${4:NSString* dstPath})"
    },
    {
      "trigger": "fileManager:shouldProceedAfterError:copyingItemAtURL:toURL:",
      "contents": "fileManager(${1:NSFileManager* fileManager}, shouldProceedAfterError:${2:NSError* error}, copyingItemAtURL:${3:NSURL* srcURL}, toURL:${4:NSURL* dstURL})"
    },
    {
      "trigger": "fileManager:shouldProceedAfterError:linkingItemAtPath:toPath:",
      "contents": "fileManager(${1:NSFileManager* fileManager}, shouldProceedAfterError:${2:NSError* error}, linkingItemAtPath:${3:NSString* srcPath}, toPath:${4:NSString* dstPath})"
    },
    {
      "trigger": "fileManager:shouldProceedAfterError:linkingItemAtURL:toURL:",
      "contents": "fileManager(${1:NSFileManager* fileManager}, shouldProceedAfterError:${2:NSError* error}, linkingItemAtURL:${3:NSURL* srcURL}, toURL:${4:NSURL* dstURL})"
    },
    {
      "trigger": "fileManager:shouldProceedAfterError:movingItemAtPath:toPath:",
      "contents": "fileManager(${1:NSFileManager* fileManager}, shouldProceedAfterError:${2:NSError* error}, movingItemAtPath:${3:NSString* srcPath}, toPath:${4:NSString* dstPath})"
    },
    {
      "trigger": "fileManager:shouldProceedAfterError:movingItemAtURL:toURL:",
      "contents": "fileManager(${1:NSFileManager* fileManager}, shouldProceedAfterError:${2:NSError* error}, movingItemAtURL:${3:NSURL* srcURL}, toURL:${4:NSURL* dstURL})"
    },
    {
      "trigger": "fileManager:shouldProceedAfterError:removingItemAtPath:",
      "contents": "fileManager(${1:NSFileManager* fileManager}, shouldProceedAfterError:${2:NSError* error}, removingItemAtPath:${3:NSString* path})"
    },
    {
      "trigger": "fileManager:shouldProceedAfterError:removingItemAtURL:",
      "contents": "fileManager(${1:NSFileManager* fileManager}, shouldProceedAfterError:${2:NSError* error}, removingItemAtURL:${3:NSURL* URL})"
    },
    {
      "trigger": "fileManager:shouldRemoveItemAtPath:",
      "contents": "fileManager(${1:NSFileManager* fileManager}, shouldRemoveItemAtPath:${2:NSString* path})"
    },
    {
      "trigger": "fileManager:shouldRemoveItemAtURL:",
      "contents": "fileManager(${1:NSFileManager* fileManager}, shouldRemoveItemAtURL:${2:NSURL* URL})"
    },
    {
      "trigger": "fileManager:willProcessPath:",
      "contents": "fileManager(${1:NSFileManager* fm}, willProcessPath:${2:NSString* path})"
    },
    {
      "trigger": "fileNameExtensionForType:saveOperation:",
      "contents": "fileNameExtensionForType(${1:NSString* typeName}, saveOperation:${2:UIDocumentSaveOperation saveOperation})"
    },
    {
      "trigger": "fileSystemAttributesAtPath:",
      "contents": "fileSystemAttributesAtPath(${1:NSString* path})"
    },
    {
      "trigger": "fileSystemRepresentationWithPath:",
      "contents": "fileSystemRepresentationWithPath(${1:NSString* path})"
    },
    {
      "trigger": "fillPath:inContext:",
      "contents": "fillPath(${1:CGPathRef path}, inContext:${2:CGContextRef context})"
    },
    {
      "trigger": "fillWithBlendMode:alpha:",
      "contents": "fillWithBlendMode(${1:CGBlendMode blendMode}, alpha:${2:CGFloat alpha})"
    },
    {
      "trigger": "filterUsingPredicate:",
      "contents": "filterUsingPredicate(${1:NSPredicate* predicate})"
    },
    {
      "trigger": "filteredArrayUsingPredicate:",
      "contents": "filteredArrayUsingPredicate(${1:NSPredicate* predicate})"
    },
    {
      "trigger": "filteredSetUsingPredicate:",
      "contents": "filteredSetUsingPredicate(${1:NSPredicate* predicate})"
    },
    {
      "trigger": "findMatchForRequest:withCompletionHandler:",
      "contents": "findMatchForRequest(${1:GKMatchRequest* request}, withCompletionHandler:${2:void (^)(GKMatch *, NSError *) completionHandler})"
    },
    {
      "trigger": "findPlayersForHostedMatchRequest:withCompletionHandler:",
      "contents": "findPlayersForHostedMatchRequest(${1:GKMatchRequest* request}, withCompletionHandler:${2:void (^)(NSArray *, NSError *) completionHandler})"
    },
    {
      "trigger": "finishTransaction:",
      "contents": "finishTransaction(${1:SKPaymentTransaction* transaction})"
    },
    {
      "trigger": "finishedHandlingError:recovered:",
      "contents": "finishedHandlingError(${1:NSError* error}, recovered:${2:BOOL recovered})"
    },
    {
      "trigger": "firstMatchInString:options:range:",
      "contents": "firstMatchInString(${1:NSString* string}, options:${2:NSMatchingOptions options}, range:${3:NSRange range})"
    },
    {
      "trigger": "firstObjectCommonWithArray:",
      "contents": "firstObjectCommonWithArray(${1:NSArray* otherArray})"
    },
    {
      "trigger": "firstRectForRange:",
      "contents": "firstRectForRange(${1:UITextRange* range})"
    },
    {
      "trigger": "floatForKey:",
      "contents": "floatForKey(${1:NSString* defaultName})"
    },
    {
      "trigger": "fontWithSize:",
      "contents": "fontWithSize(${1:CGFloat fontSize})"
    },
    {
      "trigger": "formIntersectionWithCharacterSet:",
      "contents": "formIntersectionWithCharacterSet(${1:NSCharacterSet* otherSet})"
    },
    {
      "trigger": "formUnionWithCharacterSet:",
      "contents": "formUnionWithCharacterSet(${1:NSCharacterSet* otherSet})"
    },
    {
      "trigger": "forwardInvocation:",
      "contents": "forwardInvocation(${1:NSInvocation* anInvocation})"
    },
    {
      "trigger": "forwardInvocation:",
      "contents": "forwardInvocation(${1:NSInvocation* invocation})"
    },
    {
      "trigger": "forwardingTargetForSelector:",
      "contents": "forwardingTargetForSelector(${1:SEL aSelector})"
    },
    {
      "trigger": "friendRequestComposeViewControllerDidFinish:",
      "contents": "friendRequestComposeViewControllerDidFinish(${1:GKFriendRequestComposeViewController* viewController})"
    },
    {
      "trigger": "generateCGImagesAsynchronouslyForTimes:completionHandler:",
      "contents": "generateCGImagesAsynchronouslyForTimes(${1:NSArray* requestedTimes}, completionHandler:${2:AVAssetImageGeneratorCompletionHandler handler})"
    },
    {
      "trigger": "geocodeAddressDictionary:completionHandler:",
      "contents": "geocodeAddressDictionary(${1:NSDictionary* addressDictionary}, completionHandler:${2:CLGeocodeCompletionHandler completionHandler})"
    },
    {
      "trigger": "geocodeAddressString:completionHandler:",
      "contents": "geocodeAddressString(${1:NSString* addressString}, completionHandler:${2:CLGeocodeCompletionHandler completionHandler})"
    },
    {
      "trigger": "geocodeAddressString:inRegion:completionHandler:",
      "contents": "geocodeAddressString(${1:NSString* addressString}, inRegion:${2:CLRegion* region}, completionHandler:${3:CLGeocodeCompletionHandler completionHandler})"
    },
    {
      "trigger": "gestureRecognizer:shouldReceiveTouch:",
      "contents": "gestureRecognizer(${1:UIGestureRecognizer* gestureRecognizer}, shouldReceiveTouch:${2:UITouch* touch})"
    },
    {
      "trigger": "gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:",
      "contents": "gestureRecognizer(${1:UIGestureRecognizer* gestureRecognizer}, shouldRecognizeSimultaneouslyWithGestureRecognizer:${2:UIGestureRecognizer* otherGestureRecognizer})"
    },
    {
      "trigger": "gestureRecognizerShouldBegin:",
      "contents": "gestureRecognizerShouldBegin(${1:UIGestureRecognizer* gestureRecognizer})"
    },
    {
      "trigger": "getArgument:atIndex:",
      "contents": "getArgument(${1:void* argumentLocation}, atIndex:${2:NSInteger idx})"
    },
    {
      "trigger": "getArgumentTypeAtIndex:",
      "contents": "getArgumentTypeAtIndex(${1:NSUInteger idx})"
    },
    {
      "trigger": "getBuffer:length:",
      "contents": "getBuffer(${1:uint8_t** buffer}, length:${2:NSUInteger* len})"
    },
    {
      "trigger": "getBytes:",
      "contents": "getBytes(${1:void* buffer})"
    },
    {
      "trigger": "getBytes:fromOffset:length:error:",
      "contents": "getBytes(${1:uint8_t* buffer}, fromOffset:${2:long long offset}, length:${3:NSUInteger length}, error:${4:NSError** error})"
    },
    {
      "trigger": "getBytes:length:",
      "contents": "getBytes(${1:void* buffer}, length:${2:NSUInteger length})"
    },
    {
      "trigger": "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:",
      "contents": "getBytes(${1:void* buffer}, maxLength:${2:NSUInteger maxBufferCount}, usedLength:${3:NSUInteger* usedBufferCount}, encoding:${4:NSStringEncoding encoding}, options:${5:NSStringEncodingConversionOptions options}, range:${6:NSRange range}, remainingRange:${7:NSRangePointer leftover})"
    },
    {
      "trigger": "getBytes:range:",
      "contents": "getBytes(${1:void* buffer}, range:${2:NSRange range})"
    },
    {
      "trigger": "getCString:",
      "contents": "getCString(${1:char* bytes})"
    },
    {
      "trigger": "getCString:maxLength:",
      "contents": "getCString(${1:char* bytes}, maxLength:${2:NSUInteger maxLength})"
    },
    {
      "trigger": "getCString:maxLength:encoding:",
      "contents": "getCString(${1:char* buffer}, maxLength:${2:NSUInteger maxBufferCount}, encoding:${3:NSStringEncoding encoding})"
    },
    {
      "trigger": "getCString:maxLength:range:remainingRange:",
      "contents": "getCString(${1:char* bytes}, maxLength:${2:NSUInteger maxLength}, range:${3:NSRange aRange}, remainingRange:${4:NSRangePointer leftoverRange})"
    },
    {
      "trigger": "getCharacters:",
      "contents": "getCharacters(${1:unichar* buffer})"
    },
    {
      "trigger": "getCharacters:range:",
      "contents": "getCharacters(${1:unichar* buffer}, range:${2:NSRange aRange})"
    },
    {
      "trigger": "getControlPointAtIndex:values:",
      "contents": "getControlPointAtIndex(${1:size_t idx}, values:${2:float* ptr})"
    },
    {
      "trigger": "getCoordinates:range:",
      "contents": "getCoordinates(${1:CLLocationCoordinate2D* coords}, range:${2:NSRange range})"
    },
    {
      "trigger": "getDistanceFrom:",
      "contents": "getDistanceFrom(${1:CLLocation* location})"
    },
    {
      "trigger": "getFileSystemRepresentation:maxLength:",
      "contents": "getFileSystemRepresentation(${1:char* cname}, maxLength:${2:NSUInteger max})"
    },
    {
      "trigger": "getHue:saturation:brightness:alpha:",
      "contents": "getHue(${1:CGFloat* hue}, saturation:${2:CGFloat* saturation}, brightness:${3:CGFloat* brightness}, alpha:${4:CGFloat* alpha})"
    },
    {
      "trigger": "getIndexes:",
      "contents": "getIndexes(${1:NSUInteger* indexes})"
    },
    {
      "trigger": "getIndexes:maxCount:inIndexRange:",
      "contents": "getIndexes(${1:NSUInteger* indexBuffer}, maxCount:${2:NSUInteger bufferSize}, inIndexRange:${3:NSRangePointer range})"
    },
    {
      "trigger": "getInputStream:outputStream:",
      "contents": "getInputStream(${1:NSInputStream** inputStream}, outputStream:${2:NSOutputStream** outputStream})"
    },
    {
      "trigger": "getLineDash:count:phase:",
      "contents": "getLineDash(${1:CGFloat* pattern}, count:${2:NSInteger* count}, phase:${3:CGFloat* phase})"
    },
    {
      "trigger": "getLineStart:end:contentsEnd:forRange:",
      "contents": "getLineStart(${1:NSUInteger* startPtr}, end:${2:NSUInteger* lineEndPtr}, contentsEnd:${3:NSUInteger* contentsEndPtr}, forRange:${4:NSRange range})"
    },
    {
      "trigger": "getObjectValue:forString:errorDescription:",
      "contents": "getObjectValue(${1:id* obj}, forString:${2:NSString* string}, errorDescription:${3:NSString** error})"
    },
    {
      "trigger": "getObjectValue:forString:range:error:",
      "contents": "getObjectValue(${1:id* obj}, forString:${2:NSString* string}, range:${3:NSRange* rangep}, error:${4:NSError** error})"
    },
    {
      "trigger": "getObjects:",
      "contents": "getObjects(${1:id* objects})"
    },
    {
      "trigger": "getObjects:andKeys:",
      "contents": "getObjects(${1:id* objects}, andKeys:${2:id* keys})"
    },
    {
      "trigger": "getObjects:range:",
      "contents": "getObjects(${1:id* objects}, range:${2:NSRange range})"
    },
    {
      "trigger": "getOpacityRampForTime:startOpacity:endOpacity:timeRange:",
      "contents": "getOpacityRampForTime(${1:CMTime time}, startOpacity:${2:float* startOpacity}, endOpacity:${3:float* endOpacity}, timeRange:${4:CMTimeRange* timeRange})"
    },
    {
      "trigger": "getParagraphStart:end:contentsEnd:forRange:",
      "contents": "getParagraphStart(${1:NSUInteger* startPtr}, end:${2:NSUInteger* parEndPtr}, contentsEnd:${3:NSUInteger* contentsEndPtr}, forRange:${4:NSRange range})"
    },
    {
      "trigger": "getRed:green:blue:alpha:",
      "contents": "getRed(${1:CGFloat* red}, green:${2:CGFloat* green}, blue:${3:CGFloat* blue}, alpha:${4:CGFloat* alpha})"
    },
    {
      "trigger": "getResourceValue:forKey:error:",
      "contents": "getResourceValue(${1:id* value}, forKey:${2:NSString* key}, error:${3:NSError** error})"
    },
    {
      "trigger": "getReturnValue:",
      "contents": "getReturnValue(${1:void* retLoc})"
    },
    {
      "trigger": "getTransformRampForTime:startTransform:endTransform:timeRange:",
      "contents": "getTransformRampForTime(${1:CMTime time}, startTransform:${2:CGAffineTransform* startTransform}, endTransform:${3:CGAffineTransform* endTransform}, timeRange:${4:CMTimeRange* timeRange})"
    },
    {
      "trigger": "getValue:",
      "contents": "getValue(${1:void* value})"
    },
    {
      "trigger": "getVolumeRampForTime:startVolume:endVolume:timeRange:",
      "contents": "getVolumeRampForTime(${1:CMTime time}, startVolume:${2:float* startVolume}, endVolume:${3:float* endVolume}, timeRange:${4:CMTimeRange* timeRange})"
    },
    {
      "trigger": "getWhite:alpha:",
      "contents": "getWhite(${1:CGFloat* white}, alpha:${2:CGFloat* alpha})"
    },
    {
      "trigger": "glActiveShaderProgramEXT",
      "contents": "glActiveShaderProgramEXT(${1:GLuint pipeline}, ${2:GLuint program})"
    },
    {
      "trigger": "glActiveTexture",
      "contents": "glActiveTexture(${1:GLenum texture})"
    },
    {
      "trigger": "glAlphaFunc",
      "contents": "glAlphaFunc(${1:GLenum func}, ${2:GLclampf ref})"
    },
    {
      "trigger": "glAlphaFuncx",
      "contents": "glAlphaFuncx(${1:GLenum func}, ${2:GLclampx ref})"
    },
    {
      "trigger": "glAttachShader",
      "contents": "glAttachShader(${1:GLuint program}, ${2:GLuint shader})"
    },
    {
      "trigger": "glBeginQueryEXT",
      "contents": "glBeginQueryEXT(${1:GLenum target}, ${2:GLuint id})"
    },
    {
      "trigger": "glBindAttribLocation",
      "contents": "glBindAttribLocation(${1:GLuint program}, ${2:GLuint index}, ${3:GLchar* name})"
    },
    {
      "trigger": "glBindBuffer",
      "contents": "glBindBuffer(${1:GLenum target}, ${2:GLuint buffer})"
    },
    {
      "trigger": "glBindFramebuffer",
      "contents": "glBindFramebuffer(${1:GLenum target}, ${2:GLuint framebuffer})"
    },
    {
      "trigger": "glBindFramebufferOES",
      "contents": "glBindFramebufferOES(${1:GLenum target}, ${2:GLuint framebuffer})"
    },
    {
      "trigger": "glBindProgramPipelineEXT",
      "contents": "glBindProgramPipelineEXT(${1:GLuint pipeline})"
    },
    {
      "trigger": "glBindRenderbuffer",
      "contents": "glBindRenderbuffer(${1:GLenum target}, ${2:GLuint renderbuffer})"
    },
    {
      "trigger": "glBindRenderbufferOES",
      "contents": "glBindRenderbufferOES(${1:GLenum target}, ${2:GLuint renderbuffer})"
    },
    {
      "trigger": "glBindTexture",
      "contents": "glBindTexture(${1:GLenum target}, ${2:GLuint texture})"
    },
    {
      "trigger": "glBindVertexArrayOES",
      "contents": "glBindVertexArrayOES(${1:GLuint array})"
    },
    {
      "trigger": "glBlendColor",
      "contents": "glBlendColor(${1:GLclampf red}, ${2:GLclampf green}, ${3:GLclampf blue}, ${4:GLclampf alpha})"
    },
    {
      "trigger": "glBlendEquation",
      "contents": "glBlendEquation(${1:GLenum mode})"
    },
    {
      "trigger": "glBlendEquationOES",
      "contents": "glBlendEquationOES(${1:GLenum mode})"
    },
    {
      "trigger": "glBlendEquationSeparate",
      "contents": "glBlendEquationSeparate(${1:GLenum modeRGB}, ${2:GLenum modeAlpha})"
    },
    {
      "trigger": "glBlendEquationSeparateOES",
      "contents": "glBlendEquationSeparateOES(${1:GLenum modeRGB}, ${2:GLenum modeAlpha})"
    },
    {
      "trigger": "glBlendFunc",
      "contents": "glBlendFunc(${1:GLenum sfactor}, ${2:GLenum dfactor})"
    },
    {
      "trigger": "glBlendFuncSeparate",
      "contents": "glBlendFuncSeparate(${1:GLenum srcRGB}, ${2:GLenum dstRGB}, ${3:GLenum srcAlpha}, ${4:GLenum dstAlpha})"
    },
    {
      "trigger": "glBlendFuncSeparateOES",
      "contents": "glBlendFuncSeparateOES(${1:GLenum srcRGB}, ${2:GLenum dstRGB}, ${3:GLenum srcAlpha}, ${4:GLenum dstAlpha})"
    },
    {
      "trigger": "glBufferData",
      "contents": "glBufferData(${1:GLenum target}, ${2:GLsizeiptr size}, ${3:GLvoid* data}, ${4:GLenum usage})"
    },
    {
      "trigger": "glBufferSubData",
      "contents": "glBufferSubData(${1:GLenum target}, ${2:GLintptr offset}, ${3:GLsizeiptr size}, ${4:GLvoid* data})"
    },
    {
      "trigger": "glCheckFramebufferStatus",
      "contents": "glCheckFramebufferStatus(${1:GLenum target})"
    },
    {
      "trigger": "glCheckFramebufferStatusOES",
      "contents": "glCheckFramebufferStatusOES(${1:GLenum target})"
    },
    {
      "trigger": "glClear",
      "contents": "glClear(${1:GLbitfield mask})"
    },
    {
      "trigger": "glClearColor",
      "contents": "glClearColor(${1:GLclampf red}, ${2:GLclampf green}, ${3:GLclampf blue}, ${4:GLclampf alpha})"
    },
    {
      "trigger": "glClearColorx",
      "contents": "glClearColorx(${1:GLclampx red}, ${2:GLclampx green}, ${3:GLclampx blue}, ${4:GLclampx alpha})"
    },
    {
      "trigger": "glClearDepthf",
      "contents": "glClearDepthf(${1:GLclampf depth})"
    },
    {
      "trigger": "glClearDepthx",
      "contents": "glClearDepthx(${1:GLclampx depth})"
    },
    {
      "trigger": "glClearStencil",
      "contents": "glClearStencil(${1:GLint s})"
    },
    {
      "trigger": "glClientActiveTexture",
      "contents": "glClientActiveTexture(${1:GLenum texture})"
    },
    {
      "trigger": "glClipPlanef",
      "contents": "glClipPlanef(${1:GLenum plane}, ${2:GLfloat* equation})"
    },
    {
      "trigger": "glClipPlanex",
      "contents": "glClipPlanex(${1:GLenum plane}, ${2:GLfixed* equation})"
    },
    {
      "trigger": "glColor4f",
      "contents": "glColor4f(${1:GLfloat red}, ${2:GLfloat green}, ${3:GLfloat blue}, ${4:GLfloat alpha})"
    },
    {
      "trigger": "glColor4ub",
      "contents": "glColor4ub(${1:GLubyte red}, ${2:GLubyte green}, ${3:GLubyte blue}, ${4:GLubyte alpha})"
    },
    {
      "trigger": "glColor4x",
      "contents": "glColor4x(${1:GLfixed red}, ${2:GLfixed green}, ${3:GLfixed blue}, ${4:GLfixed alpha})"
    },
    {
      "trigger": "glColorMask",
      "contents": "glColorMask(${1:GLboolean red}, ${2:GLboolean green}, ${3:GLboolean blue}, ${4:GLboolean alpha})"
    },
    {
      "trigger": "glColorPointer",
      "contents": "glColorPointer(${1:GLint size}, ${2:GLenum type}, ${3:GLsizei stride}, ${4:GLvoid* pointer})"
    },
    {
      "trigger": "glCompileShader",
      "contents": "glCompileShader(${1:GLuint shader})"
    },
    {
      "trigger": "glCompressedTexImage2D",
      "contents": "glCompressedTexImage2D(${1:GLenum target}, ${2:GLint level}, ${3:GLenum internalformat}, ${4:GLsizei width}, ${5:GLsizei height}, ${6:GLint border}, ${7:GLsizei imageSize}, ${8:GLvoid* data})"
    },
    {
      "trigger": "glCompressedTexSubImage2D",
      "contents": "glCompressedTexSubImage2D(${1:GLenum target}, ${2:GLint level}, ${3:GLint xoffset}, ${4:GLint yoffset}, ${5:GLsizei width}, ${6:GLsizei height}, ${7:GLenum format}, ${8:GLsizei imageSize}, ${9:GLvoid* data})"
    },
    {
      "trigger": "glCopyTexImage2D",
      "contents": "glCopyTexImage2D(${1:GLenum target}, ${2:GLint level}, ${3:GLenum internalformat}, ${4:GLint x}, ${5:GLint y}, ${6:GLsizei width}, ${7:GLsizei height}, ${8:GLint border})"
    },
    {
      "trigger": "glCopyTexSubImage2D",
      "contents": "glCopyTexSubImage2D(${1:GLenum target}, ${2:GLint level}, ${3:GLint xoffset}, ${4:GLint yoffset}, ${5:GLint x}, ${6:GLint y}, ${7:GLsizei width}, ${8:GLsizei height})"
    },
    {
      "trigger": "glCreateShader",
      "contents": "glCreateShader(${1:GLenum type})"
    },
    {
      "trigger": "glCreateShaderProgramvEXT",
      "contents": "glCreateShaderProgramvEXT(${1:GLenum type}, ${2:GLsizei count}, ${3:GLchar** strings})"
    },
    {
      "trigger": "glCullFace",
      "contents": "glCullFace(${1:GLenum mode})"
    },
    {
      "trigger": "glCurrentPaletteMatrixOES",
      "contents": "glCurrentPaletteMatrixOES(${1:GLuint matrixpaletteindex})"
    },
    {
      "trigger": "glDeleteBuffers",
      "contents": "glDeleteBuffers(${1:GLsizei n}, ${2:GLuint* buffers})"
    },
    {
      "trigger": "glDeleteFramebuffers",
      "contents": "glDeleteFramebuffers(${1:GLsizei n}, ${2:GLuint* framebuffers})"
    },
    {
      "trigger": "glDeleteFramebuffersOES",
      "contents": "glDeleteFramebuffersOES(${1:GLsizei n}, ${2:GLuint* framebuffers})"
    },
    {
      "trigger": "glDeleteProgram",
      "contents": "glDeleteProgram(${1:GLuint program})"
    },
    {
      "trigger": "glDeleteProgramPipelinesEXT",
      "contents": "glDeleteProgramPipelinesEXT(${1:GLsizei n}, ${2:GLuint* pipelines})"
    },
    {
      "trigger": "glDeleteQueriesEXT",
      "contents": "glDeleteQueriesEXT(${1:GLsizei n}, ${2:GLuint* ids})"
    },
    {
      "trigger": "glDeleteRenderbuffers",
      "contents": "glDeleteRenderbuffers(${1:GLsizei n}, ${2:GLuint* renderbuffers})"
    },
    {
      "trigger": "glDeleteRenderbuffersOES",
      "contents": "glDeleteRenderbuffersOES(${1:GLsizei n}, ${2:GLuint* renderbuffers})"
    },
    {
      "trigger": "glDeleteShader",
      "contents": "glDeleteShader(${1:GLuint shader})"
    },
    {
      "trigger": "glDeleteTextures",
      "contents": "glDeleteTextures(${1:GLsizei n}, ${2:GLuint* textures})"
    },
    {
      "trigger": "glDeleteVertexArraysOES",
      "contents": "glDeleteVertexArraysOES(${1:GLsizei n}, ${2:GLuint* arrays})"
    },
    {
      "trigger": "glDepthFunc",
      "contents": "glDepthFunc(${1:GLenum func})"
    },
    {
      "trigger": "glDepthMask",
      "contents": "glDepthMask(${1:GLboolean flag})"
    },
    {
      "trigger": "glDepthRangef",
      "contents": "glDepthRangef(${1:GLclampf zNear}, ${2:GLclampf zFar})"
    },
    {
      "trigger": "glDepthRangex",
      "contents": "glDepthRangex(${1:GLclampx zNear}, ${2:GLclampx zFar})"
    },
    {
      "trigger": "glDetachShader",
      "contents": "glDetachShader(${1:GLuint program}, ${2:GLuint shader})"
    },
    {
      "trigger": "glDisable",
      "contents": "glDisable(${1:GLenum cap})"
    },
    {
      "trigger": "glDisableClientState",
      "contents": "glDisableClientState(${1:GLenum array})"
    },
    {
      "trigger": "glDisableVertexAttribArray",
      "contents": "glDisableVertexAttribArray(${1:GLuint index})"
    },
    {
      "trigger": "glDiscardFramebufferEXT",
      "contents": "glDiscardFramebufferEXT(${1:GLenum target}, ${2:GLsizei numAttachments}, ${3:GLenum* attachments})"
    },
    {
      "trigger": "glDrawArrays",
      "contents": "glDrawArrays(${1:GLenum mode}, ${2:GLint first}, ${3:GLsizei count})"
    },
    {
      "trigger": "glDrawElements",
      "contents": "glDrawElements(${1:GLenum mode}, ${2:GLsizei count}, ${3:GLenum type}, ${4:GLvoid* indices})"
    },
    {
      "trigger": "glDrawTexfOES",
      "contents": "glDrawTexfOES(${1:GLfloat x}, ${2:GLfloat y}, ${3:GLfloat z}, ${4:GLfloat width}, ${5:GLfloat height})"
    },
    {
      "trigger": "glDrawTexfvOES",
      "contents": "glDrawTexfvOES(${1:GLfloat* coords})"
    },
    {
      "trigger": "glDrawTexiOES",
      "contents": "glDrawTexiOES(${1:GLint x}, ${2:GLint y}, ${3:GLint z}, ${4:GLint width}, ${5:GLint height})"
    },
    {
      "trigger": "glDrawTexivOES",
      "contents": "glDrawTexivOES(${1:GLint* coords})"
    },
    {
      "trigger": "glDrawTexsOES",
      "contents": "glDrawTexsOES(${1:GLshort x}, ${2:GLshort y}, ${3:GLshort z}, ${4:GLshort width}, ${5:GLshort height})"
    },
    {
      "trigger": "glDrawTexsvOES",
      "contents": "glDrawTexsvOES(${1:GLshort* coords})"
    },
    {
      "trigger": "glDrawTexxOES",
      "contents": "glDrawTexxOES(${1:GLfixed x}, ${2:GLfixed y}, ${3:GLfixed z}, ${4:GLfixed width}, ${5:GLfixed height})"
    },
    {
      "trigger": "glDrawTexxvOES",
      "contents": "glDrawTexxvOES(${1:GLfixed* coords})"
    },
    {
      "trigger": "glEnable",
      "contents": "glEnable(${1:GLenum cap})"
    },
    {
      "trigger": "glEnableClientState",
      "contents": "glEnableClientState(${1:GLenum array})"
    },
    {
      "trigger": "glEnableVertexAttribArray",
      "contents": "glEnableVertexAttribArray(${1:GLuint index})"
    },
    {
      "trigger": "glEndQueryEXT",
      "contents": "glEndQueryEXT(${1:GLenum target})"
    },
    {
      "trigger": "glFogf",
      "contents": "glFogf(${1:GLenum pname}, ${2:GLfloat param})"
    },
    {
      "trigger": "glFogfv",
      "contents": "glFogfv(${1:GLenum pname}, ${2:GLfloat* params})"
    },
    {
      "trigger": "glFogx",
      "contents": "glFogx(${1:GLenum pname}, ${2:GLfixed param})"
    },
    {
      "trigger": "glFogxv",
      "contents": "glFogxv(${1:GLenum pname}, ${2:GLfixed* params})"
    },
    {
      "trigger": "glFramebufferRenderbuffer",
      "contents": "glFramebufferRenderbuffer(${1:GLenum target}, ${2:GLenum attachment}, ${3:GLenum renderbuffertarget}, ${4:GLuint renderbuffer})"
    },
    {
      "trigger": "glFramebufferRenderbufferOES",
      "contents": "glFramebufferRenderbufferOES(${1:GLenum target}, ${2:GLenum attachment}, ${3:GLenum renderbuffertarget}, ${4:GLuint renderbuffer})"
    },
    {
      "trigger": "glFramebufferTexture2D",
      "contents": "glFramebufferTexture2D(${1:GLenum target}, ${2:GLenum attachment}, ${3:GLenum textarget}, ${4:GLuint texture}, ${5:GLint level})"
    },
    {
      "trigger": "glFramebufferTexture2DOES",
      "contents": "glFramebufferTexture2DOES(${1:GLenum target}, ${2:GLenum attachment}, ${3:GLenum textarget}, ${4:GLuint texture}, ${5:GLint level})"
    },
    {
      "trigger": "glFrontFace",
      "contents": "glFrontFace(${1:GLenum mode})"
    },
    {
      "trigger": "glFrustumf",
      "contents": "glFrustumf(${1:GLfloat left}, ${2:GLfloat right}, ${3:GLfloat bottom}, ${4:GLfloat top}, ${5:GLfloat zNear}, ${6:GLfloat zFar})"
    },
    {
      "trigger": "glFrustumx",
      "contents": "glFrustumx(${1:GLfixed left}, ${2:GLfixed right}, ${3:GLfixed bottom}, ${4:GLfixed top}, ${5:GLfixed zNear}, ${6:GLfixed zFar})"
    },
    {
      "trigger": "glGenBuffers",
      "contents": "glGenBuffers(${1:GLsizei n}, ${2:GLuint* buffers})"
    },
    {
      "trigger": "glGenFramebuffers",
      "contents": "glGenFramebuffers(${1:GLsizei n}, ${2:GLuint* framebuffers})"
    },
    {
      "trigger": "glGenFramebuffersOES",
      "contents": "glGenFramebuffersOES(${1:GLsizei n}, ${2:GLuint* framebuffers})"
    },
    {
      "trigger": "glGenProgramPipelinesEXT",
      "contents": "glGenProgramPipelinesEXT(${1:GLsizei n}, ${2:GLuint* pipelines})"
    },
    {
      "trigger": "glGenQueriesEXT",
      "contents": "glGenQueriesEXT(${1:GLsizei n}, ${2:GLuint* ids})"
    },
    {
      "trigger": "glGenRenderbuffers",
      "contents": "glGenRenderbuffers(${1:GLsizei n}, ${2:GLuint* renderbuffers})"
    },
    {
      "trigger": "glGenRenderbuffersOES",
      "contents": "glGenRenderbuffersOES(${1:GLsizei n}, ${2:GLuint* renderbuffers})"
    },
    {
      "trigger": "glGenTextures",
      "contents": "glGenTextures(${1:GLsizei n}, ${2:GLuint* textures})"
    },
    {
      "trigger": "glGenVertexArraysOES",
      "contents": "glGenVertexArraysOES(${1:GLsizei n}, ${2:GLuint* arrays})"
    },
    {
      "trigger": "glGenerateMipmap",
      "contents": "glGenerateMipmap(${1:GLenum target})"
    },
    {
      "trigger": "glGenerateMipmapOES",
      "contents": "glGenerateMipmapOES(${1:GLenum target})"
    },
    {
      "trigger": "glGetActiveAttrib",
      "contents": "glGetActiveAttrib(${1:GLuint program}, ${2:GLuint index}, ${3:GLsizei bufsize}, ${4:GLsizei* length}, ${5:GLint* size}, ${6:GLenum* type}, ${7:GLchar* name})"
    },
    {
      "trigger": "glGetActiveUniform",
      "contents": "glGetActiveUniform(${1:GLuint program}, ${2:GLuint index}, ${3:GLsizei bufsize}, ${4:GLsizei* length}, ${5:GLint* size}, ${6:GLenum* type}, ${7:GLchar* name})"
    },
    {
      "trigger": "glGetAttachedShaders",
      "contents": "glGetAttachedShaders(${1:GLuint program}, ${2:GLsizei maxcount}, ${3:GLsizei* count}, ${4:GLuint* shaders})"
    },
    {
      "trigger": "glGetAttribLocation",
      "contents": "glGetAttribLocation(${1:GLuint program}, ${2:GLchar* name})"
    },
    {
      "trigger": "glGetBooleanv",
      "contents": "glGetBooleanv(${1:GLenum pname}, ${2:GLboolean* params})"
    },
    {
      "trigger": "glGetBufferParameteriv",
      "contents": "glGetBufferParameteriv(${1:GLenum target}, ${2:GLenum pname}, ${3:GLint* params})"
    },
    {
      "trigger": "glGetBufferPointervOES",
      "contents": "glGetBufferPointervOES(${1:GLenum target}, ${2:GLenum pname}, ${3:GLvoid** params})"
    },
    {
      "trigger": "glGetClipPlanef",
      "contents": "glGetClipPlanef(${1:GLenum pname}, ${2:GLfloat* equation})"
    },
    {
      "trigger": "glGetClipPlanex",
      "contents": "glGetClipPlanex(${1:GLenum pname}, ${2:GLfixed* eqn})"
    },
    {
      "trigger": "glGetFixedv",
      "contents": "glGetFixedv(${1:GLenum pname}, ${2:GLfixed* params})"
    },
    {
      "trigger": "glGetFloatv",
      "contents": "glGetFloatv(${1:GLenum pname}, ${2:GLfloat* params})"
    },
    {
      "trigger": "glGetFramebufferAttachmentParameteriv",
      "contents": "glGetFramebufferAttachmentParameteriv(${1:GLenum target}, ${2:GLenum attachment}, ${3:GLenum pname}, ${4:GLint* params})"
    },
    {
      "trigger": "glGetFramebufferAttachmentParameterivOES",
      "contents": "glGetFramebufferAttachmentParameterivOES(${1:GLenum target}, ${2:GLenum attachment}, ${3:GLenum pname}, ${4:GLint* params})"
    },
    {
      "trigger": "glGetIntegerv",
      "contents": "glGetIntegerv(${1:GLenum pname}, ${2:GLint* params})"
    },
    {
      "trigger": "glGetLightfv",
      "contents": "glGetLightfv(${1:GLenum light}, ${2:GLenum pname}, ${3:GLfloat* params})"
    },
    {
      "trigger": "glGetLightxv",
      "contents": "glGetLightxv(${1:GLenum light}, ${2:GLenum pname}, ${3:GLfixed* params})"
    },
    {
      "trigger": "glGetMaterialfv",
      "contents": "glGetMaterialfv(${1:GLenum face}, ${2:GLenum pname}, ${3:GLfloat* params})"
    },
    {
      "trigger": "glGetMaterialxv",
      "contents": "glGetMaterialxv(${1:GLenum face}, ${2:GLenum pname}, ${3:GLfixed* params})"
    },
    {
      "trigger": "glGetObjectLabelEXT",
      "contents": "glGetObjectLabelEXT(${1:GLenum type}, ${2:GLuint object}, ${3:GLsizei bufSize}, ${4:GLsizei* length}, ${5:GLchar* label})"
    },
    {
      "trigger": "glGetPointerv",
      "contents": "glGetPointerv(${1:GLenum pname}, ${2:void** params})"
    },
    {
      "trigger": "glGetProgramInfoLog",
      "contents": "glGetProgramInfoLog(${1:GLuint program}, ${2:GLsizei bufsize}, ${3:GLsizei* length}, ${4:GLchar* infolog})"
    },
    {
      "trigger": "glGetProgramPipelineInfoLogEXT",
      "contents": "glGetProgramPipelineInfoLogEXT(${1:GLuint pipeline}, ${2:GLsizei bufSize}, ${3:GLsizei* length}, ${4:GLchar* infoLog})"
    },
    {
      "trigger": "glGetProgramPipelineivEXT",
      "contents": "glGetProgramPipelineivEXT(${1:GLuint pipeline}, ${2:GLenum pname}, ${3:GLint* params})"
    },
    {
      "trigger": "glGetProgramiv",
      "contents": "glGetProgramiv(${1:GLuint program}, ${2:GLenum pname}, ${3:GLint* params})"
    },
    {
      "trigger": "glGetQueryObjectivEXT",
      "contents": "glGetQueryObjectivEXT(${1:GLuint id}, ${2:GLenum pname}, ${3:GLint* params})"
    },
    {
      "trigger": "glGetQueryObjectuivEXT",
      "contents": "glGetQueryObjectuivEXT(${1:GLuint id}, ${2:GLenum pname}, ${3:GLuint* params})"
    },
    {
      "trigger": "glGetQueryivEXT",
      "contents": "glGetQueryivEXT(${1:GLenum target}, ${2:GLenum pname}, ${3:GLint* params})"
    },
    {
      "trigger": "glGetRenderbufferParameteriv",
      "contents": "glGetRenderbufferParameteriv(${1:GLenum target}, ${2:GLenum pname}, ${3:GLint* params})"
    },
    {
      "trigger": "glGetRenderbufferParameterivOES",
      "contents": "glGetRenderbufferParameterivOES(${1:GLenum target}, ${2:GLenum pname}, ${3:GLint* params})"
    },
    {
      "trigger": "glGetShaderInfoLog",
      "contents": "glGetShaderInfoLog(${1:GLuint shader}, ${2:GLsizei bufsize}, ${3:GLsizei* length}, ${4:GLchar* infolog})"
    },
    {
      "trigger": "glGetShaderPrecisionFormat",
      "contents": "glGetShaderPrecisionFormat(${1:GLenum shadertype}, ${2:GLenum precisiontype}, ${3:GLint* range}, ${4:GLint* precision})"
    },
    {
      "trigger": "glGetShaderSource",
      "contents": "glGetShaderSource(${1:GLuint shader}, ${2:GLsizei bufsize}, ${3:GLsizei* length}, ${4:GLchar* source})"
    },
    {
      "trigger": "glGetShaderiv",
      "contents": "glGetShaderiv(${1:GLuint shader}, ${2:GLenum pname}, ${3:GLint* params})"
    },
    {
      "trigger": "glGetString",
      "contents": "glGetString(${1:GLenum name})"
    },
    {
      "trigger": "glGetTexEnvfv",
      "contents": "glGetTexEnvfv(${1:GLenum env}, ${2:GLenum pname}, ${3:GLfloat* params})"
    },
    {
      "trigger": "glGetTexEnviv",
      "contents": "glGetTexEnviv(${1:GLenum env}, ${2:GLenum pname}, ${3:GLint* params})"
    },
    {
      "trigger": "glGetTexEnvxv",
      "contents": "glGetTexEnvxv(${1:GLenum env}, ${2:GLenum pname}, ${3:GLfixed* params})"
    },
    {
      "trigger": "glGetTexParameterfv",
      "contents": "glGetTexParameterfv(${1:GLenum target}, ${2:GLenum pname}, ${3:GLfloat* params})"
    },
    {
      "trigger": "glGetTexParameteriv",
      "contents": "glGetTexParameteriv(${1:GLenum target}, ${2:GLenum pname}, ${3:GLint* params})"
    },
    {
      "trigger": "glGetTexParameterxv",
      "contents": "glGetTexParameterxv(${1:GLenum target}, ${2:GLenum pname}, ${3:GLfixed* params})"
    },
    {
      "trigger": "glGetUniformLocation",
      "contents": "glGetUniformLocation(${1:GLuint program}, ${2:GLchar* name})"
    },
    {
      "trigger": "glGetUniformfv",
      "contents": "glGetUniformfv(${1:GLuint program}, ${2:GLint location}, ${3:GLfloat* params})"
    },
    {
      "trigger": "glGetUniformiv",
      "contents": "glGetUniformiv(${1:GLuint program}, ${2:GLint location}, ${3:GLint* params})"
    },
    {
      "trigger": "glGetVertexAttribPointerv",
      "contents": "glGetVertexAttribPointerv(${1:GLuint index}, ${2:GLenum pname}, ${3:GLvoid** pointer})"
    },
    {
      "trigger": "glGetVertexAttribfv",
      "contents": "glGetVertexAttribfv(${1:GLuint index}, ${2:GLenum pname}, ${3:GLfloat* params})"
    },
    {
      "trigger": "glGetVertexAttribiv",
      "contents": "glGetVertexAttribiv(${1:GLuint index}, ${2:GLenum pname}, ${3:GLint* params})"
    },
    {
      "trigger": "glHint",
      "contents": "glHint(${1:GLenum target}, ${2:GLenum mode})"
    },
    {
      "trigger": "glInsertEventMarkerEXT",
      "contents": "glInsertEventMarkerEXT(${1:GLsizei length}, ${2:GLchar* marker})"
    },
    {
      "trigger": "glIsBuffer",
      "contents": "glIsBuffer(${1:GLuint buffer})"
    },
    {
      "trigger": "glIsEnabled",
      "contents": "glIsEnabled(${1:GLenum cap})"
    },
    {
      "trigger": "glIsFramebuffer",
      "contents": "glIsFramebuffer(${1:GLuint framebuffer})"
    },
    {
      "trigger": "glIsFramebufferOES",
      "contents": "glIsFramebufferOES(${1:GLuint framebuffer})"
    },
    {
      "trigger": "glIsProgram",
      "contents": "glIsProgram(${1:GLuint program})"
    },
    {
      "trigger": "glIsProgramPipelineEXT",
      "contents": "glIsProgramPipelineEXT(${1:GLuint pipeline})"
    },
    {
      "trigger": "glIsQueryEXT",
      "contents": "glIsQueryEXT(${1:GLuint id})"
    },
    {
      "trigger": "glIsRenderbuffer",
      "contents": "glIsRenderbuffer(${1:GLuint renderbuffer})"
    },
    {
      "trigger": "glIsRenderbufferOES",
      "contents": "glIsRenderbufferOES(${1:GLuint renderbuffer})"
    },
    {
      "trigger": "glIsShader",
      "contents": "glIsShader(${1:GLuint shader})"
    },
    {
      "trigger": "glIsTexture",
      "contents": "glIsTexture(${1:GLuint texture})"
    },
    {
      "trigger": "glIsVertexArrayOES",
      "contents": "glIsVertexArrayOES(${1:GLuint array})"
    },
    {
      "trigger": "glLabelObjectEXT",
      "contents": "glLabelObjectEXT(${1:GLenum type}, ${2:GLuint object}, ${3:GLsizei length}, ${4:GLchar* label})"
    },
    {
      "trigger": "glLightModelf",
      "contents": "glLightModelf(${1:GLenum pname}, ${2:GLfloat param})"
    },
    {
      "trigger": "glLightModelfv",
      "contents": "glLightModelfv(${1:GLenum pname}, ${2:GLfloat* params})"
    },
    {
      "trigger": "glLightModelx",
      "contents": "glLightModelx(${1:GLenum pname}, ${2:GLfixed param})"
    },
    {
      "trigger": "glLightModelxv",
      "contents": "glLightModelxv(${1:GLenum pname}, ${2:GLfixed* params})"
    },
    {
      "trigger": "glLightf",
      "contents": "glLightf(${1:GLenum light}, ${2:GLenum pname}, ${3:GLfloat param})"
    },
    {
      "trigger": "glLightfv",
      "contents": "glLightfv(${1:GLenum light}, ${2:GLenum pname}, ${3:GLfloat* params})"
    },
    {
      "trigger": "glLightx",
      "contents": "glLightx(${1:GLenum light}, ${2:GLenum pname}, ${3:GLfixed param})"
    },
    {
      "trigger": "glLightxv",
      "contents": "glLightxv(${1:GLenum light}, ${2:GLenum pname}, ${3:GLfixed* params})"
    },
    {
      "trigger": "glLineWidth",
      "contents": "glLineWidth(${1:GLfloat width})"
    },
    {
      "trigger": "glLineWidthx",
      "contents": "glLineWidthx(${1:GLfixed width})"
    },
    {
      "trigger": "glLinkProgram",
      "contents": "glLinkProgram(${1:GLuint program})"
    },
    {
      "trigger": "glLoadMatrixf",
      "contents": "glLoadMatrixf(${1:GLfloat* m})"
    },
    {
      "trigger": "glLoadMatrixx",
      "contents": "glLoadMatrixx(${1:GLfixed* m})"
    },
    {
      "trigger": "glLogicOp",
      "contents": "glLogicOp(${1:GLenum opcode})"
    },
    {
      "trigger": "glMapBufferOES",
      "contents": "glMapBufferOES(${1:GLenum target}, ${2:GLenum access})"
    },
    {
      "trigger": "glMaterialf",
      "contents": "glMaterialf(${1:GLenum face}, ${2:GLenum pname}, ${3:GLfloat param})"
    },
    {
      "trigger": "glMaterialfv",
      "contents": "glMaterialfv(${1:GLenum face}, ${2:GLenum pname}, ${3:GLfloat* params})"
    },
    {
      "trigger": "glMaterialx",
      "contents": "glMaterialx(${1:GLenum face}, ${2:GLenum pname}, ${3:GLfixed param})"
    },
    {
      "trigger": "glMaterialxv",
      "contents": "glMaterialxv(${1:GLenum face}, ${2:GLenum pname}, ${3:GLfixed* params})"
    },
    {
      "trigger": "glMatrixIndexPointerOES",
      "contents": "glMatrixIndexPointerOES(${1:GLint size}, ${2:GLenum type}, ${3:GLsizei stride}, ${4:GLvoid* pointer})"
    },
    {
      "trigger": "glMatrixMode",
      "contents": "glMatrixMode(${1:GLenum mode})"
    },
    {
      "trigger": "glMultMatrixf",
      "contents": "glMultMatrixf(${1:GLfloat* m})"
    },
    {
      "trigger": "glMultMatrixx",
      "contents": "glMultMatrixx(${1:GLfixed* m})"
    },
    {
      "trigger": "glMultiTexCoord4f",
      "contents": "glMultiTexCoord4f(${1:GLenum target}, ${2:GLfloat s}, ${3:GLfloat t}, ${4:GLfloat r}, ${5:GLfloat q})"
    },
    {
      "trigger": "glMultiTexCoord4x",
      "contents": "glMultiTexCoord4x(${1:GLenum target}, ${2:GLfixed s}, ${3:GLfixed t}, ${4:GLfixed r}, ${5:GLfixed q})"
    },
    {
      "trigger": "glNormal3f",
      "contents": "glNormal3f(${1:GLfloat nx}, ${2:GLfloat ny}, ${3:GLfloat nz})"
    },
    {
      "trigger": "glNormal3x",
      "contents": "glNormal3x(${1:GLfixed nx}, ${2:GLfixed ny}, ${3:GLfixed nz})"
    },
    {
      "trigger": "glNormalPointer",
      "contents": "glNormalPointer(${1:GLenum type}, ${2:GLsizei stride}, ${3:GLvoid* pointer})"
    },
    {
      "trigger": "glOrthof",
      "contents": "glOrthof(${1:GLfloat left}, ${2:GLfloat right}, ${3:GLfloat bottom}, ${4:GLfloat top}, ${5:GLfloat zNear}, ${6:GLfloat zFar})"
    },
    {
      "trigger": "glOrthox",
      "contents": "glOrthox(${1:GLfixed left}, ${2:GLfixed right}, ${3:GLfixed bottom}, ${4:GLfixed top}, ${5:GLfixed zNear}, ${6:GLfixed zFar})"
    },
    {
      "trigger": "glPixelStorei",
      "contents": "glPixelStorei(${1:GLenum pname}, ${2:GLint param})"
    },
    {
      "trigger": "glPointParameterf",
      "contents": "glPointParameterf(${1:GLenum pname}, ${2:GLfloat param})"
    },
    {
      "trigger": "glPointParameterfv",
      "contents": "glPointParameterfv(${1:GLenum pname}, ${2:GLfloat* params})"
    },
    {
      "trigger": "glPointParameterx",
      "contents": "glPointParameterx(${1:GLenum pname}, ${2:GLfixed param})"
    },
    {
      "trigger": "glPointParameterxv",
      "contents": "glPointParameterxv(${1:GLenum pname}, ${2:GLfixed* params})"
    },
    {
      "trigger": "glPointSize",
      "contents": "glPointSize(${1:GLfloat size})"
    },
    {
      "trigger": "glPointSizePointerOES",
      "contents": "glPointSizePointerOES(${1:GLenum type}, ${2:GLsizei stride}, ${3:GLvoid* pointer})"
    },
    {
      "trigger": "glPointSizex",
      "contents": "glPointSizex(${1:GLfixed size})"
    },
    {
      "trigger": "glPolygonOffset",
      "contents": "glPolygonOffset(${1:GLfloat factor}, ${2:GLfloat units})"
    },
    {
      "trigger": "glPolygonOffsetx",
      "contents": "glPolygonOffsetx(${1:GLfixed factor}, ${2:GLfixed units})"
    },
    {
      "trigger": "glProgramParameteriEXT",
      "contents": "glProgramParameteriEXT(${1:GLuint program}, ${2:GLenum pname}, ${3:GLint value})"
    },
    {
      "trigger": "glProgramUniform1fEXT",
      "contents": "glProgramUniform1fEXT(${1:GLuint program}, ${2:GLint location}, ${3:GLfloat x})"
    },
    {
      "trigger": "glProgramUniform1fvEXT",
      "contents": "glProgramUniform1fvEXT(${1:GLuint program}, ${2:GLint location}, ${3:GLsizei count}, ${4:GLfloat* value})"
    },
    {
      "trigger": "glProgramUniform1iEXT",
      "contents": "glProgramUniform1iEXT(${1:GLuint program}, ${2:GLint location}, ${3:GLint x})"
    },
    {
      "trigger": "glProgramUniform1ivEXT",
      "contents": "glProgramUniform1ivEXT(${1:GLuint program}, ${2:GLint location}, ${3:GLsizei count}, ${4:GLint* value})"
    },
    {
      "trigger": "glProgramUniform2fEXT",
      "contents": "glProgramUniform2fEXT(${1:GLuint program}, ${2:GLint location}, ${3:GLfloat x}, ${4:GLfloat y})"
    },
    {
      "trigger": "glProgramUniform2fvEXT",
      "contents": "glProgramUniform2fvEXT(${1:GLuint program}, ${2:GLint location}, ${3:GLsizei count}, ${4:GLfloat* value})"
    },
    {
      "trigger": "glProgramUniform2iEXT",
      "contents": "glProgramUniform2iEXT(${1:GLuint program}, ${2:GLint location}, ${3:GLint x}, ${4:GLint y})"
    },
    {
      "trigger": "glProgramUniform2ivEXT",
      "contents": "glProgramUniform2ivEXT(${1:GLuint program}, ${2:GLint location}, ${3:GLsizei count}, ${4:GLint* value})"
    },
    {
      "trigger": "glProgramUniform3fEXT",
      "contents": "glProgramUniform3fEXT(${1:GLuint program}, ${2:GLint location}, ${3:GLfloat x}, ${4:GLfloat y}, ${5:GLfloat z})"
    },
    {
      "trigger": "glProgramUniform3fvEXT",
      "contents": "glProgramUniform3fvEXT(${1:GLuint program}, ${2:GLint location}, ${3:GLsizei count}, ${4:GLfloat* value})"
    },
    {
      "trigger": "glProgramUniform3iEXT",
      "contents": "glProgramUniform3iEXT(${1:GLuint program}, ${2:GLint location}, ${3:GLint x}, ${4:GLint y}, ${5:GLint z})"
    },
    {
      "trigger": "glProgramUniform3ivEXT",
      "contents": "glProgramUniform3ivEXT(${1:GLuint program}, ${2:GLint location}, ${3:GLsizei count}, ${4:GLint* value})"
    },
    {
      "trigger": "glProgramUniform4fEXT",
      "contents": "glProgramUniform4fEXT(${1:GLuint program}, ${2:GLint location}, ${3:GLfloat x}, ${4:GLfloat y}, ${5:GLfloat z}, ${6:GLfloat w})"
    },
    {
      "trigger": "glProgramUniform4fvEXT",
      "contents": "glProgramUniform4fvEXT(${1:GLuint program}, ${2:GLint location}, ${3:GLsizei count}, ${4:GLfloat* value})"
    },
    {
      "trigger": "glProgramUniform4iEXT",
      "contents": "glProgramUniform4iEXT(${1:GLuint program}, ${2:GLint location}, ${3:GLint x}, ${4:GLint y}, ${5:GLint z}, ${6:GLint w})"
    },
    {
      "trigger": "glProgramUniform4ivEXT",
      "contents": "glProgramUniform4ivEXT(${1:GLuint program}, ${2:GLint location}, ${3:GLsizei count}, ${4:GLint* value})"
    },
    {
      "trigger": "glProgramUniformMatrix2fvEXT",
      "contents": "glProgramUniformMatrix2fvEXT(${1:GLuint program}, ${2:GLint location}, ${3:GLsizei count}, ${4:GLboolean transpose}, ${5:GLfloat* value})"
    },
    {
      "trigger": "glProgramUniformMatrix3fvEXT",
      "contents": "glProgramUniformMatrix3fvEXT(${1:GLuint program}, ${2:GLint location}, ${3:GLsizei count}, ${4:GLboolean transpose}, ${5:GLfloat* value})"
    },
    {
      "trigger": "glProgramUniformMatrix4fvEXT",
      "contents": "glProgramUniformMatrix4fvEXT(${1:GLuint program}, ${2:GLint location}, ${3:GLsizei count}, ${4:GLboolean transpose}, ${5:GLfloat* value})"
    },
    {
      "trigger": "glPushGroupMarkerEXT",
      "contents": "glPushGroupMarkerEXT(${1:GLsizei length}, ${2:GLchar* marker})"
    },
    {
      "trigger": "glReadPixels",
      "contents": "glReadPixels(${1:GLint x}, ${2:GLint y}, ${3:GLsizei width}, ${4:GLsizei height}, ${5:GLenum format}, ${6:GLenum type}, ${7:GLvoid* pixels})"
    },
    {
      "trigger": "glRenderbufferStorage",
      "contents": "glRenderbufferStorage(${1:GLenum target}, ${2:GLenum internalformat}, ${3:GLsizei width}, ${4:GLsizei height})"
    },
    {
      "trigger": "glRenderbufferStorageMultisampleAPPLE",
      "contents": "glRenderbufferStorageMultisampleAPPLE(${1:GLenum target}, ${2:GLsizei samples}, ${3:GLenum internalformat}, ${4:GLsizei width}, ${5:GLsizei height})"
    },
    {
      "trigger": "glRenderbufferStorageOES",
      "contents": "glRenderbufferStorageOES(${1:GLenum target}, ${2:GLenum internalformat}, ${3:GLsizei width}, ${4:GLsizei height})"
    },
    {
      "trigger": "glRotatef",
      "contents": "glRotatef(${1:GLfloat angle}, ${2:GLfloat x}, ${3:GLfloat y}, ${4:GLfloat z})"
    },
    {
      "trigger": "glRotatex",
      "contents": "glRotatex(${1:GLfixed angle}, ${2:GLfixed x}, ${3:GLfixed y}, ${4:GLfixed z})"
    },
    {
      "trigger": "glSampleCoverage",
      "contents": "glSampleCoverage(${1:GLclampf value}, ${2:GLboolean invert})"
    },
    {
      "trigger": "glSampleCoveragex",
      "contents": "glSampleCoveragex(${1:GLclampx value}, ${2:GLboolean invert})"
    },
    {
      "trigger": "glScalef",
      "contents": "glScalef(${1:GLfloat x}, ${2:GLfloat y}, ${3:GLfloat z})"
    },
    {
      "trigger": "glScalex",
      "contents": "glScalex(${1:GLfixed x}, ${2:GLfixed y}, ${3:GLfixed z})"
    },
    {
      "trigger": "glScissor",
      "contents": "glScissor(${1:GLint x}, ${2:GLint y}, ${3:GLsizei width}, ${4:GLsizei height})"
    },
    {
      "trigger": "glShadeModel",
      "contents": "glShadeModel(${1:GLenum mode})"
    },
    {
      "trigger": "glShaderBinary",
      "contents": "glShaderBinary(${1:GLsizei n}, ${2:GLuint* shaders}, ${3:GLenum binaryformat}, ${4:GLvoid* binary}, ${5:GLsizei length})"
    },
    {
      "trigger": "glShaderSource",
      "contents": "glShaderSource(${1:GLuint shader}, ${2:GLsizei count}, ${3:GLchar** string}, ${4:GLint* length})"
    },
    {
      "trigger": "glStencilFunc",
      "contents": "glStencilFunc(${1:GLenum func}, ${2:GLint ref}, ${3:GLuint mask})"
    },
    {
      "trigger": "glStencilFuncSeparate",
      "contents": "glStencilFuncSeparate(${1:GLenum face}, ${2:GLenum func}, ${3:GLint ref}, ${4:GLuint mask})"
    },
    {
      "trigger": "glStencilMask",
      "contents": "glStencilMask(${1:GLuint mask})"
    },
    {
      "trigger": "glStencilMaskSeparate",
      "contents": "glStencilMaskSeparate(${1:GLenum face}, ${2:GLuint mask})"
    },
    {
      "trigger": "glStencilOp",
      "contents": "glStencilOp(${1:GLenum fail}, ${2:GLenum zfail}, ${3:GLenum zpass})"
    },
    {
      "trigger": "glStencilOpSeparate",
      "contents": "glStencilOpSeparate(${1:GLenum face}, ${2:GLenum fail}, ${3:GLenum zfail}, ${4:GLenum zpass})"
    },
    {
      "trigger": "glTexCoordPointer",
      "contents": "glTexCoordPointer(${1:GLint size}, ${2:GLenum type}, ${3:GLsizei stride}, ${4:GLvoid* pointer})"
    },
    {
      "trigger": "glTexEnvf",
      "contents": "glTexEnvf(${1:GLenum target}, ${2:GLenum pname}, ${3:GLfloat param})"
    },
    {
      "trigger": "glTexEnvfv",
      "contents": "glTexEnvfv(${1:GLenum target}, ${2:GLenum pname}, ${3:GLfloat* params})"
    },
    {
      "trigger": "glTexEnvi",
      "contents": "glTexEnvi(${1:GLenum target}, ${2:GLenum pname}, ${3:GLint param})"
    },
    {
      "trigger": "glTexEnviv",
      "contents": "glTexEnviv(${1:GLenum target}, ${2:GLenum pname}, ${3:GLint* params})"
    },
    {
      "trigger": "glTexEnvx",
      "contents": "glTexEnvx(${1:GLenum target}, ${2:GLenum pname}, ${3:GLfixed param})"
    },
    {
      "trigger": "glTexEnvxv",
      "contents": "glTexEnvxv(${1:GLenum target}, ${2:GLenum pname}, ${3:GLfixed* params})"
    },
    {
      "trigger": "glTexImage2D",
      "contents": "glTexImage2D(${1:GLenum target}, ${2:GLint level}, ${3:GLint internalformat}, ${4:GLsizei width}, ${5:GLsizei height}, ${6:GLint border}, ${7:GLenum format}, ${8:GLenum type}, ${9:GLvoid* pixels})"
    },
    {
      "trigger": "glTexParameterf",
      "contents": "glTexParameterf(${1:GLenum target}, ${2:GLenum pname}, ${3:GLfloat param})"
    },
    {
      "trigger": "glTexParameterfv",
      "contents": "glTexParameterfv(${1:GLenum target}, ${2:GLenum pname}, ${3:GLfloat* params})"
    },
    {
      "trigger": "glTexParameteri",
      "contents": "glTexParameteri(${1:GLenum target}, ${2:GLenum pname}, ${3:GLint param})"
    },
    {
      "trigger": "glTexParameteriv",
      "contents": "glTexParameteriv(${1:GLenum target}, ${2:GLenum pname}, ${3:GLint* params})"
    },
    {
      "trigger": "glTexParameterx",
      "contents": "glTexParameterx(${1:GLenum target}, ${2:GLenum pname}, ${3:GLfixed param})"
    },
    {
      "trigger": "glTexParameterxv",
      "contents": "glTexParameterxv(${1:GLenum target}, ${2:GLenum pname}, ${3:GLfixed* params})"
    },
    {
      "trigger": "glTexSubImage2D",
      "contents": "glTexSubImage2D(${1:GLenum target}, ${2:GLint level}, ${3:GLint xoffset}, ${4:GLint yoffset}, ${5:GLsizei width}, ${6:GLsizei height}, ${7:GLenum format}, ${8:GLenum type}, ${9:GLvoid* pixels})"
    },
    {
      "trigger": "glTranslatef",
      "contents": "glTranslatef(${1:GLfloat x}, ${2:GLfloat y}, ${3:GLfloat z})"
    },
    {
      "trigger": "glTranslatex",
      "contents": "glTranslatex(${1:GLfixed x}, ${2:GLfixed y}, ${3:GLfixed z})"
    },
    {
      "trigger": "glUniform1f",
      "contents": "glUniform1f(${1:GLint location}, ${2:GLfloat x})"
    },
    {
      "trigger": "glUniform1fv",
      "contents": "glUniform1fv(${1:GLint location}, ${2:GLsizei count}, ${3:GLfloat* v})"
    },
    {
      "trigger": "glUniform1i",
      "contents": "glUniform1i(${1:GLint location}, ${2:GLint x})"
    },
    {
      "trigger": "glUniform1iv",
      "contents": "glUniform1iv(${1:GLint location}, ${2:GLsizei count}, ${3:GLint* v})"
    },
    {
      "trigger": "glUniform2f",
      "contents": "glUniform2f(${1:GLint location}, ${2:GLfloat x}, ${3:GLfloat y})"
    },
    {
      "trigger": "glUniform2fv",
      "contents": "glUniform2fv(${1:GLint location}, ${2:GLsizei count}, ${3:GLfloat* v})"
    },
    {
      "trigger": "glUniform2i",
      "contents": "glUniform2i(${1:GLint location}, ${2:GLint x}, ${3:GLint y})"
    },
    {
      "trigger": "glUniform2iv",
      "contents": "glUniform2iv(${1:GLint location}, ${2:GLsizei count}, ${3:GLint* v})"
    },
    {
      "trigger": "glUniform3f",
      "contents": "glUniform3f(${1:GLint location}, ${2:GLfloat x}, ${3:GLfloat y}, ${4:GLfloat z})"
    },
    {
      "trigger": "glUniform3fv",
      "contents": "glUniform3fv(${1:GLint location}, ${2:GLsizei count}, ${3:GLfloat* v})"
    },
    {
      "trigger": "glUniform3i",
      "contents": "glUniform3i(${1:GLint location}, ${2:GLint x}, ${3:GLint y}, ${4:GLint z})"
    },
    {
      "trigger": "glUniform3iv",
      "contents": "glUniform3iv(${1:GLint location}, ${2:GLsizei count}, ${3:GLint* v})"
    },
    {
      "trigger": "glUniform4f",
      "contents": "glUniform4f(${1:GLint location}, ${2:GLfloat x}, ${3:GLfloat y}, ${4:GLfloat z}, ${5:GLfloat w})"
    },
    {
      "trigger": "glUniform4fv",
      "contents": "glUniform4fv(${1:GLint location}, ${2:GLsizei count}, ${3:GLfloat* v})"
    },
    {
      "trigger": "glUniform4i",
      "contents": "glUniform4i(${1:GLint location}, ${2:GLint x}, ${3:GLint y}, ${4:GLint z}, ${5:GLint w})"
    },
    {
      "trigger": "glUniform4iv",
      "contents": "glUniform4iv(${1:GLint location}, ${2:GLsizei count}, ${3:GLint* v})"
    },
    {
      "trigger": "glUniformMatrix2fv",
      "contents": "glUniformMatrix2fv(${1:GLint location}, ${2:GLsizei count}, ${3:GLboolean transpose}, ${4:GLfloat* value})"
    },
    {
      "trigger": "glUniformMatrix3fv",
      "contents": "glUniformMatrix3fv(${1:GLint location}, ${2:GLsizei count}, ${3:GLboolean transpose}, ${4:GLfloat* value})"
    },
    {
      "trigger": "glUniformMatrix4fv",
      "contents": "glUniformMatrix4fv(${1:GLint location}, ${2:GLsizei count}, ${3:GLboolean transpose}, ${4:GLfloat* value})"
    },
    {
      "trigger": "glUnmapBufferOES",
      "contents": "glUnmapBufferOES(${1:GLenum target})"
    },
    {
      "trigger": "glUseProgram",
      "contents": "glUseProgram(${1:GLuint program})"
    },
    {
      "trigger": "glUseProgramStagesEXT",
      "contents": "glUseProgramStagesEXT(${1:GLuint pipeline}, ${2:GLbitfield stages}, ${3:GLuint program})"
    },
    {
      "trigger": "glValidateProgram",
      "contents": "glValidateProgram(${1:GLuint program})"
    },
    {
      "trigger": "glValidateProgramPipelineEXT",
      "contents": "glValidateProgramPipelineEXT(${1:GLuint pipeline})"
    },
    {
      "trigger": "glVertexAttrib1f",
      "contents": "glVertexAttrib1f(${1:GLuint indx}, ${2:GLfloat x})"
    },
    {
      "trigger": "glVertexAttrib1fv",
      "contents": "glVertexAttrib1fv(${1:GLuint indx}, ${2:GLfloat* values})"
    },
    {
      "trigger": "glVertexAttrib2f",
      "contents": "glVertexAttrib2f(${1:GLuint indx}, ${2:GLfloat x}, ${3:GLfloat y})"
    },
    {
      "trigger": "glVertexAttrib2fv",
      "contents": "glVertexAttrib2fv(${1:GLuint indx}, ${2:GLfloat* values})"
    },
    {
      "trigger": "glVertexAttrib3f",
      "contents": "glVertexAttrib3f(${1:GLuint indx}, ${2:GLfloat x}, ${3:GLfloat y}, ${4:GLfloat z})"
    },
    {
      "trigger": "glVertexAttrib3fv",
      "contents": "glVertexAttrib3fv(${1:GLuint indx}, ${2:GLfloat* values})"
    },
    {
      "trigger": "glVertexAttrib4f",
      "contents": "glVertexAttrib4f(${1:GLuint indx}, ${2:GLfloat x}, ${3:GLfloat y}, ${4:GLfloat z}, ${5:GLfloat w})"
    },
    {
      "trigger": "glVertexAttrib4fv",
      "contents": "glVertexAttrib4fv(${1:GLuint indx}, ${2:GLfloat* values})"
    },
    {
      "trigger": "glVertexAttribPointer",
      "contents": "glVertexAttribPointer(${1:GLuint indx}, ${2:GLint size}, ${3:GLenum type}, ${4:GLboolean normalized}, ${5:GLsizei stride}, ${6:GLvoid* ptr})"
    },
    {
      "trigger": "glVertexPointer",
      "contents": "glVertexPointer(${1:GLint size}, ${2:GLenum type}, ${3:GLsizei stride}, ${4:GLvoid* pointer})"
    },
    {
      "trigger": "glViewport",
      "contents": "glViewport(${1:GLint x}, ${2:GLint y}, ${3:GLsizei width}, ${4:GLsizei height})"
    },
    {
      "trigger": "glWeightPointerOES",
      "contents": "glWeightPointerOES(${1:GLint size}, ${2:GLenum type}, ${3:GLsizei stride}, ${4:GLvoid* pointer})"
    },
    {
      "trigger": "glkView:drawInRect:",
      "contents": "glkView(${1:GLKView* view}, drawInRect:${2:CGRect rect})"
    },
    {
      "trigger": "glkViewController:willPause:",
      "contents": "glkViewController(${1:GLKViewController* controller}, willPause:${2:BOOL pause})"
    },
    {
      "trigger": "glkViewControllerUpdate:",
      "contents": "glkViewControllerUpdate(${1:GLKViewController* controller})"
    },
    {
      "trigger": "groupForURL:resultBlock:failureBlock:",
      "contents": "groupForURL(${1:NSURL* groupURL}, resultBlock:${2:ALAssetsLibraryGroupResultBlock resultBlock}, failureBlock:${3:ALAssetsLibraryAccessFailureBlock failureBlock})"
    },
    {
      "trigger": "guessesForWordRange:inString:language:",
      "contents": "guessesForWordRange(${1:NSRange range}, inString:${2:NSString* string}, language:${3:NSString* language})"
    },
    {
      "trigger": "handleError:userInteractionPermitted:",
      "contents": "handleError(${1:NSError* error}, userInteractionPermitted:${2:BOOL userInteractionPermitted})"
    },
    {
      "trigger": "handleFailureInFunction:file:lineNumber:description:",
      "contents": "handleFailureInFunction(${1:NSString* functionName}, file:${2:NSString* fileName}, lineNumber:${3:NSInteger line}, description:${4:NSString* format})"
    },
    {
      "trigger": "handleFailureInMethod:object:file:lineNumber:description:",
      "contents": "handleFailureInMethod(${1:SEL selector}, object:${2:id object}, file:${3:NSString* fileName}, lineNumber:${4:NSInteger line}, description:${5:NSString* format})"
    },
    {
      "trigger": "handleInviteFromGameCenter:",
      "contents": "handleInviteFromGameCenter(${1:NSArray* playersToInvite})"
    },
    {
      "trigger": "handleMachMessage:",
      "contents": "handleMachMessage(${1:void* msg})"
    },
    {
      "trigger": "handleMatchEnded:",
      "contents": "handleMatchEnded(${1:GKTurnBasedMatch* match})"
    },
    {
      "trigger": "handlePortMessage:",
      "contents": "handlePortMessage(${1:NSPortMessage* message})"
    },
    {
      "trigger": "handleTurnEventForMatch:",
      "contents": "handleTurnEventForMatch(${1:GKTurnBasedMatch* match})"
    },
    {
      "trigger": "hasFaultForRelationshipNamed:",
      "contents": "hasFaultForRelationshipNamed(${1:NSString* key})"
    },
    {
      "trigger": "hasMediaCharacteristic:",
      "contents": "hasMediaCharacteristic(${1:NSString* mediaCharacteristic})"
    },
    {
      "trigger": "hasMediaType:",
      "contents": "hasMediaType(${1:NSString* mediaType})"
    },
    {
      "trigger": "hasMemberInPlane:",
      "contents": "hasMemberInPlane(${1:uint8_t thePlane})"
    },
    {
      "trigger": "hasPrefix:",
      "contents": "hasPrefix(${1:NSString* aString})"
    },
    {
      "trigger": "hasSameAddressAs:",
      "contents": "hasSameAddressAs(${1:MIDINetworkHost* other})"
    },
    {
      "trigger": "hasSuffix:",
      "contents": "hasSuffix(${1:NSString* aString})"
    },
    {
      "trigger": "hitTest:",
      "contents": "hitTest(${1:CGPoint p})"
    },
    {
      "trigger": "hitTest:withEvent:",
      "contents": "hitTest(${1:CGPoint point}, withEvent:${2:UIEvent* event})"
    },
    {
      "trigger": "ignoreTouch:forEvent:",
      "contents": "ignoreTouch(${1:UITouch* touch}, forEvent:${2:UIEvent* event})"
    },
    {
      "trigger": "ignoreWord:",
      "contents": "ignoreWord(${1:NSString* wordToIgnore})"
    },
    {
      "trigger": "imageByApplyingTransform:",
      "contents": "imageByApplyingTransform(${1:CGAffineTransform matrix})"
    },
    {
      "trigger": "imageByCroppingToRect:",
      "contents": "imageByCroppingToRect(${1:CGRect r})"
    },
    {
      "trigger": "imageForSearchBarIcon:state:",
      "contents": "imageForSearchBarIcon(${1:UISearchBarIcon icon}, state:${2:UIControlState state})"
    },
    {
      "trigger": "imageForSegmentAtIndex:",
      "contents": "imageForSegmentAtIndex(${1:NSUInteger segment})"
    },
    {
      "trigger": "imageForState:",
      "contents": "imageForState(${1:UIControlState state})"
    },
    {
      "trigger": "imagePickerController:didFinishPickingImage:editingInfo:",
      "contents": "imagePickerController(${1:UIImagePickerController* picker}, didFinishPickingImage:${2:UIImage* image}, editingInfo:${3:NSDictionary* editingInfo})"
    },
    {
      "trigger": "imagePickerController:didFinishPickingMediaWithInfo:",
      "contents": "imagePickerController(${1:UIImagePickerController* picker}, didFinishPickingMediaWithInfo:${2:NSDictionary* info})"
    },
    {
      "trigger": "imagePickerControllerDidCancel:",
      "contents": "imagePickerControllerDidCancel(${1:UIImagePickerController* picker})"
    },
    {
      "trigger": "imageRectForContentRect:",
      "contents": "imageRectForContentRect(${1:CGRect contentRect})"
    },
    {
      "trigger": "imageWithSize:",
      "contents": "imageWithSize(${1:CGSize size})"
    },
    {
      "trigger": "increaseLengthBy:",
      "contents": "increaseLengthBy(${1:NSUInteger extraLength})"
    },
    {
      "trigger": "indexAtPosition:",
      "contents": "indexAtPosition(${1:NSUInteger position})"
    },
    {
      "trigger": "indexGreaterThanIndex:",
      "contents": "indexGreaterThanIndex(${1:NSUInteger value})"
    },
    {
      "trigger": "indexGreaterThanOrEqualToIndex:",
      "contents": "indexGreaterThanOrEqualToIndex(${1:NSUInteger value})"
    },
    {
      "trigger": "indexInRange:options:passingTest:",
      "contents": "indexInRange(${1:NSRange range}, options:${2:NSEnumerationOptions opts}, passingTest:${3:BOOL (^)(NSUInteger, BOOL *) predicate})"
    },
    {
      "trigger": "indexLessThanIndex:",
      "contents": "indexLessThanIndex(${1:NSUInteger value})"
    },
    {
      "trigger": "indexLessThanOrEqualToIndex:",
      "contents": "indexLessThanOrEqualToIndex(${1:NSUInteger value})"
    },
    {
      "trigger": "indexOfAccessibilityElement:",
      "contents": "indexOfAccessibilityElement(${1:id element})"
    },
    {
      "trigger": "indexOfObject:",
      "contents": "indexOfObject(${1:id anObject})"
    },
    {
      "trigger": "indexOfObject:",
      "contents": "indexOfObject(${1:id object})"
    },
    {
      "trigger": "indexOfObject:inRange:",
      "contents": "indexOfObject(${1:id anObject}, inRange:${2:NSRange range})"
    },
    {
      "trigger": "indexOfObject:inSortedRange:options:usingComparator:",
      "contents": "indexOfObject(${1:id object}, inSortedRange:${2:NSRange range}, options:${3:NSBinarySearchingOptions opts}, usingComparator:${4:NSComparator cmp})"
    },
    {
      "trigger": "indexOfObject:inSortedRange:options:usingComparator:",
      "contents": "indexOfObject(${1:id obj}, inSortedRange:${2:NSRange r}, options:${3:NSBinarySearchingOptions opts}, usingComparator:${4:NSComparator cmp})"
    },
    {
      "trigger": "indexOfObjectAtIndexes:options:passingTest:",
      "contents": "indexOfObjectAtIndexes(${1:NSIndexSet* s}, options:${2:NSEnumerationOptions opts}, passingTest:${3:BOOL (^)(id, NSUInteger, BOOL *) predicate})"
    },
    {
      "trigger": "indexOfObjectIdenticalTo:",
      "contents": "indexOfObjectIdenticalTo(${1:id anObject})"
    },
    {
      "trigger": "indexOfObjectIdenticalTo:inRange:",
      "contents": "indexOfObjectIdenticalTo(${1:id anObject}, inRange:${2:NSRange range})"
    },
    {
      "trigger": "indexOfObjectPassingTest:",
      "contents": "indexOfObjectPassingTest(${1:BOOL (^)(id, NSUInteger, BOOL *) predicate})"
    },
    {
      "trigger": "indexOfObjectWithOptions:passingTest:",
      "contents": "indexOfObjectWithOptions(${1:NSEnumerationOptions opts}, passingTest:${2:BOOL (^)(id, NSUInteger, BOOL *) predicate})"
    },
    {
      "trigger": "indexOfResult:",
      "contents": "indexOfResult(${1:id result})"
    },
    {
      "trigger": "indexPassingTest:",
      "contents": "indexPassingTest(${1:BOOL (^)(NSUInteger, BOOL *) predicate})"
    },
    {
      "trigger": "indexPathByAddingIndex:",
      "contents": "indexPathByAddingIndex(${1:NSUInteger index})"
    },
    {
      "trigger": "indexPathForCell:",
      "contents": "indexPathForCell(${1:UITableViewCell* cell})"
    },
    {
      "trigger": "indexPathForObject:",
      "contents": "indexPathForObject(${1:id object})"
    },
    {
      "trigger": "indexPathForRowAtPoint:",
      "contents": "indexPathForRowAtPoint(${1:CGPoint point})"
    },
    {
      "trigger": "indexPathsForRowsInRect:",
      "contents": "indexPathsForRowsInRect(${1:CGRect rect})"
    },
    {
      "trigger": "indexWithOptions:passingTest:",
      "contents": "indexWithOptions(${1:NSEnumerationOptions opts}, passingTest:${2:BOOL (^)(NSUInteger, BOOL *) predicate})"
    },
    {
      "trigger": "indexesInRange:options:passingTest:",
      "contents": "indexesInRange(${1:NSRange range}, options:${2:NSEnumerationOptions opts}, passingTest:${3:BOOL (^)(NSUInteger, BOOL *) predicate})"
    },
    {
      "trigger": "indexesOfObjectsAtIndexes:options:passingTest:",
      "contents": "indexesOfObjectsAtIndexes(${1:NSIndexSet* s}, options:${2:NSEnumerationOptions opts}, passingTest:${3:BOOL (^)(id, NSUInteger, BOOL *) predicate})"
    },
    {
      "trigger": "indexesOfObjectsPassingTest:",
      "contents": "indexesOfObjectsPassingTest(${1:BOOL (^)(id, NSUInteger, BOOL *) predicate})"
    },
    {
      "trigger": "indexesOfObjectsWithOptions:passingTest:",
      "contents": "indexesOfObjectsWithOptions(${1:NSEnumerationOptions opts}, passingTest:${2:BOOL (^)(id, NSUInteger, BOOL *) predicate})"
    },
    {
      "trigger": "indexesPassingTest:",
      "contents": "indexesPassingTest(${1:BOOL (^)(NSUInteger, BOOL *) predicate})"
    },
    {
      "trigger": "indexesWithOptions:passingTest:",
      "contents": "indexesWithOptions(${1:NSEnumerationOptions opts}, passingTest:${2:BOOL (^)(NSUInteger, BOOL *) predicate})"
    },
    {
      "trigger": "initByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:",
      "contents": "initByResolvingBookmarkData(${1:NSData* bookmarkData}, options:${2:NSURLBookmarkResolutionOptions options}, relativeToURL:${3:NSURL* relativeURL}, bookmarkDataIsStale:${4:BOOL* isStale}, error:${5:NSError** error})"
    },
    {
      "trigger": "initCircularRegionWithCenter:radius:identifier:",
      "contents": "initCircularRegionWithCenter(${1:CLLocationCoordinate2D center}, radius:${2:CLLocationDistance radius}, identifier:${3:NSString* identifier})"
    },
    {
      "trigger": "initDirectoryWithFileWrappers:",
      "contents": "initDirectoryWithFileWrappers(${1:NSDictionary* childrenByPreferredName})"
    },
    {
      "trigger": "initFileURLWithPath:",
      "contents": "initFileURLWithPath(${1:NSString* path})"
    },
    {
      "trigger": "initFileURLWithPath:isDirectory:",
      "contents": "initFileURLWithPath(${1:NSString* path}, isDirectory:${2:BOOL isDir})"
    },
    {
      "trigger": "initForReadingWithData:",
      "contents": "initForReadingWithData(${1:NSData* data})"
    },
    {
      "trigger": "initForWritingWithMutableData:",
      "contents": "initForWritingWithMutableData(${1:NSMutableData* data})"
    },
    {
      "trigger": "initRecurrenceWithFrequency:interval:daysOfTheWeek:daysOfTheMonth:monthsOfTheYear:weeksOfTheYear:daysOfTheYear:setPositions:end:",
      "contents": "initRecurrenceWithFrequency(${1:EKRecurrenceFrequency type}, interval:${2:NSInteger interval}, daysOfTheWeek:${3:NSArray* days}, daysOfTheMonth:${4:NSArray* monthDays}, monthsOfTheYear:${5:NSArray* months}, weeksOfTheYear:${6:NSArray* weeksOfTheYear}, daysOfTheYear:${7:NSArray* daysOfTheYear}, setPositions:${8:NSArray* setPositions}, end:${9:EKRecurrenceEnd* end})"
    },
    {
      "trigger": "initRecurrenceWithFrequency:interval:end:",
      "contents": "initRecurrenceWithFrequency(${1:EKRecurrenceFrequency type}, interval:${2:NSInteger interval}, end:${3:EKRecurrenceEnd* end})"
    },
    {
      "trigger": "initRegularFileWithContents:",
      "contents": "initRegularFileWithContents(${1:NSData* contents})"
    },
    {
      "trigger": "initRemoteWithProtocolFamily:socketType:protocol:address:",
      "contents": "initRemoteWithProtocolFamily(${1:int family}, socketType:${2:int type}, protocol:${3:int protocol}, address:${4:NSData* address})"
    },
    {
      "trigger": "initRemoteWithTCPPort:host:",
      "contents": "initRemoteWithTCPPort(${1:unsigned short port}, host:${2:NSString* hostName})"
    },
    {
      "trigger": "initSymbolicLinkWithDestinationURL:",
      "contents": "initSymbolicLinkWithDestinationURL(${1:NSURL* url})"
    },
    {
      "trigger": "initToBuffer:capacity:",
      "contents": "initToBuffer(${1:uint8_t* buffer}, capacity:${2:NSUInteger capacity})"
    },
    {
      "trigger": "initToFileAtPath:append:",
      "contents": "initToFileAtPath(${1:NSString* path}, append:${2:BOOL shouldAppend})"
    },
    {
      "trigger": "initWithAPI:",
      "contents": "initWithAPI(${1:EAGLRenderingAPI api})"
    },
    {
      "trigger": "initWithAPI:sharegroup:",
      "contents": "initWithAPI(${1:EAGLRenderingAPI api}, sharegroup:${2:EAGLSharegroup* sharegroup})"
    },
    {
      "trigger": "initWithAccessibilityContainer:",
      "contents": "initWithAccessibilityContainer(${1:id container})"
    },
    {
      "trigger": "initWithAccessory:forProtocol:",
      "contents": "initWithAccessory(${1:EAAccessory* accessory}, forProtocol:${2:NSString* protocolString})"
    },
    {
      "trigger": "initWithAccountType:",
      "contents": "initWithAccountType(${1:ACAccountType* type})"
    },
    {
      "trigger": "initWithActivityIndicatorStyle:",
      "contents": "initWithActivityIndicatorStyle(${1:UIActivityIndicatorViewStyle style})"
    },
    {
      "trigger": "initWithAnnotation:reuseIdentifier:",
      "contents": "initWithAnnotation(${1:id annotation}, reuseIdentifier:${2:NSString* reuseIdentifier})"
    },
    {
      "trigger": "initWithArray:",
      "contents": "initWithArray(${1:NSArray* array})"
    },
    {
      "trigger": "initWithArray:copyItems:",
      "contents": "initWithArray(${1:NSArray* array}, copyItems:${2:BOOL flag})"
    },
    {
      "trigger": "initWithArray:copyItems:",
      "contents": "initWithArray(${1:NSArray* set}, copyItems:${2:BOOL flag})"
    },
    {
      "trigger": "initWithArray:range:copyItems:",
      "contents": "initWithArray(${1:NSArray* set}, range:${2:NSRange range}, copyItems:${3:BOOL flag})"
    },
    {
      "trigger": "initWithAsset:",
      "contents": "initWithAsset(${1:AVAsset* asset})"
    },
    {
      "trigger": "initWithAsset:error:",
      "contents": "initWithAsset(${1:AVAsset* asset}, error:${2:NSError** outError})"
    },
    {
      "trigger": "initWithAsset:presetName:",
      "contents": "initWithAsset(${1:AVAsset* asset}, presetName:${2:NSString* presetName})"
    },
    {
      "trigger": "initWithAssetWriterInput:sourcePixelBufferAttributes:",
      "contents": "initWithAssetWriterInput(${1:AVAssetWriterInput* input}, sourcePixelBufferAttributes:${2:NSDictionary* sourcePixelBufferAttributes})"
    },
    {
      "trigger": "initWithAttributedString:",
      "contents": "initWithAttributedString(${1:NSAttributedString* attrStr})"
    },
    {
      "trigger": "initWithAudioTracks:audioSettings:",
      "contents": "initWithAudioTracks(${1:NSArray* audioTracks}, audioSettings:${2:NSDictionary* audioSettings})"
    },
    {
      "trigger": "initWithAuthenticationChallenge:sender:",
      "contents": "initWithAuthenticationChallenge(${1:NSURLAuthenticationChallenge* challenge}, sender:${2:id sender})"
    },
    {
      "trigger": "initWithBarButtonSystemItem:target:action:",
      "contents": "initWithBarButtonSystemItem(${1:UIBarButtonSystemItem systemItem}, target:${2:id target}, action:${3:SEL action})"
    },
    {
      "trigger": "initWithBitmapData:bytesPerRow:size:format:colorSpace:",
      "contents": "initWithBitmapData(${1:NSData* d}, bytesPerRow:${2:size_t bpr}, size:${3:CGSize size}, format:${4:CIFormat f}, colorSpace:${5:CGColorSpaceRef c})"
    },
    {
      "trigger": "initWithBool:",
      "contents": "initWithBool(${1:BOOL value})"
    },
    {
      "trigger": "initWithBytes:length:",
      "contents": "initWithBytes(${1:void* bytes}, length:${2:NSUInteger length})"
    },
    {
      "trigger": "initWithBytes:length:encoding:",
      "contents": "initWithBytes(${1:void* bytes}, length:${2:NSUInteger len}, encoding:${3:NSStringEncoding encoding})"
    },
    {
      "trigger": "initWithBytes:objCType:",
      "contents": "initWithBytes(${1:void* value}, objCType:${2:char* type})"
    },
    {
      "trigger": "initWithBytesNoCopy:length:",
      "contents": "initWithBytesNoCopy(${1:void* bytes}, length:${2:NSUInteger length})"
    },
    {
      "trigger": "initWithBytesNoCopy:length:encoding:freeWhenDone:",
      "contents": "initWithBytesNoCopy(${1:void* bytes}, length:${2:NSUInteger len}, encoding:${3:NSStringEncoding encoding}, freeWhenDone:${4:BOOL freeBuffer})"
    },
    {
      "trigger": "initWithBytesNoCopy:length:freeWhenDone:",
      "contents": "initWithBytesNoCopy(${1:void* bytes}, length:${2:NSUInteger length}, freeWhenDone:${3:BOOL b})"
    },
    {
      "trigger": "initWithCGAffineTransform:",
      "contents": "initWithCGAffineTransform(${1:CGAffineTransform r})"
    },
    {
      "trigger": "initWithCGColor:",
      "contents": "initWithCGColor(${1:CGColorRef cgColor})"
    },
    {
      "trigger": "initWithCGColor:",
      "contents": "initWithCGColor(${1:CGColorRef c})"
    },
    {
      "trigger": "initWithCGImage:",
      "contents": "initWithCGImage(${1:CGImageRef cgImage})"
    },
    {
      "trigger": "initWithCGImage:",
      "contents": "initWithCGImage(${1:CGImageRef image})"
    },
    {
      "trigger": "initWithCGImage:options:",
      "contents": "initWithCGImage(${1:CGImageRef image}, options:${2:NSDictionary* d})"
    },
    {
      "trigger": "initWithCGImage:scale:orientation:",
      "contents": "initWithCGImage(${1:CGImageRef cgImage}, scale:${2:CGFloat scale}, orientation:${3:UIImageOrientation orientation})"
    },
    {
      "trigger": "initWithCGPoint:",
      "contents": "initWithCGPoint(${1:CGPoint p})"
    },
    {
      "trigger": "initWithCGRect:",
      "contents": "initWithCGRect(${1:CGRect r})"
    },
    {
      "trigger": "initWithCIColor:",
      "contents": "initWithCIColor(${1:CIColor* ciColor})"
    },
    {
      "trigger": "initWithCIImage:",
      "contents": "initWithCIImage(${1:CIImage* ciImage})"
    },
    {
      "trigger": "initWithCString:",
      "contents": "initWithCString(${1:char* bytes})"
    },
    {
      "trigger": "initWithCString:encoding:",
      "contents": "initWithCString(${1:char* nullTerminatedCString}, encoding:${2:NSStringEncoding encoding})"
    },
    {
      "trigger": "initWithCString:length:",
      "contents": "initWithCString(${1:char* bytes}, length:${2:NSUInteger length})"
    },
    {
      "trigger": "initWithCStringNoCopy:length:freeWhenDone:",
      "contents": "initWithCStringNoCopy(${1:char* bytes}, length:${2:NSUInteger length}, freeWhenDone:${3:BOOL freeBuffer})"
    },
    {
      "trigger": "initWithCVPixelBuffer:",
      "contents": "initWithCVPixelBuffer(${1:CVPixelBufferRef buffer})"
    },
    {
      "trigger": "initWithCVPixelBuffer:options:",
      "contents": "initWithCVPixelBuffer(${1:CVPixelBufferRef buffer}, options:${2:NSDictionary* dict})"
    },
    {
      "trigger": "initWithCalendarIdentifier:",
      "contents": "initWithCalendarIdentifier(${1:NSString* ident})"
    },
    {
      "trigger": "initWithCapacity:",
      "contents": "initWithCapacity(${1:NSUInteger capacity})"
    },
    {
      "trigger": "initWithCapacity:",
      "contents": "initWithCapacity(${1:NSUInteger numItems})"
    },
    {
      "trigger": "initWithCategory:",
      "contents": "initWithCategory(${1:NSString* category})"
    },
    {
      "trigger": "initWithChar:",
      "contents": "initWithChar(${1:char value})"
    },
    {
      "trigger": "initWithCharacters:length:",
      "contents": "initWithCharacters(${1:unichar* characters}, length:${2:NSUInteger length})"
    },
    {
      "trigger": "initWithCharactersNoCopy:length:freeWhenDone:",
      "contents": "initWithCharactersNoCopy(${1:unichar* characters}, length:${2:NSUInteger length}, freeWhenDone:${3:BOOL freeBuffer})"
    },
    {
      "trigger": "initWithCircle:",
      "contents": "initWithCircle(${1:MKCircle* circle})"
    },
    {
      "trigger": "initWithCoder:",
      "contents": "initWithCoder(${1:NSCoder* aDecoder})"
    },
    {
      "trigger": "initWithColor:",
      "contents": "initWithColor(${1:CIColor* color})"
    },
    {
      "trigger": "initWithColor:",
      "contents": "initWithColor(${1:UIColor* color})"
    },
    {
      "trigger": "initWithConcurrencyType:",
      "contents": "initWithConcurrencyType(${1:NSManagedObjectContextConcurrencyType ct})"
    },
    {
      "trigger": "initWithCondition:",
      "contents": "initWithCondition(${1:NSInteger condition})"
    },
    {
      "trigger": "initWithContentURL:",
      "contents": "initWithContentURL(${1:NSURL* contentURL})"
    },
    {
      "trigger": "initWithContentURL:",
      "contents": "initWithContentURL(${1:NSURL* url})"
    },
    {
      "trigger": "initWithContentViewController:",
      "contents": "initWithContentViewController(${1:UIViewController* viewController})"
    },
    {
      "trigger": "initWithContentsOfFile:",
      "contents": "initWithContentsOfFile(${1:NSString* path})"
    },
    {
      "trigger": "initWithContentsOfFile:encoding:error:",
      "contents": "initWithContentsOfFile(${1:NSString* path}, encoding:${2:NSStringEncoding enc}, error:${3:NSError** error})"
    },
    {
      "trigger": "initWithContentsOfFile:options:error:",
      "contents": "initWithContentsOfFile(${1:NSString* path}, options:${2:NSDataReadingOptions readOptionsMask}, error:${3:NSError** errorPtr})"
    },
    {
      "trigger": "initWithContentsOfFile:usedEncoding:error:",
      "contents": "initWithContentsOfFile(${1:NSString* path}, usedEncoding:${2:NSStringEncoding* enc}, error:${3:NSError** error})"
    },
    {
      "trigger": "initWithContentsOfMappedFile:",
      "contents": "initWithContentsOfMappedFile(${1:NSString* path})"
    },
    {
      "trigger": "initWithContentsOfURL:",
      "contents": "initWithContentsOfURL(${1:NSURL* url})"
    },
    {
      "trigger": "initWithContentsOfURL:encoding:error:",
      "contents": "initWithContentsOfURL(${1:NSURL* url}, encoding:${2:NSStringEncoding enc}, error:${3:NSError** error})"
    },
    {
      "trigger": "initWithContentsOfURL:error:",
      "contents": "initWithContentsOfURL(${1:NSURL* url}, error:${2:NSError** outError})"
    },
    {
      "trigger": "initWithContentsOfURL:options:",
      "contents": "initWithContentsOfURL(${1:NSURL* url}, options:${2:NSDictionary* d})"
    },
    {
      "trigger": "initWithContentsOfURL:options:error:",
      "contents": "initWithContentsOfURL(${1:NSURL* url}, options:${2:NSDataReadingOptions readOptionsMask}, error:${3:NSError** errorPtr})"
    },
    {
      "trigger": "initWithContentsOfURL:usedEncoding:error:",
      "contents": "initWithContentsOfURL(${1:NSURL* url}, usedEncoding:${2:NSStringEncoding* enc}, error:${3:NSError** error})"
    },
    {
      "trigger": "initWithControlPoints::::",
      "contents": "initWithControlPoints(${1:float c1x}, ${2:float c1y}, ${3:float c2x}, ${4:float c2y})"
    },
    {
      "trigger": "initWithCoordinate:",
      "contents": "initWithCoordinate(${1:CLLocationCoordinate2D coordinate})"
    },
    {
      "trigger": "initWithCoordinate:addressDictionary:",
      "contents": "initWithCoordinate(${1:CLLocationCoordinate2D coordinate}, addressDictionary:${2:NSDictionary* addressDictionary})"
    },
    {
      "trigger": "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:speed:timestamp:",
      "contents": "initWithCoordinate(${1:CLLocationCoordinate2D coordinate}, altitude:${2:CLLocationDistance altitude}, horizontalAccuracy:${3:CLLocationAccuracy hAccuracy}, verticalAccuracy:${4:CLLocationAccuracy vAccuracy}, course:${5:CLLocationDirection course}, speed:${6:CLLocationSpeed speed}, timestamp:${7:NSDate* timestamp})"
    },
    {
      "trigger": "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:timestamp:",
      "contents": "initWithCoordinate(${1:CLLocationCoordinate2D coordinate}, altitude:${2:CLLocationDistance altitude}, horizontalAccuracy:${3:CLLocationAccuracy hAccuracy}, verticalAccuracy:${4:CLLocationAccuracy vAccuracy}, timestamp:${5:NSDate* timestamp})"
    },
    {
      "trigger": "initWithCustomView:",
      "contents": "initWithCustomView(${1:UIView* customView})"
    },
    {
      "trigger": "initWithData:",
      "contents": "initWithData(${1:NSData* data})"
    },
    {
      "trigger": "initWithData:encoding:",
      "contents": "initWithData(${1:NSData* data}, encoding:${2:NSStringEncoding encoding})"
    },
    {
      "trigger": "initWithData:error:",
      "contents": "initWithData(${1:NSData* data}, error:${2:NSError** outError})"
    },
    {
      "trigger": "initWithData:options:",
      "contents": "initWithData(${1:NSData* data}, options:${2:NSDictionary* d})"
    },
    {
      "trigger": "initWithDayOfTheWeek:weekNumber:",
      "contents": "initWithDayOfTheWeek(${1:NSInteger dayOfTheWeek}, weekNumber:${2:NSInteger weekNumber})"
    },
    {
      "trigger": "initWithDecimal:",
      "contents": "initWithDecimal(${1:NSDecimal dcm})"
    },
    {
      "trigger": "initWithDelegate:queue:",
      "contents": "initWithDelegate(${1:id delegate}, queue:${2:dispatch_queue_t queue})"
    },
    {
      "trigger": "initWithDevice:error:",
      "contents": "initWithDevice(${1:AVCaptureDevice* device}, error:${2:NSError** outError})"
    },
    {
      "trigger": "initWithDictionary:",
      "contents": "initWithDictionary(${1:NSDictionary* otherDictionary})"
    },
    {
      "trigger": "initWithDictionary:copyItems:",
      "contents": "initWithDictionary(${1:NSDictionary* otherDictionary}, copyItems:${2:BOOL flag})"
    },
    {
      "trigger": "initWithDomain:code:userInfo:",
      "contents": "initWithDomain(${1:NSString* domain}, code:${2:NSInteger code}, userInfo:${3:NSDictionary* dict})"
    },
    {
      "trigger": "initWithDomain:type:name:",
      "contents": "initWithDomain(${1:NSString* domain}, type:${2:NSString* type}, name:${3:NSString* name})"
    },
    {
      "trigger": "initWithDomain:type:name:port:",
      "contents": "initWithDomain(${1:NSString* domain}, type:${2:NSString* type}, name:${3:NSString* name}, port:${4:int port})"
    },
    {
      "trigger": "initWithDominantScript:languageMap:",
      "contents": "initWithDominantScript(${1:NSString* script}, languageMap:${2:NSDictionary* map})"
    },
    {
      "trigger": "initWithDouble:",
      "contents": "initWithDouble(${1:double value})"
    },
    {
      "trigger": "initWithEntity:insertIntoManagedObjectContext:",
      "contents": "initWithEntity(${1:NSEntityDescription* entity}, insertIntoManagedObjectContext:${2:NSManagedObjectContext* context})"
    },
    {
      "trigger": "initWithEntityName:",
      "contents": "initWithEntityName(${1:NSString* entityName})"
    },
    {
      "trigger": "initWithExpressionType:",
      "contents": "initWithExpressionType(${1:NSExpressionType type})"
    },
    {
      "trigger": "initWithFetchRequest:managedObjectContext:sectionNameKeyPath:cacheName:",
      "contents": "initWithFetchRequest(${1:NSFetchRequest* fetchRequest}, managedObjectContext:${2:NSManagedObjectContext* context}, sectionNameKeyPath:${3:NSString* sectionNameKeyPath}, cacheName:${4:NSString* name})"
    },
    {
      "trigger": "initWithFileAtPath:",
      "contents": "initWithFileAtPath(${1:NSString* path})"
    },
    {
      "trigger": "initWithFileDescriptor:",
      "contents": "initWithFileDescriptor(${1:int fd})"
    },
    {
      "trigger": "initWithFileDescriptor:closeOnDealloc:",
      "contents": "initWithFileDescriptor(${1:int fd}, closeOnDealloc:${2:BOOL closeopt})"
    },
    {
      "trigger": "initWithFilePresenter:",
      "contents": "initWithFilePresenter(${1:id filePresenterOrNil})"
    },
    {
      "trigger": "initWithFileURL:",
      "contents": "initWithFileURL(${1:NSURL* url})"
    },
    {
      "trigger": "initWithFilterPredicates:",
      "contents": "initWithFilterPredicates(${1:NSSet* filterPredicates})"
    },
    {
      "trigger": "initWithFireDate:interval:target:selector:userInfo:repeats:",
      "contents": "initWithFireDate(${1:NSDate* date}, interval:${2:NSTimeInterval ti}, target:${3:id t}, selector:${4:SEL s}, userInfo:${5:id ui}, repeats:${6:BOOL rep})"
    },
    {
      "trigger": "initWithFloat:",
      "contents": "initWithFloat(${1:float value})"
    },
    {
      "trigger": "initWithFormat:",
      "contents": "initWithFormat(${1:NSString* format})"
    },
    {
      "trigger": "initWithFormat:arguments:",
      "contents": "initWithFormat(${1:NSString* format}, arguments:${2:va_list argList})"
    },
    {
      "trigger": "initWithFormat:locale:",
      "contents": "initWithFormat(${1:NSString* format}, locale:${2:id locale})"
    },
    {
      "trigger": "initWithFormat:locale:arguments:",
      "contents": "initWithFormat(${1:NSString* format}, locale:${2:id locale}, arguments:${3:va_list argList})"
    },
    {
      "trigger": "initWithFrame:",
      "contents": "initWithFrame(${1:CGRect frame})"
    },
    {
      "trigger": "initWithFrame:context:",
      "contents": "initWithFrame(${1:CGRect frame}, context:${2:EAGLContext* context})"
    },
    {
      "trigger": "initWithFrame:reuseIdentifier:",
      "contents": "initWithFrame(${1:CGRect frame}, reuseIdentifier:${2:NSString* reuseIdentifier})"
    },
    {
      "trigger": "initWithFrame:style:",
      "contents": "initWithFrame(${1:CGRect frame}, style:${2:UITableViewStyle style})"
    },
    {
      "trigger": "initWithHost:port:protocol:realm:authenticationMethod:",
      "contents": "initWithHost(${1:NSString* host}, port:${2:NSInteger port}, protocol:${3:NSString* protocol}, realm:${4:NSString* realm}, authenticationMethod:${5:NSString* authenticationMethod})"
    },
    {
      "trigger": "initWithHue:saturation:brightness:alpha:",
      "contents": "initWithHue(${1:CGFloat hue}, saturation:${2:CGFloat saturation}, brightness:${3:CGFloat brightness}, alpha:${4:CGFloat alpha})"
    },
    {
      "trigger": "initWithIdentifier:",
      "contents": "initWithIdentifier(${1:NSString* identifier})"
    },
    {
      "trigger": "initWithIdentifier:source:destination:",
      "contents": "initWithIdentifier(${1:NSString* identifier}, source:${2:UIViewController* source}, destination:${3:UIViewController* destination})"
    },
    {
      "trigger": "initWithIdentity:certificates:persistence:",
      "contents": "initWithIdentity(${1:SecIdentityRef identity}, certificates:${2:NSArray* certArray}, persistence:${3:NSURLCredentialPersistence persistence})"
    },
    {
      "trigger": "initWithImage:",
      "contents": "initWithImage(${1:UIImage* image})"
    },
    {
      "trigger": "initWithImage:highlightedImage:",
      "contents": "initWithImage(${1:UIImage* image}, highlightedImage:${2:UIImage* highlightedImage})"
    },
    {
      "trigger": "initWithImage:landscapeImagePhone:style:target:action:",
      "contents": "initWithImage(${1:UIImage* image}, landscapeImagePhone:${2:UIImage* landscapeImagePhone}, style:${3:UIBarButtonItemStyle style}, target:${4:id target}, action:${5:SEL action})"
    },
    {
      "trigger": "initWithImage:options:",
      "contents": "initWithImage(${1:UIImage* image}, options:${2:NSDictionary* options})"
    },
    {
      "trigger": "initWithImage:style:target:action:",
      "contents": "initWithImage(${1:UIImage* image}, style:${2:UIBarButtonItemStyle style}, target:${3:id target}, action:${4:SEL action})"
    },
    {
      "trigger": "initWithIndex:",
      "contents": "initWithIndex(${1:NSUInteger index})"
    },
    {
      "trigger": "initWithIndex:",
      "contents": "initWithIndex(${1:NSUInteger value})"
    },
    {
      "trigger": "initWithIndexSet:",
      "contents": "initWithIndexSet(${1:NSIndexSet* indexSet})"
    },
    {
      "trigger": "initWithIndexes:length:",
      "contents": "initWithIndexes(${1:NSUInteger* indexes}, length:${2:NSUInteger length})"
    },
    {
      "trigger": "initWithIndexesInRange:",
      "contents": "initWithIndexesInRange(${1:NSRange range})"
    },
    {
      "trigger": "initWithInsertedObjects:updatedObjects:deletedObjects:lockedObjects:",
      "contents": "initWithInsertedObjects(${1:NSSet* insertedObjects}, updatedObjects:${2:NSSet* updatedObjects}, deletedObjects:${3:NSSet* deletedObjects}, lockedObjects:${4:NSSet* lockedObjects})"
    },
    {
      "trigger": "initWithInt:",
      "contents": "initWithInt(${1:int value})"
    },
    {
      "trigger": "initWithInteger:",
      "contents": "initWithInteger(${1:NSInteger value})"
    },
    {
      "trigger": "initWithInvite:",
      "contents": "initWithInvite(${1:GKInvite* invite})"
    },
    {
      "trigger": "initWithInvocation:",
      "contents": "initWithInvocation(${1:NSInvocation* inv})"
    },
    {
      "trigger": "initWithItems:",
      "contents": "initWithItems(${1:NSArray* items})"
    },
    {
      "trigger": "initWithItems:timeRange:",
      "contents": "initWithItems(${1:NSArray* items}, timeRange:${2:CMTimeRange timeRange})"
    },
    {
      "trigger": "initWithKey:ascending:",
      "contents": "initWithKey(${1:NSString* key}, ascending:${2:BOOL ascending})"
    },
    {
      "trigger": "initWithKey:ascending:comparator:",
      "contents": "initWithKey(${1:NSString* key}, ascending:${2:BOOL ascending}, comparator:${3:NSComparator cmptr})"
    },
    {
      "trigger": "initWithKey:ascending:selector:",
      "contents": "initWithKey(${1:NSString* key}, ascending:${2:BOOL ascending}, selector:${3:SEL selector})"
    },
    {
      "trigger": "initWithLatitude:longitude:",
      "contents": "initWithLatitude(${1:CLLocationDegrees latitude}, longitude:${2:CLLocationDegrees longitude})"
    },
    {
      "trigger": "initWithLayer:",
      "contents": "initWithLayer(${1:id layer})"
    },
    {
      "trigger": "initWithLeftExpression:rightExpression:customSelector:",
      "contents": "initWithLeftExpression(${1:NSExpression* lhs}, rightExpression:${2:NSExpression* rhs}, customSelector:${3:SEL selector})"
    },
    {
      "trigger": "initWithLeftExpression:rightExpression:modifier:type:options:",
      "contents": "initWithLeftExpression(${1:NSExpression* lhs}, rightExpression:${2:NSExpression* rhs}, modifier:${3:NSComparisonPredicateModifier modifier}, type:${4:NSPredicateOperatorType type}, options:${5:NSComparisonPredicateOptions options})"
    },
    {
      "trigger": "initWithLength:",
      "contents": "initWithLength(${1:NSUInteger length})"
    },
    {
      "trigger": "initWithLocaleIdentifier:",
      "contents": "initWithLocaleIdentifier(${1:NSString* string})"
    },
    {
      "trigger": "initWithLong:",
      "contents": "initWithLong(${1:long value})"
    },
    {
      "trigger": "initWithLongLong:",
      "contents": "initWithLongLong(${1:long long value})"
    },
    {
      "trigger": "initWithMachPort:",
      "contents": "initWithMachPort(${1:uint32_t machPort})"
    },
    {
      "trigger": "initWithMachPort:options:",
      "contents": "initWithMachPort(${1:uint32_t machPort}, options:${2:NSUInteger f})"
    },
    {
      "trigger": "initWithManagedObjectModel:",
      "contents": "initWithManagedObjectModel(${1:NSManagedObjectModel* model})"
    },
    {
      "trigger": "initWithMantissa:exponent:isNegative:",
      "contents": "initWithMantissa(${1:unsigned long long mantissa}, exponent:${2:short exponent}, isNegative:${3:BOOL flag})"
    },
    {
      "trigger": "initWithMapView:",
      "contents": "initWithMapView(${1:MKMapView* mapView})"
    },
    {
      "trigger": "initWithMarkupText:",
      "contents": "initWithMarkupText(${1:NSString* markupText})"
    },
    {
      "trigger": "initWithMatchRequest:",
      "contents": "initWithMatchRequest(${1:GKMatchRequest* request})"
    },
    {
      "trigger": "initWithMediaType:outputSettings:",
      "contents": "initWithMediaType(${1:NSString* mediaType}, outputSettings:${2:NSDictionary* outputSettings})"
    },
    {
      "trigger": "initWithMediaTypes:",
      "contents": "initWithMediaTypes(${1:MPMediaType mediaTypes})"
    },
    {
      "trigger": "initWithMemoryCapacity:diskCapacity:diskPath:",
      "contents": "initWithMemoryCapacity(${1:NSUInteger memoryCapacity}, diskCapacity:${2:NSUInteger diskCapacity}, diskPath:${3:NSString* path})"
    },
    {
      "trigger": "initWithMergeType:",
      "contents": "initWithMergeType(${1:NSMergePolicyType ty})"
    },
    {
      "trigger": "initWithName:",
      "contents": "initWithName(${1:NSString* tzName})"
    },
    {
      "trigger": "initWithName:data:",
      "contents": "initWithName(${1:NSString* tzName}, data:${2:NSData* aData})"
    },
    {
      "trigger": "initWithName:reason:userInfo:",
      "contents": "initWithName(${1:NSString* aName}, reason:${2:NSString* aReason}, userInfo:${3:NSDictionary* aUserInfo})"
    },
    {
      "trigger": "initWithNibName:bundle:",
      "contents": "initWithNibName(${1:NSString* nibNameOrNil}, bundle:${2:NSBundle* nibBundleOrNil})"
    },
    {
      "trigger": "initWithNotificationCenter:",
      "contents": "initWithNotificationCenter(${1:NSNotificationCenter* notificationCenter})"
    },
    {
      "trigger": "initWithOAuthToken:tokenSecret:",
      "contents": "initWithOAuthToken(${1:NSString* token}, tokenSecret:${2:NSString* secret})"
    },
    {
      "trigger": "initWithObject:",
      "contents": "initWithObject(${1:id object})"
    },
    {
      "trigger": "initWithObjectID:",
      "contents": "initWithObjectID(${1:NSManagedObjectID* moid})"
    },
    {
      "trigger": "initWithObjectID:withValues:version:",
      "contents": "initWithObjectID(${1:NSManagedObjectID* objectID}, withValues:${2:NSDictionary* values}, version:${3:uint64_t version})"
    },
    {
      "trigger": "initWithObjects:",
      "contents": "initWithObjects(${1:id firstObj})"
    },
    {
      "trigger": "initWithObjects:count:",
      "contents": "initWithObjects(${1:id* objects}, count:${2:NSUInteger cnt})"
    },
    {
      "trigger": "initWithObjects:forKeys:",
      "contents": "initWithObjects(${1:NSArray* objects}, forKeys:${2:NSArray* keys})"
    },
    {
      "trigger": "initWithObjects:forKeys:count:",
      "contents": "initWithObjects(${1:id* objects}, forKeys:${2:id* keys}, count:${3:NSUInteger cnt})"
    },
    {
      "trigger": "initWithObjectsAndKeys:",
      "contents": "initWithObjectsAndKeys(${1:id firstObject})"
    },
    {
      "trigger": "initWithOrderedSet:",
      "contents": "initWithOrderedSet(${1:NSOrderedSet* set})"
    },
    {
      "trigger": "initWithOrderedSet:copyItems:",
      "contents": "initWithOrderedSet(${1:NSOrderedSet* set}, copyItems:${2:BOOL flag})"
    },
    {
      "trigger": "initWithOrderedSet:range:copyItems:",
      "contents": "initWithOrderedSet(${1:NSOrderedSet* set}, range:${2:NSRange range}, copyItems:${3:BOOL flag})"
    },
    {
      "trigger": "initWithOverlay:",
      "contents": "initWithOverlay(${1:id overlay})"
    },
    {
      "trigger": "initWithPath:",
      "contents": "initWithPath(${1:NSString* path})"
    },
    {
      "trigger": "initWithPattern:options:error:",
      "contents": "initWithPattern(${1:NSString* pattern}, options:${2:NSRegularExpressionOptions options}, error:${3:NSError** error})"
    },
    {
      "trigger": "initWithPatternImage:",
      "contents": "initWithPatternImage(${1:UIImage* image})"
    },
    {
      "trigger": "initWithPersistentStoreCoordinator:configurationName:URL:options:",
      "contents": "initWithPersistentStoreCoordinator(${1:NSPersistentStoreCoordinator* coordinator}, configurationName:${2:NSString* configurationName}, URL:${3:NSURL* url}, options:${4:NSDictionary* options})"
    },
    {
      "trigger": "initWithPersistentStoreCoordinator:configurationName:URL:options:",
      "contents": "initWithPersistentStoreCoordinator(${1:NSPersistentStoreCoordinator* root}, configurationName:${2:NSString* name}, URL:${3:NSURL* url}, options:${4:NSDictionary* options})"
    },
    {
      "trigger": "initWithPlacemark:",
      "contents": "initWithPlacemark(${1:CLPlacemark* placemark})"
    },
    {
      "trigger": "initWithPlayerIDs:",
      "contents": "initWithPlayerIDs(${1:NSArray* playerIDs})"
    },
    {
      "trigger": "initWithPlayerItem:",
      "contents": "initWithPlayerItem(${1:AVPlayerItem* item})"
    },
    {
      "trigger": "initWithPolygon:",
      "contents": "initWithPolygon(${1:MKPolygon* polygon})"
    },
    {
      "trigger": "initWithPolyline:",
      "contents": "initWithPolyline(${1:MKPolyline* polyline})"
    },
    {
      "trigger": "initWithProductIdentifiers:",
      "contents": "initWithProductIdentifiers(${1:NSSet* productIdentifiers})"
    },
    {
      "trigger": "initWithProgressViewStyle:",
      "contents": "initWithProgressViewStyle(${1:UIProgressViewStyle style})"
    },
    {
      "trigger": "initWithProperties:",
      "contents": "initWithProperties(${1:NSDictionary* properties})"
    },
    {
      "trigger": "initWithProtectionSpace:proposedCredential:previousFailureCount:failureResponse:error:sender:",
      "contents": "initWithProtectionSpace(${1:NSURLProtectionSpace* space}, proposedCredential:${2:NSURLCredential* credential}, previousFailureCount:${3:NSInteger previousFailureCount}, failureResponse:${4:NSURLResponse* response}, error:${5:NSError* error}, sender:${6:id sender})"
    },
    {
      "trigger": "initWithProtocolFamily:socketType:protocol:address:",
      "contents": "initWithProtocolFamily(${1:int family}, socketType:${2:int type}, protocol:${3:int protocol}, address:${4:NSData* address})"
    },
    {
      "trigger": "initWithProtocolFamily:socketType:protocol:socket:",
      "contents": "initWithProtocolFamily(${1:int family}, socketType:${2:int type}, protocol:${3:int protocol}, socket:${4:NSSocketNativeHandle sock})"
    },
    {
      "trigger": "initWithProxyHost:port:type:realm:authenticationMethod:",
      "contents": "initWithProxyHost(${1:NSString* host}, port:${2:NSInteger port}, type:${3:NSString* type}, realm:${4:NSString* realm}, authenticationMethod:${5:NSString* authenticationMethod})"
    },
    {
      "trigger": "initWithRed:green:blue:alpha:",
      "contents": "initWithRed(${1:CGFloat red}, green:${2:CGFloat green}, blue:${3:CGFloat blue}, alpha:${4:CGFloat alpha})"
    },
    {
      "trigger": "initWithRequest:cachedResponse:client:",
      "contents": "initWithRequest(${1:NSURLRequest* request}, cachedResponse:${2:NSCachedURLResponse* cachedResponse}, client:${3:id client})"
    },
    {
      "trigger": "initWithRequest:delegate:",
      "contents": "initWithRequest(${1:NSURLRequest* request}, delegate:${2:id delegate})"
    },
    {
      "trigger": "initWithRequest:delegate:startImmediately:",
      "contents": "initWithRequest(${1:NSURLRequest* request}, delegate:${2:id delegate}, startImmediately:${3:BOOL startImmediately})"
    },
    {
      "trigger": "initWithResponse:data:",
      "contents": "initWithResponse(${1:NSURLResponse* response}, data:${2:NSData* data})"
    },
    {
      "trigger": "initWithResponse:data:userInfo:storagePolicy:",
      "contents": "initWithResponse(${1:NSURLResponse* response}, data:${2:NSData* data}, userInfo:${3:NSDictionary* userInfo}, storagePolicy:${4:NSURLCacheStoragePolicy storagePolicy})"
    },
    {
      "trigger": "initWithRootViewController:",
      "contents": "initWithRootViewController(${1:UIViewController* rootViewController})"
    },
    {
      "trigger": "initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:",
      "contents": "initWithRoundingMode(${1:NSRoundingMode roundingMode}, scale:${2:short scale}, raiseOnExactness:${3:BOOL exact}, raiseOnOverflow:${4:BOOL overflow}, raiseOnUnderflow:${5:BOOL underflow}, raiseOnDivideByZero:${6:BOOL divideByZero})"
    },
    {
      "trigger": "initWithScheme:host:path:",
      "contents": "initWithScheme(${1:NSString* scheme}, host:${2:NSString* host}, path:${3:NSString* path})"
    },
    {
      "trigger": "initWithSearchBar:contentsController:",
      "contents": "initWithSearchBar(${1:UISearchBar* searchBar}, contentsController:${2:UIViewController* viewController})"
    },
    {
      "trigger": "initWithSelectionStyle:displayStyle:eventStore:",
      "contents": "initWithSelectionStyle(${1:EKCalendarChooserSelectionStyle selectionStyle}, displayStyle:${2:EKCalendarChooserDisplayStyle displayStyle}, eventStore:${3:EKEventStore* eventStore})"
    },
    {
      "trigger": "initWithSerializedRepresentation:",
      "contents": "initWithSerializedRepresentation(${1:NSData* serializeRepresentation})"
    },
    {
      "trigger": "initWithSession:",
      "contents": "initWithSession(${1:AVCaptureSession* session})"
    },
    {
      "trigger": "initWithSessionID:displayName:sessionMode:",
      "contents": "initWithSessionID(${1:NSString* sessionID}, displayName:${2:NSString* name}, sessionMode:${3:GKSessionMode mode})"
    },
    {
      "trigger": "initWithSet:",
      "contents": "initWithSet(${1:NSSet* set})"
    },
    {
      "trigger": "initWithSet:copyItems:",
      "contents": "initWithSet(${1:NSSet* set}, copyItems:${2:BOOL flag})"
    },
    {
      "trigger": "initWithSharegroup:",
      "contents": "initWithSharegroup(${1:EAGLSharegroup* sharegroup})"
    },
    {
      "trigger": "initWithShort:",
      "contents": "initWithShort(${1:short value})"
    },
    {
      "trigger": "initWithSource:newVersion:oldVersion:cachedSnapshot:persistedSnapshot:",
      "contents": "initWithSource(${1:NSManagedObject* srcObject}, newVersion:${2:NSUInteger newvers}, oldVersion:${3:NSUInteger oldvers}, cachedSnapshot:${4:NSDictionary* cachesnap}, persistedSnapshot:${5:NSDictionary* persnap})"
    },
    {
      "trigger": "initWithSourceModel:destinationModel:",
      "contents": "initWithSourceModel(${1:NSManagedObjectModel* sourceModel}, destinationModel:${2:NSManagedObjectModel* destinationModel})"
    },
    {
      "trigger": "initWithStream:",
      "contents": "initWithStream(${1:NSInputStream* stream})"
    },
    {
      "trigger": "initWithString:",
      "contents": "initWithString(${1:NSString* URLString})"
    },
    {
      "trigger": "initWithString:",
      "contents": "initWithString(${1:NSString* aString})"
    },
    {
      "trigger": "initWithString:",
      "contents": "initWithString(${1:NSString* numberValue})"
    },
    {
      "trigger": "initWithString:",
      "contents": "initWithString(${1:NSString* representation})"
    },
    {
      "trigger": "initWithString:",
      "contents": "initWithString(${1:NSString* string})"
    },
    {
      "trigger": "initWithString:",
      "contents": "initWithString(${1:NSString* str})"
    },
    {
      "trigger": "initWithString:attributes:",
      "contents": "initWithString(${1:NSString* str}, attributes:${2:NSDictionary* attrs})"
    },
    {
      "trigger": "initWithString:locale:",
      "contents": "initWithString(${1:NSString* numberValue}, locale:${2:id locale})"
    },
    {
      "trigger": "initWithString:relativeToURL:",
      "contents": "initWithString(${1:NSString* URLString}, relativeToURL:${2:NSURL* baseURL})"
    },
    {
      "trigger": "initWithStyle:",
      "contents": "initWithStyle(${1:UITableViewStyle style})"
    },
    {
      "trigger": "initWithStyle:reuseIdentifier:",
      "contents": "initWithStyle(${1:UITableViewCellStyle style}, reuseIdentifier:${2:NSString* reuseIdentifier})"
    },
    {
      "trigger": "initWithTCPPort:",
      "contents": "initWithTCPPort(${1:unsigned short port})"
    },
    {
      "trigger": "initWithTabBarSystemItem:tag:",
      "contents": "initWithTabBarSystemItem(${1:UITabBarSystemItem systemItem}, tag:${2:NSInteger tag})"
    },
    {
      "trigger": "initWithTagSchemes:options:",
      "contents": "initWithTagSchemes(${1:NSArray* tagSchemes}, options:${2:NSUInteger opts})"
    },
    {
      "trigger": "initWithTarget:action:",
      "contents": "initWithTarget(${1:id target}, action:${2:SEL action})"
    },
    {
      "trigger": "initWithTarget:selector:object:",
      "contents": "initWithTarget(${1:id target}, selector:${2:SEL selector}, object:${3:id argument})"
    },
    {
      "trigger": "initWithTarget:selector:object:",
      "contents": "initWithTarget(${1:id target}, selector:${2:SEL sel}, object:${3:id arg})"
    },
    {
      "trigger": "initWithTerm:",
      "contents": "initWithTerm(${1:NSString* term})"
    },
    {
      "trigger": "initWithText:",
      "contents": "initWithText(${1:NSString* text})"
    },
    {
      "trigger": "initWithTextInput:",
      "contents": "initWithTextInput(${1:UIResponder* textInput})"
    },
    {
      "trigger": "initWithTimeInterval:sinceDate:",
      "contents": "initWithTimeInterval(${1:NSTimeInterval secsToBeAdded}, sinceDate:${2:NSDate* anotherDate})"
    },
    {
      "trigger": "initWithTimeIntervalSince1970:",
      "contents": "initWithTimeIntervalSince1970(${1:NSTimeInterval ti})"
    },
    {
      "trigger": "initWithTimeIntervalSinceNow:",
      "contents": "initWithTimeIntervalSinceNow(${1:NSTimeInterval secs})"
    },
    {
      "trigger": "initWithTimeIntervalSinceReferenceDate:",
      "contents": "initWithTimeIntervalSinceReferenceDate(${1:NSTimeInterval secsToBeAdded})"
    },
    {
      "trigger": "initWithTimeRange:",
      "contents": "initWithTimeRange(${1:CMTimeRange timeRange})"
    },
    {
      "trigger": "initWithTitle:",
      "contents": "initWithTitle(${1:NSString* title})"
    },
    {
      "trigger": "initWithTitle:action:",
      "contents": "initWithTitle(${1:NSString* title}, action:${2:SEL action})"
    },
    {
      "trigger": "initWithTitle:delegate:cancelButtonTitle:destructiveButtonTitle:otherButtonTitles:",
      "contents": "initWithTitle(${1:NSString* title}, delegate:${2:id delegate}, cancelButtonTitle:${3:NSString* cancelButtonTitle}, destructiveButtonTitle:${4:NSString* destructiveButtonTitle}, otherButtonTitles:${5:NSString* otherButtonTitles})"
    },
    {
      "trigger": "initWithTitle:image:tag:",
      "contents": "initWithTitle(${1:NSString* title}, image:${2:UIImage* image}, tag:${3:NSInteger tag})"
    },
    {
      "trigger": "initWithTitle:message:delegate:cancelButtonTitle:otherButtonTitles:",
      "contents": "initWithTitle(${1:NSString* title}, message:${2:NSString* message}, delegate:${3:id delegate}, cancelButtonTitle:${4:NSString* cancelButtonTitle}, otherButtonTitles:${5:NSString* otherButtonTitles})"
    },
    {
      "trigger": "initWithTitle:style:target:action:",
      "contents": "initWithTitle(${1:NSString* title}, style:${2:UIBarButtonItemStyle style}, target:${3:id target}, action:${4:SEL action})"
    },
    {
      "trigger": "initWithTrack:outputSettings:",
      "contents": "initWithTrack(${1:AVAssetTrack* track}, outputSettings:${2:NSDictionary* outputSettings})"
    },
    {
      "trigger": "initWithTransitionStyle:navigationOrientation:options:",
      "contents": "initWithTransitionStyle(${1:UIPageViewControllerTransitionStyle style}, navigationOrientation:${2:UIPageViewControllerNavigationOrientation navigationOrientation}, options:${3:NSDictionary* options})"
    },
    {
      "trigger": "initWithTrust:",
      "contents": "initWithTrust(${1:SecTrustRef trust})"
    },
    {
      "trigger": "initWithType:subpredicates:",
      "contents": "initWithType(${1:NSCompoundPredicateType type}, subpredicates:${2:NSArray* subpredicates})"
    },
    {
      "trigger": "initWithTypes:error:",
      "contents": "initWithTypes(${1:NSTextCheckingTypes checkingTypes}, error:${2:NSError** error})"
    },
    {
      "trigger": "initWithURL:",
      "contents": "initWithURL(${1:NSURL* URL})"
    },
    {
      "trigger": "initWithURL:",
      "contents": "initWithURL(${1:NSURL* url})"
    },
    {
      "trigger": "initWithURL:MIMEType:expectedContentLength:textEncodingName:",
      "contents": "initWithURL(${1:NSURL* URL}, MIMEType:${2:NSString* MIMEType}, expectedContentLength:${3:NSInteger length}, textEncodingName:${4:NSString* name})"
    },
    {
      "trigger": "initWithURL:append:",
      "contents": "initWithURL(${1:NSURL* url}, append:${2:BOOL shouldAppend})"
    },
    {
      "trigger": "initWithURL:cachePolicy:timeoutInterval:",
      "contents": "initWithURL(${1:NSURL* URL}, cachePolicy:${2:NSURLRequestCachePolicy cachePolicy}, timeoutInterval:${3:NSTimeInterval timeoutInterval})"
    },
    {
      "trigger": "initWithURL:fileType:error:",
      "contents": "initWithURL(${1:NSURL* outputURL}, fileType:${2:NSString* outputFileType}, error:${3:NSError** outError})"
    },
    {
      "trigger": "initWithURL:options:",
      "contents": "initWithURL(${1:NSURL* URL}, options:${2:NSDictionary* options})"
    },
    {
      "trigger": "initWithURL:options:error:",
      "contents": "initWithURL(${1:NSURL* url}, options:${2:NSFileWrapperReadingOptions options}, error:${3:NSError** outError})"
    },
    {
      "trigger": "initWithURL:parameters:requestMethod:",
      "contents": "initWithURL(${1:NSURL* url}, parameters:${2:NSDictionary* parameters}, requestMethod:${3:TWRequestMethod requestMethod})"
    },
    {
      "trigger": "initWithURL:settings:error:",
      "contents": "initWithURL(${1:NSURL* url}, settings:${2:NSDictionary* settings}, error:${3:NSError** outError})"
    },
    {
      "trigger": "initWithURL:statusCode:HTTPVersion:headerFields:",
      "contents": "initWithURL(${1:NSURL* url}, statusCode:${2:NSInteger statusCode}, HTTPVersion:${3:NSString* HTTPVersion}, headerFields:${4:NSDictionary* headerFields})"
    },
    {
      "trigger": "initWithURL:trackID:sourceTimeRange:targetTimeRange:",
      "contents": "initWithURL(${1:NSURL* URL}, trackID:${2:CMPersistentTrackID trackID}, sourceTimeRange:${3:CMTimeRange sourceTimeRange}, targetTimeRange:${4:CMTimeRange targetTimeRange})"
    },
    {
      "trigger": "initWithUTF8String:",
      "contents": "initWithUTF8String(${1:char* nullTerminatedCString})"
    },
    {
      "trigger": "initWithUnsignedChar:",
      "contents": "initWithUnsignedChar(${1:unsigned char value})"
    },
    {
      "trigger": "initWithUnsignedInt:",
      "contents": "initWithUnsignedInt(${1:unsigned int value})"
    },
    {
      "trigger": "initWithUnsignedInteger:",
      "contents": "initWithUnsignedInteger(${1:NSUInteger value})"
    },
    {
      "trigger": "initWithUnsignedLong:",
      "contents": "initWithUnsignedLong(${1:unsigned long value})"
    },
    {
      "trigger": "initWithUnsignedLongLong:",
      "contents": "initWithUnsignedLongLong(${1:unsigned long long value})"
    },
    {
      "trigger": "initWithUnsignedShort:",
      "contents": "initWithUnsignedShort(${1:unsigned short value})"
    },
    {
      "trigger": "initWithUser:",
      "contents": "initWithUser(${1:NSString* username})"
    },
    {
      "trigger": "initWithUser:password:persistence:",
      "contents": "initWithUser(${1:NSString* user}, password:${2:NSString* password}, persistence:${3:NSURLCredentialPersistence persistence})"
    },
    {
      "trigger": "initWithValues:count:",
      "contents": "initWithValues(${1:CGFloat* values}, count:${2:size_t count})"
    },
    {
      "trigger": "initWithVideoTracks:videoSettings:",
      "contents": "initWithVideoTracks(${1:NSArray* videoTracks}, videoSettings:${2:NSDictionary* videoSettings})"
    },
    {
      "trigger": "initWithWhite:alpha:",
      "contents": "initWithWhite(${1:CGFloat white}, alpha:${2:CGFloat alpha})"
    },
    {
      "trigger": "initWithX:",
      "contents": "initWithX(${1:CGFloat x})"
    },
    {
      "trigger": "initWithX:Y:",
      "contents": "initWithX(${1:CGFloat x}, Y:${2:CGFloat y})"
    },
    {
      "trigger": "initWithX:Y:Z:",
      "contents": "initWithX(${1:CGFloat x}, Y:${2:CGFloat y}, Z:${3:CGFloat z})"
    },
    {
      "trigger": "initWithX:Y:Z:W:",
      "contents": "initWithX(${1:CGFloat x}, Y:${2:CGFloat y}, Z:${3:CGFloat z}, W:${4:CGFloat w})"
    },
    {
      "trigger": "inputIsAvailableChanged:",
      "contents": "inputIsAvailableChanged(${1:BOOL isInputAvailable})"
    },
    {
      "trigger": "insertAttributedString:atIndex:",
      "contents": "insertAttributedString(${1:NSAttributedString* attrString}, atIndex:${2:NSUInteger loc})"
    },
    {
      "trigger": "insertDictationResult:",
      "contents": "insertDictationResult(${1:NSArray* dictationResult})"
    },
    {
      "trigger": "insertEmptyTimeRange:",
      "contents": "insertEmptyTimeRange(${1:CMTimeRange timeRange})"
    },
    {
      "trigger": "insertItem:afterItem:",
      "contents": "insertItem(${1:AVPlayerItem* item}, afterItem:${2:AVPlayerItem* afterItem})"
    },
    {
      "trigger": "insertObject:",
      "contents": "insertObject(${1:NSManagedObject* object})"
    },
    {
      "trigger": "insertObject:atIndex:",
      "contents": "insertObject(${1:id anObject}, atIndex:${2:NSUInteger index})"
    },
    {
      "trigger": "insertObject:atIndex:",
      "contents": "insertObject(${1:id object}, atIndex:${2:NSUInteger idx})"
    },
    {
      "trigger": "insertObjects:atIndexes:",
      "contents": "insertObjects(${1:NSArray* objects}, atIndexes:${2:NSIndexSet* indexes})"
    },
    {
      "trigger": "insertOverlay:aboveOverlay:",
      "contents": "insertOverlay(${1:id overlay}, aboveOverlay:${2:id sibling})"
    },
    {
      "trigger": "insertOverlay:atIndex:",
      "contents": "insertOverlay(${1:id overlay}, atIndex:${2:NSUInteger index})"
    },
    {
      "trigger": "insertOverlay:belowOverlay:",
      "contents": "insertOverlay(${1:id overlay}, belowOverlay:${2:id sibling})"
    },
    {
      "trigger": "insertRowsAtIndexPaths:withRowAnimation:",
      "contents": "insertRowsAtIndexPaths(${1:NSArray* indexPaths}, withRowAnimation:${2:UITableViewRowAnimation animation})"
    },
    {
      "trigger": "insertSections:withRowAnimation:",
      "contents": "insertSections(${1:NSIndexSet* sections}, withRowAnimation:${2:UITableViewRowAnimation animation})"
    },
    {
      "trigger": "insertSegmentWithImage:atIndex:animated:",
      "contents": "insertSegmentWithImage(${1:UIImage* image}, atIndex:${2:NSUInteger segment}, animated:${3:BOOL animated})"
    },
    {
      "trigger": "insertSegmentWithTitle:atIndex:animated:",
      "contents": "insertSegmentWithTitle(${1:NSString* title}, atIndex:${2:NSUInteger segment}, animated:${3:BOOL animated})"
    },
    {
      "trigger": "insertString:atIndex:",
      "contents": "insertString(${1:NSString* aString}, atIndex:${2:NSUInteger loc})"
    },
    {
      "trigger": "insertSublayer:above:",
      "contents": "insertSublayer(${1:CALayer* layer}, above:${2:CALayer* sibling})"
    },
    {
      "trigger": "insertSublayer:atIndex:",
      "contents": "insertSublayer(${1:CALayer* layer}, atIndex:${2:unsigned int idx})"
    },
    {
      "trigger": "insertSublayer:below:",
      "contents": "insertSublayer(${1:CALayer* layer}, below:${2:CALayer* sibling})"
    },
    {
      "trigger": "insertSubview:aboveSubview:",
      "contents": "insertSubview(${1:UIView* view}, aboveSubview:${2:UIView* siblingSubview})"
    },
    {
      "trigger": "insertSubview:atIndex:",
      "contents": "insertSubview(${1:UIView* view}, atIndex:${2:NSInteger index})"
    },
    {
      "trigger": "insertSubview:belowSubview:",
      "contents": "insertSubview(${1:UIView* view}, belowSubview:${2:UIView* siblingSubview})"
    },
    {
      "trigger": "insertText:",
      "contents": "insertText(${1:NSString* text})"
    },
    {
      "trigger": "insertTimeRange:ofAsset:atTime:error:",
      "contents": "insertTimeRange(${1:CMTimeRange timeRange}, ofAsset:${2:AVAsset* asset}, atTime:${3:CMTime startTime}, error:${4:NSError** outError})"
    },
    {
      "trigger": "insertTimeRange:ofTrack:atTime:error:",
      "contents": "insertTimeRange(${1:CMTimeRange timeRange}, ofTrack:${2:AVAssetTrack* track}, atTime:${3:CMTime startTime}, error:${4:NSError** error})"
    },
    {
      "trigger": "insertTimeRanges:ofTracks:atTime:error:",
      "contents": "insertTimeRanges(${1:NSArray* timeRanges}, ofTracks:${2:NSArray* tracks}, atTime:${3:CMTime startTime}, error:${4:NSError** error})"
    },
    {
      "trigger": "instantiateViewControllerWithIdentifier:",
      "contents": "instantiateViewControllerWithIdentifier(${1:NSString* identifier})"
    },
    {
      "trigger": "instantiateWithOwner:options:",
      "contents": "instantiateWithOwner(${1:id ownerOrNil}, options:${2:NSDictionary* optionsOrNil})"
    },
    {
      "trigger": "integerForKey:",
      "contents": "integerForKey(${1:NSString* defaultName})"
    },
    {
      "trigger": "intersectOrderedSet:",
      "contents": "intersectOrderedSet(${1:NSOrderedSet* other})"
    },
    {
      "trigger": "intersectSet:",
      "contents": "intersectSet(${1:NSSet* otherSet})"
    },
    {
      "trigger": "intersectSet:",
      "contents": "intersectSet(${1:NSSet* other})"
    },
    {
      "trigger": "intersectsIndexesInRange:",
      "contents": "intersectsIndexesInRange(${1:NSRange range})"
    },
    {
      "trigger": "intersectsMapRect:",
      "contents": "intersectsMapRect(${1:MKMapRect mapRect})"
    },
    {
      "trigger": "intersectsOrderedSet:",
      "contents": "intersectsOrderedSet(${1:NSOrderedSet* other})"
    },
    {
      "trigger": "intersectsSet:",
      "contents": "intersectsSet(${1:NSSet* otherSet})"
    },
    {
      "trigger": "intersectsSet:",
      "contents": "intersectsSet(${1:NSSet* set})"
    },
    {
      "trigger": "interstitialAd:didFailWithError:",
      "contents": "interstitialAd(${1:ADInterstitialAd* interstitialAd}, didFailWithError:${2:NSError* error})"
    },
    {
      "trigger": "interstitialAdActionDidFinish:",
      "contents": "interstitialAdActionDidFinish(${1:ADInterstitialAd* interstitialAd})"
    },
    {
      "trigger": "interstitialAdActionShouldBegin:willLeaveApplication:",
      "contents": "interstitialAdActionShouldBegin(${1:ADInterstitialAd* interstitialAd}, willLeaveApplication:${2:BOOL willLeave})"
    },
    {
      "trigger": "interstitialAdDidLoad:",
      "contents": "interstitialAdDidLoad(${1:ADInterstitialAd* interstitialAd})"
    },
    {
      "trigger": "interstitialAdDidUnload:",
      "contents": "interstitialAdDidUnload(${1:ADInterstitialAd* interstitialAd})"
    },
    {
      "trigger": "interstitialAdWillLoad:",
      "contents": "interstitialAdWillLoad(${1:ADInterstitialAd* interstitialAd})"
    },
    {
      "trigger": "invokeWithTarget:",
      "contents": "invokeWithTarget(${1:id target})"
    },
    {
      "trigger": "isConfiguration:compatibleWithStoreMetadata:",
      "contents": "isConfiguration(${1:NSString* configuration}, compatibleWithStoreMetadata:${2:NSDictionary* metadata})"
    },
    {
      "trigger": "isDaylightSavingTimeForDate:",
      "contents": "isDaylightSavingTimeForDate(${1:NSDate* aDate})"
    },
    {
      "trigger": "isDeletableFileAtPath:",
      "contents": "isDeletableFileAtPath(${1:NSString* path})"
    },
    {
      "trigger": "isDescendantOfView:",
      "contents": "isDescendantOfView(${1:UIView* view})"
    },
    {
      "trigger": "isEnabledForSegmentAtIndex:",
      "contents": "isEnabledForSegmentAtIndex(${1:NSUInteger segment})"
    },
    {
      "trigger": "isEqual:",
      "contents": "isEqual(${1:id object})"
    },
    {
      "trigger": "isEqualToArray:",
      "contents": "isEqualToArray(${1:NSArray* otherArray})"
    },
    {
      "trigger": "isEqualToAttributedString:",
      "contents": "isEqualToAttributedString(${1:NSAttributedString* other})"
    },
    {
      "trigger": "isEqualToData:",
      "contents": "isEqualToData(${1:NSData* other})"
    },
    {
      "trigger": "isEqualToDate:",
      "contents": "isEqualToDate(${1:NSDate* otherDate})"
    },
    {
      "trigger": "isEqualToDictionary:",
      "contents": "isEqualToDictionary(${1:NSDictionary* otherDictionary})"
    },
    {
      "trigger": "isEqualToIndexSet:",
      "contents": "isEqualToIndexSet(${1:NSIndexSet* indexSet})"
    },
    {
      "trigger": "isEqualToNumber:",
      "contents": "isEqualToNumber(${1:NSNumber* number})"
    },
    {
      "trigger": "isEqualToOrderedSet:",
      "contents": "isEqualToOrderedSet(${1:NSOrderedSet* other})"
    },
    {
      "trigger": "isEqualToSet:",
      "contents": "isEqualToSet(${1:NSSet* otherSet})"
    },
    {
      "trigger": "isEqualToString:",
      "contents": "isEqualToString(${1:NSString* aString})"
    },
    {
      "trigger": "isEqualToTimeZone:",
      "contents": "isEqualToTimeZone(${1:NSTimeZone* aTimeZone})"
    },
    {
      "trigger": "isEqualToValue:",
      "contents": "isEqualToValue(${1:NSValue* value})"
    },
    {
      "trigger": "isExecutableFileAtPath:",
      "contents": "isExecutableFileAtPath(${1:NSString* path})"
    },
    {
      "trigger": "isExposureModeSupported:",
      "contents": "isExposureModeSupported(${1:AVCaptureExposureMode exposureMode})"
    },
    {
      "trigger": "isFlashModeSupported:",
      "contents": "isFlashModeSupported(${1:AVCaptureFlashMode flashMode})"
    },
    {
      "trigger": "isFocusModeSupported:",
      "contents": "isFocusModeSupported(${1:AVCaptureFocusMode focusMode})"
    },
    {
      "trigger": "isKindOfClass:",
      "contents": "isKindOfClass(${1:Class aClass})"
    },
    {
      "trigger": "isKindOfEntity:",
      "contents": "isKindOfEntity(${1:NSEntityDescription* entity})"
    },
    {
      "trigger": "isMemberOfClass:",
      "contents": "isMemberOfClass(${1:Class aClass})"
    },
    {
      "trigger": "isPartialStringValid:newEditingString:errorDescription:",
      "contents": "isPartialStringValid(${1:NSString* partialString}, newEditingString:${2:NSString** newString}, errorDescription:${3:NSString** error})"
    },
    {
      "trigger": "isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:",
      "contents": "isPartialStringValid(${1:NSString** partialStringPtr}, proposedSelectedRange:${2:NSRangePointer proposedSelRangePtr}, originalString:${3:NSString* origString}, originalSelectedRange:${4:NSRange origSelRange}, errorDescription:${5:NSString** error})"
    },
    {
      "trigger": "isPosition:atBoundary:inDirection:",
      "contents": "isPosition(${1:UITextPosition* position}, atBoundary:${2:UITextGranularity granularity}, inDirection:${3:UITextDirection direction})"
    },
    {
      "trigger": "isPosition:withinTextUnit:inDirection:",
      "contents": "isPosition(${1:UITextPosition* position}, withinTextUnit:${2:UITextGranularity granularity}, inDirection:${3:UITextDirection direction})"
    },
    {
      "trigger": "isReadableFileAtPath:",
      "contents": "isReadableFileAtPath(${1:NSString* path})"
    },
    {
      "trigger": "isSubsetOfOrderedSet:",
      "contents": "isSubsetOfOrderedSet(${1:NSOrderedSet* other})"
    },
    {
      "trigger": "isSubsetOfSet:",
      "contents": "isSubsetOfSet(${1:NSSet* otherSet})"
    },
    {
      "trigger": "isSubsetOfSet:",
      "contents": "isSubsetOfSet(${1:NSSet* set})"
    },
    {
      "trigger": "isSupersetOfSet:",
      "contents": "isSupersetOfSet(${1:NSCharacterSet* theOtherSet})"
    },
    {
      "trigger": "isTorchModeSupported:",
      "contents": "isTorchModeSupported(${1:AVCaptureTorchMode torchMode})"
    },
    {
      "trigger": "isUbiquitousItemAtURL:",
      "contents": "isUbiquitousItemAtURL(${1:NSURL* url})"
    },
    {
      "trigger": "isValidForAsset:timeRange:validationDelegate:",
      "contents": "isValidForAsset(${1:AVAsset* asset}, timeRange:${2:CMTimeRange timeRange}, validationDelegate:${3:id validationDelegate})"
    },
    {
      "trigger": "isWhiteBalanceModeSupported:",
      "contents": "isWhiteBalanceModeSupported(${1:AVCaptureWhiteBalanceMode whiteBalanceMode})"
    },
    {
      "trigger": "isWritableFileAtPath:",
      "contents": "isWritableFileAtPath(${1:NSString* path})"
    },
    {
      "trigger": "issueWithName:",
      "contents": "issueWithName(${1:NSString* name})"
    },
    {
      "trigger": "itemAtURL:didMoveToURL:",
      "contents": "itemAtURL(${1:NSURL* oldURL}, didMoveToURL:${2:NSURL* newURL})"
    },
    {
      "trigger": "itemSetWithPasteboardTypes:",
      "contents": "itemSetWithPasteboardTypes(${1:NSArray* pasteboardTypes})"
    },
    {
      "trigger": "kABDateTimePropertyType (4)",
      "contents": "KABDateTimePropertyType"
    },
    {
      "trigger": "kABDictionaryPropertyType (5)",
      "contents": "KABDictionaryPropertyType"
    },
    {
      "trigger": "kABGroupNameProperty (int)",
      "contents": "KABGroupNameProperty"
    },
    {
      "trigger": "kABGroupType (1)",
      "contents": "KABGroupType"
    },
    {
      "trigger": "kABHomeLabel (CFStringRef)",
      "contents": "KABHomeLabel"
    },
    {
      "trigger": "kABIntegerPropertyType (2)",
      "contents": "KABIntegerPropertyType"
    },
    {
      "trigger": "kABInvalidPropertyType (0)",
      "contents": "KABInvalidPropertyType"
    },
    {
      "trigger": "kABMultiDateTimePropertyType (260)",
      "contents": "KABMultiDateTimePropertyType"
    },
    {
      "trigger": "kABMultiDictionaryPropertyType (261)",
      "contents": "KABMultiDictionaryPropertyType"
    },
    {
      "trigger": "kABMultiIntegerPropertyType (258)",
      "contents": "KABMultiIntegerPropertyType"
    },
    {
      "trigger": "kABMultiRealPropertyType (259)",
      "contents": "KABMultiRealPropertyType"
    },
    {
      "trigger": "kABMultiStringPropertyType (257)",
      "contents": "KABMultiStringPropertyType"
    },
    {
      "trigger": "kABMultiValueInvalidIdentifier (-1)",
      "contents": "KABMultiValueInvalidIdentifier"
    },
    {
      "trigger": "kABMultiValueMask (256)",
      "contents": "KABMultiValueMask"
    },
    {
      "trigger": "kABOperationNotPermittedByStoreError (0)",
      "contents": "KABOperationNotPermittedByStoreError"
    },
    {
      "trigger": "kABOtherLabel (CFStringRef)",
      "contents": "KABOtherLabel"
    },
    {
      "trigger": "kABPersonAddressCityKey (CFStringRef)",
      "contents": "KABPersonAddressCityKey"
    },
    {
      "trigger": "kABPersonAddressCountryCodeKey (CFStringRef)",
      "contents": "KABPersonAddressCountryCodeKey"
    },
    {
      "trigger": "kABPersonAddressCountryKey (CFStringRef)",
      "contents": "KABPersonAddressCountryKey"
    },
    {
      "trigger": "kABPersonAddressProperty (ABPropertyID)",
      "contents": "KABPersonAddressProperty"
    },
    {
      "trigger": "kABPersonAddressStateKey (CFStringRef)",
      "contents": "KABPersonAddressStateKey"
    },
    {
      "trigger": "kABPersonAddressStreetKey (CFStringRef)",
      "contents": "KABPersonAddressStreetKey"
    },
    {
      "trigger": "kABPersonAddressZIPKey (CFStringRef)",
      "contents": "KABPersonAddressZIPKey"
    },
    {
      "trigger": "kABPersonAnniversaryLabel (CFStringRef)",
      "contents": "KABPersonAnniversaryLabel"
    },
    {
      "trigger": "kABPersonAssistantLabel (CFStringRef)",
      "contents": "KABPersonAssistantLabel"
    },
    {
      "trigger": "kABPersonBirthdayProperty (ABPropertyID)",
      "contents": "KABPersonBirthdayProperty"
    },
    {
      "trigger": "kABPersonBrotherLabel (CFStringRef)",
      "contents": "KABPersonBrotherLabel"
    },
    {
      "trigger": "kABPersonChildLabel (CFStringRef)",
      "contents": "KABPersonChildLabel"
    },
    {
      "trigger": "kABPersonCompositeNameFormatFirstNameFirst (0)",
      "contents": "KABPersonCompositeNameFormatFirstNameFirst"
    },
    {
      "trigger": "kABPersonCompositeNameFormatLastNameFirst (1)",
      "contents": "KABPersonCompositeNameFormatLastNameFirst"
    },
    {
      "trigger": "kABPersonCreationDateProperty (ABPropertyID)",
      "contents": "KABPersonCreationDateProperty"
    },
    {
      "trigger": "kABPersonDateProperty (ABPropertyID)",
      "contents": "KABPersonDateProperty"
    },
    {
      "trigger": "kABPersonDepartmentProperty (ABPropertyID)",
      "contents": "KABPersonDepartmentProperty"
    },
    {
      "trigger": "kABPersonEmailProperty (ABPropertyID)",
      "contents": "KABPersonEmailProperty"
    },
    {
      "trigger": "kABPersonFatherLabel (CFStringRef)",
      "contents": "KABPersonFatherLabel"
    },
    {
      "trigger": "kABPersonFirstNamePhoneticProperty (ABPropertyID)",
      "contents": "KABPersonFirstNamePhoneticProperty"
    },
    {
      "trigger": "kABPersonFirstNameProperty (ABPropertyID)",
      "contents": "KABPersonFirstNameProperty"
    },
    {
      "trigger": "kABPersonFriendLabel (CFStringRef)",
      "contents": "KABPersonFriendLabel"
    },
    {
      "trigger": "kABPersonHomePageLabel (CFStringRef)",
      "contents": "KABPersonHomePageLabel"
    },
    {
      "trigger": "kABPersonImageFormatOriginalSize (2)",
      "contents": "KABPersonImageFormatOriginalSize"
    },
    {
      "trigger": "kABPersonImageFormatThumbnail (0)",
      "contents": "KABPersonImageFormatThumbnail"
    },
    {
      "trigger": "kABPersonInstantMessageProperty (ABPropertyID)",
      "contents": "KABPersonInstantMessageProperty"
    },
    {
      "trigger": "kABPersonInstantMessageServiceAIM (CFStringRef)",
      "contents": "KABPersonInstantMessageServiceAIM"
    },
    {
      "trigger": "kABPersonInstantMessageServiceFacebook (CFStringRef)",
      "contents": "KABPersonInstantMessageServiceFacebook"
    },
    {
      "trigger": "kABPersonInstantMessageServiceGaduGadu (CFStringRef)",
      "contents": "KABPersonInstantMessageServiceGaduGadu"
    },
    {
      "trigger": "kABPersonInstantMessageServiceGoogleTalk (CFStringRef)",
      "contents": "KABPersonInstantMessageServiceGoogleTalk"
    },
    {
      "trigger": "kABPersonInstantMessageServiceICQ (CFStringRef)",
      "contents": "KABPersonInstantMessageServiceICQ"
    },
    {
      "trigger": "kABPersonInstantMessageServiceJabber (CFStringRef)",
      "contents": "KABPersonInstantMessageServiceJabber"
    },
    {
      "trigger": "kABPersonInstantMessageServiceKey (CFStringRef)",
      "contents": "KABPersonInstantMessageServiceKey"
    },
    {
      "trigger": "kABPersonInstantMessageServiceMSN (CFStringRef)",
      "contents": "KABPersonInstantMessageServiceMSN"
    },
    {
      "trigger": "kABPersonInstantMessageServiceQQ (CFStringRef)",
      "contents": "KABPersonInstantMessageServiceQQ"
    },
    {
      "trigger": "kABPersonInstantMessageServiceSkype (CFStringRef)",
      "contents": "KABPersonInstantMessageServiceSkype"
    },
    {
      "trigger": "kABPersonInstantMessageServiceYahoo (CFStringRef)",
      "contents": "KABPersonInstantMessageServiceYahoo"
    },
    {
      "trigger": "kABPersonInstantMessageUsernameKey (CFStringRef)",
      "contents": "KABPersonInstantMessageUsernameKey"
    },
    {
      "trigger": "kABPersonJobTitleProperty (ABPropertyID)",
      "contents": "KABPersonJobTitleProperty"
    },
    {
      "trigger": "kABPersonKindOrganization (CFNumberRef)",
      "contents": "KABPersonKindOrganization"
    },
    {
      "trigger": "kABPersonKindPerson (CFNumberRef)",
      "contents": "KABPersonKindPerson"
    },
    {
      "trigger": "kABPersonKindProperty (ABPropertyID)",
      "contents": "KABPersonKindProperty"
    },
    {
      "trigger": "kABPersonLastNamePhoneticProperty (ABPropertyID)",
      "contents": "KABPersonLastNamePhoneticProperty"
    },
    {
      "trigger": "kABPersonLastNameProperty (ABPropertyID)",
      "contents": "KABPersonLastNameProperty"
    },
    {
      "trigger": "kABPersonManagerLabel (CFStringRef)",
      "contents": "KABPersonManagerLabel"
    },
    {
      "trigger": "kABPersonMiddleNamePhoneticProperty (ABPropertyID)",
      "contents": "KABPersonMiddleNamePhoneticProperty"
    },
    {
      "trigger": "kABPersonMiddleNameProperty (ABPropertyID)",
      "contents": "KABPersonMiddleNameProperty"
    },
    {
      "trigger": "kABPersonModificationDateProperty (ABPropertyID)",
      "contents": "KABPersonModificationDateProperty"
    },
    {
      "trigger": "kABPersonMotherLabel (CFStringRef)",
      "contents": "KABPersonMotherLabel"
    },
    {
      "trigger": "kABPersonNicknameProperty (ABPropertyID)",
      "contents": "KABPersonNicknameProperty"
    },
    {
      "trigger": "kABPersonNoteProperty (ABPropertyID)",
      "contents": "KABPersonNoteProperty"
    },
    {
      "trigger": "kABPersonOrganizationProperty (ABPropertyID)",
      "contents": "KABPersonOrganizationProperty"
    },
    {
      "trigger": "kABPersonParentLabel (CFStringRef)",
      "contents": "KABPersonParentLabel"
    },
    {
      "trigger": "kABPersonPartnerLabel (CFStringRef)",
      "contents": "KABPersonPartnerLabel"
    },
    {
      "trigger": "kABPersonPhoneHomeFAXLabel (CFStringRef)",
      "contents": "KABPersonPhoneHomeFAXLabel"
    },
    {
      "trigger": "kABPersonPhoneIPhoneLabel (CFStringRef)",
      "contents": "KABPersonPhoneIPhoneLabel"
    },
    {
      "trigger": "kABPersonPhoneMainLabel (CFStringRef)",
      "contents": "KABPersonPhoneMainLabel"
    },
    {
      "trigger": "kABPersonPhoneMobileLabel (CFStringRef)",
      "contents": "KABPersonPhoneMobileLabel"
    },
    {
      "trigger": "kABPersonPhoneOtherFAXLabel (CFStringRef)",
      "contents": "KABPersonPhoneOtherFAXLabel"
    },
    {
      "trigger": "kABPersonPhonePagerLabel (CFStringRef)",
      "contents": "KABPersonPhonePagerLabel"
    },
    {
      "trigger": "kABPersonPhoneProperty (ABPropertyID)",
      "contents": "KABPersonPhoneProperty"
    },
    {
      "trigger": "kABPersonPhoneWorkFAXLabel (CFStringRef)",
      "contents": "KABPersonPhoneWorkFAXLabel"
    },
    {
      "trigger": "kABPersonPrefixProperty (ABPropertyID)",
      "contents": "KABPersonPrefixProperty"
    },
    {
      "trigger": "kABPersonRelatedNamesProperty (ABPropertyID)",
      "contents": "KABPersonRelatedNamesProperty"
    },
    {
      "trigger": "kABPersonSisterLabel (CFStringRef)",
      "contents": "KABPersonSisterLabel"
    },
    {
      "trigger": "kABPersonSocialProfileProperty (ABPropertyID)",
      "contents": "KABPersonSocialProfileProperty"
    },
    {
      "trigger": "kABPersonSocialProfileServiceFacebook (CFStringRef)",
      "contents": "KABPersonSocialProfileServiceFacebook"
    },
    {
      "trigger": "kABPersonSocialProfileServiceFlickr (CFStringRef)",
      "contents": "KABPersonSocialProfileServiceFlickr"
    },
    {
      "trigger": "kABPersonSocialProfileServiceGameCenter (CFStringRef)",
      "contents": "KABPersonSocialProfileServiceGameCenter"
    },
    {
      "trigger": "kABPersonSocialProfileServiceKey (CFStringRef)",
      "contents": "KABPersonSocialProfileServiceKey"
    },
    {
      "trigger": "kABPersonSocialProfileServiceLinkedIn (CFStringRef)",
      "contents": "KABPersonSocialProfileServiceLinkedIn"
    },
    {
      "trigger": "kABPersonSocialProfileServiceMyspace (CFStringRef)",
      "contents": "KABPersonSocialProfileServiceMyspace"
    },
    {
      "trigger": "kABPersonSocialProfileServiceTwitter (CFStringRef)",
      "contents": "KABPersonSocialProfileServiceTwitter"
    },
    {
      "trigger": "kABPersonSocialProfileURLKey (CFStringRef)",
      "contents": "KABPersonSocialProfileURLKey"
    },
    {
      "trigger": "kABPersonSocialProfileUserIdentifierKey (CFStringRef)",
      "contents": "KABPersonSocialProfileUserIdentifierKey"
    },
    {
      "trigger": "kABPersonSocialProfileUsernameKey (CFStringRef)",
      "contents": "KABPersonSocialProfileUsernameKey"
    },
    {
      "trigger": "kABPersonSortByFirstName (0)",
      "contents": "KABPersonSortByFirstName"
    },
    {
      "trigger": "kABPersonSortByLastName (1)",
      "contents": "KABPersonSortByLastName"
    },
    {
      "trigger": "kABPersonSpouseLabel (CFStringRef)",
      "contents": "KABPersonSpouseLabel"
    },
    {
      "trigger": "kABPersonSuffixProperty (ABPropertyID)",
      "contents": "KABPersonSuffixProperty"
    },
    {
      "trigger": "kABPersonType (0)",
      "contents": "KABPersonType"
    },
    {
      "trigger": "kABPersonURLProperty (ABPropertyID)",
      "contents": "KABPersonURLProperty"
    },
    {
      "trigger": "kABPropertyInvalidID (-1)",
      "contents": "KABPropertyInvalidID"
    },
    {
      "trigger": "kABRealPropertyType (3)",
      "contents": "KABRealPropertyType"
    },
    {
      "trigger": "kABRecordInvalidID (-1)",
      "contents": "KABRecordInvalidID"
    },
    {
      "trigger": "kABSourceNameProperty (ABPropertyID)",
      "contents": "KABSourceNameProperty"
    },
    {
      "trigger": "kABSourceType (2)",
      "contents": "KABSourceType"
    },
    {
      "trigger": "kABSourceTypeCardDAV (4)",
      "contents": "KABSourceTypeCardDAV"
    },
    {
      "trigger": "kABSourceTypeCardDAVSearch (16777220)",
      "contents": "KABSourceTypeCardDAVSearch"
    },
    {
      "trigger": "kABSourceTypeExchange (1)",
      "contents": "KABSourceTypeExchange"
    },
    {
      "trigger": "kABSourceTypeExchangeGAL (16777217)",
      "contents": "KABSourceTypeExchangeGAL"
    },
    {
      "trigger": "kABSourceTypeLDAP (16777219)",
      "contents": "KABSourceTypeLDAP"
    },
    {
      "trigger": "kABSourceTypeLocal (0)",
      "contents": "KABSourceTypeLocal"
    },
    {
      "trigger": "kABSourceTypeMobileMe (2)",
      "contents": "KABSourceTypeMobileMe"
    },
    {
      "trigger": "kABSourceTypeProperty (ABPropertyID)",
      "contents": "KABSourceTypeProperty"
    },
    {
      "trigger": "kABSourceTypeSearchableMask (16777216)",
      "contents": "KABSourceTypeSearchableMask"
    },
    {
      "trigger": "kABStringPropertyType (1)",
      "contents": "KABStringPropertyType"
    },
    {
      "trigger": "kABWorkLabel (CFStringRef)",
      "contents": "KABWorkLabel"
    },
    {
      "trigger": "kAFInfoDictionary_Album (album)",
      "contents": "KAFInfoDictionary_Album"
    },
    {
      "trigger": "kAFInfoDictionary_ApproximateDurationInSeconds (approximate duration in seconds)",
      "contents": "KAFInfoDictionary_ApproximateDurationInSeconds"
    },
    {
      "trigger": "kAFInfoDictionary_Artist (artist)",
      "contents": "KAFInfoDictionary_Artist"
    },
    {
      "trigger": "kAFInfoDictionary_ChannelLayout (channel layout)",
      "contents": "KAFInfoDictionary_ChannelLayout"
    },
    {
      "trigger": "kAFInfoDictionary_Comments (comments)",
      "contents": "KAFInfoDictionary_Comments"
    },
    {
      "trigger": "kAFInfoDictionary_Composer (composer)",
      "contents": "KAFInfoDictionary_Composer"
    },
    {
      "trigger": "kAFInfoDictionary_Copyright (copyright)",
      "contents": "KAFInfoDictionary_Copyright"
    },
    {
      "trigger": "kAFInfoDictionary_EncodingApplication (encoding application)",
      "contents": "KAFInfoDictionary_EncodingApplication"
    },
    {
      "trigger": "kAFInfoDictionary_Genre (genre)",
      "contents": "KAFInfoDictionary_Genre"
    },
    {
      "trigger": "kAFInfoDictionary_ISRC (ISRC)",
      "contents": "KAFInfoDictionary_ISRC"
    },
    {
      "trigger": "kAFInfoDictionary_KeySignature (key signature)",
      "contents": "KAFInfoDictionary_KeySignature"
    },
    {
      "trigger": "kAFInfoDictionary_Lyricist (lyricist)",
      "contents": "KAFInfoDictionary_Lyricist"
    },
    {
      "trigger": "kAFInfoDictionary_NominalBitRate (nominal bit rate)",
      "contents": "KAFInfoDictionary_NominalBitRate"
    },
    {
      "trigger": "kAFInfoDictionary_RecordedDate (recorded date)",
      "contents": "KAFInfoDictionary_RecordedDate"
    },
    {
      "trigger": "kAFInfoDictionary_SourceBitDepth (source bit depth)",
      "contents": "KAFInfoDictionary_SourceBitDepth"
    },
    {
      "trigger": "kAFInfoDictionary_SourceEncoder (source encoder)",
      "contents": "KAFInfoDictionary_SourceEncoder"
    },
    {
      "trigger": "kAFInfoDictionary_SubTitle (subtitle)",
      "contents": "KAFInfoDictionary_SubTitle"
    },
    {
      "trigger": "kAFInfoDictionary_Tempo (tempo)",
      "contents": "KAFInfoDictionary_Tempo"
    },
    {
      "trigger": "kAFInfoDictionary_TimeSignature (time signature)",
      "contents": "KAFInfoDictionary_TimeSignature"
    },
    {
      "trigger": "kAFInfoDictionary_Title (title)",
      "contents": "KAFInfoDictionary_Title"
    },
    {
      "trigger": "kAFInfoDictionary_TrackNumber (track number)",
      "contents": "KAFInfoDictionary_TrackNumber"
    },
    {
      "trigger": "kAFInfoDictionary_Year (year)",
      "contents": "KAFInfoDictionary_Year"
    },
    {
      "trigger": "kAUGraphErr_CannotDoInCurrentContext (-10863)",
      "contents": "KAUGraphErr_CannotDoInCurrentContext"
    },
    {
      "trigger": "kAUGraphErr_InvalidAudioUnit (-10864)",
      "contents": "KAUGraphErr_InvalidAudioUnit"
    },
    {
      "trigger": "kAUGraphErr_InvalidConnection (-10861)",
      "contents": "KAUGraphErr_InvalidConnection"
    },
    {
      "trigger": "kAUGraphErr_NodeNotFound (-10860)",
      "contents": "KAUGraphErr_NodeNotFound"
    },
    {
      "trigger": "kAUGraphErr_OutputNodeErr (-10862)",
      "contents": "KAUGraphErr_OutputNodeErr"
    },
    {
      "trigger": "kAUNodeInteraction_Connection (1)",
      "contents": "KAUNodeInteraction_Connection"
    },
    {
      "trigger": "kAUNodeInteraction_InputCallback (2)",
      "contents": "KAUNodeInteraction_InputCallback"
    },
    {
      "trigger": "kAbbrevSquaredLigaturesOffSelector (15)",
      "contents": "KAbbrevSquaredLigaturesOffSelector"
    },
    {
      "trigger": "kAbbrevSquaredLigaturesOnSelector (14)",
      "contents": "KAbbrevSquaredLigaturesOnSelector"
    },
    {
      "trigger": "kAllCapsSelector (1)",
      "contents": "KAllCapsSelector"
    },
    {
      "trigger": "kAllLowerCaseSelector (2)",
      "contents": "KAllLowerCaseSelector"
    },
    {
      "trigger": "kAllTypeFeaturesOffSelector (1)",
      "contents": "KAllTypeFeaturesOffSelector"
    },
    {
      "trigger": "kAllTypeFeaturesOnSelector (0)",
      "contents": "KAllTypeFeaturesOnSelector"
    },
    {
      "trigger": "kAllTypographicFeaturesType (0)",
      "contents": "KAllTypographicFeaturesType"
    },
    {
      "trigger": "kAlwaysAuthenticate (1)",
      "contents": "KAlwaysAuthenticate"
    },
    {
      "trigger": "kAnnotationType (24)",
      "contents": "KAnnotationType"
    },
    {
      "trigger": "kAppleHardwareAudioCodecManufacturer (1634756727)",
      "contents": "KAppleHardwareAudioCodecManufacturer"
    },
    {
      "trigger": "kAppleLosslessFormatFlag_16BitSourceData (1)",
      "contents": "KAppleLosslessFormatFlag_16BitSourceData"
    },
    {
      "trigger": "kAppleLosslessFormatFlag_20BitSourceData (2)",
      "contents": "KAppleLosslessFormatFlag_20BitSourceData"
    },
    {
      "trigger": "kAppleLosslessFormatFlag_24BitSourceData (3)",
      "contents": "KAppleLosslessFormatFlag_24BitSourceData"
    },
    {
      "trigger": "kAppleLosslessFormatFlag_32BitSourceData (4)",
      "contents": "KAppleLosslessFormatFlag_32BitSourceData"
    },
    {
      "trigger": "kAppleSoftwareAudioCodecManufacturer (1634758764)",
      "contents": "KAppleSoftwareAudioCodecManufacturer"
    },
    {
      "trigger": "kAsteriskToMultiplyOffSelector (3)",
      "contents": "KAsteriskToMultiplyOffSelector"
    },
    {
      "trigger": "kAsteriskToMultiplyOnSelector (2)",
      "contents": "KAsteriskToMultiplyOnSelector"
    },
    {
      "trigger": "kAudioBalanceFadeType_EqualPower (1)",
      "contents": "KAudioBalanceFadeType_EqualPower"
    },
    {
      "trigger": "kAudioBalanceFadeType_MaxUnityGain (0)",
      "contents": "KAudioBalanceFadeType_MaxUnityGain"
    },
    {
      "trigger": "kAudioChannelBit_Center (4)",
      "contents": "KAudioChannelBit_Center"
    },
    {
      "trigger": "kAudioChannelBit_CenterSurround (256)",
      "contents": "KAudioChannelBit_CenterSurround"
    },
    {
      "trigger": "kAudioChannelBit_LFEScreen (8)",
      "contents": "KAudioChannelBit_LFEScreen"
    },
    {
      "trigger": "kAudioChannelBit_Left (1)",
      "contents": "KAudioChannelBit_Left"
    },
    {
      "trigger": "kAudioChannelBit_LeftCenter (64)",
      "contents": "KAudioChannelBit_LeftCenter"
    },
    {
      "trigger": "kAudioChannelBit_LeftSurround (16)",
      "contents": "KAudioChannelBit_LeftSurround"
    },
    {
      "trigger": "kAudioChannelBit_LeftSurroundDirect (512)",
      "contents": "KAudioChannelBit_LeftSurroundDirect"
    },
    {
      "trigger": "kAudioChannelBit_Right (2)",
      "contents": "KAudioChannelBit_Right"
    },
    {
      "trigger": "kAudioChannelBit_RightCenter (128)",
      "contents": "KAudioChannelBit_RightCenter"
    },
    {
      "trigger": "kAudioChannelBit_RightSurround (32)",
      "contents": "KAudioChannelBit_RightSurround"
    },
    {
      "trigger": "kAudioChannelBit_RightSurroundDirect (1024)",
      "contents": "KAudioChannelBit_RightSurroundDirect"
    },
    {
      "trigger": "kAudioChannelBit_TopBackCenter (65536)",
      "contents": "KAudioChannelBit_TopBackCenter"
    },
    {
      "trigger": "kAudioChannelBit_TopBackLeft (32768)",
      "contents": "KAudioChannelBit_TopBackLeft"
    },
    {
      "trigger": "kAudioChannelBit_TopBackRight (131072)",
      "contents": "KAudioChannelBit_TopBackRight"
    },
    {
      "trigger": "kAudioChannelBit_TopCenterSurround (2048)",
      "contents": "KAudioChannelBit_TopCenterSurround"
    },
    {
      "trigger": "kAudioChannelBit_VerticalHeightCenter (8192)",
      "contents": "KAudioChannelBit_VerticalHeightCenter"
    },
    {
      "trigger": "kAudioChannelBit_VerticalHeightLeft (4096)",
      "contents": "KAudioChannelBit_VerticalHeightLeft"
    },
    {
      "trigger": "kAudioChannelBit_VerticalHeightRight (16384)",
      "contents": "KAudioChannelBit_VerticalHeightRight"
    },
    {
      "trigger": "kAudioChannelCoordinates_Azimuth (0)",
      "contents": "KAudioChannelCoordinates_Azimuth"
    },
    {
      "trigger": "kAudioChannelCoordinates_BackFront (1)",
      "contents": "KAudioChannelCoordinates_BackFront"
    },
    {
      "trigger": "kAudioChannelCoordinates_Distance (2)",
      "contents": "KAudioChannelCoordinates_Distance"
    },
    {
      "trigger": "kAudioChannelCoordinates_DownUp (2)",
      "contents": "KAudioChannelCoordinates_DownUp"
    },
    {
      "trigger": "kAudioChannelCoordinates_Elevation (1)",
      "contents": "KAudioChannelCoordinates_Elevation"
    },
    {
      "trigger": "kAudioChannelCoordinates_LeftRight (0)",
      "contents": "KAudioChannelCoordinates_LeftRight"
    },
    {
      "trigger": "kAudioChannelFlags_AllOff (0)",
      "contents": "KAudioChannelFlags_AllOff"
    },
    {
      "trigger": "kAudioChannelFlags_Meters (4)",
      "contents": "KAudioChannelFlags_Meters"
    },
    {
      "trigger": "kAudioChannelFlags_RectangularCoordinates (1)",
      "contents": "KAudioChannelFlags_RectangularCoordinates"
    },
    {
      "trigger": "kAudioChannelFlags_SphericalCoordinates (2)",
      "contents": "KAudioChannelFlags_SphericalCoordinates"
    },
    {
      "trigger": "kAudioChannelLabel_Ambisonic_W (200)",
      "contents": "KAudioChannelLabel_Ambisonic_W"
    },
    {
      "trigger": "kAudioChannelLabel_Ambisonic_X (201)",
      "contents": "KAudioChannelLabel_Ambisonic_X"
    },
    {
      "trigger": "kAudioChannelLabel_Ambisonic_Y (202)",
      "contents": "KAudioChannelLabel_Ambisonic_Y"
    },
    {
      "trigger": "kAudioChannelLabel_Ambisonic_Z (203)",
      "contents": "KAudioChannelLabel_Ambisonic_Z"
    },
    {
      "trigger": "kAudioChannelLabel_Center (3)",
      "contents": "KAudioChannelLabel_Center"
    },
    {
      "trigger": "kAudioChannelLabel_CenterSurround (9)",
      "contents": "KAudioChannelLabel_CenterSurround"
    },
    {
      "trigger": "kAudioChannelLabel_CenterSurroundDirect (44)",
      "contents": "KAudioChannelLabel_CenterSurroundDirect"
    },
    {
      "trigger": "kAudioChannelLabel_ClickTrack (304)",
      "contents": "KAudioChannelLabel_ClickTrack"
    },
    {
      "trigger": "kAudioChannelLabel_DialogCentricMix (43)",
      "contents": "KAudioChannelLabel_DialogCentricMix"
    },
    {
      "trigger": "kAudioChannelLabel_Discrete (400)",
      "contents": "KAudioChannelLabel_Discrete"
    },
    {
      "trigger": "kAudioChannelLabel_Discrete_0 (65536)",
      "contents": "KAudioChannelLabel_Discrete_0"
    },
    {
      "trigger": "kAudioChannelLabel_Discrete_1 (65537)",
      "contents": "KAudioChannelLabel_Discrete_1"
    },
    {
      "trigger": "kAudioChannelLabel_Discrete_10 (65546)",
      "contents": "KAudioChannelLabel_Discrete_10"
    },
    {
      "trigger": "kAudioChannelLabel_Discrete_11 (65547)",
      "contents": "KAudioChannelLabel_Discrete_11"
    },
    {
      "trigger": "kAudioChannelLabel_Discrete_12 (65548)",
      "contents": "KAudioChannelLabel_Discrete_12"
    },
    {
      "trigger": "kAudioChannelLabel_Discrete_13 (65549)",
      "contents": "KAudioChannelLabel_Discrete_13"
    },
    {
      "trigger": "kAudioChannelLabel_Discrete_14 (65550)",
      "contents": "KAudioChannelLabel_Discrete_14"
    },
    {
      "trigger": "kAudioChannelLabel_Discrete_15 (65551)",
      "contents": "KAudioChannelLabel_Discrete_15"
    },
    {
      "trigger": "kAudioChannelLabel_Discrete_2 (65538)",
      "contents": "KAudioChannelLabel_Discrete_2"
    },
    {
      "trigger": "kAudioChannelLabel_Discrete_3 (65539)",
      "contents": "KAudioChannelLabel_Discrete_3"
    },
    {
      "trigger": "kAudioChannelLabel_Discrete_4 (65540)",
      "contents": "KAudioChannelLabel_Discrete_4"
    },
    {
      "trigger": "kAudioChannelLabel_Discrete_5 (65541)",
      "contents": "KAudioChannelLabel_Discrete_5"
    },
    {
      "trigger": "kAudioChannelLabel_Discrete_6 (65542)",
      "contents": "KAudioChannelLabel_Discrete_6"
    },
    {
      "trigger": "kAudioChannelLabel_Discrete_65535 (131071)",
      "contents": "KAudioChannelLabel_Discrete_65535"
    },
    {
      "trigger": "kAudioChannelLabel_Discrete_7 (65543)",
      "contents": "KAudioChannelLabel_Discrete_7"
    },
    {
      "trigger": "kAudioChannelLabel_Discrete_8 (65544)",
      "contents": "KAudioChannelLabel_Discrete_8"
    },
    {
      "trigger": "kAudioChannelLabel_Discrete_9 (65545)",
      "contents": "KAudioChannelLabel_Discrete_9"
    },
    {
      "trigger": "kAudioChannelLabel_ForeignLanguage (305)",
      "contents": "KAudioChannelLabel_ForeignLanguage"
    },
    {
      "trigger": "kAudioChannelLabel_Haptic (45)",
      "contents": "KAudioChannelLabel_Haptic"
    },
    {
      "trigger": "kAudioChannelLabel_HeadphonesLeft (301)",
      "contents": "KAudioChannelLabel_HeadphonesLeft"
    },
    {
      "trigger": "kAudioChannelLabel_HeadphonesRight (302)",
      "contents": "KAudioChannelLabel_HeadphonesRight"
    },
    {
      "trigger": "kAudioChannelLabel_HearingImpaired (40)",
      "contents": "KAudioChannelLabel_HearingImpaired"
    },
    {
      "trigger": "kAudioChannelLabel_LFE2 (37)",
      "contents": "KAudioChannelLabel_LFE2"
    },
    {
      "trigger": "kAudioChannelLabel_LFEScreen (4)",
      "contents": "KAudioChannelLabel_LFEScreen"
    },
    {
      "trigger": "kAudioChannelLabel_Left (1)",
      "contents": "KAudioChannelLabel_Left"
    },
    {
      "trigger": "kAudioChannelLabel_LeftCenter (7)",
      "contents": "KAudioChannelLabel_LeftCenter"
    },
    {
      "trigger": "kAudioChannelLabel_LeftSurround (5)",
      "contents": "KAudioChannelLabel_LeftSurround"
    },
    {
      "trigger": "kAudioChannelLabel_LeftSurroundDirect (10)",
      "contents": "KAudioChannelLabel_LeftSurroundDirect"
    },
    {
      "trigger": "kAudioChannelLabel_LeftTotal (38)",
      "contents": "KAudioChannelLabel_LeftTotal"
    },
    {
      "trigger": "kAudioChannelLabel_LeftWide (35)",
      "contents": "KAudioChannelLabel_LeftWide"
    },
    {
      "trigger": "kAudioChannelLabel_MS_Mid (204)",
      "contents": "KAudioChannelLabel_MS_Mid"
    },
    {
      "trigger": "kAudioChannelLabel_MS_Side (205)",
      "contents": "KAudioChannelLabel_MS_Side"
    },
    {
      "trigger": "kAudioChannelLabel_Mono (42)",
      "contents": "KAudioChannelLabel_Mono"
    },
    {
      "trigger": "kAudioChannelLabel_Narration (41)",
      "contents": "KAudioChannelLabel_Narration"
    },
    {
      "trigger": "kAudioChannelLabel_RearSurroundLeft (33)",
      "contents": "KAudioChannelLabel_RearSurroundLeft"
    },
    {
      "trigger": "kAudioChannelLabel_RearSurroundRight (34)",
      "contents": "KAudioChannelLabel_RearSurroundRight"
    },
    {
      "trigger": "kAudioChannelLabel_Right (2)",
      "contents": "KAudioChannelLabel_Right"
    },
    {
      "trigger": "kAudioChannelLabel_RightCenter (8)",
      "contents": "KAudioChannelLabel_RightCenter"
    },
    {
      "trigger": "kAudioChannelLabel_RightSurround (6)",
      "contents": "KAudioChannelLabel_RightSurround"
    },
    {
      "trigger": "kAudioChannelLabel_RightSurroundDirect (11)",
      "contents": "KAudioChannelLabel_RightSurroundDirect"
    },
    {
      "trigger": "kAudioChannelLabel_RightTotal (39)",
      "contents": "KAudioChannelLabel_RightTotal"
    },
    {
      "trigger": "kAudioChannelLabel_RightWide (36)",
      "contents": "KAudioChannelLabel_RightWide"
    },
    {
      "trigger": "kAudioChannelLabel_TopBackCenter (17)",
      "contents": "KAudioChannelLabel_TopBackCenter"
    },
    {
      "trigger": "kAudioChannelLabel_TopBackLeft (16)",
      "contents": "KAudioChannelLabel_TopBackLeft"
    },
    {
      "trigger": "kAudioChannelLabel_TopBackRight (18)",
      "contents": "KAudioChannelLabel_TopBackRight"
    },
    {
      "trigger": "kAudioChannelLabel_TopCenterSurround (12)",
      "contents": "KAudioChannelLabel_TopCenterSurround"
    },
    {
      "trigger": "kAudioChannelLabel_Unknown (4294967295)",
      "contents": "KAudioChannelLabel_Unknown"
    },
    {
      "trigger": "kAudioChannelLabel_Unused (0)",
      "contents": "KAudioChannelLabel_Unused"
    },
    {
      "trigger": "kAudioChannelLabel_UseCoordinates (100)",
      "contents": "KAudioChannelLabel_UseCoordinates"
    },
    {
      "trigger": "kAudioChannelLabel_VerticalHeightCenter (14)",
      "contents": "KAudioChannelLabel_VerticalHeightCenter"
    },
    {
      "trigger": "kAudioChannelLabel_VerticalHeightLeft (13)",
      "contents": "KAudioChannelLabel_VerticalHeightLeft"
    },
    {
      "trigger": "kAudioChannelLabel_VerticalHeightRight (15)",
      "contents": "KAudioChannelLabel_VerticalHeightRight"
    },
    {
      "trigger": "kAudioChannelLabel_XY_X (206)",
      "contents": "KAudioChannelLabel_XY_X"
    },
    {
      "trigger": "kAudioChannelLabel_XY_Y (207)",
      "contents": "KAudioChannelLabel_XY_Y"
    },
    {
      "trigger": "kAudioChannelLayoutTag_AAC_3_0 (7471107)",
      "contents": "KAudioChannelLayoutTag_AAC_3_0"
    },
    {
      "trigger": "kAudioChannelLayoutTag_AAC_4_0 (7602180)",
      "contents": "KAudioChannelLayoutTag_AAC_4_0"
    },
    {
      "trigger": "kAudioChannelLayoutTag_AAC_5_0 (7864325)",
      "contents": "KAudioChannelLayoutTag_AAC_5_0"
    },
    {
      "trigger": "kAudioChannelLayoutTag_AAC_5_1 (8126470)",
      "contents": "KAudioChannelLayoutTag_AAC_5_1"
    },
    {
      "trigger": "kAudioChannelLayoutTag_AAC_6_0 (9240582)",
      "contents": "KAudioChannelLayoutTag_AAC_6_0"
    },
    {
      "trigger": "kAudioChannelLayoutTag_AAC_6_1 (9306119)",
      "contents": "KAudioChannelLayoutTag_AAC_6_1"
    },
    {
      "trigger": "kAudioChannelLayoutTag_AAC_7_0 (9371655)",
      "contents": "KAudioChannelLayoutTag_AAC_7_0"
    },
    {
      "trigger": "kAudioChannelLayoutTag_AAC_7_1 (8323080)",
      "contents": "KAudioChannelLayoutTag_AAC_7_1"
    },
    {
      "trigger": "kAudioChannelLayoutTag_AAC_Octagonal (9437192)",
      "contents": "KAudioChannelLayoutTag_AAC_Octagonal"
    },
    {
      "trigger": "kAudioChannelLayoutTag_AAC_Quadraphonic (7077892)",
      "contents": "KAudioChannelLayoutTag_AAC_Quadraphonic"
    },
    {
      "trigger": "kAudioChannelLayoutTag_AC3_1_0_1 (9764866)",
      "contents": "KAudioChannelLayoutTag_AC3_1_0_1"
    },
    {
      "trigger": "kAudioChannelLayoutTag_AC3_2_1_1 (10027012)",
      "contents": "KAudioChannelLayoutTag_AC3_2_1_1"
    },
    {
      "trigger": "kAudioChannelLayoutTag_AC3_3_0 (9830403)",
      "contents": "KAudioChannelLayoutTag_AC3_3_0"
    },
    {
      "trigger": "kAudioChannelLayoutTag_AC3_3_0_1 (9961476)",
      "contents": "KAudioChannelLayoutTag_AC3_3_0_1"
    },
    {
      "trigger": "kAudioChannelLayoutTag_AC3_3_1 (9895940)",
      "contents": "KAudioChannelLayoutTag_AC3_3_1"
    },
    {
      "trigger": "kAudioChannelLayoutTag_AC3_3_1_1 (10092549)",
      "contents": "KAudioChannelLayoutTag_AC3_3_1_1"
    },
    {
      "trigger": "kAudioChannelLayoutTag_Ambisonic_B_Format (7012356)",
      "contents": "KAudioChannelLayoutTag_Ambisonic_B_Format"
    },
    {
      "trigger": "kAudioChannelLayoutTag_AudioUnit_4 (7077892)",
      "contents": "KAudioChannelLayoutTag_AudioUnit_4"
    },
    {
      "trigger": "kAudioChannelLayoutTag_AudioUnit_5 (7143429)",
      "contents": "KAudioChannelLayoutTag_AudioUnit_5"
    },
    {
      "trigger": "kAudioChannelLayoutTag_AudioUnit_5_0 (7733253)",
      "contents": "KAudioChannelLayoutTag_AudioUnit_5_0"
    },
    {
      "trigger": "kAudioChannelLayoutTag_AudioUnit_5_1 (7929862)",
      "contents": "KAudioChannelLayoutTag_AudioUnit_5_1"
    },
    {
      "trigger": "kAudioChannelLayoutTag_AudioUnit_6 (7208966)",
      "contents": "KAudioChannelLayoutTag_AudioUnit_6"
    },
    {
      "trigger": "kAudioChannelLayoutTag_AudioUnit_6_0 (9109510)",
      "contents": "KAudioChannelLayoutTag_AudioUnit_6_0"
    },
    {
      "trigger": "kAudioChannelLayoutTag_AudioUnit_6_1 (8192007)",
      "contents": "KAudioChannelLayoutTag_AudioUnit_6_1"
    },
    {
      "trigger": "kAudioChannelLayoutTag_AudioUnit_7_0 (9175047)",
      "contents": "KAudioChannelLayoutTag_AudioUnit_7_0"
    },
    {
      "trigger": "kAudioChannelLayoutTag_AudioUnit_7_0_Front (9699335)",
      "contents": "KAudioChannelLayoutTag_AudioUnit_7_0_Front"
    },
    {
      "trigger": "kAudioChannelLayoutTag_AudioUnit_7_1 (8388616)",
      "contents": "KAudioChannelLayoutTag_AudioUnit_7_1"
    },
    {
      "trigger": "kAudioChannelLayoutTag_AudioUnit_7_1_Front (8257544)",
      "contents": "KAudioChannelLayoutTag_AudioUnit_7_1_Front"
    },
    {
      "trigger": "kAudioChannelLayoutTag_AudioUnit_8 (7274504)",
      "contents": "KAudioChannelLayoutTag_AudioUnit_8"
    },
    {
      "trigger": "kAudioChannelLayoutTag_Binaural (6946818)",
      "contents": "KAudioChannelLayoutTag_Binaural"
    },
    {
      "trigger": "kAudioChannelLayoutTag_Cube (7340040)",
      "contents": "KAudioChannelLayoutTag_Cube"
    },
    {
      "trigger": "kAudioChannelLayoutTag_DTS_3_1 (11010052)",
      "contents": "KAudioChannelLayoutTag_DTS_3_1"
    },
    {
      "trigger": "kAudioChannelLayoutTag_DTS_4_1 (11075589)",
      "contents": "KAudioChannelLayoutTag_DTS_4_1"
    },
    {
      "trigger": "kAudioChannelLayoutTag_DTS_6_0_A (11141126)",
      "contents": "KAudioChannelLayoutTag_DTS_6_0_A"
    },
    {
      "trigger": "kAudioChannelLayoutTag_DTS_6_0_B (11206662)",
      "contents": "KAudioChannelLayoutTag_DTS_6_0_B"
    },
    {
      "trigger": "kAudioChannelLayoutTag_DTS_6_0_C (11272198)",
      "contents": "KAudioChannelLayoutTag_DTS_6_0_C"
    },
    {
      "trigger": "kAudioChannelLayoutTag_DTS_6_1_A (11337735)",
      "contents": "KAudioChannelLayoutTag_DTS_6_1_A"
    },
    {
      "trigger": "kAudioChannelLayoutTag_DTS_6_1_B (11403271)",
      "contents": "KAudioChannelLayoutTag_DTS_6_1_B"
    },
    {
      "trigger": "kAudioChannelLayoutTag_DTS_6_1_C (11468807)",
      "contents": "KAudioChannelLayoutTag_DTS_6_1_C"
    },
    {
      "trigger": "kAudioChannelLayoutTag_DTS_6_1_D (11927559)",
      "contents": "KAudioChannelLayoutTag_DTS_6_1_D"
    },
    {
      "trigger": "kAudioChannelLayoutTag_DTS_7_0 (11534343)",
      "contents": "KAudioChannelLayoutTag_DTS_7_0"
    },
    {
      "trigger": "kAudioChannelLayoutTag_DTS_7_1 (11599880)",
      "contents": "KAudioChannelLayoutTag_DTS_7_1"
    },
    {
      "trigger": "kAudioChannelLayoutTag_DTS_8_0_A (11665416)",
      "contents": "KAudioChannelLayoutTag_DTS_8_0_A"
    },
    {
      "trigger": "kAudioChannelLayoutTag_DTS_8_0_B (11730952)",
      "contents": "KAudioChannelLayoutTag_DTS_8_0_B"
    },
    {
      "trigger": "kAudioChannelLayoutTag_DTS_8_1_A (11796489)",
      "contents": "KAudioChannelLayoutTag_DTS_8_1_A"
    },
    {
      "trigger": "kAudioChannelLayoutTag_DTS_8_1_B (11862025)",
      "contents": "KAudioChannelLayoutTag_DTS_8_1_B"
    },
    {
      "trigger": "kAudioChannelLayoutTag_DVD_0 (6553601)",
      "contents": "KAudioChannelLayoutTag_DVD_0"
    },
    {
      "trigger": "kAudioChannelLayoutTag_DVD_1 (6619138)",
      "contents": "KAudioChannelLayoutTag_DVD_1"
    },
    {
      "trigger": "kAudioChannelLayoutTag_DVD_10 (8912900)",
      "contents": "KAudioChannelLayoutTag_DVD_10"
    },
    {
      "trigger": "kAudioChannelLayoutTag_DVD_11 (8978437)",
      "contents": "KAudioChannelLayoutTag_DVD_11"
    },
    {
      "trigger": "kAudioChannelLayoutTag_DVD_12 (7929862)",
      "contents": "KAudioChannelLayoutTag_DVD_12"
    },
    {
      "trigger": "kAudioChannelLayoutTag_DVD_13 (7536644)",
      "contents": "KAudioChannelLayoutTag_DVD_13"
    },
    {
      "trigger": "kAudioChannelLayoutTag_DVD_14 (7667717)",
      "contents": "KAudioChannelLayoutTag_DVD_14"
    },
    {
      "trigger": "kAudioChannelLayoutTag_DVD_15 (8912900)",
      "contents": "KAudioChannelLayoutTag_DVD_15"
    },
    {
      "trigger": "kAudioChannelLayoutTag_DVD_16 (8978437)",
      "contents": "KAudioChannelLayoutTag_DVD_16"
    },
    {
      "trigger": "kAudioChannelLayoutTag_DVD_17 (7929862)",
      "contents": "KAudioChannelLayoutTag_DVD_17"
    },
    {
      "trigger": "kAudioChannelLayoutTag_DVD_18 (9043973)",
      "contents": "KAudioChannelLayoutTag_DVD_18"
    },
    {
      "trigger": "kAudioChannelLayoutTag_DVD_19 (7733253)",
      "contents": "KAudioChannelLayoutTag_DVD_19"
    },
    {
      "trigger": "kAudioChannelLayoutTag_DVD_2 (8585219)",
      "contents": "KAudioChannelLayoutTag_DVD_2"
    },
    {
      "trigger": "kAudioChannelLayoutTag_DVD_20 (7995398)",
      "contents": "KAudioChannelLayoutTag_DVD_20"
    },
    {
      "trigger": "kAudioChannelLayoutTag_DVD_3 (8650756)",
      "contents": "KAudioChannelLayoutTag_DVD_3"
    },
    {
      "trigger": "kAudioChannelLayoutTag_DVD_4 (8716291)",
      "contents": "KAudioChannelLayoutTag_DVD_4"
    },
    {
      "trigger": "kAudioChannelLayoutTag_DVD_5 (8781828)",
      "contents": "KAudioChannelLayoutTag_DVD_5"
    },
    {
      "trigger": "kAudioChannelLayoutTag_DVD_6 (8847365)",
      "contents": "KAudioChannelLayoutTag_DVD_6"
    },
    {
      "trigger": "kAudioChannelLayoutTag_DVD_7 (7405571)",
      "contents": "KAudioChannelLayoutTag_DVD_7"
    },
    {
      "trigger": "kAudioChannelLayoutTag_DVD_8 (7536644)",
      "contents": "KAudioChannelLayoutTag_DVD_8"
    },
    {
      "trigger": "kAudioChannelLayoutTag_DVD_9 (7667717)",
      "contents": "KAudioChannelLayoutTag_DVD_9"
    },
    {
      "trigger": "kAudioChannelLayoutTag_DiscreteInOrder (9633792)",
      "contents": "KAudioChannelLayoutTag_DiscreteInOrder"
    },
    {
      "trigger": "kAudioChannelLayoutTag_EAC3_6_1_A (10289159)",
      "contents": "KAudioChannelLayoutTag_EAC3_6_1_A"
    },
    {
      "trigger": "kAudioChannelLayoutTag_EAC3_6_1_B (10354695)",
      "contents": "KAudioChannelLayoutTag_EAC3_6_1_B"
    },
    {
      "trigger": "kAudioChannelLayoutTag_EAC3_6_1_C (10420231)",
      "contents": "KAudioChannelLayoutTag_EAC3_6_1_C"
    },
    {
      "trigger": "kAudioChannelLayoutTag_EAC3_7_1_A (10485768)",
      "contents": "KAudioChannelLayoutTag_EAC3_7_1_A"
    },
    {
      "trigger": "kAudioChannelLayoutTag_EAC3_7_1_B (10551304)",
      "contents": "KAudioChannelLayoutTag_EAC3_7_1_B"
    },
    {
      "trigger": "kAudioChannelLayoutTag_EAC3_7_1_C (10616840)",
      "contents": "KAudioChannelLayoutTag_EAC3_7_1_C"
    },
    {
      "trigger": "kAudioChannelLayoutTag_EAC3_7_1_D (10682376)",
      "contents": "KAudioChannelLayoutTag_EAC3_7_1_D"
    },
    {
      "trigger": "kAudioChannelLayoutTag_EAC3_7_1_E (10747912)",
      "contents": "KAudioChannelLayoutTag_EAC3_7_1_E"
    },
    {
      "trigger": "kAudioChannelLayoutTag_EAC3_7_1_F (10813448)",
      "contents": "KAudioChannelLayoutTag_EAC3_7_1_F"
    },
    {
      "trigger": "kAudioChannelLayoutTag_EAC3_7_1_G (10878984)",
      "contents": "KAudioChannelLayoutTag_EAC3_7_1_G"
    },
    {
      "trigger": "kAudioChannelLayoutTag_EAC3_7_1_H (10944520)",
      "contents": "KAudioChannelLayoutTag_EAC3_7_1_H"
    },
    {
      "trigger": "kAudioChannelLayoutTag_EAC_6_0_A (10158086)",
      "contents": "KAudioChannelLayoutTag_EAC_6_0_A"
    },
    {
      "trigger": "kAudioChannelLayoutTag_EAC_7_0_A (10223623)",
      "contents": "KAudioChannelLayoutTag_EAC_7_0_A"
    },
    {
      "trigger": "kAudioChannelLayoutTag_Emagic_Default_7_1 (8454152)",
      "contents": "KAudioChannelLayoutTag_Emagic_Default_7_1"
    },
    {
      "trigger": "kAudioChannelLayoutTag_Hexagonal (7208966)",
      "contents": "KAudioChannelLayoutTag_Hexagonal"
    },
    {
      "trigger": "kAudioChannelLayoutTag_ITU_1_0 (6553601)",
      "contents": "KAudioChannelLayoutTag_ITU_1_0"
    },
    {
      "trigger": "kAudioChannelLayoutTag_ITU_2_0 (6619138)",
      "contents": "KAudioChannelLayoutTag_ITU_2_0"
    },
    {
      "trigger": "kAudioChannelLayoutTag_ITU_2_1 (8585219)",
      "contents": "KAudioChannelLayoutTag_ITU_2_1"
    },
    {
      "trigger": "kAudioChannelLayoutTag_ITU_2_2 (8650756)",
      "contents": "KAudioChannelLayoutTag_ITU_2_2"
    },
    {
      "trigger": "kAudioChannelLayoutTag_ITU_3_0 (7405571)",
      "contents": "KAudioChannelLayoutTag_ITU_3_0"
    },
    {
      "trigger": "kAudioChannelLayoutTag_ITU_3_1 (7536644)",
      "contents": "KAudioChannelLayoutTag_ITU_3_1"
    },
    {
      "trigger": "kAudioChannelLayoutTag_ITU_3_2 (7667717)",
      "contents": "KAudioChannelLayoutTag_ITU_3_2"
    },
    {
      "trigger": "kAudioChannelLayoutTag_ITU_3_2_1 (7929862)",
      "contents": "KAudioChannelLayoutTag_ITU_3_2_1"
    },
    {
      "trigger": "kAudioChannelLayoutTag_ITU_3_4_1 (8388616)",
      "contents": "KAudioChannelLayoutTag_ITU_3_4_1"
    },
    {
      "trigger": "kAudioChannelLayoutTag_MPEG_1_0 (6553601)",
      "contents": "KAudioChannelLayoutTag_MPEG_1_0"
    },
    {
      "trigger": "kAudioChannelLayoutTag_MPEG_2_0 (6619138)",
      "contents": "KAudioChannelLayoutTag_MPEG_2_0"
    },
    {
      "trigger": "kAudioChannelLayoutTag_MPEG_3_0_A (7405571)",
      "contents": "KAudioChannelLayoutTag_MPEG_3_0_A"
    },
    {
      "trigger": "kAudioChannelLayoutTag_MPEG_3_0_B (7471107)",
      "contents": "KAudioChannelLayoutTag_MPEG_3_0_B"
    },
    {
      "trigger": "kAudioChannelLayoutTag_MPEG_4_0_A (7536644)",
      "contents": "KAudioChannelLayoutTag_MPEG_4_0_A"
    },
    {
      "trigger": "kAudioChannelLayoutTag_MPEG_4_0_B (7602180)",
      "contents": "KAudioChannelLayoutTag_MPEG_4_0_B"
    },
    {
      "trigger": "kAudioChannelLayoutTag_MPEG_5_0_A (7667717)",
      "contents": "KAudioChannelLayoutTag_MPEG_5_0_A"
    },
    {
      "trigger": "kAudioChannelLayoutTag_MPEG_5_0_B (7733253)",
      "contents": "KAudioChannelLayoutTag_MPEG_5_0_B"
    },
    {
      "trigger": "kAudioChannelLayoutTag_MPEG_5_0_C (7798789)",
      "contents": "KAudioChannelLayoutTag_MPEG_5_0_C"
    },
    {
      "trigger": "kAudioChannelLayoutTag_MPEG_5_0_D (7864325)",
      "contents": "KAudioChannelLayoutTag_MPEG_5_0_D"
    },
    {
      "trigger": "kAudioChannelLayoutTag_MPEG_5_1_A (7929862)",
      "contents": "KAudioChannelLayoutTag_MPEG_5_1_A"
    },
    {
      "trigger": "kAudioChannelLayoutTag_MPEG_5_1_B (7995398)",
      "contents": "KAudioChannelLayoutTag_MPEG_5_1_B"
    },
    {
      "trigger": "kAudioChannelLayoutTag_MPEG_5_1_C (8060934)",
      "contents": "KAudioChannelLayoutTag_MPEG_5_1_C"
    },
    {
      "trigger": "kAudioChannelLayoutTag_MPEG_5_1_D (8126470)",
      "contents": "KAudioChannelLayoutTag_MPEG_5_1_D"
    },
    {
      "trigger": "kAudioChannelLayoutTag_MPEG_6_1_A (8192007)",
      "contents": "KAudioChannelLayoutTag_MPEG_6_1_A"
    },
    {
      "trigger": "kAudioChannelLayoutTag_MPEG_7_1_A (8257544)",
      "contents": "KAudioChannelLayoutTag_MPEG_7_1_A"
    },
    {
      "trigger": "kAudioChannelLayoutTag_MPEG_7_1_B (8323080)",
      "contents": "KAudioChannelLayoutTag_MPEG_7_1_B"
    },
    {
      "trigger": "kAudioChannelLayoutTag_MPEG_7_1_C (8388616)",
      "contents": "KAudioChannelLayoutTag_MPEG_7_1_C"
    },
    {
      "trigger": "kAudioChannelLayoutTag_MatrixStereo (6750210)",
      "contents": "KAudioChannelLayoutTag_MatrixStereo"
    },
    {
      "trigger": "kAudioChannelLayoutTag_MidSide (6815746)",
      "contents": "KAudioChannelLayoutTag_MidSide"
    },
    {
      "trigger": "kAudioChannelLayoutTag_Mono (6553601)",
      "contents": "KAudioChannelLayoutTag_Mono"
    },
    {
      "trigger": "kAudioChannelLayoutTag_Octagonal (7274504)",
      "contents": "KAudioChannelLayoutTag_Octagonal"
    },
    {
      "trigger": "kAudioChannelLayoutTag_Pentagonal (7143429)",
      "contents": "KAudioChannelLayoutTag_Pentagonal"
    },
    {
      "trigger": "kAudioChannelLayoutTag_Quadraphonic (7077892)",
      "contents": "KAudioChannelLayoutTag_Quadraphonic"
    },
    {
      "trigger": "kAudioChannelLayoutTag_SMPTE_DTV (8519688)",
      "contents": "KAudioChannelLayoutTag_SMPTE_DTV"
    },
    {
      "trigger": "kAudioChannelLayoutTag_Stereo (6619138)",
      "contents": "KAudioChannelLayoutTag_Stereo"
    },
    {
      "trigger": "kAudioChannelLayoutTag_StereoHeadphones (6684674)",
      "contents": "KAudioChannelLayoutTag_StereoHeadphones"
    },
    {
      "trigger": "kAudioChannelLayoutTag_TMH_10_2_full (9568277)",
      "contents": "KAudioChannelLayoutTag_TMH_10_2_full"
    },
    {
      "trigger": "kAudioChannelLayoutTag_TMH_10_2_std (9502736)",
      "contents": "KAudioChannelLayoutTag_TMH_10_2_std"
    },
    {
      "trigger": "kAudioChannelLayoutTag_Unknown (4294901760)",
      "contents": "KAudioChannelLayoutTag_Unknown"
    },
    {
      "trigger": "kAudioChannelLayoutTag_UseChannelBitmap (65536)",
      "contents": "KAudioChannelLayoutTag_UseChannelBitmap"
    },
    {
      "trigger": "kAudioChannelLayoutTag_UseChannelDescriptions (0)",
      "contents": "KAudioChannelLayoutTag_UseChannelDescriptions"
    },
    {
      "trigger": "kAudioChannelLayoutTag_XY (6881282)",
      "contents": "KAudioChannelLayoutTag_XY"
    },
    {
      "trigger": "kAudioConverterApplicableEncodeBitRates (1634034290)",
      "contents": "KAudioConverterApplicableEncodeBitRates"
    },
    {
      "trigger": "kAudioConverterApplicableEncodeSampleRates (1634038642)",
      "contents": "KAudioConverterApplicableEncodeSampleRates"
    },
    {
      "trigger": "kAudioConverterAvailableEncodeBitRates (1986355826)",
      "contents": "KAudioConverterAvailableEncodeBitRates"
    },
    {
      "trigger": "kAudioConverterAvailableEncodeChannelLayoutTags (1634034540)",
      "contents": "KAudioConverterAvailableEncodeChannelLayoutTags"
    },
    {
      "trigger": "kAudioConverterAvailableEncodeSampleRates (1986360178)",
      "contents": "KAudioConverterAvailableEncodeSampleRates"
    },
    {
      "trigger": "kAudioConverterChannelMap (1667788144)",
      "contents": "KAudioConverterChannelMap"
    },
    {
      "trigger": "kAudioConverterCodecQuality (1667527029)",
      "contents": "KAudioConverterCodecQuality"
    },
    {
      "trigger": "kAudioConverterCompressionMagicCookie (1668114275)",
      "contents": "KAudioConverterCompressionMagicCookie"
    },
    {
      "trigger": "kAudioConverterCurrentInputStreamDescription (1633904996)",
      "contents": "KAudioConverterCurrentInputStreamDescription"
    },
    {
      "trigger": "kAudioConverterCurrentOutputStreamDescription (1633906532)",
      "contents": "KAudioConverterCurrentOutputStreamDescription"
    },
    {
      "trigger": "kAudioConverterDecompressionMagicCookie (1684891491)",
      "contents": "KAudioConverterDecompressionMagicCookie"
    },
    {
      "trigger": "kAudioConverterEncodeAdjustableSampleRate (1634366322)",
      "contents": "KAudioConverterEncodeAdjustableSampleRate"
    },
    {
      "trigger": "kAudioConverterEncodeBitRate (1651663220)",
      "contents": "KAudioConverterEncodeBitRate"
    },
    {
      "trigger": "kAudioConverterErr_BadPropertySizeError (561211770)",
      "contents": "KAudioConverterErr_BadPropertySizeError"
    },
    {
      "trigger": "kAudioConverterErr_FormatNotSupported (1718449215)",
      "contents": "KAudioConverterErr_FormatNotSupported"
    },
    {
      "trigger": "kAudioConverterErr_HardwareInUse (1752656245)",
      "contents": "KAudioConverterErr_HardwareInUse"
    },
    {
      "trigger": "kAudioConverterErr_InputSampleRateOutOfRange (560558962)",
      "contents": "KAudioConverterErr_InputSampleRateOutOfRange"
    },
    {
      "trigger": "kAudioConverterErr_InvalidInputSize (1768846202)",
      "contents": "KAudioConverterErr_InvalidInputSize"
    },
    {
      "trigger": "kAudioConverterErr_InvalidOutputSize (1869902714)",
      "contents": "KAudioConverterErr_InvalidOutputSize"
    },
    {
      "trigger": "kAudioConverterErr_NoHardwarePermission (1885696621)",
      "contents": "KAudioConverterErr_NoHardwarePermission"
    },
    {
      "trigger": "kAudioConverterErr_OperationNotSupported (1869627199)",
      "contents": "KAudioConverterErr_OperationNotSupported"
    },
    {
      "trigger": "kAudioConverterErr_OutputSampleRateOutOfRange (560952178)",
      "contents": "KAudioConverterErr_OutputSampleRateOutOfRange"
    },
    {
      "trigger": "kAudioConverterErr_PropertyNotSupported (1886547824)",
      "contents": "KAudioConverterErr_PropertyNotSupported"
    },
    {
      "trigger": "kAudioConverterErr_RequiresPacketDescriptionsError (561015652)",
      "contents": "KAudioConverterErr_RequiresPacketDescriptionsError"
    },
    {
      "trigger": "kAudioConverterErr_UnspecifiedError (2003329396)",
      "contents": "KAudioConverterErr_UnspecifiedError"
    },
    {
      "trigger": "kAudioConverterInputChannelLayout (1768123424)",
      "contents": "KAudioConverterInputChannelLayout"
    },
    {
      "trigger": "kAudioConverterOutputChannelLayout (1868786720)",
      "contents": "KAudioConverterOutputChannelLayout"
    },
    {
      "trigger": "kAudioConverterPrimeInfo (1886546285)",
      "contents": "KAudioConverterPrimeInfo"
    },
    {
      "trigger": "kAudioConverterPrimeMethod (1886547309)",
      "contents": "KAudioConverterPrimeMethod"
    },
    {
      "trigger": "kAudioConverterPropertyBitDepthHint (1633903204)",
      "contents": "KAudioConverterPropertyBitDepthHint"
    },
    {
      "trigger": "kAudioConverterPropertyCalculateInputBufferSize (1667850867)",
      "contents": "KAudioConverterPropertyCalculateInputBufferSize"
    },
    {
      "trigger": "kAudioConverterPropertyCalculateOutputBufferSize (1668244083)",
      "contents": "KAudioConverterPropertyCalculateOutputBufferSize"
    },
    {
      "trigger": "kAudioConverterPropertyCanResumeFromInterruption (1668441705)",
      "contents": "KAudioConverterPropertyCanResumeFromInterruption"
    },
    {
      "trigger": "kAudioConverterPropertyFormatList (1718383476)",
      "contents": "KAudioConverterPropertyFormatList"
    },
    {
      "trigger": "kAudioConverterPropertyInputCodecParameters (1768121456)",
      "contents": "KAudioConverterPropertyInputCodecParameters"
    },
    {
      "trigger": "kAudioConverterPropertyMaximumInputBufferSize (2020172403)",
      "contents": "KAudioConverterPropertyMaximumInputBufferSize"
    },
    {
      "trigger": "kAudioConverterPropertyMaximumInputPacketSize (2020175987)",
      "contents": "KAudioConverterPropertyMaximumInputPacketSize"
    },
    {
      "trigger": "kAudioConverterPropertyMaximumOutputPacketSize (2020569203)",
      "contents": "KAudioConverterPropertyMaximumOutputPacketSize"
    },
    {
      "trigger": "kAudioConverterPropertyMinimumInputBufferSize (1835623027)",
      "contents": "KAudioConverterPropertyMinimumInputBufferSize"
    },
    {
      "trigger": "kAudioConverterPropertyMinimumOutputBufferSize (1836016243)",
      "contents": "KAudioConverterPropertyMinimumOutputBufferSize"
    },
    {
      "trigger": "kAudioConverterPropertyOutputCodecParameters (1868784752)",
      "contents": "KAudioConverterPropertyOutputCodecParameters"
    },
    {
      "trigger": "kAudioConverterPropertySettings (1633906803)",
      "contents": "KAudioConverterPropertySettings"
    },
    {
      "trigger": "kAudioConverterQuality_High (96)",
      "contents": "KAudioConverterQuality_High"
    },
    {
      "trigger": "kAudioConverterQuality_Low (32)",
      "contents": "KAudioConverterQuality_Low"
    },
    {
      "trigger": "kAudioConverterQuality_Max (127)",
      "contents": "KAudioConverterQuality_Max"
    },
    {
      "trigger": "kAudioConverterQuality_Medium (64)",
      "contents": "KAudioConverterQuality_Medium"
    },
    {
      "trigger": "kAudioConverterQuality_Min (0)",
      "contents": "KAudioConverterQuality_Min"
    },
    {
      "trigger": "kAudioConverterSampleRateConverterAlgorithm (1936876393)",
      "contents": "KAudioConverterSampleRateConverterAlgorithm"
    },
    {
      "trigger": "kAudioConverterSampleRateConverterComplexity (1936876385)",
      "contents": "KAudioConverterSampleRateConverterComplexity"
    },
    {
      "trigger": "kAudioConverterSampleRateConverterComplexity_Linear (1818848869)",
      "contents": "KAudioConverterSampleRateConverterComplexity_Linear"
    },
    {
      "trigger": "kAudioConverterSampleRateConverterComplexity_Mastering (1650553971)",
      "contents": "KAudioConverterSampleRateConverterComplexity_Mastering"
    },
    {
      "trigger": "kAudioConverterSampleRateConverterComplexity_Normal (1852797549)",
      "contents": "KAudioConverterSampleRateConverterComplexity_Normal"
    },
    {
      "trigger": "kAudioConverterSampleRateConverterInitialPhase (1936876400)",
      "contents": "KAudioConverterSampleRateConverterInitialPhase"
    },
    {
      "trigger": "kAudioConverterSampleRateConverterQuality (1936876401)",
      "contents": "KAudioConverterSampleRateConverterQuality"
    },
    {
      "trigger": "kAudioDecoderComponentType (1633969507)",
      "contents": "KAudioDecoderComponentType"
    },
    {
      "trigger": "kAudioEncoderComponentType (1634037347)",
      "contents": "KAudioEncoderComponentType"
    },
    {
      "trigger": "kAudioFile3GP2Type (862416946)",
      "contents": "KAudioFile3GP2Type"
    },
    {
      "trigger": "kAudioFile3GPType (862417008)",
      "contents": "KAudioFile3GPType"
    },
    {
      "trigger": "kAudioFileAAC_ADTSType (1633973363)",
      "contents": "KAudioFileAAC_ADTSType"
    },
    {
      "trigger": "kAudioFileAC3Type (1633889587)",
      "contents": "KAudioFileAC3Type"
    },
    {
      "trigger": "kAudioFileAIFCType (1095321155)",
      "contents": "KAudioFileAIFCType"
    },
    {
      "trigger": "kAudioFileAIFFType (1095321158)",
      "contents": "KAudioFileAIFFType"
    },
    {
      "trigger": "kAudioFileAMRType (1634562662)",
      "contents": "KAudioFileAMRType"
    },
    {
      "trigger": "kAudioFileBadPropertySizeError (561211770)",
      "contents": "KAudioFileBadPropertySizeError"
    },
    {
      "trigger": "kAudioFileCAFType (1667327590)",
      "contents": "KAudioFileCAFType"
    },
    {
      "trigger": "kAudioFileDoesNotAllow64BitDataSizeError (1868981823)",
      "contents": "KAudioFileDoesNotAllow64BitDataSizeError"
    },
    {
      "trigger": "kAudioFileEndOfFileError (-39)",
      "contents": "KAudioFileEndOfFileError"
    },
    {
      "trigger": "kAudioFileFileNotFoundError (-43)",
      "contents": "KAudioFileFileNotFoundError"
    },
    {
      "trigger": "kAudioFileFlags_DontPageAlignAudioData (2)",
      "contents": "KAudioFileFlags_DontPageAlignAudioData"
    },
    {
      "trigger": "kAudioFileFlags_EraseFile (1)",
      "contents": "KAudioFileFlags_EraseFile"
    },
    {
      "trigger": "kAudioFileGlobalInfo_AllExtensions (1634498676)",
      "contents": "KAudioFileGlobalInfo_AllExtensions"
    },
    {
      "trigger": "kAudioFileGlobalInfo_AllHFSTypeCodes (1634231923)",
      "contents": "KAudioFileGlobalInfo_AllHFSTypeCodes"
    },
    {
      "trigger": "kAudioFileGlobalInfo_AllMIMETypes (1634560365)",
      "contents": "KAudioFileGlobalInfo_AllMIMETypes"
    },
    {
      "trigger": "kAudioFileGlobalInfo_AllUTIs (1635087465)",
      "contents": "KAudioFileGlobalInfo_AllUTIs"
    },
    {
      "trigger": "kAudioFileGlobalInfo_AvailableFormatIDs (1718446436)",
      "contents": "KAudioFileGlobalInfo_AvailableFormatIDs"
    },
    {
      "trigger": "kAudioFileGlobalInfo_AvailableStreamDescriptionsForFormat (1935960420)",
      "contents": "KAudioFileGlobalInfo_AvailableStreamDescriptionsForFormat"
    },
    {
      "trigger": "kAudioFileGlobalInfo_ExtensionsForType (1717926004)",
      "contents": "KAudioFileGlobalInfo_ExtensionsForType"
    },
    {
      "trigger": "kAudioFileGlobalInfo_FileTypeName (1718906477)",
      "contents": "KAudioFileGlobalInfo_FileTypeName"
    },
    {
      "trigger": "kAudioFileGlobalInfo_HFSTypeCodesForType (1718118003)",
      "contents": "KAudioFileGlobalInfo_HFSTypeCodesForType"
    },
    {
      "trigger": "kAudioFileGlobalInfo_MIMETypesForType (1718446445)",
      "contents": "KAudioFileGlobalInfo_MIMETypesForType"
    },
    {
      "trigger": "kAudioFileGlobalInfo_ReadableTypes (1634103910)",
      "contents": "KAudioFileGlobalInfo_ReadableTypes"
    },
    {
      "trigger": "kAudioFileGlobalInfo_TypesForExtension (1952807028)",
      "contents": "KAudioFileGlobalInfo_TypesForExtension"
    },
    {
      "trigger": "kAudioFileGlobalInfo_TypesForHFSTypeCode (1952999027)",
      "contents": "KAudioFileGlobalInfo_TypesForHFSTypeCode"
    },
    {
      "trigger": "kAudioFileGlobalInfo_TypesForMIMEType (1953327469)",
      "contents": "KAudioFileGlobalInfo_TypesForMIMEType"
    },
    {
      "trigger": "kAudioFileGlobalInfo_TypesForUTI (1953854569)",
      "contents": "KAudioFileGlobalInfo_TypesForUTI"
    },
    {
      "trigger": "kAudioFileGlobalInfo_UTIsForType (1718973545)",
      "contents": "KAudioFileGlobalInfo_UTIsForType"
    },
    {
      "trigger": "kAudioFileGlobalInfo_WritableTypes (1634105190)",
      "contents": "KAudioFileGlobalInfo_WritableTypes"
    },
    {
      "trigger": "kAudioFileInvalidChunkError (1667787583)",
      "contents": "KAudioFileInvalidChunkError"
    },
    {
      "trigger": "kAudioFileInvalidFileError (1685348671)",
      "contents": "KAudioFileInvalidFileError"
    },
    {
      "trigger": "kAudioFileInvalidPacketOffsetError (1885563711)",
      "contents": "KAudioFileInvalidPacketOffsetError"
    },
    {
      "trigger": "kAudioFileLoopDirection_Backward (3)",
      "contents": "KAudioFileLoopDirection_Backward"
    },
    {
      "trigger": "kAudioFileLoopDirection_Forward (1)",
      "contents": "KAudioFileLoopDirection_Forward"
    },
    {
      "trigger": "kAudioFileLoopDirection_ForwardAndBackward (2)",
      "contents": "KAudioFileLoopDirection_ForwardAndBackward"
    },
    {
      "trigger": "kAudioFileLoopDirection_NoLooping (0)",
      "contents": "KAudioFileLoopDirection_NoLooping"
    },
    {
      "trigger": "kAudioFileM4AType (1832149350)",
      "contents": "KAudioFileM4AType"
    },
    {
      "trigger": "kAudioFileMP1Type (1297106737)",
      "contents": "KAudioFileMP1Type"
    },
    {
      "trigger": "kAudioFileMP2Type (1297106738)",
      "contents": "KAudioFileMP2Type"
    },
    {
      "trigger": "kAudioFileMP3Type (1297106739)",
      "contents": "KAudioFileMP3Type"
    },
    {
      "trigger": "kAudioFileMPEG4Type (1836069990)",
      "contents": "KAudioFileMPEG4Type"
    },
    {
      "trigger": "kAudioFileMarkerType_Generic (0)",
      "contents": "KAudioFileMarkerType_Generic"
    },
    {
      "trigger": "kAudioFileNextType (1315264596)",
      "contents": "KAudioFileNextType"
    },
    {
      "trigger": "kAudioFileNotOpenError (-38)",
      "contents": "KAudioFileNotOpenError"
    },
    {
      "trigger": "kAudioFileNotOptimizedError (1869640813)",
      "contents": "KAudioFileNotOptimizedError"
    },
    {
      "trigger": "kAudioFileOperationNotSupportedError (1869627199)",
      "contents": "KAudioFileOperationNotSupportedError"
    },
    {
      "trigger": "kAudioFilePermissionsError (1886547263)",
      "contents": "KAudioFilePermissionsError"
    },
    {
      "trigger": "kAudioFilePositionError (-40)",
      "contents": "KAudioFilePositionError"
    },
    {
      "trigger": "kAudioFilePropertyAlbumArtwork (1633776244)",
      "contents": "KAudioFilePropertyAlbumArtwork"
    },
    {
      "trigger": "kAudioFilePropertyAudioDataByteCount (1650683508)",
      "contents": "KAudioFilePropertyAudioDataByteCount"
    },
    {
      "trigger": "kAudioFilePropertyAudioDataPacketCount (1885564532)",
      "contents": "KAudioFilePropertyAudioDataPacketCount"
    },
    {
      "trigger": "kAudioFilePropertyBitRate (1651663220)",
      "contents": "KAudioFilePropertyBitRate"
    },
    {
      "trigger": "kAudioFilePropertyByteToPacket (1652125803)",
      "contents": "KAudioFilePropertyByteToPacket"
    },
    {
      "trigger": "kAudioFilePropertyChannelLayout (1668112752)",
      "contents": "KAudioFilePropertyChannelLayout"
    },
    {
      "trigger": "kAudioFilePropertyChunkIDs (1667787108)",
      "contents": "KAudioFilePropertyChunkIDs"
    },
    {
      "trigger": "kAudioFilePropertyDataFormat (1684434292)",
      "contents": "KAudioFilePropertyDataFormat"
    },
    {
      "trigger": "kAudioFilePropertyDataFormatName (1718512997)",
      "contents": "KAudioFilePropertyDataFormatName"
    },
    {
      "trigger": "kAudioFilePropertyDataOffset (1685022310)",
      "contents": "KAudioFilePropertyDataOffset"
    },
    {
      "trigger": "kAudioFilePropertyDeferSizeUpdates (1685289589)",
      "contents": "KAudioFilePropertyDeferSizeUpdates"
    },
    {
      "trigger": "kAudioFilePropertyEstimatedDuration (1701082482)",
      "contents": "KAudioFilePropertyEstimatedDuration"
    },
    {
      "trigger": "kAudioFilePropertyFileFormat (1717988724)",
      "contents": "KAudioFilePropertyFileFormat"
    },
    {
      "trigger": "kAudioFilePropertyFormatList (1718383476)",
      "contents": "KAudioFilePropertyFormatList"
    },
    {
      "trigger": "kAudioFilePropertyFrameToPacket (1718775915)",
      "contents": "KAudioFilePropertyFrameToPacket"
    },
    {
      "trigger": "kAudioFilePropertyID3Tag (1768174452)",
      "contents": "KAudioFilePropertyID3Tag"
    },
    {
      "trigger": "kAudioFilePropertyInfoDictionary (1768842863)",
      "contents": "KAudioFilePropertyInfoDictionary"
    },
    {
      "trigger": "kAudioFilePropertyIsOptimized (1869640813)",
      "contents": "KAudioFilePropertyIsOptimized"
    },
    {
      "trigger": "kAudioFilePropertyMagicCookieData (1835493731)",
      "contents": "KAudioFilePropertyMagicCookieData"
    },
    {
      "trigger": "kAudioFilePropertyMarkerList (1835756659)",
      "contents": "KAudioFilePropertyMarkerList"
    },
    {
      "trigger": "kAudioFilePropertyMaximumPacketSize (1886616165)",
      "contents": "KAudioFilePropertyMaximumPacketSize"
    },
    {
      "trigger": "kAudioFilePropertyPacketSizeUpperBound (1886090594)",
      "contents": "KAudioFilePropertyPacketSizeUpperBound"
    },
    {
      "trigger": "kAudioFilePropertyPacketTableInfo (1886283375)",
      "contents": "KAudioFilePropertyPacketTableInfo"
    },
    {
      "trigger": "kAudioFilePropertyPacketToByte (1886085753)",
      "contents": "KAudioFilePropertyPacketToByte"
    },
    {
      "trigger": "kAudioFilePropertyPacketToFrame (1886086770)",
      "contents": "KAudioFilePropertyPacketToFrame"
    },
    {
      "trigger": "kAudioFilePropertyRegionList (1919380595)",
      "contents": "KAudioFilePropertyRegionList"
    },
    {
      "trigger": "kAudioFilePropertyReserveDuration (1920168566)",
      "contents": "KAudioFilePropertyReserveDuration"
    },
    {
      "trigger": "kAudioFilePropertySourceBitDepth (1935832164)",
      "contents": "KAudioFilePropertySourceBitDepth"
    },
    {
      "trigger": "kAudioFileReadPermission (1)",
      "contents": "KAudioFileReadPermission"
    },
    {
      "trigger": "kAudioFileReadWritePermission (3)",
      "contents": "KAudioFileReadWritePermission"
    },
    {
      "trigger": "kAudioFileRegionFlag_LoopEnable (1)",
      "contents": "KAudioFileRegionFlag_LoopEnable"
    },
    {
      "trigger": "kAudioFileRegionFlag_PlayBackward (4)",
      "contents": "KAudioFileRegionFlag_PlayBackward"
    },
    {
      "trigger": "kAudioFileRegionFlag_PlayForward (2)",
      "contents": "KAudioFileRegionFlag_PlayForward"
    },
    {
      "trigger": "kAudioFileSoundDesigner2Type (1399075430)",
      "contents": "KAudioFileSoundDesigner2Type"
    },
    {
      "trigger": "kAudioFileStreamError_BadPropertySize (561211770)",
      "contents": "KAudioFileStreamError_BadPropertySize"
    },
    {
      "trigger": "kAudioFileStreamError_DataUnavailable (1836020325)",
      "contents": "KAudioFileStreamError_DataUnavailable"
    },
    {
      "trigger": "kAudioFileStreamError_DiscontinuityCantRecover (1685283617)",
      "contents": "KAudioFileStreamError_DiscontinuityCantRecover"
    },
    {
      "trigger": "kAudioFileStreamError_IllegalOperation (1852797029)",
      "contents": "KAudioFileStreamError_IllegalOperation"
    },
    {
      "trigger": "kAudioFileStreamError_InvalidFile (1685348671)",
      "contents": "KAudioFileStreamError_InvalidFile"
    },
    {
      "trigger": "kAudioFileStreamError_InvalidPacketOffset (1885563711)",
      "contents": "KAudioFileStreamError_InvalidPacketOffset"
    },
    {
      "trigger": "kAudioFileStreamError_NotOptimized (1869640813)",
      "contents": "KAudioFileStreamError_NotOptimized"
    },
    {
      "trigger": "kAudioFileStreamError_UnspecifiedError (2003334207)",
      "contents": "KAudioFileStreamError_UnspecifiedError"
    },
    {
      "trigger": "kAudioFileStreamError_UnsupportedDataFormat (1718449215)",
      "contents": "KAudioFileStreamError_UnsupportedDataFormat"
    },
    {
      "trigger": "kAudioFileStreamError_UnsupportedFileType (1954115647)",
      "contents": "KAudioFileStreamError_UnsupportedFileType"
    },
    {
      "trigger": "kAudioFileStreamError_UnsupportedProperty (1886681407)",
      "contents": "KAudioFileStreamError_UnsupportedProperty"
    },
    {
      "trigger": "kAudioFileStreamError_ValueUnknown (1970170687)",
      "contents": "KAudioFileStreamError_ValueUnknown"
    },
    {
      "trigger": "kAudioFileStreamParseFlag_Discontinuity (1)",
      "contents": "KAudioFileStreamParseFlag_Discontinuity"
    },
    {
      "trigger": "kAudioFileStreamPropertyFlag_CacheProperty (2)",
      "contents": "KAudioFileStreamPropertyFlag_CacheProperty"
    },
    {
      "trigger": "kAudioFileStreamPropertyFlag_PropertyIsCached (1)",
      "contents": "KAudioFileStreamPropertyFlag_PropertyIsCached"
    },
    {
      "trigger": "kAudioFileStreamProperty_AudioDataByteCount (1650683508)",
      "contents": "KAudioFileStreamProperty_AudioDataByteCount"
    },
    {
      "trigger": "kAudioFileStreamProperty_AudioDataPacketCount (1885564532)",
      "contents": "KAudioFileStreamProperty_AudioDataPacketCount"
    },
    {
      "trigger": "kAudioFileStreamProperty_AverageBytesPerPacket (1633841264)",
      "contents": "KAudioFileStreamProperty_AverageBytesPerPacket"
    },
    {
      "trigger": "kAudioFileStreamProperty_BitRate (1651663220)",
      "contents": "KAudioFileStreamProperty_BitRate"
    },
    {
      "trigger": "kAudioFileStreamProperty_ByteToPacket (1652125803)",
      "contents": "KAudioFileStreamProperty_ByteToPacket"
    },
    {
      "trigger": "kAudioFileStreamProperty_ChannelLayout (1668112752)",
      "contents": "KAudioFileStreamProperty_ChannelLayout"
    },
    {
      "trigger": "kAudioFileStreamProperty_DataFormat (1684434292)",
      "contents": "KAudioFileStreamProperty_DataFormat"
    },
    {
      "trigger": "kAudioFileStreamProperty_DataOffset (1685022310)",
      "contents": "KAudioFileStreamProperty_DataOffset"
    },
    {
      "trigger": "kAudioFileStreamProperty_FileFormat (1717988724)",
      "contents": "KAudioFileStreamProperty_FileFormat"
    },
    {
      "trigger": "kAudioFileStreamProperty_FormatList (1718383476)",
      "contents": "KAudioFileStreamProperty_FormatList"
    },
    {
      "trigger": "kAudioFileStreamProperty_FrameToPacket (1718775915)",
      "contents": "KAudioFileStreamProperty_FrameToPacket"
    },
    {
      "trigger": "kAudioFileStreamProperty_MagicCookieData (1835493731)",
      "contents": "KAudioFileStreamProperty_MagicCookieData"
    },
    {
      "trigger": "kAudioFileStreamProperty_MaximumPacketSize (1886616165)",
      "contents": "KAudioFileStreamProperty_MaximumPacketSize"
    },
    {
      "trigger": "kAudioFileStreamProperty_PacketSizeUpperBound (1886090594)",
      "contents": "KAudioFileStreamProperty_PacketSizeUpperBound"
    },
    {
      "trigger": "kAudioFileStreamProperty_PacketTableInfo (1886283375)",
      "contents": "KAudioFileStreamProperty_PacketTableInfo"
    },
    {
      "trigger": "kAudioFileStreamProperty_PacketToByte (1886085753)",
      "contents": "KAudioFileStreamProperty_PacketToByte"
    },
    {
      "trigger": "kAudioFileStreamProperty_PacketToFrame (1886086770)",
      "contents": "KAudioFileStreamProperty_PacketToFrame"
    },
    {
      "trigger": "kAudioFileStreamProperty_ReadyToProducePackets (1919247481)",
      "contents": "KAudioFileStreamProperty_ReadyToProducePackets"
    },
    {
      "trigger": "kAudioFileStreamSeekFlag_OffsetIsEstimated (1)",
      "contents": "KAudioFileStreamSeekFlag_OffsetIsEstimated"
    },
    {
      "trigger": "kAudioFileUnspecifiedError (2003334207)",
      "contents": "KAudioFileUnspecifiedError"
    },
    {
      "trigger": "kAudioFileUnsupportedDataFormatError (1718449215)",
      "contents": "KAudioFileUnsupportedDataFormatError"
    },
    {
      "trigger": "kAudioFileUnsupportedFileTypeError (1954115647)",
      "contents": "KAudioFileUnsupportedFileTypeError"
    },
    {
      "trigger": "kAudioFileUnsupportedPropertyError (1886681407)",
      "contents": "KAudioFileUnsupportedPropertyError"
    },
    {
      "trigger": "kAudioFileWAVEType (1463899717)",
      "contents": "KAudioFileWAVEType"
    },
    {
      "trigger": "kAudioFileWritePermission (2)",
      "contents": "KAudioFileWritePermission"
    },
    {
      "trigger": "kAudioFormat60958AC3 (1667326771)",
      "contents": "KAudioFormat60958AC3"
    },
    {
      "trigger": "kAudioFormatAC3 (1633889587)",
      "contents": "KAudioFormatAC3"
    },
    {
      "trigger": "kAudioFormatAES3 (1634038579)",
      "contents": "KAudioFormatAES3"
    },
    {
      "trigger": "kAudioFormatALaw (1634492791)",
      "contents": "KAudioFormatALaw"
    },
    {
      "trigger": "kAudioFormatAMR (1935764850)",
      "contents": "KAudioFormatAMR"
    },
    {
      "trigger": "kAudioFormatAppleIMA4 (1768775988)",
      "contents": "KAudioFormatAppleIMA4"
    },
    {
      "trigger": "kAudioFormatAppleLossless (1634492771)",
      "contents": "KAudioFormatAppleLossless"
    },
    {
      "trigger": "kAudioFormatAudible (1096107074)",
      "contents": "KAudioFormatAudible"
    },
    {
      "trigger": "kAudioFormatBadPropertySizeError (561211770)",
      "contents": "KAudioFormatBadPropertySizeError"
    },
    {
      "trigger": "kAudioFormatBadSpecifierSizeError (561213539)",
      "contents": "KAudioFormatBadSpecifierSizeError"
    },
    {
      "trigger": "kAudioFormatDVIIntelIMA (1836253201)",
      "contents": "KAudioFormatDVIIntelIMA"
    },
    {
      "trigger": "kAudioFormatFlagIsAlignedHigh (16)",
      "contents": "KAudioFormatFlagIsAlignedHigh"
    },
    {
      "trigger": "kAudioFormatFlagIsBigEndian (2)",
      "contents": "KAudioFormatFlagIsBigEndian"
    },
    {
      "trigger": "kAudioFormatFlagIsFloat (1)",
      "contents": "KAudioFormatFlagIsFloat"
    },
    {
      "trigger": "kAudioFormatFlagIsNonInterleaved (32)",
      "contents": "KAudioFormatFlagIsNonInterleaved"
    },
    {
      "trigger": "kAudioFormatFlagIsNonMixable (64)",
      "contents": "KAudioFormatFlagIsNonMixable"
    },
    {
      "trigger": "kAudioFormatFlagIsPacked (8)",
      "contents": "KAudioFormatFlagIsPacked"
    },
    {
      "trigger": "kAudioFormatFlagIsSignedInteger (4)",
      "contents": "KAudioFormatFlagIsSignedInteger"
    },
    {
      "trigger": "kAudioFormatFlagsAreAllClear (-2147483648)",
      "contents": "KAudioFormatFlagsAreAllClear"
    },
    {
      "trigger": "kAudioFormatFlagsAudioUnitCanonical (3116)",
      "contents": "KAudioFormatFlagsAudioUnitCanonical"
    },
    {
      "trigger": "kAudioFormatFlagsCanonical (12)",
      "contents": "KAudioFormatFlagsCanonical"
    },
    {
      "trigger": "kAudioFormatFlagsNativeEndian (0)",
      "contents": "KAudioFormatFlagsNativeEndian"
    },
    {
      "trigger": "kAudioFormatFlagsNativeFloatPacked (9)",
      "contents": "KAudioFormatFlagsNativeFloatPacked"
    },
    {
      "trigger": "kAudioFormatLinearPCM (1819304813)",
      "contents": "KAudioFormatLinearPCM"
    },
    {
      "trigger": "kAudioFormatMACE3 (1296122675)",
      "contents": "KAudioFormatMACE3"
    },
    {
      "trigger": "kAudioFormatMACE6 (1296122678)",
      "contents": "KAudioFormatMACE6"
    },
    {
      "trigger": "kAudioFormatMIDIStream (1835623529)",
      "contents": "KAudioFormatMIDIStream"
    },
    {
      "trigger": "kAudioFormatMPEG4AAC (1633772320)",
      "contents": "KAudioFormatMPEG4AAC"
    },
    {
      "trigger": "kAudioFormatMPEG4AAC_ELD (1633772389)",
      "contents": "KAudioFormatMPEG4AAC_ELD"
    },
    {
      "trigger": "kAudioFormatMPEG4AAC_ELD_SBR (1633772390)",
      "contents": "KAudioFormatMPEG4AAC_ELD_SBR"
    },
    {
      "trigger": "kAudioFormatMPEG4AAC_ELD_V2 (1633772391)",
      "contents": "KAudioFormatMPEG4AAC_ELD_V2"
    },
    {
      "trigger": "kAudioFormatMPEG4AAC_HE (1633772392)",
      "contents": "KAudioFormatMPEG4AAC_HE"
    },
    {
      "trigger": "kAudioFormatMPEG4AAC_HE_V2 (1633772400)",
      "contents": "KAudioFormatMPEG4AAC_HE_V2"
    },
    {
      "trigger": "kAudioFormatMPEG4AAC_LD (1633772396)",
      "contents": "KAudioFormatMPEG4AAC_LD"
    },
    {
      "trigger": "kAudioFormatMPEG4AAC_Spatial (1633772403)",
      "contents": "KAudioFormatMPEG4AAC_Spatial"
    },
    {
      "trigger": "kAudioFormatMPEG4CELP (1667591280)",
      "contents": "KAudioFormatMPEG4CELP"
    },
    {
      "trigger": "kAudioFormatMPEG4HVXC (1752594531)",
      "contents": "KAudioFormatMPEG4HVXC"
    },
    {
      "trigger": "kAudioFormatMPEG4TwinVQ (1953986161)",
      "contents": "KAudioFormatMPEG4TwinVQ"
    },
    {
      "trigger": "kAudioFormatMPEGLayer1 (778924081)",
      "contents": "KAudioFormatMPEGLayer1"
    },
    {
      "trigger": "kAudioFormatMPEGLayer2 (778924082)",
      "contents": "KAudioFormatMPEGLayer2"
    },
    {
      "trigger": "kAudioFormatMPEGLayer3 (778924083)",
      "contents": "KAudioFormatMPEGLayer3"
    },
    {
      "trigger": "kAudioFormatMicrosoftGSM (1836253233)",
      "contents": "KAudioFormatMicrosoftGSM"
    },
    {
      "trigger": "kAudioFormatParameterValueStream (1634760307)",
      "contents": "KAudioFormatParameterValueStream"
    },
    {
      "trigger": "kAudioFormatProperty_ASBDFromESDS (1702064996)",
      "contents": "KAudioFormatProperty_ASBDFromESDS"
    },
    {
      "trigger": "kAudioFormatProperty_ASBDFromMPEGPacket (1633971568)",
      "contents": "KAudioFormatProperty_ASBDFromMPEGPacket"
    },
    {
      "trigger": "kAudioFormatProperty_AvailableEncodeBitRates (1634034290)",
      "contents": "KAudioFormatProperty_AvailableEncodeBitRates"
    },
    {
      "trigger": "kAudioFormatProperty_AvailableEncodeChannelLayoutTags (1634034540)",
      "contents": "KAudioFormatProperty_AvailableEncodeChannelLayoutTags"
    },
    {
      "trigger": "kAudioFormatProperty_AvailableEncodeNumberChannels (1635151459)",
      "contents": "KAudioFormatProperty_AvailableEncodeNumberChannels"
    },
    {
      "trigger": "kAudioFormatProperty_AvailableEncodeSampleRates (1634038642)",
      "contents": "KAudioFormatProperty_AvailableEncodeSampleRates"
    },
    {
      "trigger": "kAudioFormatProperty_BalanceFade (1650551910)",
      "contents": "KAudioFormatProperty_BalanceFade"
    },
    {
      "trigger": "kAudioFormatProperty_BitmapForLayoutTag (1651340391)",
      "contents": "KAudioFormatProperty_BitmapForLayoutTag"
    },
    {
      "trigger": "kAudioFormatProperty_ChannelLayoutForBitmap (1668116578)",
      "contents": "KAudioFormatProperty_ChannelLayoutForBitmap"
    },
    {
      "trigger": "kAudioFormatProperty_ChannelLayoutForTag (1668116588)",
      "contents": "KAudioFormatProperty_ChannelLayoutForTag"
    },
    {
      "trigger": "kAudioFormatProperty_ChannelLayoutFromESDS (1702060908)",
      "contents": "KAudioFormatProperty_ChannelLayoutFromESDS"
    },
    {
      "trigger": "kAudioFormatProperty_ChannelLayoutName (1819242093)",
      "contents": "KAudioFormatProperty_ChannelLayoutName"
    },
    {
      "trigger": "kAudioFormatProperty_ChannelLayoutSimpleName (1819504237)",
      "contents": "KAudioFormatProperty_ChannelLayoutSimpleName"
    },
    {
      "trigger": "kAudioFormatProperty_ChannelMap (1667788144)",
      "contents": "KAudioFormatProperty_ChannelMap"
    },
    {
      "trigger": "kAudioFormatProperty_ChannelName (1668178285)",
      "contents": "KAudioFormatProperty_ChannelName"
    },
    {
      "trigger": "kAudioFormatProperty_ChannelShortName (1668509293)",
      "contents": "KAudioFormatProperty_ChannelShortName"
    },
    {
      "trigger": "kAudioFormatProperty_DecodeFormatIDs (1633904998)",
      "contents": "KAudioFormatProperty_DecodeFormatIDs"
    },
    {
      "trigger": "kAudioFormatProperty_Decoders (1635148901)",
      "contents": "KAudioFormatProperty_Decoders"
    },
    {
      "trigger": "kAudioFormatProperty_EncodeFormatIDs (1633906534)",
      "contents": "KAudioFormatProperty_EncodeFormatIDs"
    },
    {
      "trigger": "kAudioFormatProperty_Encoders (1635149166)",
      "contents": "KAudioFormatProperty_Encoders"
    },
    {
      "trigger": "kAudioFormatProperty_FirstPlayableFormatFromList (1718642284)",
      "contents": "KAudioFormatProperty_FirstPlayableFormatFromList"
    },
    {
      "trigger": "kAudioFormatProperty_FormatInfo (1718449257)",
      "contents": "KAudioFormatProperty_FormatInfo"
    },
    {
      "trigger": "kAudioFormatProperty_FormatIsEncrypted (1668446576)",
      "contents": "KAudioFormatProperty_FormatIsEncrypted"
    },
    {
      "trigger": "kAudioFormatProperty_FormatIsExternallyFramed (1717925990)",
      "contents": "KAudioFormatProperty_FormatIsExternallyFramed"
    },
    {
      "trigger": "kAudioFormatProperty_FormatIsVBR (1719034482)",
      "contents": "KAudioFormatProperty_FormatIsVBR"
    },
    {
      "trigger": "kAudioFormatProperty_FormatList (1718383476)",
      "contents": "KAudioFormatProperty_FormatList"
    },
    {
      "trigger": "kAudioFormatProperty_FormatName (1718509933)",
      "contents": "KAudioFormatProperty_FormatName"
    },
    {
      "trigger": "kAudioFormatProperty_HardwareCodecCapabilities (1752654691)",
      "contents": "KAudioFormatProperty_HardwareCodecCapabilities"
    },
    {
      "trigger": "kAudioFormatProperty_ID3TagSize (1768174451)",
      "contents": "KAudioFormatProperty_ID3TagSize"
    },
    {
      "trigger": "kAudioFormatProperty_ID3TagToDictionary (1768174436)",
      "contents": "KAudioFormatProperty_ID3TagToDictionary"
    },
    {
      "trigger": "kAudioFormatProperty_MatrixMixMap (1835884912)",
      "contents": "KAudioFormatProperty_MatrixMixMap"
    },
    {
      "trigger": "kAudioFormatProperty_NumberOfChannelsForLayout (1852008557)",
      "contents": "KAudioFormatProperty_NumberOfChannelsForLayout"
    },
    {
      "trigger": "kAudioFormatProperty_OutputFormatList (1868983411)",
      "contents": "KAudioFormatProperty_OutputFormatList"
    },
    {
      "trigger": "kAudioFormatProperty_PanningMatrix (1885433453)",
      "contents": "KAudioFormatProperty_PanningMatrix"
    },
    {
      "trigger": "kAudioFormatProperty_TagForChannelLayout (1668116596)",
      "contents": "KAudioFormatProperty_TagForChannelLayout"
    },
    {
      "trigger": "kAudioFormatProperty_TagsForNumberOfChannels (1952540515)",
      "contents": "KAudioFormatProperty_TagsForNumberOfChannels"
    },
    {
      "trigger": "kAudioFormatProperty_ValidateChannelLayout (1986093932)",
      "contents": "KAudioFormatProperty_ValidateChannelLayout"
    },
    {
      "trigger": "kAudioFormatQDesign (1363430723)",
      "contents": "KAudioFormatQDesign"
    },
    {
      "trigger": "kAudioFormatQDesign2 (1363430706)",
      "contents": "KAudioFormatQDesign2"
    },
    {
      "trigger": "kAudioFormatQUALCOMM (1365470320)",
      "contents": "KAudioFormatQUALCOMM"
    },
    {
      "trigger": "kAudioFormatTimeCode (1953066341)",
      "contents": "KAudioFormatTimeCode"
    },
    {
      "trigger": "kAudioFormatULaw (1970037111)",
      "contents": "KAudioFormatULaw"
    },
    {
      "trigger": "kAudioFormatUnknownFormatError (560360820)",
      "contents": "KAudioFormatUnknownFormatError"
    },
    {
      "trigger": "kAudioFormatUnspecifiedError (2003329396)",
      "contents": "KAudioFormatUnspecifiedError"
    },
    {
      "trigger": "kAudioFormatUnsupportedDataFormatError (1718449215)",
      "contents": "KAudioFormatUnsupportedDataFormatError"
    },
    {
      "trigger": "kAudioFormatUnsupportedPropertyError (1886547824)",
      "contents": "KAudioFormatUnsupportedPropertyError"
    },
    {
      "trigger": "kAudioFormatiLBC (1768710755)",
      "contents": "KAudioFormatiLBC"
    },
    {
      "trigger": "kAudioQueueDeviceProperty_NumberChannels (1634821219)",
      "contents": "KAudioQueueDeviceProperty_NumberChannels"
    },
    {
      "trigger": "kAudioQueueDeviceProperty_SampleRate (1634825074)",
      "contents": "KAudioQueueDeviceProperty_SampleRate"
    },
    {
      "trigger": "kAudioQueueErr_BufferEmpty (-66686)",
      "contents": "KAudioQueueErr_BufferEmpty"
    },
    {
      "trigger": "kAudioQueueErr_BufferInQueue (-66679)",
      "contents": "KAudioQueueErr_BufferInQueue"
    },
    {
      "trigger": "kAudioQueueErr_CannotStart (-66681)",
      "contents": "KAudioQueueErr_CannotStart"
    },
    {
      "trigger": "kAudioQueueErr_CodecNotFound (-66673)",
      "contents": "KAudioQueueErr_CodecNotFound"
    },
    {
      "trigger": "kAudioQueueErr_DisposalPending (-66685)",
      "contents": "KAudioQueueErr_DisposalPending"
    },
    {
      "trigger": "kAudioQueueErr_EnqueueDuringReset (-66632)",
      "contents": "KAudioQueueErr_EnqueueDuringReset"
    },
    {
      "trigger": "kAudioQueueErr_InvalidBuffer (-66687)",
      "contents": "KAudioQueueErr_InvalidBuffer"
    },
    {
      "trigger": "kAudioQueueErr_InvalidCodecAccess (-66672)",
      "contents": "KAudioQueueErr_InvalidCodecAccess"
    },
    {
      "trigger": "kAudioQueueErr_InvalidDevice (-66680)",
      "contents": "KAudioQueueErr_InvalidDevice"
    },
    {
      "trigger": "kAudioQueueErr_InvalidOfflineMode (-66626)",
      "contents": "KAudioQueueErr_InvalidOfflineMode"
    },
    {
      "trigger": "kAudioQueueErr_InvalidParameter (-66682)",
      "contents": "KAudioQueueErr_InvalidParameter"
    },
    {
      "trigger": "kAudioQueueErr_InvalidProperty (-66684)",
      "contents": "KAudioQueueErr_InvalidProperty"
    },
    {
      "trigger": "kAudioQueueErr_InvalidPropertySize (-66683)",
      "contents": "KAudioQueueErr_InvalidPropertySize"
    },
    {
      "trigger": "kAudioQueueErr_InvalidPropertyValue (-66675)",
      "contents": "KAudioQueueErr_InvalidPropertyValue"
    },
    {
      "trigger": "kAudioQueueErr_InvalidQueueType (-66677)",
      "contents": "KAudioQueueErr_InvalidQueueType"
    },
    {
      "trigger": "kAudioQueueErr_InvalidRunState (-66678)",
      "contents": "KAudioQueueErr_InvalidRunState"
    },
    {
      "trigger": "kAudioQueueErr_Permissions (-66676)",
      "contents": "KAudioQueueErr_Permissions"
    },
    {
      "trigger": "kAudioQueueErr_PrimeTimedOut (-66674)",
      "contents": "KAudioQueueErr_PrimeTimedOut"
    },
    {
      "trigger": "kAudioQueueErr_QueueInvalidated (-66671)",
      "contents": "KAudioQueueErr_QueueInvalidated"
    },
    {
      "trigger": "kAudioQueueErr_RecordUnderrun (-66668)",
      "contents": "KAudioQueueErr_RecordUnderrun"
    },
    {
      "trigger": "kAudioQueueHardwareCodecPolicy_Default (0)",
      "contents": "KAudioQueueHardwareCodecPolicy_Default"
    },
    {
      "trigger": "kAudioQueueHardwareCodecPolicy_PreferHardware (4)",
      "contents": "KAudioQueueHardwareCodecPolicy_PreferHardware"
    },
    {
      "trigger": "kAudioQueueHardwareCodecPolicy_PreferSoftware (3)",
      "contents": "KAudioQueueHardwareCodecPolicy_PreferSoftware"
    },
    {
      "trigger": "kAudioQueueHardwareCodecPolicy_UseHardwareOnly (2)",
      "contents": "KAudioQueueHardwareCodecPolicy_UseHardwareOnly"
    },
    {
      "trigger": "kAudioQueueHardwareCodecPolicy_UseSoftwareOnly (1)",
      "contents": "KAudioQueueHardwareCodecPolicy_UseSoftwareOnly"
    },
    {
      "trigger": "kAudioQueueParam_Pan (13)",
      "contents": "KAudioQueueParam_Pan"
    },
    {
      "trigger": "kAudioQueueParam_Volume (1)",
      "contents": "KAudioQueueParam_Volume"
    },
    {
      "trigger": "kAudioQueueParam_VolumeRampTime (4)",
      "contents": "KAudioQueueParam_VolumeRampTime"
    },
    {
      "trigger": "kAudioQueueProperty_ChannelLayout (1634820972)",
      "contents": "KAudioQueueProperty_ChannelLayout"
    },
    {
      "trigger": "kAudioQueueProperty_ConverterError (1902343781)",
      "contents": "KAudioQueueProperty_ConverterError"
    },
    {
      "trigger": "kAudioQueueProperty_CurrentDevice (1634820964)",
      "contents": "KAudioQueueProperty_CurrentDevice"
    },
    {
      "trigger": "kAudioQueueProperty_CurrentLevelMeter (1634823542)",
      "contents": "KAudioQueueProperty_CurrentLevelMeter"
    },
    {
      "trigger": "kAudioQueueProperty_CurrentLevelMeterDB (1634823524)",
      "contents": "KAudioQueueProperty_CurrentLevelMeterDB"
    },
    {
      "trigger": "kAudioQueueProperty_DecodeBufferSizeFrames (1684234854)",
      "contents": "KAudioQueueProperty_DecodeBufferSizeFrames"
    },
    {
      "trigger": "kAudioQueueProperty_EnableLevelMetering (1634823525)",
      "contents": "KAudioQueueProperty_EnableLevelMetering"
    },
    {
      "trigger": "kAudioQueueProperty_HardwareCodecPolicy (1634820976)",
      "contents": "KAudioQueueProperty_HardwareCodecPolicy"
    },
    {
      "trigger": "kAudioQueueProperty_IsRunning (1634824814)",
      "contents": "KAudioQueueProperty_IsRunning"
    },
    {
      "trigger": "kAudioQueueProperty_MagicCookie (1634823523)",
      "contents": "KAudioQueueProperty_MagicCookie"
    },
    {
      "trigger": "kAudioQueueProperty_MaximumOutputPacketSize (2020569203)",
      "contents": "KAudioQueueProperty_MaximumOutputPacketSize"
    },
    {
      "trigger": "kAudioQueueProperty_StreamDescription (1634821748)",
      "contents": "KAudioQueueProperty_StreamDescription"
    },
    {
      "trigger": "kAudioServicesBadPropertySizeError (561211770)",
      "contents": "KAudioServicesBadPropertySizeError"
    },
    {
      "trigger": "kAudioServicesBadSpecifierSizeError (561213539)",
      "contents": "KAudioServicesBadSpecifierSizeError"
    },
    {
      "trigger": "kAudioServicesNoError (0)",
      "contents": "KAudioServicesNoError"
    },
    {
      "trigger": "kAudioServicesNoHardwareError (1852794999)",
      "contents": "KAudioServicesNoHardwareError"
    },
    {
      "trigger": "kAudioServicesPropertyCompletePlaybackIfAppDies (1768318057)",
      "contents": "KAudioServicesPropertyCompletePlaybackIfAppDies"
    },
    {
      "trigger": "kAudioServicesPropertyIsUISound (1769174377)",
      "contents": "KAudioServicesPropertyIsUISound"
    },
    {
      "trigger": "kAudioServicesSystemSoundClientTimedOutError (-1501)",
      "contents": "KAudioServicesSystemSoundClientTimedOutError"
    },
    {
      "trigger": "kAudioServicesSystemSoundUnspecifiedError (-1500)",
      "contents": "KAudioServicesSystemSoundUnspecifiedError"
    },
    {
      "trigger": "kAudioServicesUnsupportedPropertyError (1886681407)",
      "contents": "KAudioServicesUnsupportedPropertyError"
    },
    {
      "trigger": "kAudioSessionAlreadyInitialized (1768843636)",
      "contents": "KAudioSessionAlreadyInitialized"
    },
    {
      "trigger": "kAudioSessionBadPropertySizeError (561211770)",
      "contents": "KAudioSessionBadPropertySizeError"
    },
    {
      "trigger": "kAudioSessionBeginInterruption (1)",
      "contents": "KAudioSessionBeginInterruption"
    },
    {
      "trigger": "kAudioSessionCategory_AmbientSound (1634558569)",
      "contents": "KAudioSessionCategory_AmbientSound"
    },
    {
      "trigger": "kAudioSessionCategory_AudioProcessing (1886547811)",
      "contents": "KAudioSessionCategory_AudioProcessing"
    },
    {
      "trigger": "kAudioSessionCategory_LiveAudio (1818850917)",
      "contents": "KAudioSessionCategory_LiveAudio"
    },
    {
      "trigger": "kAudioSessionCategory_MediaPlayback (1835361385)",
      "contents": "KAudioSessionCategory_MediaPlayback"
    },
    {
      "trigger": "kAudioSessionCategory_PlayAndRecord (1886151026)",
      "contents": "KAudioSessionCategory_PlayAndRecord"
    },
    {
      "trigger": "kAudioSessionCategory_RecordAudio (1919247201)",
      "contents": "KAudioSessionCategory_RecordAudio"
    },
    {
      "trigger": "kAudioSessionCategory_SoloAmbientSound (1936682095)",
      "contents": "KAudioSessionCategory_SoloAmbientSound"
    },
    {
      "trigger": "kAudioSessionCategory_UserInterfaceSoundEffects (1969841784)",
      "contents": "KAudioSessionCategory_UserInterfaceSoundEffects"
    },
    {
      "trigger": "kAudioSessionEndInterruption (0)",
      "contents": "KAudioSessionEndInterruption"
    },
    {
      "trigger": "kAudioSessionIncompatibleCategory (560161140)",
      "contents": "KAudioSessionIncompatibleCategory"
    },
    {
      "trigger": "kAudioSessionInitializationError (1768843583)",
      "contents": "KAudioSessionInitializationError"
    },
    {
      "trigger": "kAudioSessionInputRoute_BluetoothHFP (CFStringRef)",
      "contents": "KAudioSessionInputRoute_BluetoothHFP"
    },
    {
      "trigger": "kAudioSessionInputRoute_BuiltInMic (CFStringRef)",
      "contents": "KAudioSessionInputRoute_BuiltInMic"
    },
    {
      "trigger": "kAudioSessionInputRoute_HeadsetMic (CFStringRef)",
      "contents": "KAudioSessionInputRoute_HeadsetMic"
    },
    {
      "trigger": "kAudioSessionInputRoute_LineIn (CFStringRef)",
      "contents": "KAudioSessionInputRoute_LineIn"
    },
    {
      "trigger": "kAudioSessionInputRoute_USBAudio (CFStringRef)",
      "contents": "KAudioSessionInputRoute_USBAudio"
    },
    {
      "trigger": "kAudioSessionInterruptionType_ShouldNotResume (561148781)",
      "contents": "KAudioSessionInterruptionType_ShouldNotResume"
    },
    {
      "trigger": "kAudioSessionInterruptionType_ShouldResume (1769108333)",
      "contents": "KAudioSessionInterruptionType_ShouldResume"
    },
    {
      "trigger": "kAudioSessionMode_Default (1684434036)",
      "contents": "KAudioSessionMode_Default"
    },
    {
      "trigger": "kAudioSessionMode_GameChat (1735222132)",
      "contents": "KAudioSessionMode_GameChat"
    },
    {
      "trigger": "kAudioSessionMode_Measurement (1836281204)",
      "contents": "KAudioSessionMode_Measurement"
    },
    {
      "trigger": "kAudioSessionMode_VideoRecording (1987208036)",
      "contents": "KAudioSessionMode_VideoRecording"
    },
    {
      "trigger": "kAudioSessionMode_VoiceChat (1986225012)",
      "contents": "KAudioSessionMode_VoiceChat"
    },
    {
      "trigger": "kAudioSessionNoCategorySet (1063477620)",
      "contents": "KAudioSessionNoCategorySet"
    },
    {
      "trigger": "kAudioSessionNoError (0)",
      "contents": "KAudioSessionNoError"
    },
    {
      "trigger": "kAudioSessionNotActiveError (560030580)",
      "contents": "KAudioSessionNotActiveError"
    },
    {
      "trigger": "kAudioSessionNotInitialized (560557673)",
      "contents": "KAudioSessionNotInitialized"
    },
    {
      "trigger": "kAudioSessionOutputRoute_AirPlay (CFStringRef)",
      "contents": "KAudioSessionOutputRoute_AirPlay"
    },
    {
      "trigger": "kAudioSessionOutputRoute_BluetoothA2DP (CFStringRef)",
      "contents": "KAudioSessionOutputRoute_BluetoothA2DP"
    },
    {
      "trigger": "kAudioSessionOutputRoute_BluetoothHFP (CFStringRef)",
      "contents": "KAudioSessionOutputRoute_BluetoothHFP"
    },
    {
      "trigger": "kAudioSessionOutputRoute_BuiltInReceiver (CFStringRef)",
      "contents": "KAudioSessionOutputRoute_BuiltInReceiver"
    },
    {
      "trigger": "kAudioSessionOutputRoute_BuiltInSpeaker (CFStringRef)",
      "contents": "KAudioSessionOutputRoute_BuiltInSpeaker"
    },
    {
      "trigger": "kAudioSessionOutputRoute_HDMI (CFStringRef)",
      "contents": "KAudioSessionOutputRoute_HDMI"
    },
    {
      "trigger": "kAudioSessionOutputRoute_Headphones (CFStringRef)",
      "contents": "KAudioSessionOutputRoute_Headphones"
    },
    {
      "trigger": "kAudioSessionOutputRoute_LineOut (CFStringRef)",
      "contents": "KAudioSessionOutputRoute_LineOut"
    },
    {
      "trigger": "kAudioSessionOutputRoute_USBAudio (CFStringRef)",
      "contents": "KAudioSessionOutputRoute_USBAudio"
    },
    {
      "trigger": "kAudioSessionOverrideAudioRoute_None (0)",
      "contents": "KAudioSessionOverrideAudioRoute_None"
    },
    {
      "trigger": "kAudioSessionOverrideAudioRoute_Speaker (1936747378)",
      "contents": "KAudioSessionOverrideAudioRoute_Speaker"
    },
    {
      "trigger": "kAudioSessionProperty_AudioCategory (1633902964)",
      "contents": "KAudioSessionProperty_AudioCategory"
    },
    {
      "trigger": "kAudioSessionProperty_AudioInputAvailable (1634296182)",
      "contents": "KAudioSessionProperty_AudioInputAvailable"
    },
    {
      "trigger": "kAudioSessionProperty_AudioRoute (1919907188)",
      "contents": "KAudioSessionProperty_AudioRoute"
    },
    {
      "trigger": "kAudioSessionProperty_AudioRouteChange (1919902568)",
      "contents": "KAudioSessionProperty_AudioRouteChange"
    },
    {
      "trigger": "kAudioSessionProperty_AudioRouteDescription (1668440434)",
      "contents": "KAudioSessionProperty_AudioRouteDescription"
    },
    {
      "trigger": "kAudioSessionProperty_CurrentHardwareIOBufferDuration (1667785316)",
      "contents": "KAudioSessionProperty_CurrentHardwareIOBufferDuration"
    },
    {
      "trigger": "kAudioSessionProperty_CurrentHardwareInputLatency (1667853428)",
      "contents": "KAudioSessionProperty_CurrentHardwareInputLatency"
    },
    {
      "trigger": "kAudioSessionProperty_CurrentHardwareInputNumberChannels (1667787107)",
      "contents": "KAudioSessionProperty_CurrentHardwareInputNumberChannels"
    },
    {
      "trigger": "kAudioSessionProperty_CurrentHardwareOutputLatency (1668246644)",
      "contents": "KAudioSessionProperty_CurrentHardwareOutputLatency"
    },
    {
      "trigger": "kAudioSessionProperty_CurrentHardwareOutputNumberChannels (1667788643)",
      "contents": "KAudioSessionProperty_CurrentHardwareOutputNumberChannels"
    },
    {
      "trigger": "kAudioSessionProperty_CurrentHardwareOutputVolume (1667788662)",
      "contents": "KAudioSessionProperty_CurrentHardwareOutputVolume"
    },
    {
      "trigger": "kAudioSessionProperty_CurrentHardwareSampleRate (1667789682)",
      "contents": "KAudioSessionProperty_CurrentHardwareSampleRate"
    },
    {
      "trigger": "kAudioSessionProperty_InputGainAvailable (1768382838)",
      "contents": "KAudioSessionProperty_InputGainAvailable"
    },
    {
      "trigger": "kAudioSessionProperty_InputGainScalar (1768387427)",
      "contents": "KAudioSessionProperty_InputGainScalar"
    },
    {
      "trigger": "kAudioSessionProperty_InputSource (1769173603)",
      "contents": "KAudioSessionProperty_InputSource"
    },
    {
      "trigger": "kAudioSessionProperty_InputSources (1936876403)",
      "contents": "KAudioSessionProperty_InputSources"
    },
    {
      "trigger": "kAudioSessionProperty_InterruptionType (1954115685)",
      "contents": "KAudioSessionProperty_InterruptionType"
    },
    {
      "trigger": "kAudioSessionProperty_Mode (1836016741)",
      "contents": "KAudioSessionProperty_Mode"
    },
    {
      "trigger": "kAudioSessionProperty_OtherAudioIsPlaying (1869899890)",
      "contents": "KAudioSessionProperty_OtherAudioIsPlaying"
    },
    {
      "trigger": "kAudioSessionProperty_OtherMixableAudioShouldDuck (1685414763)",
      "contents": "KAudioSessionProperty_OtherMixableAudioShouldDuck"
    },
    {
      "trigger": "kAudioSessionProperty_OutputDestination (1868854132)",
      "contents": "KAudioSessionProperty_OutputDestination"
    },
    {
      "trigger": "kAudioSessionProperty_OutputDestinations (1685288051)",
      "contents": "KAudioSessionProperty_OutputDestinations"
    },
    {
      "trigger": "kAudioSessionProperty_OverrideAudioRoute (1870033508)",
      "contents": "KAudioSessionProperty_OverrideAudioRoute"
    },
    {
      "trigger": "kAudioSessionProperty_OverrideCategoryDefaultToSpeaker (1668509803)",
      "contents": "KAudioSessionProperty_OverrideCategoryDefaultToSpeaker"
    },
    {
      "trigger": "kAudioSessionProperty_OverrideCategoryEnableBluetoothInput (1667394677)",
      "contents": "KAudioSessionProperty_OverrideCategoryEnableBluetoothInput"
    },
    {
      "trigger": "kAudioSessionProperty_OverrideCategoryMixWithOthers (1668114808)",
      "contents": "KAudioSessionProperty_OverrideCategoryMixWithOthers"
    },
    {
      "trigger": "kAudioSessionProperty_PreferredHardwareIOBufferDuration (1768907364)",
      "contents": "KAudioSessionProperty_PreferredHardwareIOBufferDuration"
    },
    {
      "trigger": "kAudioSessionProperty_PreferredHardwareSampleRate (1752658802)",
      "contents": "KAudioSessionProperty_PreferredHardwareSampleRate"
    },
    {
      "trigger": "kAudioSessionProperty_ServerDied (1684628836)",
      "contents": "KAudioSessionProperty_ServerDied"
    },
    {
      "trigger": "kAudioSessionRouteChangeReason_CategoryChange (3)",
      "contents": "KAudioSessionRouteChangeReason_CategoryChange"
    },
    {
      "trigger": "kAudioSessionRouteChangeReason_NewDeviceAvailable (1)",
      "contents": "KAudioSessionRouteChangeReason_NewDeviceAvailable"
    },
    {
      "trigger": "kAudioSessionRouteChangeReason_NoSuitableRouteForCategory (7)",
      "contents": "KAudioSessionRouteChangeReason_NoSuitableRouteForCategory"
    },
    {
      "trigger": "kAudioSessionRouteChangeReason_OldDeviceUnavailable (2)",
      "contents": "KAudioSessionRouteChangeReason_OldDeviceUnavailable"
    },
    {
      "trigger": "kAudioSessionRouteChangeReason_Override (4)",
      "contents": "KAudioSessionRouteChangeReason_Override"
    },
    {
      "trigger": "kAudioSessionRouteChangeReason_Unknown (0)",
      "contents": "KAudioSessionRouteChangeReason_Unknown"
    },
    {
      "trigger": "kAudioSessionRouteChangeReason_WakeFromSleep (6)",
      "contents": "KAudioSessionRouteChangeReason_WakeFromSleep"
    },
    {
      "trigger": "kAudioSessionSetActiveFlag_NotifyOthersOnDeactivation (1)",
      "contents": "KAudioSessionSetActiveFlag_NotifyOthersOnDeactivation"
    },
    {
      "trigger": "kAudioSessionUnspecifiedError (2003329396)",
      "contents": "KAudioSessionUnspecifiedError"
    },
    {
      "trigger": "kAudioSessionUnsupportedPropertyError (1886681407)",
      "contents": "KAudioSessionUnsupportedPropertyError"
    },
    {
      "trigger": "kAudioSession_AudioRouteChangeKey_CurrentRouteDescription (CFStringRef)",
      "contents": "KAudioSession_AudioRouteChangeKey_CurrentRouteDescription"
    },
    {
      "trigger": "kAudioSession_AudioRouteChangeKey_OldRoute (OutputDeviceDidChange_OldRoute)",
      "contents": "KAudioSession_AudioRouteChangeKey_OldRoute"
    },
    {
      "trigger": "kAudioSession_AudioRouteChangeKey_PreviousRouteDescription (CFStringRef)",
      "contents": "KAudioSession_AudioRouteChangeKey_PreviousRouteDescription"
    },
    {
      "trigger": "kAudioSession_AudioRouteChangeKey_Reason (OutputDeviceDidChange_Reason)",
      "contents": "KAudioSession_AudioRouteChangeKey_Reason"
    },
    {
      "trigger": "kAudioSession_AudioRouteKey_Inputs (CFStringRef)",
      "contents": "KAudioSession_AudioRouteKey_Inputs"
    },
    {
      "trigger": "kAudioSession_AudioRouteKey_Outputs (CFStringRef)",
      "contents": "KAudioSession_AudioRouteKey_Outputs"
    },
    {
      "trigger": "kAudioSession_AudioRouteKey_Type (CFStringRef)",
      "contents": "KAudioSession_AudioRouteKey_Type"
    },
    {
      "trigger": "kAudioSession_InputSourceKey_Description (CFStringRef)",
      "contents": "KAudioSession_InputSourceKey_Description"
    },
    {
      "trigger": "kAudioSession_InputSourceKey_ID (CFStringRef)",
      "contents": "KAudioSession_InputSourceKey_ID"
    },
    {
      "trigger": "kAudioSession_OutputDestinationKey_Description (CFStringRef)",
      "contents": "KAudioSession_OutputDestinationKey_Description"
    },
    {
      "trigger": "kAudioSession_OutputDestinationKey_ID (CFStringRef)",
      "contents": "KAudioSession_OutputDestinationKey_ID"
    },
    {
      "trigger": "kAudioSession_RouteChangeKey_Reason (CFStringRef)",
      "contents": "KAudioSession_RouteChangeKey_Reason"
    },
    {
      "trigger": "kAudioStreamAnyRate (0)",
      "contents": "KAudioStreamAnyRate"
    },
    {
      "trigger": "kAudioTimeStampHostTimeValid (2)",
      "contents": "KAudioTimeStampHostTimeValid"
    },
    {
      "trigger": "kAudioTimeStampRateScalarValid (4)",
      "contents": "KAudioTimeStampRateScalarValid"
    },
    {
      "trigger": "kAudioTimeStampSMPTETimeValid (16)",
      "contents": "KAudioTimeStampSMPTETimeValid"
    },
    {
      "trigger": "kAudioTimeStampSampleHostTimeValid (3)",
      "contents": "KAudioTimeStampSampleHostTimeValid"
    },
    {
      "trigger": "kAudioTimeStampSampleTimeValid (1)",
      "contents": "KAudioTimeStampSampleTimeValid"
    },
    {
      "trigger": "kAudioTimeStampWordClockTimeValid (8)",
      "contents": "KAudioTimeStampWordClockTimeValid"
    },
    {
      "trigger": "kAudioToolboxErr_CannotDoInCurrentContext (-10863)",
      "contents": "KAudioToolboxErr_CannotDoInCurrentContext"
    },
    {
      "trigger": "kAudioToolboxErr_EndOfTrack (-10857)",
      "contents": "KAudioToolboxErr_EndOfTrack"
    },
    {
      "trigger": "kAudioToolboxErr_IllegalTrackDestination (-10855)",
      "contents": "KAudioToolboxErr_IllegalTrackDestination"
    },
    {
      "trigger": "kAudioToolboxErr_InvalidEventType (-10853)",
      "contents": "KAudioToolboxErr_InvalidEventType"
    },
    {
      "trigger": "kAudioToolboxErr_InvalidPlayerState (-10852)",
      "contents": "KAudioToolboxErr_InvalidPlayerState"
    },
    {
      "trigger": "kAudioToolboxErr_InvalidSequenceType (-10846)",
      "contents": "KAudioToolboxErr_InvalidSequenceType"
    },
    {
      "trigger": "kAudioToolboxErr_NoSequence (-10854)",
      "contents": "KAudioToolboxErr_NoSequence"
    },
    {
      "trigger": "kAudioToolboxErr_StartOfTrack (-10856)",
      "contents": "KAudioToolboxErr_StartOfTrack"
    },
    {
      "trigger": "kAudioToolboxErr_TrackIndexError (-10859)",
      "contents": "KAudioToolboxErr_TrackIndexError"
    },
    {
      "trigger": "kAudioToolboxErr_TrackNotFound (-10858)",
      "contents": "KAudioToolboxErr_TrackNotFound"
    },
    {
      "trigger": "kAudioUnitSampleFractionBits (24)",
      "contents": "KAudioUnitSampleFractionBits"
    },
    {
      "trigger": "kAudio_FileNotFoundError (-43)",
      "contents": "KAudio_FileNotFoundError"
    },
    {
      "trigger": "kAudio_MemFullError (-108)",
      "contents": "KAudio_MemFullError"
    },
    {
      "trigger": "kAudio_ParamError (-50)",
      "contents": "KAudio_ParamError"
    },
    {
      "trigger": "kAudio_UnimplementedError (-4)",
      "contents": "KAudio_UnimplementedError"
    },
    {
      "trigger": "kBoxAnnotationSelector (1)",
      "contents": "KBoxAnnotationSelector"
    },
    {
      "trigger": "kBytePacketTranslationFlag_IsEstimate (1)",
      "contents": "KBytePacketTranslationFlag_IsEstimate"
    },
    {
      "trigger": "kCAAlignmentCenter (NSString*)",
      "contents": "KCAAlignmentCenter"
    },
    {
      "trigger": "kCAAlignmentJustified (NSString*)",
      "contents": "KCAAlignmentJustified"
    },
    {
      "trigger": "kCAAlignmentLeft (NSString*)",
      "contents": "KCAAlignmentLeft"
    },
    {
      "trigger": "kCAAlignmentNatural (NSString*)",
      "contents": "KCAAlignmentNatural"
    },
    {
      "trigger": "kCAAlignmentRight (NSString*)",
      "contents": "KCAAlignmentRight"
    },
    {
      "trigger": "kCAAnimationCubic (NSString*)",
      "contents": "KCAAnimationCubic"
    },
    {
      "trigger": "kCAAnimationCubicPaced (NSString*)",
      "contents": "KCAAnimationCubicPaced"
    },
    {
      "trigger": "kCAAnimationDiscrete (NSString*)",
      "contents": "KCAAnimationDiscrete"
    },
    {
      "trigger": "kCAAnimationLinear (NSString*)",
      "contents": "KCAAnimationLinear"
    },
    {
      "trigger": "kCAAnimationPaced (NSString*)",
      "contents": "KCAAnimationPaced"
    },
    {
      "trigger": "kCAAnimationRotateAuto (NSString*)",
      "contents": "KCAAnimationRotateAuto"
    },
    {
      "trigger": "kCAAnimationRotateAutoReverse (NSString*)",
      "contents": "KCAAnimationRotateAutoReverse"
    },
    {
      "trigger": "kCAEmitterLayerAdditive (NSString*)",
      "contents": "KCAEmitterLayerAdditive"
    },
    {
      "trigger": "kCAEmitterLayerBackToFront (NSString*)",
      "contents": "KCAEmitterLayerBackToFront"
    },
    {
      "trigger": "kCAEmitterLayerCircle (NSString*)",
      "contents": "KCAEmitterLayerCircle"
    },
    {
      "trigger": "kCAEmitterLayerCuboid (NSString*)",
      "contents": "KCAEmitterLayerCuboid"
    },
    {
      "trigger": "kCAEmitterLayerLine (NSString*)",
      "contents": "KCAEmitterLayerLine"
    },
    {
      "trigger": "kCAEmitterLayerOldestFirst (NSString*)",
      "contents": "KCAEmitterLayerOldestFirst"
    },
    {
      "trigger": "kCAEmitterLayerOldestLast (NSString*)",
      "contents": "KCAEmitterLayerOldestLast"
    },
    {
      "trigger": "kCAEmitterLayerOutline (NSString*)",
      "contents": "KCAEmitterLayerOutline"
    },
    {
      "trigger": "kCAEmitterLayerPoint (NSString*)",
      "contents": "KCAEmitterLayerPoint"
    },
    {
      "trigger": "kCAEmitterLayerPoints (NSString*)",
      "contents": "KCAEmitterLayerPoints"
    },
    {
      "trigger": "kCAEmitterLayerRectangle (NSString*)",
      "contents": "KCAEmitterLayerRectangle"
    },
    {
      "trigger": "kCAEmitterLayerSphere (NSString*)",
      "contents": "KCAEmitterLayerSphere"
    },
    {
      "trigger": "kCAEmitterLayerSurface (NSString*)",
      "contents": "KCAEmitterLayerSurface"
    },
    {
      "trigger": "kCAEmitterLayerUnordered (NSString*)",
      "contents": "KCAEmitterLayerUnordered"
    },
    {
      "trigger": "kCAEmitterLayerVolume (NSString*)",
      "contents": "KCAEmitterLayerVolume"
    },
    {
      "trigger": "kCAFLinearPCMFormatFlagIsFloat (1)",
      "contents": "KCAFLinearPCMFormatFlagIsFloat"
    },
    {
      "trigger": "kCAFLinearPCMFormatFlagIsLittleEndian (2)",
      "contents": "KCAFLinearPCMFormatFlagIsLittleEndian"
    },
    {
      "trigger": "kCAFMarkerChunkHdrSize (8)",
      "contents": "KCAFMarkerChunkHdrSize"
    },
    {
      "trigger": "kCAFMarkerType_EditDestinationBegin (1684170087)",
      "contents": "KCAFMarkerType_EditDestinationBegin"
    },
    {
      "trigger": "kCAFMarkerType_EditDestinationEnd (1684368996)",
      "contents": "KCAFMarkerType_EditDestinationEnd"
    },
    {
      "trigger": "kCAFMarkerType_EditSourceBegin (1667392871)",
      "contents": "KCAFMarkerType_EditSourceBegin"
    },
    {
      "trigger": "kCAFMarkerType_EditSourceEnd (1667591780)",
      "contents": "KCAFMarkerType_EditSourceEnd"
    },
    {
      "trigger": "kCAFMarkerType_Generic (0)",
      "contents": "KCAFMarkerType_Generic"
    },
    {
      "trigger": "kCAFMarkerType_Index (1768842360)",
      "contents": "KCAFMarkerType_Index"
    },
    {
      "trigger": "kCAFMarkerType_KeySignature (1802725735)",
      "contents": "KCAFMarkerType_KeySignature"
    },
    {
      "trigger": "kCAFMarkerType_ProgramEnd (1885695588)",
      "contents": "KCAFMarkerType_ProgramEnd"
    },
    {
      "trigger": "kCAFMarkerType_ProgramStart (1885496679)",
      "contents": "KCAFMarkerType_ProgramStart"
    },
    {
      "trigger": "kCAFMarkerType_RegionEnd (1919250020)",
      "contents": "KCAFMarkerType_RegionEnd"
    },
    {
      "trigger": "kCAFMarkerType_RegionStart (1919051111)",
      "contents": "KCAFMarkerType_RegionStart"
    },
    {
      "trigger": "kCAFMarkerType_RegionSyncPoint (1920170339)",
      "contents": "KCAFMarkerType_RegionSyncPoint"
    },
    {
      "trigger": "kCAFMarkerType_ReleaseLoopEnd (1919706478)",
      "contents": "KCAFMarkerType_ReleaseLoopEnd"
    },
    {
      "trigger": "kCAFMarkerType_ReleaseLoopStart (1919705703)",
      "contents": "KCAFMarkerType_ReleaseLoopStart"
    },
    {
      "trigger": "kCAFMarkerType_SavedPlayPosition (1936747641)",
      "contents": "KCAFMarkerType_SavedPlayPosition"
    },
    {
      "trigger": "kCAFMarkerType_SelectionEnd (1936027236)",
      "contents": "KCAFMarkerType_SelectionEnd"
    },
    {
      "trigger": "kCAFMarkerType_SelectionStart (1935828327)",
      "contents": "KCAFMarkerType_SelectionStart"
    },
    {
      "trigger": "kCAFMarkerType_SustainLoopEnd (1936483694)",
      "contents": "KCAFMarkerType_SustainLoopEnd"
    },
    {
      "trigger": "kCAFMarkerType_SustainLoopStart (1936482919)",
      "contents": "KCAFMarkerType_SustainLoopStart"
    },
    {
      "trigger": "kCAFMarkerType_Tempo (1953329263)",
      "contents": "KCAFMarkerType_Tempo"
    },
    {
      "trigger": "kCAFMarkerType_TimeSignature (1953720679)",
      "contents": "KCAFMarkerType_TimeSignature"
    },
    {
      "trigger": "kCAFMarkerType_TrackEnd (1952804452)",
      "contents": "KCAFMarkerType_TrackEnd"
    },
    {
      "trigger": "kCAFMarkerType_TrackStart (1952605543)",
      "contents": "KCAFMarkerType_TrackStart"
    },
    {
      "trigger": "kCAFRegionChunkHdrSize (8)",
      "contents": "KCAFRegionChunkHdrSize"
    },
    {
      "trigger": "kCAFRegionFlag_LoopEnable (1)",
      "contents": "KCAFRegionFlag_LoopEnable"
    },
    {
      "trigger": "kCAFRegionFlag_PlayBackward (4)",
      "contents": "KCAFRegionFlag_PlayBackward"
    },
    {
      "trigger": "kCAFRegionFlag_PlayForward (2)",
      "contents": "KCAFRegionFlag_PlayForward"
    },
    {
      "trigger": "kCAF_AudioDataChunkID (1684108385)",
      "contents": "KCAF_AudioDataChunkID"
    },
    {
      "trigger": "kCAF_ChannelLayoutChunkID (1667785070)",
      "contents": "KCAF_ChannelLayoutChunkID"
    },
    {
      "trigger": "kCAF_EditCommentsChunkID (1701077876)",
      "contents": "KCAF_EditCommentsChunkID"
    },
    {
      "trigger": "kCAF_FileType (1667327590)",
      "contents": "KCAF_FileType"
    },
    {
      "trigger": "kCAF_FileVersion_Initial (1)",
      "contents": "KCAF_FileVersion_Initial"
    },
    {
      "trigger": "kCAF_FillerChunkID (1718773093)",
      "contents": "KCAF_FillerChunkID"
    },
    {
      "trigger": "kCAF_FormatListID (1818522467)",
      "contents": "KCAF_FormatListID"
    },
    {
      "trigger": "kCAF_InfoStringsChunkID (1768842863)",
      "contents": "KCAF_InfoStringsChunkID"
    },
    {
      "trigger": "kCAF_InstrumentChunkID (1768846196)",
      "contents": "KCAF_InstrumentChunkID"
    },
    {
      "trigger": "kCAF_MIDIChunkID (1835623529)",
      "contents": "KCAF_MIDIChunkID"
    },
    {
      "trigger": "kCAF_MagicCookieID (1802857321)",
      "contents": "KCAF_MagicCookieID"
    },
    {
      "trigger": "kCAF_MarkerChunkID (1835102827)",
      "contents": "KCAF_MarkerChunkID"
    },
    {
      "trigger": "kCAF_OverviewChunkID (1870034551)",
      "contents": "KCAF_OverviewChunkID"
    },
    {
      "trigger": "kCAF_PacketTableChunkID (1885432692)",
      "contents": "KCAF_PacketTableChunkID"
    },
    {
      "trigger": "kCAF_PeakChunkID (1885692267)",
      "contents": "KCAF_PeakChunkID"
    },
    {
      "trigger": "kCAF_RegionChunkID (1919248238)",
      "contents": "KCAF_RegionChunkID"
    },
    {
      "trigger": "kCAF_SMPTE_TimeType2398 (12)",
      "contents": "KCAF_SMPTE_TimeType2398"
    },
    {
      "trigger": "kCAF_SMPTE_TimeType24 (1)",
      "contents": "KCAF_SMPTE_TimeType24"
    },
    {
      "trigger": "kCAF_SMPTE_TimeType25 (2)",
      "contents": "KCAF_SMPTE_TimeType25"
    },
    {
      "trigger": "kCAF_SMPTE_TimeType2997 (5)",
      "contents": "KCAF_SMPTE_TimeType2997"
    },
    {
      "trigger": "kCAF_SMPTE_TimeType2997Drop (6)",
      "contents": "KCAF_SMPTE_TimeType2997Drop"
    },
    {
      "trigger": "kCAF_SMPTE_TimeType30 (4)",
      "contents": "KCAF_SMPTE_TimeType30"
    },
    {
      "trigger": "kCAF_SMPTE_TimeType30Drop (3)",
      "contents": "KCAF_SMPTE_TimeType30Drop"
    },
    {
      "trigger": "kCAF_SMPTE_TimeType50 (11)",
      "contents": "KCAF_SMPTE_TimeType50"
    },
    {
      "trigger": "kCAF_SMPTE_TimeType5994 (8)",
      "contents": "KCAF_SMPTE_TimeType5994"
    },
    {
      "trigger": "kCAF_SMPTE_TimeType5994Drop (10)",
      "contents": "KCAF_SMPTE_TimeType5994Drop"
    },
    {
      "trigger": "kCAF_SMPTE_TimeType60 (7)",
      "contents": "KCAF_SMPTE_TimeType60"
    },
    {
      "trigger": "kCAF_SMPTE_TimeType60Drop (9)",
      "contents": "KCAF_SMPTE_TimeType60Drop"
    },
    {
      "trigger": "kCAF_SMPTE_TimeTypeNone (0)",
      "contents": "KCAF_SMPTE_TimeTypeNone"
    },
    {
      "trigger": "kCAF_StreamDescriptionChunkID (1684370275)",
      "contents": "KCAF_StreamDescriptionChunkID"
    },
    {
      "trigger": "kCAF_StringsChunkID (1937011303)",
      "contents": "KCAF_StringsChunkID"
    },
    {
      "trigger": "kCAF_UMIDChunkID (1970104676)",
      "contents": "KCAF_UMIDChunkID"
    },
    {
      "trigger": "kCAF_UUIDChunkID (1970628964)",
      "contents": "KCAF_UUIDChunkID"
    },
    {
      "trigger": "kCAFillModeBackwards (NSString*)",
      "contents": "KCAFillModeBackwards"
    },
    {
      "trigger": "kCAFillModeBoth (NSString*)",
      "contents": "KCAFillModeBoth"
    },
    {
      "trigger": "kCAFillModeForwards (NSString*)",
      "contents": "KCAFillModeForwards"
    },
    {
      "trigger": "kCAFillModeFrozen (NSString*)",
      "contents": "KCAFillModeFrozen"
    },
    {
      "trigger": "kCAFillModeRemoved (NSString*)",
      "contents": "KCAFillModeRemoved"
    },
    {
      "trigger": "kCAFillRuleEvenOdd (NSString*)",
      "contents": "KCAFillRuleEvenOdd"
    },
    {
      "trigger": "kCAFillRuleNonZero (NSString*)",
      "contents": "KCAFillRuleNonZero"
    },
    {
      "trigger": "kCAFilterLinear (NSString*)",
      "contents": "KCAFilterLinear"
    },
    {
      "trigger": "kCAFilterNearest (NSString*)",
      "contents": "KCAFilterNearest"
    },
    {
      "trigger": "kCAFilterTrilinear (NSString*)",
      "contents": "KCAFilterTrilinear"
    },
    {
      "trigger": "kCAGradientLayerAxial (NSString*)",
      "contents": "KCAGradientLayerAxial"
    },
    {
      "trigger": "kCAGravityBottom (NSString*)",
      "contents": "KCAGravityBottom"
    },
    {
      "trigger": "kCAGravityBottomLeft (NSString*)",
      "contents": "KCAGravityBottomLeft"
    },
    {
      "trigger": "kCAGravityBottomRight (NSString*)",
      "contents": "KCAGravityBottomRight"
    },
    {
      "trigger": "kCAGravityCenter (NSString*)",
      "contents": "KCAGravityCenter"
    },
    {
      "trigger": "kCAGravityLeft (NSString*)",
      "contents": "KCAGravityLeft"
    },
    {
      "trigger": "kCAGravityResize (NSString*)",
      "contents": "KCAGravityResize"
    },
    {
      "trigger": "kCAGravityResizeAspect (NSString*)",
      "contents": "KCAGravityResizeAspect"
    },
    {
      "trigger": "kCAGravityResizeAspectFill (NSString*)",
      "contents": "KCAGravityResizeAspectFill"
    },
    {
      "trigger": "kCAGravityRight (NSString*)",
      "contents": "KCAGravityRight"
    },
    {
      "trigger": "kCAGravityTop (NSString*)",
      "contents": "KCAGravityTop"
    },
    {
      "trigger": "kCAGravityTopLeft (NSString*)",
      "contents": "KCAGravityTopLeft"
    },
    {
      "trigger": "kCAGravityTopRight (NSString*)",
      "contents": "KCAGravityTopRight"
    },
    {
      "trigger": "kCALayerBottomEdge (4)",
      "contents": "KCALayerBottomEdge"
    },
    {
      "trigger": "kCALayerLeftEdge (1)",
      "contents": "KCALayerLeftEdge"
    },
    {
      "trigger": "kCALayerRightEdge (2)",
      "contents": "KCALayerRightEdge"
    },
    {
      "trigger": "kCALayerTopEdge (8)",
      "contents": "KCALayerTopEdge"
    },
    {
      "trigger": "kCALineCapButt (NSString*)",
      "contents": "KCALineCapButt"
    },
    {
      "trigger": "kCALineCapRound (NSString*)",
      "contents": "KCALineCapRound"
    },
    {
      "trigger": "kCALineCapSquare (NSString*)",
      "contents": "KCALineCapSquare"
    },
    {
      "trigger": "kCALineJoinBevel (NSString*)",
      "contents": "KCALineJoinBevel"
    },
    {
      "trigger": "kCALineJoinMiter (NSString*)",
      "contents": "KCALineJoinMiter"
    },
    {
      "trigger": "kCALineJoinRound (NSString*)",
      "contents": "KCALineJoinRound"
    },
    {
      "trigger": "kCAMediaTimingFunctionDefault (NSString*)",
      "contents": "KCAMediaTimingFunctionDefault"
    },
    {
      "trigger": "kCAMediaTimingFunctionEaseIn (NSString*)",
      "contents": "KCAMediaTimingFunctionEaseIn"
    },
    {
      "trigger": "kCAMediaTimingFunctionEaseInEaseOut (NSString*)",
      "contents": "KCAMediaTimingFunctionEaseInEaseOut"
    },
    {
      "trigger": "kCAMediaTimingFunctionEaseOut (NSString*)",
      "contents": "KCAMediaTimingFunctionEaseOut"
    },
    {
      "trigger": "kCAMediaTimingFunctionLinear (NSString*)",
      "contents": "KCAMediaTimingFunctionLinear"
    },
    {
      "trigger": "kCAOnOrderIn (NSString*)",
      "contents": "KCAOnOrderIn"
    },
    {
      "trigger": "kCAOnOrderOut (NSString*)",
      "contents": "KCAOnOrderOut"
    },
    {
      "trigger": "kCAScrollBoth (NSString*)",
      "contents": "KCAScrollBoth"
    },
    {
      "trigger": "kCAScrollHorizontally (NSString*)",
      "contents": "KCAScrollHorizontally"
    },
    {
      "trigger": "kCAScrollNone (NSString*)",
      "contents": "KCAScrollNone"
    },
    {
      "trigger": "kCAScrollVertically (NSString*)",
      "contents": "KCAScrollVertically"
    },
    {
      "trigger": "kCATransactionAnimationDuration (NSString*)",
      "contents": "KCATransactionAnimationDuration"
    },
    {
      "trigger": "kCATransactionAnimationTimingFunction (NSString*)",
      "contents": "KCATransactionAnimationTimingFunction"
    },
    {
      "trigger": "kCATransactionCompletionBlock (NSString*)",
      "contents": "KCATransactionCompletionBlock"
    },
    {
      "trigger": "kCATransactionDisableActions (NSString*)",
      "contents": "KCATransactionDisableActions"
    },
    {
      "trigger": "kCATransition (NSString*)",
      "contents": "KCATransition"
    },
    {
      "trigger": "kCATransitionFade (NSString*)",
      "contents": "KCATransitionFade"
    },
    {
      "trigger": "kCATransitionFromBottom (NSString*)",
      "contents": "KCATransitionFromBottom"
    },
    {
      "trigger": "kCATransitionFromLeft (NSString*)",
      "contents": "KCATransitionFromLeft"
    },
    {
      "trigger": "kCATransitionFromRight (NSString*)",
      "contents": "KCATransitionFromRight"
    },
    {
      "trigger": "kCATransitionFromTop (NSString*)",
      "contents": "KCATransitionFromTop"
    },
    {
      "trigger": "kCATransitionMoveIn (NSString*)",
      "contents": "KCATransitionMoveIn"
    },
    {
      "trigger": "kCATransitionPush (NSString*)",
      "contents": "KCATransitionPush"
    },
    {
      "trigger": "kCATransitionReveal (NSString*)",
      "contents": "KCATransitionReveal"
    },
    {
      "trigger": "kCATruncationEnd (NSString*)",
      "contents": "KCATruncationEnd"
    },
    {
      "trigger": "kCATruncationMiddle (NSString*)",
      "contents": "KCATruncationMiddle"
    },
    {
      "trigger": "kCATruncationNone (NSString*)",
      "contents": "KCATruncationNone"
    },
    {
      "trigger": "kCATruncationStart (NSString*)",
      "contents": "KCATruncationStart"
    },
    {
      "trigger": "kCAValueFunctionRotateX (NSString*)",
      "contents": "KCAValueFunctionRotateX"
    },
    {
      "trigger": "kCAValueFunctionRotateY (NSString*)",
      "contents": "KCAValueFunctionRotateY"
    },
    {
      "trigger": "kCAValueFunctionRotateZ (NSString*)",
      "contents": "KCAValueFunctionRotateZ"
    },
    {
      "trigger": "kCAValueFunctionScale (NSString*)",
      "contents": "KCAValueFunctionScale"
    },
    {
      "trigger": "kCAValueFunctionScaleX (NSString*)",
      "contents": "KCAValueFunctionScaleX"
    },
    {
      "trigger": "kCAValueFunctionScaleY (NSString*)",
      "contents": "KCAValueFunctionScaleY"
    },
    {
      "trigger": "kCAValueFunctionScaleZ (NSString*)",
      "contents": "KCAValueFunctionScaleZ"
    },
    {
      "trigger": "kCAValueFunctionTranslate (NSString*)",
      "contents": "KCAValueFunctionTranslate"
    },
    {
      "trigger": "kCAValueFunctionTranslateX (NSString*)",
      "contents": "KCAValueFunctionTranslateX"
    },
    {
      "trigger": "kCAValueFunctionTranslateY (NSString*)",
      "contents": "KCAValueFunctionTranslateY"
    },
    {
      "trigger": "kCAValueFunctionTranslateZ (NSString*)",
      "contents": "KCAValueFunctionTranslateZ"
    },
    {
      "trigger": "kCFAbsoluteTimeIntervalSince1904 (CFTimeInterval)",
      "contents": "KCFAbsoluteTimeIntervalSince1904"
    },
    {
      "trigger": "kCFAbsoluteTimeIntervalSince1970 (CFTimeInterval)",
      "contents": "KCFAbsoluteTimeIntervalSince1970"
    },
    {
      "trigger": "kCFAllocatorDefault (CFAllocatorRef)",
      "contents": "KCFAllocatorDefault"
    },
    {
      "trigger": "kCFAllocatorMalloc (CFAllocatorRef)",
      "contents": "KCFAllocatorMalloc"
    },
    {
      "trigger": "kCFAllocatorMallocZone (CFAllocatorRef)",
      "contents": "KCFAllocatorMallocZone"
    },
    {
      "trigger": "kCFAllocatorNull (CFAllocatorRef)",
      "contents": "KCFAllocatorNull"
    },
    {
      "trigger": "kCFAllocatorSystemDefault (CFAllocatorRef)",
      "contents": "KCFAllocatorSystemDefault"
    },
    {
      "trigger": "kCFAllocatorUseContext (CFAllocatorRef)",
      "contents": "KCFAllocatorUseContext"
    },
    {
      "trigger": "kCFBookmarkResolutionWithoutMountingMask (512)",
      "contents": "KCFBookmarkResolutionWithoutMountingMask"
    },
    {
      "trigger": "kCFBookmarkResolutionWithoutUIMask (256)",
      "contents": "KCFBookmarkResolutionWithoutUIMask"
    },
    {
      "trigger": "kCFBooleanFalse (CFBooleanRef)",
      "contents": "KCFBooleanFalse"
    },
    {
      "trigger": "kCFBooleanTrue (CFBooleanRef)",
      "contents": "KCFBooleanTrue"
    },
    {
      "trigger": "kCFBuddhistCalendar (CFStringRef)",
      "contents": "KCFBuddhistCalendar"
    },
    {
      "trigger": "kCFBundleDevelopmentRegionKey (CFStringRef)",
      "contents": "KCFBundleDevelopmentRegionKey"
    },
    {
      "trigger": "kCFBundleExecutableArchitectureI386 (7)",
      "contents": "KCFBundleExecutableArchitectureI386"
    },
    {
      "trigger": "kCFBundleExecutableArchitecturePPC (18)",
      "contents": "KCFBundleExecutableArchitecturePPC"
    },
    {
      "trigger": "kCFBundleExecutableArchitecturePPC64 (16777234)",
      "contents": "KCFBundleExecutableArchitecturePPC64"
    },
    {
      "trigger": "kCFBundleExecutableArchitectureX86_64 (16777223)",
      "contents": "KCFBundleExecutableArchitectureX86_64"
    },
    {
      "trigger": "kCFBundleExecutableKey (CFStringRef)",
      "contents": "KCFBundleExecutableKey"
    },
    {
      "trigger": "kCFBundleIdentifierKey (CFStringRef)",
      "contents": "KCFBundleIdentifierKey"
    },
    {
      "trigger": "kCFBundleInfoDictionaryVersionKey (CFStringRef)",
      "contents": "KCFBundleInfoDictionaryVersionKey"
    },
    {
      "trigger": "kCFBundleLocalizationsKey (CFStringRef)",
      "contents": "KCFBundleLocalizationsKey"
    },
    {
      "trigger": "kCFBundleNameKey (CFStringRef)",
      "contents": "KCFBundleNameKey"
    },
    {
      "trigger": "kCFBundleVersionKey (CFStringRef)",
      "contents": "KCFBundleVersionKey"
    },
    {
      "trigger": "kCFCalendarComponentsWrap (1)",
      "contents": "KCFCalendarComponentsWrap"
    },
    {
      "trigger": "kCFCalendarUnitDay (16)",
      "contents": "KCFCalendarUnitDay"
    },
    {
      "trigger": "kCFCalendarUnitEra (2)",
      "contents": "KCFCalendarUnitEra"
    },
    {
      "trigger": "kCFCalendarUnitHour (32)",
      "contents": "KCFCalendarUnitHour"
    },
    {
      "trigger": "kCFCalendarUnitMinute (64)",
      "contents": "KCFCalendarUnitMinute"
    },
    {
      "trigger": "kCFCalendarUnitMonth (8)",
      "contents": "KCFCalendarUnitMonth"
    },
    {
      "trigger": "kCFCalendarUnitQuarter (2048)",
      "contents": "KCFCalendarUnitQuarter"
    },
    {
      "trigger": "kCFCalendarUnitSecond (128)",
      "contents": "KCFCalendarUnitSecond"
    },
    {
      "trigger": "kCFCalendarUnitWeek (256)",
      "contents": "KCFCalendarUnitWeek"
    },
    {
      "trigger": "kCFCalendarUnitWeekOfMonth (4096)",
      "contents": "KCFCalendarUnitWeekOfMonth"
    },
    {
      "trigger": "kCFCalendarUnitWeekOfYear (8192)",
      "contents": "KCFCalendarUnitWeekOfYear"
    },
    {
      "trigger": "kCFCalendarUnitWeekday (512)",
      "contents": "KCFCalendarUnitWeekday"
    },
    {
      "trigger": "kCFCalendarUnitWeekdayOrdinal (1024)",
      "contents": "KCFCalendarUnitWeekdayOrdinal"
    },
    {
      "trigger": "kCFCalendarUnitYear (4)",
      "contents": "KCFCalendarUnitYear"
    },
    {
      "trigger": "kCFCalendarUnitYearForWeekOfYear (16384)",
      "contents": "KCFCalendarUnitYearForWeekOfYear"
    },
    {
      "trigger": "kCFCharacterSetAlphaNumeric (10)",
      "contents": "KCFCharacterSetAlphaNumeric"
    },
    {
      "trigger": "kCFCharacterSetCapitalizedLetter (13)",
      "contents": "KCFCharacterSetCapitalizedLetter"
    },
    {
      "trigger": "kCFCharacterSetControl (1)",
      "contents": "KCFCharacterSetControl"
    },
    {
      "trigger": "kCFCharacterSetDecimalDigit (4)",
      "contents": "KCFCharacterSetDecimalDigit"
    },
    {
      "trigger": "kCFCharacterSetDecomposable (9)",
      "contents": "KCFCharacterSetDecomposable"
    },
    {
      "trigger": "kCFCharacterSetIllegal (12)",
      "contents": "KCFCharacterSetIllegal"
    },
    {
      "trigger": "kCFCharacterSetLetter (5)",
      "contents": "KCFCharacterSetLetter"
    },
    {
      "trigger": "kCFCharacterSetLowercaseLetter (6)",
      "contents": "KCFCharacterSetLowercaseLetter"
    },
    {
      "trigger": "kCFCharacterSetNewline (15)",
      "contents": "KCFCharacterSetNewline"
    },
    {
      "trigger": "kCFCharacterSetNonBase (8)",
      "contents": "KCFCharacterSetNonBase"
    },
    {
      "trigger": "kCFCharacterSetPunctuation (11)",
      "contents": "KCFCharacterSetPunctuation"
    },
    {
      "trigger": "kCFCharacterSetSymbol (14)",
      "contents": "KCFCharacterSetSymbol"
    },
    {
      "trigger": "kCFCharacterSetUppercaseLetter (7)",
      "contents": "KCFCharacterSetUppercaseLetter"
    },
    {
      "trigger": "kCFCharacterSetWhitespace (2)",
      "contents": "KCFCharacterSetWhitespace"
    },
    {
      "trigger": "kCFCharacterSetWhitespaceAndNewline (3)",
      "contents": "KCFCharacterSetWhitespaceAndNewline"
    },
    {
      "trigger": "kCFChineseCalendar (CFStringRef)",
      "contents": "KCFChineseCalendar"
    },
    {
      "trigger": "kCFCompareAnchored (8)",
      "contents": "KCFCompareAnchored"
    },
    {
      "trigger": "kCFCompareBackwards (4)",
      "contents": "KCFCompareBackwards"
    },
    {
      "trigger": "kCFCompareCaseInsensitive (1)",
      "contents": "KCFCompareCaseInsensitive"
    },
    {
      "trigger": "kCFCompareDiacriticInsensitive (128)",
      "contents": "KCFCompareDiacriticInsensitive"
    },
    {
      "trigger": "kCFCompareEqualTo (0)",
      "contents": "KCFCompareEqualTo"
    },
    {
      "trigger": "kCFCompareForcedOrdering (512)",
      "contents": "KCFCompareForcedOrdering"
    },
    {
      "trigger": "kCFCompareGreaterThan (1)",
      "contents": "KCFCompareGreaterThan"
    },
    {
      "trigger": "kCFCompareLessThan (-1)",
      "contents": "KCFCompareLessThan"
    },
    {
      "trigger": "kCFCompareLocalized (32)",
      "contents": "KCFCompareLocalized"
    },
    {
      "trigger": "kCFCompareNonliteral (16)",
      "contents": "KCFCompareNonliteral"
    },
    {
      "trigger": "kCFCompareNumerically (64)",
      "contents": "KCFCompareNumerically"
    },
    {
      "trigger": "kCFCompareWidthInsensitive (256)",
      "contents": "KCFCompareWidthInsensitive"
    },
    {
      "trigger": "kCFCopyStringBagCallBacks (CFBagCallBacks)",
      "contents": "KCFCopyStringBagCallBacks"
    },
    {
      "trigger": "kCFCopyStringDictionaryKeyCallBacks (CFDictionaryKeyCallBacks)",
      "contents": "KCFCopyStringDictionaryKeyCallBacks"
    },
    {
      "trigger": "kCFCopyStringSetCallBacks (CFSetCallBacks)",
      "contents": "KCFCopyStringSetCallBacks"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber (double)",
      "contents": "KCFCoreFoundationVersionNumber"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_0 (196.40)",
      "contents": "KCFCoreFoundationVersionNumber10_0"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_0_3 (196.50)",
      "contents": "KCFCoreFoundationVersionNumber10_0_3"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_1 (226.00)",
      "contents": "KCFCoreFoundationVersionNumber10_1"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_1_1 (226.00)",
      "contents": "KCFCoreFoundationVersionNumber10_1_1"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_1_2 (227.20)",
      "contents": "KCFCoreFoundationVersionNumber10_1_2"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_1_3 (227.20)",
      "contents": "KCFCoreFoundationVersionNumber10_1_3"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_1_4 (227.30)",
      "contents": "KCFCoreFoundationVersionNumber10_1_4"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_2 (263.00)",
      "contents": "KCFCoreFoundationVersionNumber10_2"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_2_1 (263.10)",
      "contents": "KCFCoreFoundationVersionNumber10_2_1"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_2_2 (263.10)",
      "contents": "KCFCoreFoundationVersionNumber10_2_2"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_2_3 (263.30)",
      "contents": "KCFCoreFoundationVersionNumber10_2_3"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_2_4 (263.30)",
      "contents": "KCFCoreFoundationVersionNumber10_2_4"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_2_5 (263.50)",
      "contents": "KCFCoreFoundationVersionNumber10_2_5"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_2_6 (263.50)",
      "contents": "KCFCoreFoundationVersionNumber10_2_6"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_2_7 (263.50)",
      "contents": "KCFCoreFoundationVersionNumber10_2_7"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_2_8 (263.50)",
      "contents": "KCFCoreFoundationVersionNumber10_2_8"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_3 (299.00)",
      "contents": "KCFCoreFoundationVersionNumber10_3"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_3_1 (299.00)",
      "contents": "KCFCoreFoundationVersionNumber10_3_1"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_3_2 (299.00)",
      "contents": "KCFCoreFoundationVersionNumber10_3_2"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_3_3 (299.30)",
      "contents": "KCFCoreFoundationVersionNumber10_3_3"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_3_4 (299.31)",
      "contents": "KCFCoreFoundationVersionNumber10_3_4"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_3_5 (299.31)",
      "contents": "KCFCoreFoundationVersionNumber10_3_5"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_3_6 (299.32)",
      "contents": "KCFCoreFoundationVersionNumber10_3_6"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_3_7 (299.33)",
      "contents": "KCFCoreFoundationVersionNumber10_3_7"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_3_8 (299.33)",
      "contents": "KCFCoreFoundationVersionNumber10_3_8"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_3_9 (299.35)",
      "contents": "KCFCoreFoundationVersionNumber10_3_9"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_4 (368.00)",
      "contents": "KCFCoreFoundationVersionNumber10_4"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_4_1 (368.10)",
      "contents": "KCFCoreFoundationVersionNumber10_4_1"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_4_10 (368.28)",
      "contents": "KCFCoreFoundationVersionNumber10_4_10"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_4_11 (368.31)",
      "contents": "KCFCoreFoundationVersionNumber10_4_11"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_4_2 (368.11)",
      "contents": "KCFCoreFoundationVersionNumber10_4_2"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_4_3 (368.18)",
      "contents": "KCFCoreFoundationVersionNumber10_4_3"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_4_4_Intel (368.26)",
      "contents": "KCFCoreFoundationVersionNumber10_4_4_Intel"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_4_4_PowerPC (368.25)",
      "contents": "KCFCoreFoundationVersionNumber10_4_4_PowerPC"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_4_5_Intel (368.26)",
      "contents": "KCFCoreFoundationVersionNumber10_4_5_Intel"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_4_5_PowerPC (368.25)",
      "contents": "KCFCoreFoundationVersionNumber10_4_5_PowerPC"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_4_6_Intel (368.26)",
      "contents": "KCFCoreFoundationVersionNumber10_4_6_Intel"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_4_6_PowerPC (368.25)",
      "contents": "KCFCoreFoundationVersionNumber10_4_6_PowerPC"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_4_7 (368.27)",
      "contents": "KCFCoreFoundationVersionNumber10_4_7"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_4_8 (368.27)",
      "contents": "KCFCoreFoundationVersionNumber10_4_8"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_4_9 (368.28)",
      "contents": "KCFCoreFoundationVersionNumber10_4_9"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_5 (476.00)",
      "contents": "KCFCoreFoundationVersionNumber10_5"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_5_1 (476.00)",
      "contents": "KCFCoreFoundationVersionNumber10_5_1"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_5_2 (476.10)",
      "contents": "KCFCoreFoundationVersionNumber10_5_2"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_5_3 (476.13)",
      "contents": "KCFCoreFoundationVersionNumber10_5_3"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_5_4 (476.14)",
      "contents": "KCFCoreFoundationVersionNumber10_5_4"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_5_5 (476.15)",
      "contents": "KCFCoreFoundationVersionNumber10_5_5"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_5_6 (476.17)",
      "contents": "KCFCoreFoundationVersionNumber10_5_6"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_5_7 (476.18)",
      "contents": "KCFCoreFoundationVersionNumber10_5_7"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_5_8 (476.19)",
      "contents": "KCFCoreFoundationVersionNumber10_5_8"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_6 (550.00)",
      "contents": "KCFCoreFoundationVersionNumber10_6"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_6_1 (550.00)",
      "contents": "KCFCoreFoundationVersionNumber10_6_1"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_6_2 (550.13)",
      "contents": "KCFCoreFoundationVersionNumber10_6_2"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_6_3 (550.19)",
      "contents": "KCFCoreFoundationVersionNumber10_6_3"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_6_4 (550.29)",
      "contents": "KCFCoreFoundationVersionNumber10_6_4"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber10_6_5 (550.42)",
      "contents": "KCFCoreFoundationVersionNumber10_6_5"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber_iOS_4_0 (550.32)",
      "contents": "KCFCoreFoundationVersionNumber_iOS_4_0"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber_iOS_4_1 (550.38)",
      "contents": "KCFCoreFoundationVersionNumber_iOS_4_1"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber_iOS_4_2 (550.52)",
      "contents": "KCFCoreFoundationVersionNumber_iOS_4_2"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber_iPhoneOS_2_0 (478.23)",
      "contents": "KCFCoreFoundationVersionNumber_iPhoneOS_2_0"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber_iPhoneOS_2_1 (478.26)",
      "contents": "KCFCoreFoundationVersionNumber_iPhoneOS_2_1"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber_iPhoneOS_2_2 (478.29)",
      "contents": "KCFCoreFoundationVersionNumber_iPhoneOS_2_2"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber_iPhoneOS_3_0 (478.47)",
      "contents": "KCFCoreFoundationVersionNumber_iPhoneOS_3_0"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber_iPhoneOS_3_1 (478.52)",
      "contents": "KCFCoreFoundationVersionNumber_iPhoneOS_3_1"
    },
    {
      "trigger": "kCFCoreFoundationVersionNumber_iPhoneOS_3_2 (478.61)",
      "contents": "KCFCoreFoundationVersionNumber_iPhoneOS_3_2"
    },
    {
      "trigger": "kCFDNSServiceFailureKey (CFStringRef)",
      "contents": "KCFDNSServiceFailureKey"
    },
    {
      "trigger": "kCFDataSearchAnchored (2)",
      "contents": "KCFDataSearchAnchored"
    },
    {
      "trigger": "kCFDataSearchBackwards (1)",
      "contents": "KCFDataSearchBackwards"
    },
    {
      "trigger": "kCFDateFormatterAMSymbol (CFStringRef)",
      "contents": "KCFDateFormatterAMSymbol"
    },
    {
      "trigger": "kCFDateFormatterCalendar (CFStringRef)",
      "contents": "KCFDateFormatterCalendar"
    },
    {
      "trigger": "kCFDateFormatterCalendarName (CFStringRef)",
      "contents": "KCFDateFormatterCalendarName"
    },
    {
      "trigger": "kCFDateFormatterDefaultDate (CFStringRef)",
      "contents": "KCFDateFormatterDefaultDate"
    },
    {
      "trigger": "kCFDateFormatterDefaultFormat (CFStringRef)",
      "contents": "KCFDateFormatterDefaultFormat"
    },
    {
      "trigger": "kCFDateFormatterDoesRelativeDateFormattingKey (CFStringRef)",
      "contents": "KCFDateFormatterDoesRelativeDateFormattingKey"
    },
    {
      "trigger": "kCFDateFormatterEraSymbols (CFStringRef)",
      "contents": "KCFDateFormatterEraSymbols"
    },
    {
      "trigger": "kCFDateFormatterFullStyle (4)",
      "contents": "KCFDateFormatterFullStyle"
    },
    {
      "trigger": "kCFDateFormatterGregorianStartDate (CFStringRef)",
      "contents": "KCFDateFormatterGregorianStartDate"
    },
    {
      "trigger": "kCFDateFormatterIsLenient (CFStringRef)",
      "contents": "KCFDateFormatterIsLenient"
    },
    {
      "trigger": "kCFDateFormatterLongEraSymbols (CFStringRef)",
      "contents": "KCFDateFormatterLongEraSymbols"
    },
    {
      "trigger": "kCFDateFormatterLongStyle (3)",
      "contents": "KCFDateFormatterLongStyle"
    },
    {
      "trigger": "kCFDateFormatterMediumStyle (2)",
      "contents": "KCFDateFormatterMediumStyle"
    },
    {
      "trigger": "kCFDateFormatterMonthSymbols (CFStringRef)",
      "contents": "KCFDateFormatterMonthSymbols"
    },
    {
      "trigger": "kCFDateFormatterNoStyle (0)",
      "contents": "KCFDateFormatterNoStyle"
    },
    {
      "trigger": "kCFDateFormatterPMSymbol (CFStringRef)",
      "contents": "KCFDateFormatterPMSymbol"
    },
    {
      "trigger": "kCFDateFormatterQuarterSymbols (CFStringRef)",
      "contents": "KCFDateFormatterQuarterSymbols"
    },
    {
      "trigger": "kCFDateFormatterShortMonthSymbols (CFStringRef)",
      "contents": "KCFDateFormatterShortMonthSymbols"
    },
    {
      "trigger": "kCFDateFormatterShortQuarterSymbols (CFStringRef)",
      "contents": "KCFDateFormatterShortQuarterSymbols"
    },
    {
      "trigger": "kCFDateFormatterShortStandaloneMonthSymbols (CFStringRef)",
      "contents": "KCFDateFormatterShortStandaloneMonthSymbols"
    },
    {
      "trigger": "kCFDateFormatterShortStandaloneQuarterSymbols (CFStringRef)",
      "contents": "KCFDateFormatterShortStandaloneQuarterSymbols"
    },
    {
      "trigger": "kCFDateFormatterShortStandaloneWeekdaySymbols (CFStringRef)",
      "contents": "KCFDateFormatterShortStandaloneWeekdaySymbols"
    },
    {
      "trigger": "kCFDateFormatterShortStyle (1)",
      "contents": "KCFDateFormatterShortStyle"
    },
    {
      "trigger": "kCFDateFormatterShortWeekdaySymbols (CFStringRef)",
      "contents": "KCFDateFormatterShortWeekdaySymbols"
    },
    {
      "trigger": "kCFDateFormatterStandaloneMonthSymbols (CFStringRef)",
      "contents": "KCFDateFormatterStandaloneMonthSymbols"
    },
    {
      "trigger": "kCFDateFormatterStandaloneQuarterSymbols (CFStringRef)",
      "contents": "KCFDateFormatterStandaloneQuarterSymbols"
    },
    {
      "trigger": "kCFDateFormatterStandaloneWeekdaySymbols (CFStringRef)",
      "contents": "KCFDateFormatterStandaloneWeekdaySymbols"
    },
    {
      "trigger": "kCFDateFormatterTimeZone (CFStringRef)",
      "contents": "KCFDateFormatterTimeZone"
    },
    {
      "trigger": "kCFDateFormatterTwoDigitStartDate (CFStringRef)",
      "contents": "KCFDateFormatterTwoDigitStartDate"
    },
    {
      "trigger": "kCFDateFormatterVeryShortMonthSymbols (CFStringRef)",
      "contents": "KCFDateFormatterVeryShortMonthSymbols"
    },
    {
      "trigger": "kCFDateFormatterVeryShortStandaloneMonthSymbols (CFStringRef)",
      "contents": "KCFDateFormatterVeryShortStandaloneMonthSymbols"
    },
    {
      "trigger": "kCFDateFormatterVeryShortStandaloneWeekdaySymbols (CFStringRef)",
      "contents": "KCFDateFormatterVeryShortStandaloneWeekdaySymbols"
    },
    {
      "trigger": "kCFDateFormatterVeryShortWeekdaySymbols (CFStringRef)",
      "contents": "KCFDateFormatterVeryShortWeekdaySymbols"
    },
    {
      "trigger": "kCFDateFormatterWeekdaySymbols (CFStringRef)",
      "contents": "KCFDateFormatterWeekdaySymbols"
    },
    {
      "trigger": "kCFErrorDescriptionKey (CFStringRef)",
      "contents": "KCFErrorDescriptionKey"
    },
    {
      "trigger": "kCFErrorDomainCFNetwork (CFStringRef)",
      "contents": "KCFErrorDomainCFNetwork"
    },
    {
      "trigger": "kCFErrorDomainCocoa (CFStringRef)",
      "contents": "KCFErrorDomainCocoa"
    },
    {
      "trigger": "kCFErrorDomainMach (CFStringRef)",
      "contents": "KCFErrorDomainMach"
    },
    {
      "trigger": "kCFErrorDomainOSStatus (CFStringRef)",
      "contents": "KCFErrorDomainOSStatus"
    },
    {
      "trigger": "kCFErrorDomainPOSIX (CFStringRef)",
      "contents": "KCFErrorDomainPOSIX"
    },
    {
      "trigger": "kCFErrorDomainSystemConfiguration (CFStringRef)",
      "contents": "KCFErrorDomainSystemConfiguration"
    },
    {
      "trigger": "kCFErrorDomainWinSock (CFStringRef)",
      "contents": "KCFErrorDomainWinSock"
    },
    {
      "trigger": "kCFErrorFilePathKey (CFStringRef)",
      "contents": "KCFErrorFilePathKey"
    },
    {
      "trigger": "kCFErrorHTTPAuthenticationTypeUnsupported (300)",
      "contents": "KCFErrorHTTPAuthenticationTypeUnsupported"
    },
    {
      "trigger": "kCFErrorHTTPBadCredentials (301)",
      "contents": "KCFErrorHTTPBadCredentials"
    },
    {
      "trigger": "kCFErrorHTTPBadProxyCredentials (307)",
      "contents": "KCFErrorHTTPBadProxyCredentials"
    },
    {
      "trigger": "kCFErrorHTTPBadURL (305)",
      "contents": "KCFErrorHTTPBadURL"
    },
    {
      "trigger": "kCFErrorHTTPConnectionLost (302)",
      "contents": "KCFErrorHTTPConnectionLost"
    },
    {
      "trigger": "kCFErrorHTTPParseFailure (303)",
      "contents": "KCFErrorHTTPParseFailure"
    },
    {
      "trigger": "kCFErrorHTTPProxyConnectionFailure (306)",
      "contents": "KCFErrorHTTPProxyConnectionFailure"
    },
    {
      "trigger": "kCFErrorHTTPRedirectionLoopDetected (304)",
      "contents": "KCFErrorHTTPRedirectionLoopDetected"
    },
    {
      "trigger": "kCFErrorHTTPSProxyConnectionFailure (310)",
      "contents": "KCFErrorHTTPSProxyConnectionFailure"
    },
    {
      "trigger": "kCFErrorLocalizedDescriptionKey (CFStringRef)",
      "contents": "KCFErrorLocalizedDescriptionKey"
    },
    {
      "trigger": "kCFErrorLocalizedFailureReasonKey (CFStringRef)",
      "contents": "KCFErrorLocalizedFailureReasonKey"
    },
    {
      "trigger": "kCFErrorLocalizedRecoverySuggestionKey (CFStringRef)",
      "contents": "KCFErrorLocalizedRecoverySuggestionKey"
    },
    {
      "trigger": "kCFErrorPACFileAuth (309)",
      "contents": "KCFErrorPACFileAuth"
    },
    {
      "trigger": "kCFErrorPACFileError (308)",
      "contents": "KCFErrorPACFileError"
    },
    {
      "trigger": "kCFErrorURLKey (CFStringRef)",
      "contents": "KCFErrorURLKey"
    },
    {
      "trigger": "kCFErrorUnderlyingErrorKey (CFStringRef)",
      "contents": "KCFErrorUnderlyingErrorKey"
    },
    {
      "trigger": "kCFFTPErrorUnexpectedStatusCode (200)",
      "contents": "KCFFTPErrorUnexpectedStatusCode"
    },
    {
      "trigger": "kCFFTPResourceGroup (CFStringRef)",
      "contents": "KCFFTPResourceGroup"
    },
    {
      "trigger": "kCFFTPResourceLink (CFStringRef)",
      "contents": "KCFFTPResourceLink"
    },
    {
      "trigger": "kCFFTPResourceModDate (CFStringRef)",
      "contents": "KCFFTPResourceModDate"
    },
    {
      "trigger": "kCFFTPResourceMode (CFStringRef)",
      "contents": "KCFFTPResourceMode"
    },
    {
      "trigger": "kCFFTPResourceName (CFStringRef)",
      "contents": "KCFFTPResourceName"
    },
    {
      "trigger": "kCFFTPResourceOwner (CFStringRef)",
      "contents": "KCFFTPResourceOwner"
    },
    {
      "trigger": "kCFFTPResourceSize (CFStringRef)",
      "contents": "KCFFTPResourceSize"
    },
    {
      "trigger": "kCFFTPResourceType (CFStringRef)",
      "contents": "KCFFTPResourceType"
    },
    {
      "trigger": "kCFFTPStatusCodeKey (CFStringRef)",
      "contents": "KCFFTPStatusCodeKey"
    },
    {
      "trigger": "kCFFileDescriptorReadCallBack (1)",
      "contents": "KCFFileDescriptorReadCallBack"
    },
    {
      "trigger": "kCFFileDescriptorWriteCallBack (2)",
      "contents": "KCFFileDescriptorWriteCallBack"
    },
    {
      "trigger": "kCFGetAddrInfoFailureKey (CFStringRef)",
      "contents": "KCFGetAddrInfoFailureKey"
    },
    {
      "trigger": "kCFGregorianAllUnits (16777215)",
      "contents": "KCFGregorianAllUnits"
    },
    {
      "trigger": "kCFGregorianCalendar (CFStringRef)",
      "contents": "KCFGregorianCalendar"
    },
    {
      "trigger": "kCFGregorianUnitsDays (4)",
      "contents": "KCFGregorianUnitsDays"
    },
    {
      "trigger": "kCFGregorianUnitsHours (8)",
      "contents": "KCFGregorianUnitsHours"
    },
    {
      "trigger": "kCFGregorianUnitsMinutes (16)",
      "contents": "KCFGregorianUnitsMinutes"
    },
    {
      "trigger": "kCFGregorianUnitsMonths (2)",
      "contents": "KCFGregorianUnitsMonths"
    },
    {
      "trigger": "kCFGregorianUnitsSeconds (32)",
      "contents": "KCFGregorianUnitsSeconds"
    },
    {
      "trigger": "kCFGregorianUnitsYears (1)",
      "contents": "KCFGregorianUnitsYears"
    },
    {
      "trigger": "kCFHTTPAuthenticationAccountDomain (CFStringRef)",
      "contents": "KCFHTTPAuthenticationAccountDomain"
    },
    {
      "trigger": "kCFHTTPAuthenticationPassword (CFStringRef)",
      "contents": "KCFHTTPAuthenticationPassword"
    },
    {
      "trigger": "kCFHTTPAuthenticationSchemeBasic (CFStringRef)",
      "contents": "KCFHTTPAuthenticationSchemeBasic"
    },
    {
      "trigger": "kCFHTTPAuthenticationSchemeDigest (CFStringRef)",
      "contents": "KCFHTTPAuthenticationSchemeDigest"
    },
    {
      "trigger": "kCFHTTPAuthenticationSchemeNTLM (CFStringRef)",
      "contents": "KCFHTTPAuthenticationSchemeNTLM"
    },
    {
      "trigger": "kCFHTTPAuthenticationSchemeNegotiate (CFStringRef)",
      "contents": "KCFHTTPAuthenticationSchemeNegotiate"
    },
    {
      "trigger": "kCFHTTPAuthenticationUsername (CFStringRef)",
      "contents": "KCFHTTPAuthenticationUsername"
    },
    {
      "trigger": "kCFHTTPCookieCannotParseCookieFile (-4000)",
      "contents": "KCFHTTPCookieCannotParseCookieFile"
    },
    {
      "trigger": "kCFHTTPVersion1_0 (CFStringRef)",
      "contents": "KCFHTTPVersion1_0"
    },
    {
      "trigger": "kCFHTTPVersion1_1 (CFStringRef)",
      "contents": "KCFHTTPVersion1_1"
    },
    {
      "trigger": "kCFHebrewCalendar (CFStringRef)",
      "contents": "KCFHebrewCalendar"
    },
    {
      "trigger": "kCFHostAddresses (0)",
      "contents": "KCFHostAddresses"
    },
    {
      "trigger": "kCFHostErrorHostNotFound (1)",
      "contents": "KCFHostErrorHostNotFound"
    },
    {
      "trigger": "kCFHostErrorUnknown (2)",
      "contents": "KCFHostErrorUnknown"
    },
    {
      "trigger": "kCFHostNames (1)",
      "contents": "KCFHostNames"
    },
    {
      "trigger": "kCFHostReachability (2)",
      "contents": "KCFHostReachability"
    },
    {
      "trigger": "kCFISO8601Calendar (CFStringRef)",
      "contents": "KCFISO8601Calendar"
    },
    {
      "trigger": "kCFIndianCalendar (CFStringRef)",
      "contents": "KCFIndianCalendar"
    },
    {
      "trigger": "kCFIslamicCalendar (CFStringRef)",
      "contents": "KCFIslamicCalendar"
    },
    {
      "trigger": "kCFIslamicCivilCalendar (CFStringRef)",
      "contents": "KCFIslamicCivilCalendar"
    },
    {
      "trigger": "kCFJapaneseCalendar (CFStringRef)",
      "contents": "KCFJapaneseCalendar"
    },
    {
      "trigger": "kCFLocaleAlternateQuotationBeginDelimiterKey (CFStringRef)",
      "contents": "KCFLocaleAlternateQuotationBeginDelimiterKey"
    },
    {
      "trigger": "kCFLocaleAlternateQuotationEndDelimiterKey (CFStringRef)",
      "contents": "KCFLocaleAlternateQuotationEndDelimiterKey"
    },
    {
      "trigger": "kCFLocaleCalendar (CFStringRef)",
      "contents": "KCFLocaleCalendar"
    },
    {
      "trigger": "kCFLocaleCalendarIdentifier (CFStringRef)",
      "contents": "KCFLocaleCalendarIdentifier"
    },
    {
      "trigger": "kCFLocaleCollationIdentifier (CFStringRef)",
      "contents": "KCFLocaleCollationIdentifier"
    },
    {
      "trigger": "kCFLocaleCollatorIdentifier (CFStringRef)",
      "contents": "KCFLocaleCollatorIdentifier"
    },
    {
      "trigger": "kCFLocaleCountryCode (CFStringRef)",
      "contents": "KCFLocaleCountryCode"
    },
    {
      "trigger": "kCFLocaleCurrencyCode (CFStringRef)",
      "contents": "KCFLocaleCurrencyCode"
    },
    {
      "trigger": "kCFLocaleCurrencySymbol (CFStringRef)",
      "contents": "KCFLocaleCurrencySymbol"
    },
    {
      "trigger": "kCFLocaleCurrentLocaleDidChangeNotification (CFStringRef)",
      "contents": "KCFLocaleCurrentLocaleDidChangeNotification"
    },
    {
      "trigger": "kCFLocaleDecimalSeparator (CFStringRef)",
      "contents": "KCFLocaleDecimalSeparator"
    },
    {
      "trigger": "kCFLocaleExemplarCharacterSet (CFStringRef)",
      "contents": "KCFLocaleExemplarCharacterSet"
    },
    {
      "trigger": "kCFLocaleGroupingSeparator (CFStringRef)",
      "contents": "KCFLocaleGroupingSeparator"
    },
    {
      "trigger": "kCFLocaleIdentifier (CFStringRef)",
      "contents": "KCFLocaleIdentifier"
    },
    {
      "trigger": "kCFLocaleLanguageCode (CFStringRef)",
      "contents": "KCFLocaleLanguageCode"
    },
    {
      "trigger": "kCFLocaleLanguageDirectionBottomToTop (4)",
      "contents": "KCFLocaleLanguageDirectionBottomToTop"
    },
    {
      "trigger": "kCFLocaleLanguageDirectionLeftToRight (1)",
      "contents": "KCFLocaleLanguageDirectionLeftToRight"
    },
    {
      "trigger": "kCFLocaleLanguageDirectionRightToLeft (2)",
      "contents": "KCFLocaleLanguageDirectionRightToLeft"
    },
    {
      "trigger": "kCFLocaleLanguageDirectionTopToBottom (3)",
      "contents": "KCFLocaleLanguageDirectionTopToBottom"
    },
    {
      "trigger": "kCFLocaleLanguageDirectionUnknown (0)",
      "contents": "KCFLocaleLanguageDirectionUnknown"
    },
    {
      "trigger": "kCFLocaleMeasurementSystem (CFStringRef)",
      "contents": "KCFLocaleMeasurementSystem"
    },
    {
      "trigger": "kCFLocaleQuotationBeginDelimiterKey (CFStringRef)",
      "contents": "KCFLocaleQuotationBeginDelimiterKey"
    },
    {
      "trigger": "kCFLocaleQuotationEndDelimiterKey (CFStringRef)",
      "contents": "KCFLocaleQuotationEndDelimiterKey"
    },
    {
      "trigger": "kCFLocaleScriptCode (CFStringRef)",
      "contents": "KCFLocaleScriptCode"
    },
    {
      "trigger": "kCFLocaleUsesMetricSystem (CFStringRef)",
      "contents": "KCFLocaleUsesMetricSystem"
    },
    {
      "trigger": "kCFLocaleVariantCode (CFStringRef)",
      "contents": "KCFLocaleVariantCode"
    },
    {
      "trigger": "kCFMessagePortBecameInvalidError (-5)",
      "contents": "KCFMessagePortBecameInvalidError"
    },
    {
      "trigger": "kCFMessagePortIsInvalid (-3)",
      "contents": "KCFMessagePortIsInvalid"
    },
    {
      "trigger": "kCFMessagePortReceiveTimeout (-2)",
      "contents": "KCFMessagePortReceiveTimeout"
    },
    {
      "trigger": "kCFMessagePortSendTimeout (-1)",
      "contents": "KCFMessagePortSendTimeout"
    },
    {
      "trigger": "kCFMessagePortSuccess (0)",
      "contents": "KCFMessagePortSuccess"
    },
    {
      "trigger": "kCFMessagePortTransportError (-4)",
      "contents": "KCFMessagePortTransportError"
    },
    {
      "trigger": "kCFNetDiagnosticConnectionDown (-66557)",
      "contents": "KCFNetDiagnosticConnectionDown"
    },
    {
      "trigger": "kCFNetDiagnosticConnectionIndeterminate (-66558)",
      "contents": "KCFNetDiagnosticConnectionIndeterminate"
    },
    {
      "trigger": "kCFNetDiagnosticConnectionUp (-66559)",
      "contents": "KCFNetDiagnosticConnectionUp"
    },
    {
      "trigger": "kCFNetDiagnosticErr (-66560)",
      "contents": "KCFNetDiagnosticErr"
    },
    {
      "trigger": "kCFNetDiagnosticNoErr (0)",
      "contents": "KCFNetDiagnosticNoErr"
    },
    {
      "trigger": "kCFNetServiceErrorBadArgument (-72004)",
      "contents": "KCFNetServiceErrorBadArgument"
    },
    {
      "trigger": "kCFNetServiceErrorCancel (-72005)",
      "contents": "KCFNetServiceErrorCancel"
    },
    {
      "trigger": "kCFNetServiceErrorCollision (-72001)",
      "contents": "KCFNetServiceErrorCollision"
    },
    {
      "trigger": "kCFNetServiceErrorDNSServiceFailure (-73000)",
      "contents": "KCFNetServiceErrorDNSServiceFailure"
    },
    {
      "trigger": "kCFNetServiceErrorInProgress (-72003)",
      "contents": "KCFNetServiceErrorInProgress"
    },
    {
      "trigger": "kCFNetServiceErrorInvalid (-72006)",
      "contents": "KCFNetServiceErrorInvalid"
    },
    {
      "trigger": "kCFNetServiceErrorNotFound (-72002)",
      "contents": "KCFNetServiceErrorNotFound"
    },
    {
      "trigger": "kCFNetServiceErrorTimeout (-72007)",
      "contents": "KCFNetServiceErrorTimeout"
    },
    {
      "trigger": "kCFNetServiceErrorUnknown (-72000)",
      "contents": "KCFNetServiceErrorUnknown"
    },
    {
      "trigger": "kCFNetServiceFlagIsDefault (4)",
      "contents": "KCFNetServiceFlagIsDefault"
    },
    {
      "trigger": "kCFNetServiceFlagIsDomain (2)",
      "contents": "KCFNetServiceFlagIsDomain"
    },
    {
      "trigger": "kCFNetServiceFlagIsRegistrationDomain (4)",
      "contents": "KCFNetServiceFlagIsRegistrationDomain"
    },
    {
      "trigger": "kCFNetServiceFlagMoreComing (1)",
      "contents": "KCFNetServiceFlagMoreComing"
    },
    {
      "trigger": "kCFNetServiceFlagNoAutoRename (1)",
      "contents": "KCFNetServiceFlagNoAutoRename"
    },
    {
      "trigger": "kCFNetServiceFlagRemove (8)",
      "contents": "KCFNetServiceFlagRemove"
    },
    {
      "trigger": "kCFNetServiceMonitorTXT (1)",
      "contents": "KCFNetServiceMonitorTXT"
    },
    {
      "trigger": "kCFNetServicesErrorBadArgument (-72004)",
      "contents": "KCFNetServicesErrorBadArgument"
    },
    {
      "trigger": "kCFNetServicesErrorCancel (-72005)",
      "contents": "KCFNetServicesErrorCancel"
    },
    {
      "trigger": "kCFNetServicesErrorCollision (-72001)",
      "contents": "KCFNetServicesErrorCollision"
    },
    {
      "trigger": "kCFNetServicesErrorInProgress (-72003)",
      "contents": "KCFNetServicesErrorInProgress"
    },
    {
      "trigger": "kCFNetServicesErrorInvalid (-72006)",
      "contents": "KCFNetServicesErrorInvalid"
    },
    {
      "trigger": "kCFNetServicesErrorNotFound (-72002)",
      "contents": "KCFNetServicesErrorNotFound"
    },
    {
      "trigger": "kCFNetServicesErrorTimeout (-72007)",
      "contents": "KCFNetServicesErrorTimeout"
    },
    {
      "trigger": "kCFNetServicesErrorUnknown (-72000)",
      "contents": "KCFNetServicesErrorUnknown"
    },
    {
      "trigger": "kCFNetworkProxiesHTTPEnable (CFStringRef)",
      "contents": "KCFNetworkProxiesHTTPEnable"
    },
    {
      "trigger": "kCFNetworkProxiesHTTPPort (CFStringRef)",
      "contents": "KCFNetworkProxiesHTTPPort"
    },
    {
      "trigger": "kCFNetworkProxiesHTTPProxy (CFStringRef)",
      "contents": "KCFNetworkProxiesHTTPProxy"
    },
    {
      "trigger": "kCFNetworkProxiesProxyAutoConfigEnable (CFStringRef)",
      "contents": "KCFNetworkProxiesProxyAutoConfigEnable"
    },
    {
      "trigger": "kCFNetworkProxiesProxyAutoConfigURLString (CFStringRef)",
      "contents": "KCFNetworkProxiesProxyAutoConfigURLString"
    },
    {
      "trigger": "kCFNotFound (-1)",
      "contents": "KCFNotFound"
    },
    {
      "trigger": "kCFNotificationDeliverImmediately (1)",
      "contents": "KCFNotificationDeliverImmediately"
    },
    {
      "trigger": "kCFNotificationPostToAllSessions (2)",
      "contents": "KCFNotificationPostToAllSessions"
    },
    {
      "trigger": "kCFNull (CFNullRef)",
      "contents": "KCFNull"
    },
    {
      "trigger": "kCFNumberCFIndexType (14)",
      "contents": "KCFNumberCFIndexType"
    },
    {
      "trigger": "kCFNumberCGFloatType (16)",
      "contents": "KCFNumberCGFloatType"
    },
    {
      "trigger": "kCFNumberCharType (7)",
      "contents": "KCFNumberCharType"
    },
    {
      "trigger": "kCFNumberDoubleType (13)",
      "contents": "KCFNumberDoubleType"
    },
    {
      "trigger": "kCFNumberFloat32Type (5)",
      "contents": "KCFNumberFloat32Type"
    },
    {
      "trigger": "kCFNumberFloat64Type (6)",
      "contents": "KCFNumberFloat64Type"
    },
    {
      "trigger": "kCFNumberFloatType (12)",
      "contents": "KCFNumberFloatType"
    },
    {
      "trigger": "kCFNumberFormatterAlwaysShowDecimalSeparator (CFStringRef)",
      "contents": "KCFNumberFormatterAlwaysShowDecimalSeparator"
    },
    {
      "trigger": "kCFNumberFormatterCurrencyCode (CFStringRef)",
      "contents": "KCFNumberFormatterCurrencyCode"
    },
    {
      "trigger": "kCFNumberFormatterCurrencyDecimalSeparator (CFStringRef)",
      "contents": "KCFNumberFormatterCurrencyDecimalSeparator"
    },
    {
      "trigger": "kCFNumberFormatterCurrencyGroupingSeparator (CFStringRef)",
      "contents": "KCFNumberFormatterCurrencyGroupingSeparator"
    },
    {
      "trigger": "kCFNumberFormatterCurrencyStyle (2)",
      "contents": "KCFNumberFormatterCurrencyStyle"
    },
    {
      "trigger": "kCFNumberFormatterCurrencySymbol (CFStringRef)",
      "contents": "KCFNumberFormatterCurrencySymbol"
    },
    {
      "trigger": "kCFNumberFormatterDecimalSeparator (CFStringRef)",
      "contents": "KCFNumberFormatterDecimalSeparator"
    },
    {
      "trigger": "kCFNumberFormatterDecimalStyle (1)",
      "contents": "KCFNumberFormatterDecimalStyle"
    },
    {
      "trigger": "kCFNumberFormatterDefaultFormat (CFStringRef)",
      "contents": "KCFNumberFormatterDefaultFormat"
    },
    {
      "trigger": "kCFNumberFormatterExponentSymbol (CFStringRef)",
      "contents": "KCFNumberFormatterExponentSymbol"
    },
    {
      "trigger": "kCFNumberFormatterFormatWidth (CFStringRef)",
      "contents": "KCFNumberFormatterFormatWidth"
    },
    {
      "trigger": "kCFNumberFormatterGroupingSeparator (CFStringRef)",
      "contents": "KCFNumberFormatterGroupingSeparator"
    },
    {
      "trigger": "kCFNumberFormatterGroupingSize (CFStringRef)",
      "contents": "KCFNumberFormatterGroupingSize"
    },
    {
      "trigger": "kCFNumberFormatterInfinitySymbol (CFStringRef)",
      "contents": "KCFNumberFormatterInfinitySymbol"
    },
    {
      "trigger": "kCFNumberFormatterInternationalCurrencySymbol (CFStringRef)",
      "contents": "KCFNumberFormatterInternationalCurrencySymbol"
    },
    {
      "trigger": "kCFNumberFormatterIsLenient (CFStringRef)",
      "contents": "KCFNumberFormatterIsLenient"
    },
    {
      "trigger": "kCFNumberFormatterMaxFractionDigits (CFStringRef)",
      "contents": "KCFNumberFormatterMaxFractionDigits"
    },
    {
      "trigger": "kCFNumberFormatterMaxIntegerDigits (CFStringRef)",
      "contents": "KCFNumberFormatterMaxIntegerDigits"
    },
    {
      "trigger": "kCFNumberFormatterMaxSignificantDigits (CFStringRef)",
      "contents": "KCFNumberFormatterMaxSignificantDigits"
    },
    {
      "trigger": "kCFNumberFormatterMinFractionDigits (CFStringRef)",
      "contents": "KCFNumberFormatterMinFractionDigits"
    },
    {
      "trigger": "kCFNumberFormatterMinIntegerDigits (CFStringRef)",
      "contents": "KCFNumberFormatterMinIntegerDigits"
    },
    {
      "trigger": "kCFNumberFormatterMinSignificantDigits (CFStringRef)",
      "contents": "KCFNumberFormatterMinSignificantDigits"
    },
    {
      "trigger": "kCFNumberFormatterMinusSign (CFStringRef)",
      "contents": "KCFNumberFormatterMinusSign"
    },
    {
      "trigger": "kCFNumberFormatterMultiplier (CFStringRef)",
      "contents": "KCFNumberFormatterMultiplier"
    },
    {
      "trigger": "kCFNumberFormatterNaNSymbol (CFStringRef)",
      "contents": "KCFNumberFormatterNaNSymbol"
    },
    {
      "trigger": "kCFNumberFormatterNegativePrefix (CFStringRef)",
      "contents": "KCFNumberFormatterNegativePrefix"
    },
    {
      "trigger": "kCFNumberFormatterNegativeSuffix (CFStringRef)",
      "contents": "KCFNumberFormatterNegativeSuffix"
    },
    {
      "trigger": "kCFNumberFormatterNoStyle (0)",
      "contents": "KCFNumberFormatterNoStyle"
    },
    {
      "trigger": "kCFNumberFormatterPadAfterPrefix (1)",
      "contents": "KCFNumberFormatterPadAfterPrefix"
    },
    {
      "trigger": "kCFNumberFormatterPadAfterSuffix (3)",
      "contents": "KCFNumberFormatterPadAfterSuffix"
    },
    {
      "trigger": "kCFNumberFormatterPadBeforePrefix (0)",
      "contents": "KCFNumberFormatterPadBeforePrefix"
    },
    {
      "trigger": "kCFNumberFormatterPadBeforeSuffix (2)",
      "contents": "KCFNumberFormatterPadBeforeSuffix"
    },
    {
      "trigger": "kCFNumberFormatterPaddingCharacter (CFStringRef)",
      "contents": "KCFNumberFormatterPaddingCharacter"
    },
    {
      "trigger": "kCFNumberFormatterPaddingPosition (CFStringRef)",
      "contents": "KCFNumberFormatterPaddingPosition"
    },
    {
      "trigger": "kCFNumberFormatterParseIntegersOnly (1)",
      "contents": "KCFNumberFormatterParseIntegersOnly"
    },
    {
      "trigger": "kCFNumberFormatterPerMillSymbol (CFStringRef)",
      "contents": "KCFNumberFormatterPerMillSymbol"
    },
    {
      "trigger": "kCFNumberFormatterPercentStyle (3)",
      "contents": "KCFNumberFormatterPercentStyle"
    },
    {
      "trigger": "kCFNumberFormatterPercentSymbol (CFStringRef)",
      "contents": "KCFNumberFormatterPercentSymbol"
    },
    {
      "trigger": "kCFNumberFormatterPlusSign (CFStringRef)",
      "contents": "KCFNumberFormatterPlusSign"
    },
    {
      "trigger": "kCFNumberFormatterPositivePrefix (CFStringRef)",
      "contents": "KCFNumberFormatterPositivePrefix"
    },
    {
      "trigger": "kCFNumberFormatterPositiveSuffix (CFStringRef)",
      "contents": "KCFNumberFormatterPositiveSuffix"
    },
    {
      "trigger": "kCFNumberFormatterRoundCeiling (0)",
      "contents": "KCFNumberFormatterRoundCeiling"
    },
    {
      "trigger": "kCFNumberFormatterRoundDown (2)",
      "contents": "KCFNumberFormatterRoundDown"
    },
    {
      "trigger": "kCFNumberFormatterRoundFloor (1)",
      "contents": "KCFNumberFormatterRoundFloor"
    },
    {
      "trigger": "kCFNumberFormatterRoundHalfDown (5)",
      "contents": "KCFNumberFormatterRoundHalfDown"
    },
    {
      "trigger": "kCFNumberFormatterRoundHalfEven (4)",
      "contents": "KCFNumberFormatterRoundHalfEven"
    },
    {
      "trigger": "kCFNumberFormatterRoundHalfUp (6)",
      "contents": "KCFNumberFormatterRoundHalfUp"
    },
    {
      "trigger": "kCFNumberFormatterRoundUp (3)",
      "contents": "KCFNumberFormatterRoundUp"
    },
    {
      "trigger": "kCFNumberFormatterRoundingIncrement (CFStringRef)",
      "contents": "KCFNumberFormatterRoundingIncrement"
    },
    {
      "trigger": "kCFNumberFormatterRoundingMode (CFStringRef)",
      "contents": "KCFNumberFormatterRoundingMode"
    },
    {
      "trigger": "kCFNumberFormatterScientificStyle (4)",
      "contents": "KCFNumberFormatterScientificStyle"
    },
    {
      "trigger": "kCFNumberFormatterSecondaryGroupingSize (CFStringRef)",
      "contents": "KCFNumberFormatterSecondaryGroupingSize"
    },
    {
      "trigger": "kCFNumberFormatterSpellOutStyle (5)",
      "contents": "KCFNumberFormatterSpellOutStyle"
    },
    {
      "trigger": "kCFNumberFormatterUseGroupingSeparator (CFStringRef)",
      "contents": "KCFNumberFormatterUseGroupingSeparator"
    },
    {
      "trigger": "kCFNumberFormatterUseSignificantDigits (CFStringRef)",
      "contents": "KCFNumberFormatterUseSignificantDigits"
    },
    {
      "trigger": "kCFNumberFormatterZeroSymbol (CFStringRef)",
      "contents": "KCFNumberFormatterZeroSymbol"
    },
    {
      "trigger": "kCFNumberIntType (9)",
      "contents": "KCFNumberIntType"
    },
    {
      "trigger": "kCFNumberLongLongType (11)",
      "contents": "KCFNumberLongLongType"
    },
    {
      "trigger": "kCFNumberLongType (10)",
      "contents": "KCFNumberLongType"
    },
    {
      "trigger": "kCFNumberMaxType (16)",
      "contents": "KCFNumberMaxType"
    },
    {
      "trigger": "kCFNumberNSIntegerType (15)",
      "contents": "KCFNumberNSIntegerType"
    },
    {
      "trigger": "kCFNumberNaN (CFNumberRef)",
      "contents": "KCFNumberNaN"
    },
    {
      "trigger": "kCFNumberNegativeInfinity (CFNumberRef)",
      "contents": "KCFNumberNegativeInfinity"
    },
    {
      "trigger": "kCFNumberPositiveInfinity (CFNumberRef)",
      "contents": "KCFNumberPositiveInfinity"
    },
    {
      "trigger": "kCFNumberSInt16Type (2)",
      "contents": "KCFNumberSInt16Type"
    },
    {
      "trigger": "kCFNumberSInt32Type (3)",
      "contents": "KCFNumberSInt32Type"
    },
    {
      "trigger": "kCFNumberSInt64Type (4)",
      "contents": "KCFNumberSInt64Type"
    },
    {
      "trigger": "kCFNumberSInt8Type (1)",
      "contents": "KCFNumberSInt8Type"
    },
    {
      "trigger": "kCFNumberShortType (8)",
      "contents": "KCFNumberShortType"
    },
    {
      "trigger": "kCFPersianCalendar (CFStringRef)",
      "contents": "KCFPersianCalendar"
    },
    {
      "trigger": "kCFPlugInDynamicRegisterFunctionKey (CFStringRef)",
      "contents": "KCFPlugInDynamicRegisterFunctionKey"
    },
    {
      "trigger": "kCFPlugInDynamicRegistrationKey (CFStringRef)",
      "contents": "KCFPlugInDynamicRegistrationKey"
    },
    {
      "trigger": "kCFPlugInFactoriesKey (CFStringRef)",
      "contents": "KCFPlugInFactoriesKey"
    },
    {
      "trigger": "kCFPlugInTypesKey (CFStringRef)",
      "contents": "KCFPlugInTypesKey"
    },
    {
      "trigger": "kCFPlugInUnloadFunctionKey (CFStringRef)",
      "contents": "KCFPlugInUnloadFunctionKey"
    },
    {
      "trigger": "kCFPreferencesAnyApplication (CFStringRef)",
      "contents": "KCFPreferencesAnyApplication"
    },
    {
      "trigger": "kCFPreferencesAnyHost (CFStringRef)",
      "contents": "KCFPreferencesAnyHost"
    },
    {
      "trigger": "kCFPreferencesAnyUser (CFStringRef)",
      "contents": "KCFPreferencesAnyUser"
    },
    {
      "trigger": "kCFPreferencesCurrentApplication (CFStringRef)",
      "contents": "KCFPreferencesCurrentApplication"
    },
    {
      "trigger": "kCFPreferencesCurrentHost (CFStringRef)",
      "contents": "KCFPreferencesCurrentHost"
    },
    {
      "trigger": "kCFPreferencesCurrentUser (CFStringRef)",
      "contents": "KCFPreferencesCurrentUser"
    },
    {
      "trigger": "kCFPropertyListBinaryFormat_v1_0 (200)",
      "contents": "KCFPropertyListBinaryFormat_v1_0"
    },
    {
      "trigger": "kCFPropertyListImmutable (0)",
      "contents": "KCFPropertyListImmutable"
    },
    {
      "trigger": "kCFPropertyListMutableContainers (1)",
      "contents": "KCFPropertyListMutableContainers"
    },
    {
      "trigger": "kCFPropertyListMutableContainersAndLeaves (2)",
      "contents": "KCFPropertyListMutableContainersAndLeaves"
    },
    {
      "trigger": "kCFPropertyListOpenStepFormat (1)",
      "contents": "KCFPropertyListOpenStepFormat"
    },
    {
      "trigger": "kCFPropertyListReadCorruptError (3840)",
      "contents": "KCFPropertyListReadCorruptError"
    },
    {
      "trigger": "kCFPropertyListReadStreamError (3842)",
      "contents": "KCFPropertyListReadStreamError"
    },
    {
      "trigger": "kCFPropertyListReadUnknownVersionError (3841)",
      "contents": "KCFPropertyListReadUnknownVersionError"
    },
    {
      "trigger": "kCFPropertyListWriteStreamError (3851)",
      "contents": "KCFPropertyListWriteStreamError"
    },
    {
      "trigger": "kCFPropertyListXMLFormat_v1_0 (100)",
      "contents": "KCFPropertyListXMLFormat_v1_0"
    },
    {
      "trigger": "kCFProxyAutoConfigurationHTTPResponseKey (CFStringRef)",
      "contents": "KCFProxyAutoConfigurationHTTPResponseKey"
    },
    {
      "trigger": "kCFProxyAutoConfigurationURLKey (CFStringRef)",
      "contents": "KCFProxyAutoConfigurationURLKey"
    },
    {
      "trigger": "kCFProxyHostNameKey (CFStringRef)",
      "contents": "KCFProxyHostNameKey"
    },
    {
      "trigger": "kCFProxyPasswordKey (CFStringRef)",
      "contents": "KCFProxyPasswordKey"
    },
    {
      "trigger": "kCFProxyPortNumberKey (CFStringRef)",
      "contents": "KCFProxyPortNumberKey"
    },
    {
      "trigger": "kCFProxyTypeAutoConfigurationURL (CFStringRef)",
      "contents": "KCFProxyTypeAutoConfigurationURL"
    },
    {
      "trigger": "kCFProxyTypeFTP (CFStringRef)",
      "contents": "KCFProxyTypeFTP"
    },
    {
      "trigger": "kCFProxyTypeHTTP (CFStringRef)",
      "contents": "KCFProxyTypeHTTP"
    },
    {
      "trigger": "kCFProxyTypeHTTPS (CFStringRef)",
      "contents": "KCFProxyTypeHTTPS"
    },
    {
      "trigger": "kCFProxyTypeKey (CFStringRef)",
      "contents": "KCFProxyTypeKey"
    },
    {
      "trigger": "kCFProxyTypeNone (CFStringRef)",
      "contents": "KCFProxyTypeNone"
    },
    {
      "trigger": "kCFProxyTypeSOCKS (CFStringRef)",
      "contents": "KCFProxyTypeSOCKS"
    },
    {
      "trigger": "kCFProxyUsernameKey (CFStringRef)",
      "contents": "KCFProxyUsernameKey"
    },
    {
      "trigger": "kCFRepublicOfChinaCalendar (CFStringRef)",
      "contents": "KCFRepublicOfChinaCalendar"
    },
    {
      "trigger": "kCFRunLoopAfterWaiting (64)",
      "contents": "KCFRunLoopAfterWaiting"
    },
    {
      "trigger": "kCFRunLoopAllActivities (268435455)",
      "contents": "KCFRunLoopAllActivities"
    },
    {
      "trigger": "kCFRunLoopBeforeSources (4)",
      "contents": "KCFRunLoopBeforeSources"
    },
    {
      "trigger": "kCFRunLoopBeforeTimers (2)",
      "contents": "KCFRunLoopBeforeTimers"
    },
    {
      "trigger": "kCFRunLoopBeforeWaiting (32)",
      "contents": "KCFRunLoopBeforeWaiting"
    },
    {
      "trigger": "kCFRunLoopCommonModes (CFStringRef)",
      "contents": "KCFRunLoopCommonModes"
    },
    {
      "trigger": "kCFRunLoopDefaultMode (CFStringRef)",
      "contents": "KCFRunLoopDefaultMode"
    },
    {
      "trigger": "kCFRunLoopEntry (1)",
      "contents": "KCFRunLoopEntry"
    },
    {
      "trigger": "kCFRunLoopExit (128)",
      "contents": "KCFRunLoopExit"
    },
    {
      "trigger": "kCFRunLoopRunFinished (1)",
      "contents": "KCFRunLoopRunFinished"
    },
    {
      "trigger": "kCFRunLoopRunHandledSource (4)",
      "contents": "KCFRunLoopRunHandledSource"
    },
    {
      "trigger": "kCFRunLoopRunStopped (2)",
      "contents": "KCFRunLoopRunStopped"
    },
    {
      "trigger": "kCFRunLoopRunTimedOut (3)",
      "contents": "KCFRunLoopRunTimedOut"
    },
    {
      "trigger": "kCFSOCKS4ErrorIdConflict (112)",
      "contents": "KCFSOCKS4ErrorIdConflict"
    },
    {
      "trigger": "kCFSOCKS4ErrorIdentdFailed (111)",
      "contents": "KCFSOCKS4ErrorIdentdFailed"
    },
    {
      "trigger": "kCFSOCKS4ErrorRequestFailed (110)",
      "contents": "KCFSOCKS4ErrorRequestFailed"
    },
    {
      "trigger": "kCFSOCKS4ErrorUnknownStatusCode (113)",
      "contents": "KCFSOCKS4ErrorUnknownStatusCode"
    },
    {
      "trigger": "kCFSOCKS5ErrorBadCredentials (122)",
      "contents": "KCFSOCKS5ErrorBadCredentials"
    },
    {
      "trigger": "kCFSOCKS5ErrorBadResponseAddr (121)",
      "contents": "KCFSOCKS5ErrorBadResponseAddr"
    },
    {
      "trigger": "kCFSOCKS5ErrorBadState (120)",
      "contents": "KCFSOCKS5ErrorBadState"
    },
    {
      "trigger": "kCFSOCKS5ErrorNoAcceptableMethod (124)",
      "contents": "KCFSOCKS5ErrorNoAcceptableMethod"
    },
    {
      "trigger": "kCFSOCKS5ErrorUnsupportedNegotiationMethod (123)",
      "contents": "KCFSOCKS5ErrorUnsupportedNegotiationMethod"
    },
    {
      "trigger": "kCFSOCKSErrorUnknownClientVersion (100)",
      "contents": "KCFSOCKSErrorUnknownClientVersion"
    },
    {
      "trigger": "kCFSOCKSErrorUnsupportedServerVersion (101)",
      "contents": "KCFSOCKSErrorUnsupportedServerVersion"
    },
    {
      "trigger": "kCFSOCKSNegotiationMethodKey (CFStringRef)",
      "contents": "KCFSOCKSNegotiationMethodKey"
    },
    {
      "trigger": "kCFSOCKSStatusCodeKey (CFStringRef)",
      "contents": "KCFSOCKSStatusCodeKey"
    },
    {
      "trigger": "kCFSOCKSVersionKey (CFStringRef)",
      "contents": "KCFSOCKSVersionKey"
    },
    {
      "trigger": "kCFSocketAcceptCallBack (2)",
      "contents": "KCFSocketAcceptCallBack"
    },
    {
      "trigger": "kCFSocketAutomaticallyReenableAcceptCallBack (2)",
      "contents": "KCFSocketAutomaticallyReenableAcceptCallBack"
    },
    {
      "trigger": "kCFSocketAutomaticallyReenableDataCallBack (3)",
      "contents": "KCFSocketAutomaticallyReenableDataCallBack"
    },
    {
      "trigger": "kCFSocketAutomaticallyReenableReadCallBack (1)",
      "contents": "KCFSocketAutomaticallyReenableReadCallBack"
    },
    {
      "trigger": "kCFSocketAutomaticallyReenableWriteCallBack (8)",
      "contents": "KCFSocketAutomaticallyReenableWriteCallBack"
    },
    {
      "trigger": "kCFSocketCloseOnInvalidate (128)",
      "contents": "KCFSocketCloseOnInvalidate"
    },
    {
      "trigger": "kCFSocketCommandKey (CFStringRef)",
      "contents": "KCFSocketCommandKey"
    },
    {
      "trigger": "kCFSocketConnectCallBack (4)",
      "contents": "KCFSocketConnectCallBack"
    },
    {
      "trigger": "kCFSocketDataCallBack (3)",
      "contents": "KCFSocketDataCallBack"
    },
    {
      "trigger": "kCFSocketError (-1)",
      "contents": "KCFSocketError"
    },
    {
      "trigger": "kCFSocketErrorKey (CFStringRef)",
      "contents": "KCFSocketErrorKey"
    },
    {
      "trigger": "kCFSocketLeaveErrors (64)",
      "contents": "KCFSocketLeaveErrors"
    },
    {
      "trigger": "kCFSocketNameKey (CFStringRef)",
      "contents": "KCFSocketNameKey"
    },
    {
      "trigger": "kCFSocketNoCallBack (0)",
      "contents": "KCFSocketNoCallBack"
    },
    {
      "trigger": "kCFSocketReadCallBack (1)",
      "contents": "KCFSocketReadCallBack"
    },
    {
      "trigger": "kCFSocketRegisterCommand (CFStringRef)",
      "contents": "KCFSocketRegisterCommand"
    },
    {
      "trigger": "kCFSocketResultKey (CFStringRef)",
      "contents": "KCFSocketResultKey"
    },
    {
      "trigger": "kCFSocketRetrieveCommand (CFStringRef)",
      "contents": "KCFSocketRetrieveCommand"
    },
    {
      "trigger": "kCFSocketSuccess (0)",
      "contents": "KCFSocketSuccess"
    },
    {
      "trigger": "kCFSocketTimeout (-2)",
      "contents": "KCFSocketTimeout"
    },
    {
      "trigger": "kCFSocketValueKey (CFStringRef)",
      "contents": "KCFSocketValueKey"
    },
    {
      "trigger": "kCFSocketWriteCallBack (8)",
      "contents": "KCFSocketWriteCallBack"
    },
    {
      "trigger": "kCFStreamErrorDomainCustom (-1)",
      "contents": "KCFStreamErrorDomainCustom"
    },
    {
      "trigger": "kCFStreamErrorDomainFTP (SInt32)",
      "contents": "KCFStreamErrorDomainFTP"
    },
    {
      "trigger": "kCFStreamErrorDomainHTTP (SInt32)",
      "contents": "KCFStreamErrorDomainHTTP"
    },
    {
      "trigger": "kCFStreamErrorDomainMacOSStatus (2)",
      "contents": "KCFStreamErrorDomainMacOSStatus"
    },
    {
      "trigger": "kCFStreamErrorDomainMach (SInt32)",
      "contents": "KCFStreamErrorDomainMach"
    },
    {
      "trigger": "kCFStreamErrorDomainNetDB (SInt32)",
      "contents": "KCFStreamErrorDomainNetDB"
    },
    {
      "trigger": "kCFStreamErrorDomainNetServices (SInt32)",
      "contents": "KCFStreamErrorDomainNetServices"
    },
    {
      "trigger": "kCFStreamErrorDomainPOSIX (1)",
      "contents": "KCFStreamErrorDomainPOSIX"
    },
    {
      "trigger": "kCFStreamErrorDomainSOCKS (int)",
      "contents": "KCFStreamErrorDomainSOCKS"
    },
    {
      "trigger": "kCFStreamErrorDomainSSL (int)",
      "contents": "KCFStreamErrorDomainSSL"
    },
    {
      "trigger": "kCFStreamErrorDomainSystemConfiguration (SInt32)",
      "contents": "KCFStreamErrorDomainSystemConfiguration"
    },
    {
      "trigger": "kCFStreamErrorDomainWinSock (CFIndex)",
      "contents": "KCFStreamErrorDomainWinSock"
    },
    {
      "trigger": "kCFStreamErrorHTTPAuthenticationBadPassword (-1002)",
      "contents": "KCFStreamErrorHTTPAuthenticationBadPassword"
    },
    {
      "trigger": "kCFStreamErrorHTTPAuthenticationBadUserName (-1001)",
      "contents": "KCFStreamErrorHTTPAuthenticationBadUserName"
    },
    {
      "trigger": "kCFStreamErrorHTTPAuthenticationTypeUnsupported (-1000)",
      "contents": "KCFStreamErrorHTTPAuthenticationTypeUnsupported"
    },
    {
      "trigger": "kCFStreamErrorHTTPBadURL (-3)",
      "contents": "KCFStreamErrorHTTPBadURL"
    },
    {
      "trigger": "kCFStreamErrorHTTPParseFailure (-1)",
      "contents": "KCFStreamErrorHTTPParseFailure"
    },
    {
      "trigger": "kCFStreamErrorHTTPRedirectionLoop (-2)",
      "contents": "KCFStreamErrorHTTPRedirectionLoop"
    },
    {
      "trigger": "kCFStreamErrorSOCKS4IdConflict (93)",
      "contents": "KCFStreamErrorSOCKS4IdConflict"
    },
    {
      "trigger": "kCFStreamErrorSOCKS4IdentdFailed (92)",
      "contents": "KCFStreamErrorSOCKS4IdentdFailed"
    },
    {
      "trigger": "kCFStreamErrorSOCKS4RequestFailed (91)",
      "contents": "KCFStreamErrorSOCKS4RequestFailed"
    },
    {
      "trigger": "kCFStreamErrorSOCKS4SubDomainResponse (2)",
      "contents": "KCFStreamErrorSOCKS4SubDomainResponse"
    },
    {
      "trigger": "kCFStreamErrorSOCKS5BadResponseAddr (1)",
      "contents": "KCFStreamErrorSOCKS5BadResponseAddr"
    },
    {
      "trigger": "kCFStreamErrorSOCKS5BadState (2)",
      "contents": "KCFStreamErrorSOCKS5BadState"
    },
    {
      "trigger": "kCFStreamErrorSOCKS5SubDomainMethod (4)",
      "contents": "KCFStreamErrorSOCKS5SubDomainMethod"
    },
    {
      "trigger": "kCFStreamErrorSOCKS5SubDomainResponse (5)",
      "contents": "KCFStreamErrorSOCKS5SubDomainResponse"
    },
    {
      "trigger": "kCFStreamErrorSOCKS5SubDomainUserPass (3)",
      "contents": "KCFStreamErrorSOCKS5SubDomainUserPass"
    },
    {
      "trigger": "kCFStreamErrorSOCKSSubDomainNone (0)",
      "contents": "KCFStreamErrorSOCKSSubDomainNone"
    },
    {
      "trigger": "kCFStreamErrorSOCKSSubDomainVersionCode (1)",
      "contents": "KCFStreamErrorSOCKSSubDomainVersionCode"
    },
    {
      "trigger": "kCFStreamErrorSOCKSUnknownClientVersion (3)",
      "contents": "KCFStreamErrorSOCKSUnknownClientVersion"
    },
    {
      "trigger": "kCFStreamEventCanAcceptBytes (4)",
      "contents": "KCFStreamEventCanAcceptBytes"
    },
    {
      "trigger": "kCFStreamEventEndEncountered (16)",
      "contents": "KCFStreamEventEndEncountered"
    },
    {
      "trigger": "kCFStreamEventErrorOccurred (8)",
      "contents": "KCFStreamEventErrorOccurred"
    },
    {
      "trigger": "kCFStreamEventHasBytesAvailable (2)",
      "contents": "KCFStreamEventHasBytesAvailable"
    },
    {
      "trigger": "kCFStreamEventNone (0)",
      "contents": "KCFStreamEventNone"
    },
    {
      "trigger": "kCFStreamEventOpenCompleted (1)",
      "contents": "KCFStreamEventOpenCompleted"
    },
    {
      "trigger": "kCFStreamPropertyAppendToFile (CFStringRef)",
      "contents": "KCFStreamPropertyAppendToFile"
    },
    {
      "trigger": "kCFStreamPropertyDataWritten (CFStringRef)",
      "contents": "KCFStreamPropertyDataWritten"
    },
    {
      "trigger": "kCFStreamPropertyFTPAttemptPersistentConnection (CFStringRef)",
      "contents": "KCFStreamPropertyFTPAttemptPersistentConnection"
    },
    {
      "trigger": "kCFStreamPropertyFTPFetchResourceInfo (CFStringRef)",
      "contents": "KCFStreamPropertyFTPFetchResourceInfo"
    },
    {
      "trigger": "kCFStreamPropertyFTPFileTransferOffset (CFStringRef)",
      "contents": "KCFStreamPropertyFTPFileTransferOffset"
    },
    {
      "trigger": "kCFStreamPropertyFTPPassword (CFStringRef)",
      "contents": "KCFStreamPropertyFTPPassword"
    },
    {
      "trigger": "kCFStreamPropertyFTPProxy (CFStringRef)",
      "contents": "KCFStreamPropertyFTPProxy"
    },
    {
      "trigger": "kCFStreamPropertyFTPProxyHost (CFStringRef)",
      "contents": "KCFStreamPropertyFTPProxyHost"
    },
    {
      "trigger": "kCFStreamPropertyFTPProxyPassword (CFStringRef)",
      "contents": "KCFStreamPropertyFTPProxyPassword"
    },
    {
      "trigger": "kCFStreamPropertyFTPProxyPort (CFStringRef)",
      "contents": "KCFStreamPropertyFTPProxyPort"
    },
    {
      "trigger": "kCFStreamPropertyFTPProxyUser (CFStringRef)",
      "contents": "KCFStreamPropertyFTPProxyUser"
    },
    {
      "trigger": "kCFStreamPropertyFTPResourceSize (CFStringRef)",
      "contents": "KCFStreamPropertyFTPResourceSize"
    },
    {
      "trigger": "kCFStreamPropertyFTPUsePassiveMode (CFStringRef)",
      "contents": "KCFStreamPropertyFTPUsePassiveMode"
    },
    {
      "trigger": "kCFStreamPropertyFTPUserName (CFStringRef)",
      "contents": "KCFStreamPropertyFTPUserName"
    },
    {
      "trigger": "kCFStreamPropertyFileCurrentOffset (CFStringRef)",
      "contents": "KCFStreamPropertyFileCurrentOffset"
    },
    {
      "trigger": "kCFStreamPropertyHTTPAttemptPersistentConnection (CFStringRef)",
      "contents": "KCFStreamPropertyHTTPAttemptPersistentConnection"
    },
    {
      "trigger": "kCFStreamPropertyHTTPFinalRequest (CFStringRef)",
      "contents": "KCFStreamPropertyHTTPFinalRequest"
    },
    {
      "trigger": "kCFStreamPropertyHTTPFinalURL (CFStringRef)",
      "contents": "KCFStreamPropertyHTTPFinalURL"
    },
    {
      "trigger": "kCFStreamPropertyHTTPProxy (CFStringRef)",
      "contents": "KCFStreamPropertyHTTPProxy"
    },
    {
      "trigger": "kCFStreamPropertyHTTPProxyHost (CFStringRef)",
      "contents": "KCFStreamPropertyHTTPProxyHost"
    },
    {
      "trigger": "kCFStreamPropertyHTTPProxyPort (CFStringRef)",
      "contents": "KCFStreamPropertyHTTPProxyPort"
    },
    {
      "trigger": "kCFStreamPropertyHTTPRequestBytesWrittenCount (CFStringRef)",
      "contents": "KCFStreamPropertyHTTPRequestBytesWrittenCount"
    },
    {
      "trigger": "kCFStreamPropertyHTTPResponseHeader (CFStringRef)",
      "contents": "KCFStreamPropertyHTTPResponseHeader"
    },
    {
      "trigger": "kCFStreamPropertyHTTPSProxyHost (CFStringRef)",
      "contents": "KCFStreamPropertyHTTPSProxyHost"
    },
    {
      "trigger": "kCFStreamPropertyHTTPSProxyPort (CFStringRef)",
      "contents": "KCFStreamPropertyHTTPSProxyPort"
    },
    {
      "trigger": "kCFStreamPropertyHTTPShouldAutoredirect (CFStringRef)",
      "contents": "KCFStreamPropertyHTTPShouldAutoredirect"
    },
    {
      "trigger": "kCFStreamPropertyProxyLocalBypass (CFStringRef)",
      "contents": "KCFStreamPropertyProxyLocalBypass"
    },
    {
      "trigger": "kCFStreamPropertySOCKSPassword (CFStringRef)",
      "contents": "KCFStreamPropertySOCKSPassword"
    },
    {
      "trigger": "kCFStreamPropertySOCKSProxy (CFStringRef)",
      "contents": "KCFStreamPropertySOCKSProxy"
    },
    {
      "trigger": "kCFStreamPropertySOCKSProxyHost (CFStringRef)",
      "contents": "KCFStreamPropertySOCKSProxyHost"
    },
    {
      "trigger": "kCFStreamPropertySOCKSProxyPort (CFStringRef)",
      "contents": "KCFStreamPropertySOCKSProxyPort"
    },
    {
      "trigger": "kCFStreamPropertySOCKSUser (CFStringRef)",
      "contents": "KCFStreamPropertySOCKSUser"
    },
    {
      "trigger": "kCFStreamPropertySOCKSVersion (CFStringRef)",
      "contents": "KCFStreamPropertySOCKSVersion"
    },
    {
      "trigger": "kCFStreamPropertySSLPeerCertificates (CFStringRef)",
      "contents": "KCFStreamPropertySSLPeerCertificates"
    },
    {
      "trigger": "kCFStreamPropertySSLPeerTrust (CFStringRef)",
      "contents": "KCFStreamPropertySSLPeerTrust"
    },
    {
      "trigger": "kCFStreamPropertySSLSettings (CFStringRef)",
      "contents": "KCFStreamPropertySSLSettings"
    },
    {
      "trigger": "kCFStreamPropertyShouldCloseNativeSocket (CFStringRef)",
      "contents": "KCFStreamPropertyShouldCloseNativeSocket"
    },
    {
      "trigger": "kCFStreamPropertySocketNativeHandle (CFStringRef)",
      "contents": "KCFStreamPropertySocketNativeHandle"
    },
    {
      "trigger": "kCFStreamPropertySocketRemoteHost (CFStringRef)",
      "contents": "KCFStreamPropertySocketRemoteHost"
    },
    {
      "trigger": "kCFStreamPropertySocketRemoteHostName (CFStringRef)",
      "contents": "KCFStreamPropertySocketRemoteHostName"
    },
    {
      "trigger": "kCFStreamPropertySocketRemoteNetService (CFStringRef)",
      "contents": "KCFStreamPropertySocketRemoteNetService"
    },
    {
      "trigger": "kCFStreamPropertySocketRemotePortNumber (CFStringRef)",
      "contents": "KCFStreamPropertySocketRemotePortNumber"
    },
    {
      "trigger": "kCFStreamPropertySocketSecurityLevel (CFStringRef)",
      "contents": "KCFStreamPropertySocketSecurityLevel"
    },
    {
      "trigger": "kCFStreamSSLAllowsAnyRoot (CFStringRef)",
      "contents": "KCFStreamSSLAllowsAnyRoot"
    },
    {
      "trigger": "kCFStreamSSLAllowsExpiredCertificates (CFStringRef)",
      "contents": "KCFStreamSSLAllowsExpiredCertificates"
    },
    {
      "trigger": "kCFStreamSSLAllowsExpiredRoots (CFStringRef)",
      "contents": "KCFStreamSSLAllowsExpiredRoots"
    },
    {
      "trigger": "kCFStreamSSLCertificates (CFStringRef)",
      "contents": "KCFStreamSSLCertificates"
    },
    {
      "trigger": "kCFStreamSSLIsServer (CFStringRef)",
      "contents": "KCFStreamSSLIsServer"
    },
    {
      "trigger": "kCFStreamSSLLevel (CFStringRef)",
      "contents": "KCFStreamSSLLevel"
    },
    {
      "trigger": "kCFStreamSSLPeerName (CFStringRef)",
      "contents": "KCFStreamSSLPeerName"
    },
    {
      "trigger": "kCFStreamSSLValidatesCertificateChain (CFStringRef)",
      "contents": "KCFStreamSSLValidatesCertificateChain"
    },
    {
      "trigger": "kCFStreamSocketSOCKSVersion4 (CFStringRef)",
      "contents": "KCFStreamSocketSOCKSVersion4"
    },
    {
      "trigger": "kCFStreamSocketSOCKSVersion5 (CFStringRef)",
      "contents": "KCFStreamSocketSOCKSVersion5"
    },
    {
      "trigger": "kCFStreamSocketSecurityLevelNegotiatedSSL (CFStringRef)",
      "contents": "KCFStreamSocketSecurityLevelNegotiatedSSL"
    },
    {
      "trigger": "kCFStreamSocketSecurityLevelNone (CFStringRef)",
      "contents": "KCFStreamSocketSecurityLevelNone"
    },
    {
      "trigger": "kCFStreamSocketSecurityLevelSSLv2 (CFStringRef)",
      "contents": "KCFStreamSocketSecurityLevelSSLv2"
    },
    {
      "trigger": "kCFStreamSocketSecurityLevelSSLv3 (CFStringRef)",
      "contents": "KCFStreamSocketSecurityLevelSSLv3"
    },
    {
      "trigger": "kCFStreamSocketSecurityLevelTLSv1 (CFStringRef)",
      "contents": "KCFStreamSocketSecurityLevelTLSv1"
    },
    {
      "trigger": "kCFStreamSocketSecurityNone (0)",
      "contents": "KCFStreamSocketSecurityNone"
    },
    {
      "trigger": "kCFStreamSocketSecuritySSLv2 (1)",
      "contents": "KCFStreamSocketSecuritySSLv2"
    },
    {
      "trigger": "kCFStreamSocketSecuritySSLv23 (3)",
      "contents": "KCFStreamSocketSecuritySSLv23"
    },
    {
      "trigger": "kCFStreamSocketSecuritySSLv3 (2)",
      "contents": "KCFStreamSocketSecuritySSLv3"
    },
    {
      "trigger": "kCFStreamSocketSecurityTLSv1 (4)",
      "contents": "KCFStreamSocketSecurityTLSv1"
    },
    {
      "trigger": "kCFStreamStatusAtEnd (5)",
      "contents": "KCFStreamStatusAtEnd"
    },
    {
      "trigger": "kCFStreamStatusClosed (6)",
      "contents": "KCFStreamStatusClosed"
    },
    {
      "trigger": "kCFStreamStatusError (7)",
      "contents": "KCFStreamStatusError"
    },
    {
      "trigger": "kCFStreamStatusNotOpen (0)",
      "contents": "KCFStreamStatusNotOpen"
    },
    {
      "trigger": "kCFStreamStatusOpen (2)",
      "contents": "KCFStreamStatusOpen"
    },
    {
      "trigger": "kCFStreamStatusOpening (1)",
      "contents": "KCFStreamStatusOpening"
    },
    {
      "trigger": "kCFStreamStatusReading (3)",
      "contents": "KCFStreamStatusReading"
    },
    {
      "trigger": "kCFStreamStatusWriting (4)",
      "contents": "KCFStreamStatusWriting"
    },
    {
      "trigger": "kCFStringBinaryHeapCallBacks (CFBinaryHeapCallBacks)",
      "contents": "KCFStringBinaryHeapCallBacks"
    },
    {
      "trigger": "kCFStringEncodingANSEL (1537)",
      "contents": "KCFStringEncodingANSEL"
    },
    {
      "trigger": "kCFStringEncodingASCII (1536)",
      "contents": "KCFStringEncodingASCII"
    },
    {
      "trigger": "kCFStringEncodingBig5 (2563)",
      "contents": "KCFStringEncodingBig5"
    },
    {
      "trigger": "kCFStringEncodingBig5_E (2569)",
      "contents": "KCFStringEncodingBig5_E"
    },
    {
      "trigger": "kCFStringEncodingBig5_HKSCS_1999 (2566)",
      "contents": "KCFStringEncodingBig5_HKSCS_1999"
    },
    {
      "trigger": "kCFStringEncodingCNS_11643_92_P1 (1617)",
      "contents": "KCFStringEncodingCNS_11643_92_P1"
    },
    {
      "trigger": "kCFStringEncodingCNS_11643_92_P2 (1618)",
      "contents": "KCFStringEncodingCNS_11643_92_P2"
    },
    {
      "trigger": "kCFStringEncodingCNS_11643_92_P3 (1619)",
      "contents": "KCFStringEncodingCNS_11643_92_P3"
    },
    {
      "trigger": "kCFStringEncodingDOSArabic (1049)",
      "contents": "KCFStringEncodingDOSArabic"
    },
    {
      "trigger": "kCFStringEncodingDOSBalticRim (1030)",
      "contents": "KCFStringEncodingDOSBalticRim"
    },
    {
      "trigger": "kCFStringEncodingDOSCanadianFrench (1048)",
      "contents": "KCFStringEncodingDOSCanadianFrench"
    },
    {
      "trigger": "kCFStringEncodingDOSChineseSimplif (1057)",
      "contents": "KCFStringEncodingDOSChineseSimplif"
    },
    {
      "trigger": "kCFStringEncodingDOSChineseTrad (1059)",
      "contents": "KCFStringEncodingDOSChineseTrad"
    },
    {
      "trigger": "kCFStringEncodingDOSCyrillic (1043)",
      "contents": "KCFStringEncodingDOSCyrillic"
    },
    {
      "trigger": "kCFStringEncodingDOSGreek (1029)",
      "contents": "KCFStringEncodingDOSGreek"
    },
    {
      "trigger": "kCFStringEncodingDOSGreek1 (1041)",
      "contents": "KCFStringEncodingDOSGreek1"
    },
    {
      "trigger": "kCFStringEncodingDOSGreek2 (1052)",
      "contents": "KCFStringEncodingDOSGreek2"
    },
    {
      "trigger": "kCFStringEncodingDOSHebrew (1047)",
      "contents": "KCFStringEncodingDOSHebrew"
    },
    {
      "trigger": "kCFStringEncodingDOSIcelandic (1046)",
      "contents": "KCFStringEncodingDOSIcelandic"
    },
    {
      "trigger": "kCFStringEncodingDOSJapanese (1056)",
      "contents": "KCFStringEncodingDOSJapanese"
    },
    {
      "trigger": "kCFStringEncodingDOSKorean (1058)",
      "contents": "KCFStringEncodingDOSKorean"
    },
    {
      "trigger": "kCFStringEncodingDOSLatin1 (1040)",
      "contents": "KCFStringEncodingDOSLatin1"
    },
    {
      "trigger": "kCFStringEncodingDOSLatin2 (1042)",
      "contents": "KCFStringEncodingDOSLatin2"
    },
    {
      "trigger": "kCFStringEncodingDOSLatinUS (1024)",
      "contents": "KCFStringEncodingDOSLatinUS"
    },
    {
      "trigger": "kCFStringEncodingDOSNordic (1050)",
      "contents": "KCFStringEncodingDOSNordic"
    },
    {
      "trigger": "kCFStringEncodingDOSPortuguese (1045)",
      "contents": "KCFStringEncodingDOSPortuguese"
    },
    {
      "trigger": "kCFStringEncodingDOSRussian (1051)",
      "contents": "KCFStringEncodingDOSRussian"
    },
    {
      "trigger": "kCFStringEncodingDOSThai (1053)",
      "contents": "KCFStringEncodingDOSThai"
    },
    {
      "trigger": "kCFStringEncodingDOSTurkish (1044)",
      "contents": "KCFStringEncodingDOSTurkish"
    },
    {
      "trigger": "kCFStringEncodingEBCDIC_CP037 (3074)",
      "contents": "KCFStringEncodingEBCDIC_CP037"
    },
    {
      "trigger": "kCFStringEncodingEBCDIC_US (3073)",
      "contents": "KCFStringEncodingEBCDIC_US"
    },
    {
      "trigger": "kCFStringEncodingEUC_CN (2352)",
      "contents": "KCFStringEncodingEUC_CN"
    },
    {
      "trigger": "kCFStringEncodingEUC_JP (2336)",
      "contents": "KCFStringEncodingEUC_JP"
    },
    {
      "trigger": "kCFStringEncodingEUC_KR (2368)",
      "contents": "KCFStringEncodingEUC_KR"
    },
    {
      "trigger": "kCFStringEncodingEUC_TW (2353)",
      "contents": "KCFStringEncodingEUC_TW"
    },
    {
      "trigger": "kCFStringEncodingGBK_95 (1585)",
      "contents": "KCFStringEncodingGBK_95"
    },
    {
      "trigger": "kCFStringEncodingGB_18030_2000 (1586)",
      "contents": "KCFStringEncodingGB_18030_2000"
    },
    {
      "trigger": "kCFStringEncodingGB_2312_80 (1584)",
      "contents": "KCFStringEncodingGB_2312_80"
    },
    {
      "trigger": "kCFStringEncodingHZ_GB_2312 (2565)",
      "contents": "KCFStringEncodingHZ_GB_2312"
    },
    {
      "trigger": "kCFStringEncodingISOLatin1 (513)",
      "contents": "KCFStringEncodingISOLatin1"
    },
    {
      "trigger": "kCFStringEncodingISOLatin10 (528)",
      "contents": "KCFStringEncodingISOLatin10"
    },
    {
      "trigger": "kCFStringEncodingISOLatin2 (514)",
      "contents": "KCFStringEncodingISOLatin2"
    },
    {
      "trigger": "kCFStringEncodingISOLatin3 (515)",
      "contents": "KCFStringEncodingISOLatin3"
    },
    {
      "trigger": "kCFStringEncodingISOLatin4 (516)",
      "contents": "KCFStringEncodingISOLatin4"
    },
    {
      "trigger": "kCFStringEncodingISOLatin5 (521)",
      "contents": "KCFStringEncodingISOLatin5"
    },
    {
      "trigger": "kCFStringEncodingISOLatin6 (522)",
      "contents": "KCFStringEncodingISOLatin6"
    },
    {
      "trigger": "kCFStringEncodingISOLatin7 (525)",
      "contents": "KCFStringEncodingISOLatin7"
    },
    {
      "trigger": "kCFStringEncodingISOLatin8 (526)",
      "contents": "KCFStringEncodingISOLatin8"
    },
    {
      "trigger": "kCFStringEncodingISOLatin9 (527)",
      "contents": "KCFStringEncodingISOLatin9"
    },
    {
      "trigger": "kCFStringEncodingISOLatinArabic (518)",
      "contents": "KCFStringEncodingISOLatinArabic"
    },
    {
      "trigger": "kCFStringEncodingISOLatinCyrillic (517)",
      "contents": "KCFStringEncodingISOLatinCyrillic"
    },
    {
      "trigger": "kCFStringEncodingISOLatinGreek (519)",
      "contents": "KCFStringEncodingISOLatinGreek"
    },
    {
      "trigger": "kCFStringEncodingISOLatinHebrew (520)",
      "contents": "KCFStringEncodingISOLatinHebrew"
    },
    {
      "trigger": "kCFStringEncodingISOLatinThai (523)",
      "contents": "KCFStringEncodingISOLatinThai"
    },
    {
      "trigger": "kCFStringEncodingISO_2022_CN (2096)",
      "contents": "KCFStringEncodingISO_2022_CN"
    },
    {
      "trigger": "kCFStringEncodingISO_2022_CN_EXT (2097)",
      "contents": "KCFStringEncodingISO_2022_CN_EXT"
    },
    {
      "trigger": "kCFStringEncodingISO_2022_JP (2080)",
      "contents": "KCFStringEncodingISO_2022_JP"
    },
    {
      "trigger": "kCFStringEncodingISO_2022_JP_1 (2082)",
      "contents": "KCFStringEncodingISO_2022_JP_1"
    },
    {
      "trigger": "kCFStringEncodingISO_2022_JP_2 (2081)",
      "contents": "KCFStringEncodingISO_2022_JP_2"
    },
    {
      "trigger": "kCFStringEncodingISO_2022_JP_3 (2083)",
      "contents": "KCFStringEncodingISO_2022_JP_3"
    },
    {
      "trigger": "kCFStringEncodingISO_2022_KR (2112)",
      "contents": "KCFStringEncodingISO_2022_KR"
    },
    {
      "trigger": "kCFStringEncodingInvalidId (4294967295)",
      "contents": "KCFStringEncodingInvalidId"
    },
    {
      "trigger": "kCFStringEncodingJIS_C6226_78 (1572)",
      "contents": "KCFStringEncodingJIS_C6226_78"
    },
    {
      "trigger": "kCFStringEncodingJIS_X0201_76 (1568)",
      "contents": "KCFStringEncodingJIS_X0201_76"
    },
    {
      "trigger": "kCFStringEncodingJIS_X0208_83 (1569)",
      "contents": "KCFStringEncodingJIS_X0208_83"
    },
    {
      "trigger": "kCFStringEncodingJIS_X0208_90 (1570)",
      "contents": "KCFStringEncodingJIS_X0208_90"
    },
    {
      "trigger": "kCFStringEncodingJIS_X0212_90 (1571)",
      "contents": "KCFStringEncodingJIS_X0212_90"
    },
    {
      "trigger": "kCFStringEncodingKOI8_R (2562)",
      "contents": "KCFStringEncodingKOI8_R"
    },
    {
      "trigger": "kCFStringEncodingKOI8_U (2568)",
      "contents": "KCFStringEncodingKOI8_U"
    },
    {
      "trigger": "kCFStringEncodingKSC_5601_87 (1600)",
      "contents": "KCFStringEncodingKSC_5601_87"
    },
    {
      "trigger": "kCFStringEncodingKSC_5601_92_Johab (1601)",
      "contents": "KCFStringEncodingKSC_5601_92_Johab"
    },
    {
      "trigger": "kCFStringEncodingMacArabic (4)",
      "contents": "KCFStringEncodingMacArabic"
    },
    {
      "trigger": "kCFStringEncodingMacArmenian (24)",
      "contents": "KCFStringEncodingMacArmenian"
    },
    {
      "trigger": "kCFStringEncodingMacBengali (13)",
      "contents": "KCFStringEncodingMacBengali"
    },
    {
      "trigger": "kCFStringEncodingMacBurmese (19)",
      "contents": "KCFStringEncodingMacBurmese"
    },
    {
      "trigger": "kCFStringEncodingMacCeltic (39)",
      "contents": "KCFStringEncodingMacCeltic"
    },
    {
      "trigger": "kCFStringEncodingMacCentralEurRoman (29)",
      "contents": "KCFStringEncodingMacCentralEurRoman"
    },
    {
      "trigger": "kCFStringEncodingMacChineseSimp (25)",
      "contents": "KCFStringEncodingMacChineseSimp"
    },
    {
      "trigger": "kCFStringEncodingMacChineseTrad (2)",
      "contents": "KCFStringEncodingMacChineseTrad"
    },
    {
      "trigger": "kCFStringEncodingMacCroatian (36)",
      "contents": "KCFStringEncodingMacCroatian"
    },
    {
      "trigger": "kCFStringEncodingMacCyrillic (7)",
      "contents": "KCFStringEncodingMacCyrillic"
    },
    {
      "trigger": "kCFStringEncodingMacDevanagari (9)",
      "contents": "KCFStringEncodingMacDevanagari"
    },
    {
      "trigger": "kCFStringEncodingMacDingbats (34)",
      "contents": "KCFStringEncodingMacDingbats"
    },
    {
      "trigger": "kCFStringEncodingMacEthiopic (28)",
      "contents": "KCFStringEncodingMacEthiopic"
    },
    {
      "trigger": "kCFStringEncodingMacExtArabic (31)",
      "contents": "KCFStringEncodingMacExtArabic"
    },
    {
      "trigger": "kCFStringEncodingMacFarsi (140)",
      "contents": "KCFStringEncodingMacFarsi"
    },
    {
      "trigger": "kCFStringEncodingMacGaelic (40)",
      "contents": "KCFStringEncodingMacGaelic"
    },
    {
      "trigger": "kCFStringEncodingMacGeorgian (23)",
      "contents": "KCFStringEncodingMacGeorgian"
    },
    {
      "trigger": "kCFStringEncodingMacGreek (6)",
      "contents": "KCFStringEncodingMacGreek"
    },
    {
      "trigger": "kCFStringEncodingMacGujarati (11)",
      "contents": "KCFStringEncodingMacGujarati"
    },
    {
      "trigger": "kCFStringEncodingMacGurmukhi (10)",
      "contents": "KCFStringEncodingMacGurmukhi"
    },
    {
      "trigger": "kCFStringEncodingMacHFS (255)",
      "contents": "KCFStringEncodingMacHFS"
    },
    {
      "trigger": "kCFStringEncodingMacHebrew (5)",
      "contents": "KCFStringEncodingMacHebrew"
    },
    {
      "trigger": "kCFStringEncodingMacIcelandic (37)",
      "contents": "KCFStringEncodingMacIcelandic"
    },
    {
      "trigger": "kCFStringEncodingMacInuit (236)",
      "contents": "KCFStringEncodingMacInuit"
    },
    {
      "trigger": "kCFStringEncodingMacJapanese (1)",
      "contents": "KCFStringEncodingMacJapanese"
    },
    {
      "trigger": "kCFStringEncodingMacKannada (16)",
      "contents": "KCFStringEncodingMacKannada"
    },
    {
      "trigger": "kCFStringEncodingMacKhmer (20)",
      "contents": "KCFStringEncodingMacKhmer"
    },
    {
      "trigger": "kCFStringEncodingMacKorean (3)",
      "contents": "KCFStringEncodingMacKorean"
    },
    {
      "trigger": "kCFStringEncodingMacLaotian (22)",
      "contents": "KCFStringEncodingMacLaotian"
    },
    {
      "trigger": "kCFStringEncodingMacMalayalam (17)",
      "contents": "KCFStringEncodingMacMalayalam"
    },
    {
      "trigger": "kCFStringEncodingMacMongolian (27)",
      "contents": "KCFStringEncodingMacMongolian"
    },
    {
      "trigger": "kCFStringEncodingMacOriya (12)",
      "contents": "KCFStringEncodingMacOriya"
    },
    {
      "trigger": "kCFStringEncodingMacRoman (0)",
      "contents": "KCFStringEncodingMacRoman"
    },
    {
      "trigger": "kCFStringEncodingMacRomanLatin1 (2564)",
      "contents": "KCFStringEncodingMacRomanLatin1"
    },
    {
      "trigger": "kCFStringEncodingMacRomanian (38)",
      "contents": "KCFStringEncodingMacRomanian"
    },
    {
      "trigger": "kCFStringEncodingMacSinhalese (18)",
      "contents": "KCFStringEncodingMacSinhalese"
    },
    {
      "trigger": "kCFStringEncodingMacSymbol (33)",
      "contents": "KCFStringEncodingMacSymbol"
    },
    {
      "trigger": "kCFStringEncodingMacTamil (14)",
      "contents": "KCFStringEncodingMacTamil"
    },
    {
      "trigger": "kCFStringEncodingMacTelugu (15)",
      "contents": "KCFStringEncodingMacTelugu"
    },
    {
      "trigger": "kCFStringEncodingMacThai (21)",
      "contents": "KCFStringEncodingMacThai"
    },
    {
      "trigger": "kCFStringEncodingMacTibetan (26)",
      "contents": "KCFStringEncodingMacTibetan"
    },
    {
      "trigger": "kCFStringEncodingMacTurkish (35)",
      "contents": "KCFStringEncodingMacTurkish"
    },
    {
      "trigger": "kCFStringEncodingMacUkrainian (152)",
      "contents": "KCFStringEncodingMacUkrainian"
    },
    {
      "trigger": "kCFStringEncodingMacVT100 (252)",
      "contents": "KCFStringEncodingMacVT100"
    },
    {
      "trigger": "kCFStringEncodingMacVietnamese (30)",
      "contents": "KCFStringEncodingMacVietnamese"
    },
    {
      "trigger": "kCFStringEncodingNextStepJapanese (2818)",
      "contents": "KCFStringEncodingNextStepJapanese"
    },
    {
      "trigger": "kCFStringEncodingNextStepLatin (2817)",
      "contents": "KCFStringEncodingNextStepLatin"
    },
    {
      "trigger": "kCFStringEncodingNonLossyASCII (3071)",
      "contents": "KCFStringEncodingNonLossyASCII"
    },
    {
      "trigger": "kCFStringEncodingShiftJIS (2561)",
      "contents": "KCFStringEncodingShiftJIS"
    },
    {
      "trigger": "kCFStringEncodingShiftJIS_X0213 (1576)",
      "contents": "KCFStringEncodingShiftJIS_X0213"
    },
    {
      "trigger": "kCFStringEncodingShiftJIS_X0213_00 (1576)",
      "contents": "KCFStringEncodingShiftJIS_X0213_00"
    },
    {
      "trigger": "kCFStringEncodingShiftJIS_X0213_MenKuTen (1577)",
      "contents": "KCFStringEncodingShiftJIS_X0213_MenKuTen"
    },
    {
      "trigger": "kCFStringEncodingUTF16 (256)",
      "contents": "KCFStringEncodingUTF16"
    },
    {
      "trigger": "kCFStringEncodingUTF16BE (268435712)",
      "contents": "KCFStringEncodingUTF16BE"
    },
    {
      "trigger": "kCFStringEncodingUTF16LE (335544576)",
      "contents": "KCFStringEncodingUTF16LE"
    },
    {
      "trigger": "kCFStringEncodingUTF32 (201326848)",
      "contents": "KCFStringEncodingUTF32"
    },
    {
      "trigger": "kCFStringEncodingUTF32BE (402653440)",
      "contents": "KCFStringEncodingUTF32BE"
    },
    {
      "trigger": "kCFStringEncodingUTF32LE (469762304)",
      "contents": "KCFStringEncodingUTF32LE"
    },
    {
      "trigger": "kCFStringEncodingUTF7 (67109120)",
      "contents": "KCFStringEncodingUTF7"
    },
    {
      "trigger": "kCFStringEncodingUTF7_IMAP (2576)",
      "contents": "KCFStringEncodingUTF7_IMAP"
    },
    {
      "trigger": "kCFStringEncodingUTF8 (134217984)",
      "contents": "KCFStringEncodingUTF8"
    },
    {
      "trigger": "kCFStringEncodingUnicode (256)",
      "contents": "KCFStringEncodingUnicode"
    },
    {
      "trigger": "kCFStringEncodingVISCII (2567)",
      "contents": "KCFStringEncodingVISCII"
    },
    {
      "trigger": "kCFStringEncodingWindowsArabic (1286)",
      "contents": "KCFStringEncodingWindowsArabic"
    },
    {
      "trigger": "kCFStringEncodingWindowsBalticRim (1287)",
      "contents": "KCFStringEncodingWindowsBalticRim"
    },
    {
      "trigger": "kCFStringEncodingWindowsCyrillic (1282)",
      "contents": "KCFStringEncodingWindowsCyrillic"
    },
    {
      "trigger": "kCFStringEncodingWindowsGreek (1283)",
      "contents": "KCFStringEncodingWindowsGreek"
    },
    {
      "trigger": "kCFStringEncodingWindowsHebrew (1285)",
      "contents": "KCFStringEncodingWindowsHebrew"
    },
    {
      "trigger": "kCFStringEncodingWindowsKoreanJohab (1296)",
      "contents": "KCFStringEncodingWindowsKoreanJohab"
    },
    {
      "trigger": "kCFStringEncodingWindowsLatin1 (1280)",
      "contents": "KCFStringEncodingWindowsLatin1"
    },
    {
      "trigger": "kCFStringEncodingWindowsLatin2 (1281)",
      "contents": "KCFStringEncodingWindowsLatin2"
    },
    {
      "trigger": "kCFStringEncodingWindowsLatin5 (1284)",
      "contents": "KCFStringEncodingWindowsLatin5"
    },
    {
      "trigger": "kCFStringEncodingWindowsVietnamese (1288)",
      "contents": "KCFStringEncodingWindowsVietnamese"
    },
    {
      "trigger": "kCFStringNormalizationFormC (2)",
      "contents": "KCFStringNormalizationFormC"
    },
    {
      "trigger": "kCFStringNormalizationFormD (0)",
      "contents": "KCFStringNormalizationFormD"
    },
    {
      "trigger": "kCFStringNormalizationFormKC (3)",
      "contents": "KCFStringNormalizationFormKC"
    },
    {
      "trigger": "kCFStringNormalizationFormKD (1)",
      "contents": "KCFStringNormalizationFormKD"
    },
    {
      "trigger": "kCFStringTokenizerAttributeLanguage (131072)",
      "contents": "KCFStringTokenizerAttributeLanguage"
    },
    {
      "trigger": "kCFStringTokenizerAttributeLatinTranscription (65536)",
      "contents": "KCFStringTokenizerAttributeLatinTranscription"
    },
    {
      "trigger": "kCFStringTokenizerTokenHasDerivedSubTokensMask (4)",
      "contents": "KCFStringTokenizerTokenHasDerivedSubTokensMask"
    },
    {
      "trigger": "kCFStringTokenizerTokenHasHasNumbersMask (8)",
      "contents": "KCFStringTokenizerTokenHasHasNumbersMask"
    },
    {
      "trigger": "kCFStringTokenizerTokenHasNonLettersMask (16)",
      "contents": "KCFStringTokenizerTokenHasNonLettersMask"
    },
    {
      "trigger": "kCFStringTokenizerTokenHasSubTokensMask (2)",
      "contents": "KCFStringTokenizerTokenHasSubTokensMask"
    },
    {
      "trigger": "kCFStringTokenizerTokenIsCJWordMask (32)",
      "contents": "KCFStringTokenizerTokenIsCJWordMask"
    },
    {
      "trigger": "kCFStringTokenizerTokenNone (0)",
      "contents": "KCFStringTokenizerTokenNone"
    },
    {
      "trigger": "kCFStringTokenizerTokenNormal (1)",
      "contents": "KCFStringTokenizerTokenNormal"
    },
    {
      "trigger": "kCFStringTokenizerUnitLineBreak (3)",
      "contents": "KCFStringTokenizerUnitLineBreak"
    },
    {
      "trigger": "kCFStringTokenizerUnitParagraph (2)",
      "contents": "KCFStringTokenizerUnitParagraph"
    },
    {
      "trigger": "kCFStringTokenizerUnitSentence (1)",
      "contents": "KCFStringTokenizerUnitSentence"
    },
    {
      "trigger": "kCFStringTokenizerUnitWord (0)",
      "contents": "KCFStringTokenizerUnitWord"
    },
    {
      "trigger": "kCFStringTokenizerUnitWordBoundary (4)",
      "contents": "KCFStringTokenizerUnitWordBoundary"
    },
    {
      "trigger": "kCFStringTransformFullwidthHalfwidth (CFStringRef)",
      "contents": "KCFStringTransformFullwidthHalfwidth"
    },
    {
      "trigger": "kCFStringTransformHiraganaKatakana (CFStringRef)",
      "contents": "KCFStringTransformHiraganaKatakana"
    },
    {
      "trigger": "kCFStringTransformLatinArabic (CFStringRef)",
      "contents": "KCFStringTransformLatinArabic"
    },
    {
      "trigger": "kCFStringTransformLatinCyrillic (CFStringRef)",
      "contents": "KCFStringTransformLatinCyrillic"
    },
    {
      "trigger": "kCFStringTransformLatinGreek (CFStringRef)",
      "contents": "KCFStringTransformLatinGreek"
    },
    {
      "trigger": "kCFStringTransformLatinHangul (CFStringRef)",
      "contents": "KCFStringTransformLatinHangul"
    },
    {
      "trigger": "kCFStringTransformLatinHebrew (CFStringRef)",
      "contents": "KCFStringTransformLatinHebrew"
    },
    {
      "trigger": "kCFStringTransformLatinHiragana (CFStringRef)",
      "contents": "KCFStringTransformLatinHiragana"
    },
    {
      "trigger": "kCFStringTransformLatinKatakana (CFStringRef)",
      "contents": "KCFStringTransformLatinKatakana"
    },
    {
      "trigger": "kCFStringTransformLatinThai (CFStringRef)",
      "contents": "KCFStringTransformLatinThai"
    },
    {
      "trigger": "kCFStringTransformMandarinLatin (CFStringRef)",
      "contents": "KCFStringTransformMandarinLatin"
    },
    {
      "trigger": "kCFStringTransformStripCombiningMarks (CFStringRef)",
      "contents": "KCFStringTransformStripCombiningMarks"
    },
    {
      "trigger": "kCFStringTransformStripDiacritics (CFStringRef)",
      "contents": "KCFStringTransformStripDiacritics"
    },
    {
      "trigger": "kCFStringTransformToLatin (CFStringRef)",
      "contents": "KCFStringTransformToLatin"
    },
    {
      "trigger": "kCFStringTransformToUnicodeName (CFStringRef)",
      "contents": "KCFStringTransformToUnicodeName"
    },
    {
      "trigger": "kCFStringTransformToXMLHex (CFStringRef)",
      "contents": "KCFStringTransformToXMLHex"
    },
    {
      "trigger": "kCFTimeZoneNameStyleDaylightSaving (2)",
      "contents": "KCFTimeZoneNameStyleDaylightSaving"
    },
    {
      "trigger": "kCFTimeZoneNameStyleGeneric (4)",
      "contents": "KCFTimeZoneNameStyleGeneric"
    },
    {
      "trigger": "kCFTimeZoneNameStyleShortDaylightSaving (3)",
      "contents": "KCFTimeZoneNameStyleShortDaylightSaving"
    },
    {
      "trigger": "kCFTimeZoneNameStyleShortGeneric (5)",
      "contents": "KCFTimeZoneNameStyleShortGeneric"
    },
    {
      "trigger": "kCFTimeZoneNameStyleShortStandard (1)",
      "contents": "KCFTimeZoneNameStyleShortStandard"
    },
    {
      "trigger": "kCFTimeZoneNameStyleStandard (0)",
      "contents": "KCFTimeZoneNameStyleStandard"
    },
    {
      "trigger": "kCFTimeZoneSystemTimeZoneDidChangeNotification (CFStringRef)",
      "contents": "KCFTimeZoneSystemTimeZoneDidChangeNotification"
    },
    {
      "trigger": "kCFTypeArrayCallBacks (CFArrayCallBacks)",
      "contents": "KCFTypeArrayCallBacks"
    },
    {
      "trigger": "kCFTypeBagCallBacks (CFBagCallBacks)",
      "contents": "KCFTypeBagCallBacks"
    },
    {
      "trigger": "kCFTypeDictionaryKeyCallBacks (CFDictionaryKeyCallBacks)",
      "contents": "KCFTypeDictionaryKeyCallBacks"
    },
    {
      "trigger": "kCFTypeDictionaryValueCallBacks (CFDictionaryValueCallBacks)",
      "contents": "KCFTypeDictionaryValueCallBacks"
    },
    {
      "trigger": "kCFTypeSetCallBacks (CFSetCallBacks)",
      "contents": "KCFTypeSetCallBacks"
    },
    {
      "trigger": "kCFURLAttributeModificationDateKey (CFStringRef)",
      "contents": "KCFURLAttributeModificationDateKey"
    },
    {
      "trigger": "kCFURLBookmarkCreationMinimalBookmarkMask (512)",
      "contents": "KCFURLBookmarkCreationMinimalBookmarkMask"
    },
    {
      "trigger": "kCFURLBookmarkCreationPreferFileIDResolutionMask (256)",
      "contents": "KCFURLBookmarkCreationPreferFileIDResolutionMask"
    },
    {
      "trigger": "kCFURLBookmarkCreationSuitableForBookmarkFile (1024)",
      "contents": "KCFURLBookmarkCreationSuitableForBookmarkFile"
    },
    {
      "trigger": "kCFURLComponentFragment (12)",
      "contents": "KCFURLComponentFragment"
    },
    {
      "trigger": "kCFURLComponentHost (8)",
      "contents": "KCFURLComponentHost"
    },
    {
      "trigger": "kCFURLComponentNetLocation (2)",
      "contents": "KCFURLComponentNetLocation"
    },
    {
      "trigger": "kCFURLComponentParameterString (10)",
      "contents": "KCFURLComponentParameterString"
    },
    {
      "trigger": "kCFURLComponentPassword (6)",
      "contents": "KCFURLComponentPassword"
    },
    {
      "trigger": "kCFURLComponentPath (3)",
      "contents": "KCFURLComponentPath"
    },
    {
      "trigger": "kCFURLComponentPort (9)",
      "contents": "KCFURLComponentPort"
    },
    {
      "trigger": "kCFURLComponentQuery (11)",
      "contents": "KCFURLComponentQuery"
    },
    {
      "trigger": "kCFURLComponentResourceSpecifier (4)",
      "contents": "KCFURLComponentResourceSpecifier"
    },
    {
      "trigger": "kCFURLComponentScheme (1)",
      "contents": "KCFURLComponentScheme"
    },
    {
      "trigger": "kCFURLComponentUser (5)",
      "contents": "KCFURLComponentUser"
    },
    {
      "trigger": "kCFURLComponentUserInfo (7)",
      "contents": "KCFURLComponentUserInfo"
    },
    {
      "trigger": "kCFURLContentAccessDateKey (CFStringRef)",
      "contents": "KCFURLContentAccessDateKey"
    },
    {
      "trigger": "kCFURLContentModificationDateKey (CFStringRef)",
      "contents": "KCFURLContentModificationDateKey"
    },
    {
      "trigger": "kCFURLCreationDateKey (CFStringRef)",
      "contents": "KCFURLCreationDateKey"
    },
    {
      "trigger": "kCFURLCustomIconKey (CFStringRef)",
      "contents": "KCFURLCustomIconKey"
    },
    {
      "trigger": "kCFURLEffectiveIconKey (CFStringRef)",
      "contents": "KCFURLEffectiveIconKey"
    },
    {
      "trigger": "kCFURLEnumeratorDefaultBehavior (0)",
      "contents": "KCFURLEnumeratorDefaultBehavior"
    },
    {
      "trigger": "kCFURLEnumeratorDescendRecursively (1)",
      "contents": "KCFURLEnumeratorDescendRecursively"
    },
    {
      "trigger": "kCFURLEnumeratorDirectoryPostOrderSuccess (4)",
      "contents": "KCFURLEnumeratorDirectoryPostOrderSuccess"
    },
    {
      "trigger": "kCFURLEnumeratorEnd (2)",
      "contents": "KCFURLEnumeratorEnd"
    },
    {
      "trigger": "kCFURLEnumeratorError (3)",
      "contents": "KCFURLEnumeratorError"
    },
    {
      "trigger": "kCFURLEnumeratorGenerateFileReferenceURLs (4)",
      "contents": "KCFURLEnumeratorGenerateFileReferenceURLs"
    },
    {
      "trigger": "kCFURLEnumeratorIncludeDirectoriesPostOrder (32)",
      "contents": "KCFURLEnumeratorIncludeDirectoriesPostOrder"
    },
    {
      "trigger": "kCFURLEnumeratorIncludeDirectoriesPreOrder (16)",
      "contents": "KCFURLEnumeratorIncludeDirectoriesPreOrder"
    },
    {
      "trigger": "kCFURLEnumeratorSkipInvisibles (2)",
      "contents": "KCFURLEnumeratorSkipInvisibles"
    },
    {
      "trigger": "kCFURLEnumeratorSkipPackageContents (8)",
      "contents": "KCFURLEnumeratorSkipPackageContents"
    },
    {
      "trigger": "kCFURLEnumeratorSuccess (1)",
      "contents": "KCFURLEnumeratorSuccess"
    },
    {
      "trigger": "kCFURLErrorBadServerResponse (-1011)",
      "contents": "KCFURLErrorBadServerResponse"
    },
    {
      "trigger": "kCFURLErrorBadURL (-1000)",
      "contents": "KCFURLErrorBadURL"
    },
    {
      "trigger": "kCFURLErrorCallIsActive (-1019)",
      "contents": "KCFURLErrorCallIsActive"
    },
    {
      "trigger": "kCFURLErrorCancelled (-999)",
      "contents": "KCFURLErrorCancelled"
    },
    {
      "trigger": "kCFURLErrorCannotCloseFile (-3002)",
      "contents": "KCFURLErrorCannotCloseFile"
    },
    {
      "trigger": "kCFURLErrorCannotConnectToHost (-1004)",
      "contents": "KCFURLErrorCannotConnectToHost"
    },
    {
      "trigger": "kCFURLErrorCannotCreateFile (-3000)",
      "contents": "KCFURLErrorCannotCreateFile"
    },
    {
      "trigger": "kCFURLErrorCannotDecodeContentData (-1016)",
      "contents": "KCFURLErrorCannotDecodeContentData"
    },
    {
      "trigger": "kCFURLErrorCannotDecodeRawData (-1015)",
      "contents": "KCFURLErrorCannotDecodeRawData"
    },
    {
      "trigger": "kCFURLErrorCannotFindHost (-1003)",
      "contents": "KCFURLErrorCannotFindHost"
    },
    {
      "trigger": "kCFURLErrorCannotLoadFromNetwork (-2000)",
      "contents": "KCFURLErrorCannotLoadFromNetwork"
    },
    {
      "trigger": "kCFURLErrorCannotMoveFile (-3005)",
      "contents": "KCFURLErrorCannotMoveFile"
    },
    {
      "trigger": "kCFURLErrorCannotOpenFile (-3001)",
      "contents": "KCFURLErrorCannotOpenFile"
    },
    {
      "trigger": "kCFURLErrorCannotParseResponse (-1017)",
      "contents": "KCFURLErrorCannotParseResponse"
    },
    {
      "trigger": "kCFURLErrorCannotRemoveFile (-3004)",
      "contents": "KCFURLErrorCannotRemoveFile"
    },
    {
      "trigger": "kCFURLErrorCannotWriteToFile (-3003)",
      "contents": "KCFURLErrorCannotWriteToFile"
    },
    {
      "trigger": "kCFURLErrorClientCertificateRejected (-1205)",
      "contents": "KCFURLErrorClientCertificateRejected"
    },
    {
      "trigger": "kCFURLErrorClientCertificateRequired (-1206)",
      "contents": "KCFURLErrorClientCertificateRequired"
    },
    {
      "trigger": "kCFURLErrorDNSLookupFailed (-1006)",
      "contents": "KCFURLErrorDNSLookupFailed"
    },
    {
      "trigger": "kCFURLErrorDataLengthExceedsMaximum (-1103)",
      "contents": "KCFURLErrorDataLengthExceedsMaximum"
    },
    {
      "trigger": "kCFURLErrorDataNotAllowed (-1020)",
      "contents": "KCFURLErrorDataNotAllowed"
    },
    {
      "trigger": "kCFURLErrorDownloadDecodingFailedMidStream (-3006)",
      "contents": "KCFURLErrorDownloadDecodingFailedMidStream"
    },
    {
      "trigger": "kCFURLErrorDownloadDecodingFailedToComplete (-3007)",
      "contents": "KCFURLErrorDownloadDecodingFailedToComplete"
    },
    {
      "trigger": "kCFURLErrorFailingURLErrorKey (CFStringRef)",
      "contents": "KCFURLErrorFailingURLErrorKey"
    },
    {
      "trigger": "kCFURLErrorFailingURLStringErrorKey (CFStringRef)",
      "contents": "KCFURLErrorFailingURLStringErrorKey"
    },
    {
      "trigger": "kCFURLErrorFileDoesNotExist (-1100)",
      "contents": "KCFURLErrorFileDoesNotExist"
    },
    {
      "trigger": "kCFURLErrorFileIsDirectory (-1101)",
      "contents": "KCFURLErrorFileIsDirectory"
    },
    {
      "trigger": "kCFURLErrorHTTPTooManyRedirects (-1007)",
      "contents": "KCFURLErrorHTTPTooManyRedirects"
    },
    {
      "trigger": "kCFURLErrorInternationalRoamingOff (-1018)",
      "contents": "KCFURLErrorInternationalRoamingOff"
    },
    {
      "trigger": "kCFURLErrorNetworkConnectionLost (-1005)",
      "contents": "KCFURLErrorNetworkConnectionLost"
    },
    {
      "trigger": "kCFURLErrorNoPermissionsToReadFile (-1102)",
      "contents": "KCFURLErrorNoPermissionsToReadFile"
    },
    {
      "trigger": "kCFURLErrorNotConnectedToInternet (-1009)",
      "contents": "KCFURLErrorNotConnectedToInternet"
    },
    {
      "trigger": "kCFURLErrorRedirectToNonExistentLocation (-1010)",
      "contents": "KCFURLErrorRedirectToNonExistentLocation"
    },
    {
      "trigger": "kCFURLErrorRequestBodyStreamExhausted (-1021)",
      "contents": "KCFURLErrorRequestBodyStreamExhausted"
    },
    {
      "trigger": "kCFURLErrorResourceUnavailable (-1008)",
      "contents": "KCFURLErrorResourceUnavailable"
    },
    {
      "trigger": "kCFURLErrorSecureConnectionFailed (-1200)",
      "contents": "KCFURLErrorSecureConnectionFailed"
    },
    {
      "trigger": "kCFURLErrorServerCertificateHasBadDate (-1201)",
      "contents": "KCFURLErrorServerCertificateHasBadDate"
    },
    {
      "trigger": "kCFURLErrorServerCertificateHasUnknownRoot (-1203)",
      "contents": "KCFURLErrorServerCertificateHasUnknownRoot"
    },
    {
      "trigger": "kCFURLErrorServerCertificateNotYetValid (-1204)",
      "contents": "KCFURLErrorServerCertificateNotYetValid"
    },
    {
      "trigger": "kCFURLErrorServerCertificateUntrusted (-1202)",
      "contents": "KCFURLErrorServerCertificateUntrusted"
    },
    {
      "trigger": "kCFURLErrorTimedOut (-1001)",
      "contents": "KCFURLErrorTimedOut"
    },
    {
      "trigger": "kCFURLErrorUnknown (-998)",
      "contents": "KCFURLErrorUnknown"
    },
    {
      "trigger": "kCFURLErrorUnsupportedURL (-1002)",
      "contents": "KCFURLErrorUnsupportedURL"
    },
    {
      "trigger": "kCFURLErrorUserAuthenticationRequired (-1013)",
      "contents": "KCFURLErrorUserAuthenticationRequired"
    },
    {
      "trigger": "kCFURLErrorUserCancelledAuthentication (-1012)",
      "contents": "KCFURLErrorUserCancelledAuthentication"
    },
    {
      "trigger": "kCFURLErrorZeroByteResource (-1014)",
      "contents": "KCFURLErrorZeroByteResource"
    },
    {
      "trigger": "kCFURLFileAllocatedSizeKey (CFStringRef)",
      "contents": "KCFURLFileAllocatedSizeKey"
    },
    {
      "trigger": "kCFURLFileDirectoryContents (CFStringRef)",
      "contents": "KCFURLFileDirectoryContents"
    },
    {
      "trigger": "kCFURLFileExists (CFStringRef)",
      "contents": "KCFURLFileExists"
    },
    {
      "trigger": "kCFURLFileLastModificationTime (CFStringRef)",
      "contents": "KCFURLFileLastModificationTime"
    },
    {
      "trigger": "kCFURLFileLength (CFStringRef)",
      "contents": "KCFURLFileLength"
    },
    {
      "trigger": "kCFURLFileOwnerID (CFStringRef)",
      "contents": "KCFURLFileOwnerID"
    },
    {
      "trigger": "kCFURLFilePOSIXMode (CFStringRef)",
      "contents": "KCFURLFilePOSIXMode"
    },
    {
      "trigger": "kCFURLFileResourceIdentifierKey (CFStringRef)",
      "contents": "KCFURLFileResourceIdentifierKey"
    },
    {
      "trigger": "kCFURLFileResourceTypeBlockSpecial (CFStringRef)",
      "contents": "KCFURLFileResourceTypeBlockSpecial"
    },
    {
      "trigger": "kCFURLFileResourceTypeCharacterSpecial (CFStringRef)",
      "contents": "KCFURLFileResourceTypeCharacterSpecial"
    },
    {
      "trigger": "kCFURLFileResourceTypeDirectory (CFStringRef)",
      "contents": "KCFURLFileResourceTypeDirectory"
    },
    {
      "trigger": "kCFURLFileResourceTypeKey (CFStringRef)",
      "contents": "KCFURLFileResourceTypeKey"
    },
    {
      "trigger": "kCFURLFileResourceTypeNamedPipe (CFStringRef)",
      "contents": "KCFURLFileResourceTypeNamedPipe"
    },
    {
      "trigger": "kCFURLFileResourceTypeRegular (CFStringRef)",
      "contents": "KCFURLFileResourceTypeRegular"
    },
    {
      "trigger": "kCFURLFileResourceTypeSocket (CFStringRef)",
      "contents": "KCFURLFileResourceTypeSocket"
    },
    {
      "trigger": "kCFURLFileResourceTypeSymbolicLink (CFStringRef)",
      "contents": "KCFURLFileResourceTypeSymbolicLink"
    },
    {
      "trigger": "kCFURLFileResourceTypeUnknown (CFStringRef)",
      "contents": "KCFURLFileResourceTypeUnknown"
    },
    {
      "trigger": "kCFURLFileSecurityKey (CFStringRef)",
      "contents": "KCFURLFileSecurityKey"
    },
    {
      "trigger": "kCFURLFileSizeKey (CFStringRef)",
      "contents": "KCFURLFileSizeKey"
    },
    {
      "trigger": "kCFURLHFSPathStyle (1)",
      "contents": "KCFURLHFSPathStyle"
    },
    {
      "trigger": "kCFURLHTTPStatusCode (CFStringRef)",
      "contents": "KCFURLHTTPStatusCode"
    },
    {
      "trigger": "kCFURLHTTPStatusLine (CFStringRef)",
      "contents": "KCFURLHTTPStatusLine"
    },
    {
      "trigger": "kCFURLHasHiddenExtensionKey (CFStringRef)",
      "contents": "KCFURLHasHiddenExtensionKey"
    },
    {
      "trigger": "kCFURLImproperArgumentsError (-15)",
      "contents": "KCFURLImproperArgumentsError"
    },
    {
      "trigger": "kCFURLIsAliasFileKey (CFStringRef)",
      "contents": "KCFURLIsAliasFileKey"
    },
    {
      "trigger": "kCFURLIsDirectoryKey (CFStringRef)",
      "contents": "KCFURLIsDirectoryKey"
    },
    {
      "trigger": "kCFURLIsExcludedFromBackupKey (CFStringRef)",
      "contents": "KCFURLIsExcludedFromBackupKey"
    },
    {
      "trigger": "kCFURLIsExecutableKey (CFStringRef)",
      "contents": "KCFURLIsExecutableKey"
    },
    {
      "trigger": "kCFURLIsHiddenKey (CFStringRef)",
      "contents": "KCFURLIsHiddenKey"
    },
    {
      "trigger": "kCFURLIsMountTriggerKey (CFStringRef)",
      "contents": "KCFURLIsMountTriggerKey"
    },
    {
      "trigger": "kCFURLIsPackageKey (CFStringRef)",
      "contents": "KCFURLIsPackageKey"
    },
    {
      "trigger": "kCFURLIsReadableKey (CFStringRef)",
      "contents": "KCFURLIsReadableKey"
    },
    {
      "trigger": "kCFURLIsRegularFileKey (CFStringRef)",
      "contents": "KCFURLIsRegularFileKey"
    },
    {
      "trigger": "kCFURLIsSymbolicLinkKey (CFStringRef)",
      "contents": "KCFURLIsSymbolicLinkKey"
    },
    {
      "trigger": "kCFURLIsSystemImmutableKey (CFStringRef)",
      "contents": "KCFURLIsSystemImmutableKey"
    },
    {
      "trigger": "kCFURLIsUbiquitousItemKey (CFStringRef)",
      "contents": "KCFURLIsUbiquitousItemKey"
    },
    {
      "trigger": "kCFURLIsUserImmutableKey (CFStringRef)",
      "contents": "KCFURLIsUserImmutableKey"
    },
    {
      "trigger": "kCFURLIsVolumeKey (CFStringRef)",
      "contents": "KCFURLIsVolumeKey"
    },
    {
      "trigger": "kCFURLIsWritableKey (CFStringRef)",
      "contents": "KCFURLIsWritableKey"
    },
    {
      "trigger": "kCFURLKeysOfUnsetValuesKey (CFStringRef)",
      "contents": "KCFURLKeysOfUnsetValuesKey"
    },
    {
      "trigger": "kCFURLLabelColorKey (CFStringRef)",
      "contents": "KCFURLLabelColorKey"
    },
    {
      "trigger": "kCFURLLabelNumberKey (CFStringRef)",
      "contents": "KCFURLLabelNumberKey"
    },
    {
      "trigger": "kCFURLLinkCountKey (CFStringRef)",
      "contents": "KCFURLLinkCountKey"
    },
    {
      "trigger": "kCFURLLocalizedLabelKey (CFStringRef)",
      "contents": "KCFURLLocalizedLabelKey"
    },
    {
      "trigger": "kCFURLLocalizedNameKey (CFStringRef)",
      "contents": "KCFURLLocalizedNameKey"
    },
    {
      "trigger": "kCFURLLocalizedTypeDescriptionKey (CFStringRef)",
      "contents": "KCFURLLocalizedTypeDescriptionKey"
    },
    {
      "trigger": "kCFURLNameKey (CFStringRef)",
      "contents": "KCFURLNameKey"
    },
    {
      "trigger": "kCFURLPOSIXPathStyle (0)",
      "contents": "KCFURLPOSIXPathStyle"
    },
    {
      "trigger": "kCFURLParentDirectoryURLKey (CFStringRef)",
      "contents": "KCFURLParentDirectoryURLKey"
    },
    {
      "trigger": "kCFURLPreferredIOBlockSizeKey (CFStringRef)",
      "contents": "KCFURLPreferredIOBlockSizeKey"
    },
    {
      "trigger": "kCFURLPropertyKeyUnavailableError (-17)",
      "contents": "KCFURLPropertyKeyUnavailableError"
    },
    {
      "trigger": "kCFURLRemoteHostUnavailableError (-14)",
      "contents": "KCFURLRemoteHostUnavailableError"
    },
    {
      "trigger": "kCFURLResourceAccessViolationError (-13)",
      "contents": "KCFURLResourceAccessViolationError"
    },
    {
      "trigger": "kCFURLResourceNotFoundError (-12)",
      "contents": "KCFURLResourceNotFoundError"
    },
    {
      "trigger": "kCFURLTimeoutError (-18)",
      "contents": "KCFURLTimeoutError"
    },
    {
      "trigger": "kCFURLTotalFileAllocatedSizeKey (CFStringRef)",
      "contents": "KCFURLTotalFileAllocatedSizeKey"
    },
    {
      "trigger": "kCFURLTotalFileSizeKey (CFStringRef)",
      "contents": "KCFURLTotalFileSizeKey"
    },
    {
      "trigger": "kCFURLTypeIdentifierKey (CFStringRef)",
      "contents": "KCFURLTypeIdentifierKey"
    },
    {
      "trigger": "kCFURLUbiquitousItemHasUnresolvedConflictsKey (CFStringRef)",
      "contents": "KCFURLUbiquitousItemHasUnresolvedConflictsKey"
    },
    {
      "trigger": "kCFURLUbiquitousItemIsDownloadedKey (CFStringRef)",
      "contents": "KCFURLUbiquitousItemIsDownloadedKey"
    },
    {
      "trigger": "kCFURLUbiquitousItemIsDownloadingKey (CFStringRef)",
      "contents": "KCFURLUbiquitousItemIsDownloadingKey"
    },
    {
      "trigger": "kCFURLUbiquitousItemIsUploadedKey (CFStringRef)",
      "contents": "KCFURLUbiquitousItemIsUploadedKey"
    },
    {
      "trigger": "kCFURLUbiquitousItemIsUploadingKey (CFStringRef)",
      "contents": "KCFURLUbiquitousItemIsUploadingKey"
    },
    {
      "trigger": "kCFURLUbiquitousItemPercentDownloadedKey (CFStringRef)",
      "contents": "KCFURLUbiquitousItemPercentDownloadedKey"
    },
    {
      "trigger": "kCFURLUbiquitousItemPercentUploadedKey (CFStringRef)",
      "contents": "KCFURLUbiquitousItemPercentUploadedKey"
    },
    {
      "trigger": "kCFURLUnknownError (-10)",
      "contents": "KCFURLUnknownError"
    },
    {
      "trigger": "kCFURLUnknownPropertyKeyError (-16)",
      "contents": "KCFURLUnknownPropertyKeyError"
    },
    {
      "trigger": "kCFURLUnknownSchemeError (-11)",
      "contents": "KCFURLUnknownSchemeError"
    },
    {
      "trigger": "kCFURLVolumeAvailableCapacityKey (CFStringRef)",
      "contents": "KCFURLVolumeAvailableCapacityKey"
    },
    {
      "trigger": "kCFURLVolumeCreationDateKey (CFStringRef)",
      "contents": "KCFURLVolumeCreationDateKey"
    },
    {
      "trigger": "kCFURLVolumeIdentifierKey (CFStringRef)",
      "contents": "KCFURLVolumeIdentifierKey"
    },
    {
      "trigger": "kCFURLVolumeIsAutomountedKey (CFStringRef)",
      "contents": "KCFURLVolumeIsAutomountedKey"
    },
    {
      "trigger": "kCFURLVolumeIsBrowsableKey (CFStringRef)",
      "contents": "KCFURLVolumeIsBrowsableKey"
    },
    {
      "trigger": "kCFURLVolumeIsEjectableKey (CFStringRef)",
      "contents": "KCFURLVolumeIsEjectableKey"
    },
    {
      "trigger": "kCFURLVolumeIsInternalKey (CFStringRef)",
      "contents": "KCFURLVolumeIsInternalKey"
    },
    {
      "trigger": "kCFURLVolumeIsJournalingKey (CFStringRef)",
      "contents": "KCFURLVolumeIsJournalingKey"
    },
    {
      "trigger": "kCFURLVolumeIsLocalKey (CFStringRef)",
      "contents": "KCFURLVolumeIsLocalKey"
    },
    {
      "trigger": "kCFURLVolumeIsReadOnlyKey (CFStringRef)",
      "contents": "KCFURLVolumeIsReadOnlyKey"
    },
    {
      "trigger": "kCFURLVolumeIsRemovableKey (CFStringRef)",
      "contents": "KCFURLVolumeIsRemovableKey"
    },
    {
      "trigger": "kCFURLVolumeLocalizedFormatDescriptionKey (CFStringRef)",
      "contents": "KCFURLVolumeLocalizedFormatDescriptionKey"
    },
    {
      "trigger": "kCFURLVolumeLocalizedNameKey (CFStringRef)",
      "contents": "KCFURLVolumeLocalizedNameKey"
    },
    {
      "trigger": "kCFURLVolumeMaximumFileSizeKey (CFStringRef)",
      "contents": "KCFURLVolumeMaximumFileSizeKey"
    },
    {
      "trigger": "kCFURLVolumeNameKey (CFStringRef)",
      "contents": "KCFURLVolumeNameKey"
    },
    {
      "trigger": "kCFURLVolumeResourceCountKey (CFStringRef)",
      "contents": "KCFURLVolumeResourceCountKey"
    },
    {
      "trigger": "kCFURLVolumeSupportsAdvisoryFileLockingKey (CFStringRef)",
      "contents": "KCFURLVolumeSupportsAdvisoryFileLockingKey"
    },
    {
      "trigger": "kCFURLVolumeSupportsCasePreservedNamesKey (CFStringRef)",
      "contents": "KCFURLVolumeSupportsCasePreservedNamesKey"
    },
    {
      "trigger": "kCFURLVolumeSupportsCaseSensitiveNamesKey (CFStringRef)",
      "contents": "KCFURLVolumeSupportsCaseSensitiveNamesKey"
    },
    {
      "trigger": "kCFURLVolumeSupportsExtendedSecurityKey (CFStringRef)",
      "contents": "KCFURLVolumeSupportsExtendedSecurityKey"
    },
    {
      "trigger": "kCFURLVolumeSupportsHardLinksKey (CFStringRef)",
      "contents": "KCFURLVolumeSupportsHardLinksKey"
    },
    {
      "trigger": "kCFURLVolumeSupportsJournalingKey (CFStringRef)",
      "contents": "KCFURLVolumeSupportsJournalingKey"
    },
    {
      "trigger": "kCFURLVolumeSupportsPersistentIDsKey (CFStringRef)",
      "contents": "KCFURLVolumeSupportsPersistentIDsKey"
    },
    {
      "trigger": "kCFURLVolumeSupportsRenamingKey (CFStringRef)",
      "contents": "KCFURLVolumeSupportsRenamingKey"
    },
    {
      "trigger": "kCFURLVolumeSupportsRootDirectoryDatesKey (CFStringRef)",
      "contents": "KCFURLVolumeSupportsRootDirectoryDatesKey"
    },
    {
      "trigger": "kCFURLVolumeSupportsSparseFilesKey (CFStringRef)",
      "contents": "KCFURLVolumeSupportsSparseFilesKey"
    },
    {
      "trigger": "kCFURLVolumeSupportsSymbolicLinksKey (CFStringRef)",
      "contents": "KCFURLVolumeSupportsSymbolicLinksKey"
    },
    {
      "trigger": "kCFURLVolumeSupportsVolumeSizesKey (CFStringRef)",
      "contents": "KCFURLVolumeSupportsVolumeSizesKey"
    },
    {
      "trigger": "kCFURLVolumeSupportsZeroRunsKey (CFStringRef)",
      "contents": "KCFURLVolumeSupportsZeroRunsKey"
    },
    {
      "trigger": "kCFURLVolumeTotalCapacityKey (CFStringRef)",
      "contents": "KCFURLVolumeTotalCapacityKey"
    },
    {
      "trigger": "kCFURLVolumeURLForRemountingKey (CFStringRef)",
      "contents": "KCFURLVolumeURLForRemountingKey"
    },
    {
      "trigger": "kCFURLVolumeURLKey (CFStringRef)",
      "contents": "KCFURLVolumeURLKey"
    },
    {
      "trigger": "kCFURLVolumeUUIDStringKey (CFStringRef)",
      "contents": "KCFURLVolumeUUIDStringKey"
    },
    {
      "trigger": "kCFURLWindowsPathStyle (2)",
      "contents": "KCFURLWindowsPathStyle"
    },
    {
      "trigger": "kCGBitmapAlphaInfoMask (31)",
      "contents": "KCGBitmapAlphaInfoMask"
    },
    {
      "trigger": "kCGBitmapByteOrder16Big (12288)",
      "contents": "KCGBitmapByteOrder16Big"
    },
    {
      "trigger": "kCGBitmapByteOrder16Host (4096)",
      "contents": "KCGBitmapByteOrder16Host"
    },
    {
      "trigger": "kCGBitmapByteOrder16Little (4096)",
      "contents": "KCGBitmapByteOrder16Little"
    },
    {
      "trigger": "kCGBitmapByteOrder32Big (16384)",
      "contents": "KCGBitmapByteOrder32Big"
    },
    {
      "trigger": "kCGBitmapByteOrder32Host (8192)",
      "contents": "KCGBitmapByteOrder32Host"
    },
    {
      "trigger": "kCGBitmapByteOrder32Little (8192)",
      "contents": "KCGBitmapByteOrder32Little"
    },
    {
      "trigger": "kCGBitmapByteOrderDefault (0)",
      "contents": "KCGBitmapByteOrderDefault"
    },
    {
      "trigger": "kCGBitmapByteOrderMask (28672)",
      "contents": "KCGBitmapByteOrderMask"
    },
    {
      "trigger": "kCGBitmapFloatComponents (256)",
      "contents": "KCGBitmapFloatComponents"
    },
    {
      "trigger": "kCGBlendModeClear (16)",
      "contents": "KCGBlendModeClear"
    },
    {
      "trigger": "kCGBlendModeColor (14)",
      "contents": "KCGBlendModeColor"
    },
    {
      "trigger": "kCGBlendModeColorBurn (7)",
      "contents": "KCGBlendModeColorBurn"
    },
    {
      "trigger": "kCGBlendModeColorDodge (6)",
      "contents": "KCGBlendModeColorDodge"
    },
    {
      "trigger": "kCGBlendModeCopy (17)",
      "contents": "KCGBlendModeCopy"
    },
    {
      "trigger": "kCGBlendModeDarken (4)",
      "contents": "KCGBlendModeDarken"
    },
    {
      "trigger": "kCGBlendModeDestinationAtop (24)",
      "contents": "KCGBlendModeDestinationAtop"
    },
    {
      "trigger": "kCGBlendModeDestinationIn (22)",
      "contents": "KCGBlendModeDestinationIn"
    },
    {
      "trigger": "kCGBlendModeDestinationOut (23)",
      "contents": "KCGBlendModeDestinationOut"
    },
    {
      "trigger": "kCGBlendModeDestinationOver (21)",
      "contents": "KCGBlendModeDestinationOver"
    },
    {
      "trigger": "kCGBlendModeDifference (10)",
      "contents": "KCGBlendModeDifference"
    },
    {
      "trigger": "kCGBlendModeExclusion (11)",
      "contents": "KCGBlendModeExclusion"
    },
    {
      "trigger": "kCGBlendModeHardLight (9)",
      "contents": "KCGBlendModeHardLight"
    },
    {
      "trigger": "kCGBlendModeHue (12)",
      "contents": "KCGBlendModeHue"
    },
    {
      "trigger": "kCGBlendModeLighten (5)",
      "contents": "KCGBlendModeLighten"
    },
    {
      "trigger": "kCGBlendModeLuminosity (15)",
      "contents": "KCGBlendModeLuminosity"
    },
    {
      "trigger": "kCGBlendModeMultiply (1)",
      "contents": "KCGBlendModeMultiply"
    },
    {
      "trigger": "kCGBlendModeNormal (0)",
      "contents": "KCGBlendModeNormal"
    },
    {
      "trigger": "kCGBlendModeOverlay (3)",
      "contents": "KCGBlendModeOverlay"
    },
    {
      "trigger": "kCGBlendModePlusDarker (26)",
      "contents": "KCGBlendModePlusDarker"
    },
    {
      "trigger": "kCGBlendModePlusLighter (27)",
      "contents": "KCGBlendModePlusLighter"
    },
    {
      "trigger": "kCGBlendModeSaturation (13)",
      "contents": "KCGBlendModeSaturation"
    },
    {
      "trigger": "kCGBlendModeScreen (2)",
      "contents": "KCGBlendModeScreen"
    },
    {
      "trigger": "kCGBlendModeSoftLight (8)",
      "contents": "KCGBlendModeSoftLight"
    },
    {
      "trigger": "kCGBlendModeSourceAtop (20)",
      "contents": "KCGBlendModeSourceAtop"
    },
    {
      "trigger": "kCGBlendModeSourceIn (18)",
      "contents": "KCGBlendModeSourceIn"
    },
    {
      "trigger": "kCGBlendModeSourceOut (19)",
      "contents": "KCGBlendModeSourceOut"
    },
    {
      "trigger": "kCGBlendModeXOR (25)",
      "contents": "KCGBlendModeXOR"
    },
    {
      "trigger": "kCGColorSpaceModelCMYK (2)",
      "contents": "KCGColorSpaceModelCMYK"
    },
    {
      "trigger": "kCGColorSpaceModelDeviceN (4)",
      "contents": "KCGColorSpaceModelDeviceN"
    },
    {
      "trigger": "kCGColorSpaceModelIndexed (5)",
      "contents": "KCGColorSpaceModelIndexed"
    },
    {
      "trigger": "kCGColorSpaceModelLab (3)",
      "contents": "KCGColorSpaceModelLab"
    },
    {
      "trigger": "kCGColorSpaceModelMonochrome (0)",
      "contents": "KCGColorSpaceModelMonochrome"
    },
    {
      "trigger": "kCGColorSpaceModelPattern (6)",
      "contents": "KCGColorSpaceModelPattern"
    },
    {
      "trigger": "kCGColorSpaceModelRGB (1)",
      "contents": "KCGColorSpaceModelRGB"
    },
    {
      "trigger": "kCGColorSpaceModelUnknown (-1)",
      "contents": "KCGColorSpaceModelUnknown"
    },
    {
      "trigger": "kCGEncodingFontSpecific (0)",
      "contents": "KCGEncodingFontSpecific"
    },
    {
      "trigger": "kCGEncodingMacRoman (1)",
      "contents": "KCGEncodingMacRoman"
    },
    {
      "trigger": "kCGErrorApplicationAlreadyRunning (1025)",
      "contents": "KCGErrorApplicationAlreadyRunning"
    },
    {
      "trigger": "kCGErrorApplicationCanOnlyBeRunInOneSessionAtATime (1026)",
      "contents": "KCGErrorApplicationCanOnlyBeRunInOneSessionAtATime"
    },
    {
      "trigger": "kCGErrorApplicationIncorrectExecutableFormatFound (1023)",
      "contents": "KCGErrorApplicationIncorrectExecutableFormatFound"
    },
    {
      "trigger": "kCGErrorApplicationIsLaunching (1024)",
      "contents": "KCGErrorApplicationIsLaunching"
    },
    {
      "trigger": "kCGErrorApplicationNotPermittedToExecute (1016)",
      "contents": "KCGErrorApplicationNotPermittedToExecute"
    },
    {
      "trigger": "kCGErrorApplicationRequiresNewerSystem (1015)",
      "contents": "KCGErrorApplicationRequiresNewerSystem"
    },
    {
      "trigger": "kCGErrorCannotComplete (1004)",
      "contents": "KCGErrorCannotComplete"
    },
    {
      "trigger": "kCGErrorClassicApplicationsMustBeLaunchedByClassic (1027)",
      "contents": "KCGErrorClassicApplicationsMustBeLaunchedByClassic"
    },
    {
      "trigger": "kCGErrorFailure (1000)",
      "contents": "KCGErrorFailure"
    },
    {
      "trigger": "kCGErrorFirst (1000)",
      "contents": "KCGErrorFirst"
    },
    {
      "trigger": "kCGErrorForkFailed (1028)",
      "contents": "KCGErrorForkFailed"
    },
    {
      "trigger": "kCGErrorIllegalArgument (1001)",
      "contents": "KCGErrorIllegalArgument"
    },
    {
      "trigger": "kCGErrorInvalidConnection (1002)",
      "contents": "KCGErrorInvalidConnection"
    },
    {
      "trigger": "kCGErrorInvalidContext (1003)",
      "contents": "KCGErrorInvalidContext"
    },
    {
      "trigger": "kCGErrorInvalidOperation (1010)",
      "contents": "KCGErrorInvalidOperation"
    },
    {
      "trigger": "kCGErrorLast (1029)",
      "contents": "KCGErrorLast"
    },
    {
      "trigger": "kCGErrorNameTooLong (1005)",
      "contents": "KCGErrorNameTooLong"
    },
    {
      "trigger": "kCGErrorNoCurrentPoint (1009)",
      "contents": "KCGErrorNoCurrentPoint"
    },
    {
      "trigger": "kCGErrorNoneAvailable (1011)",
      "contents": "KCGErrorNoneAvailable"
    },
    {
      "trigger": "kCGErrorNotImplemented (1006)",
      "contents": "KCGErrorNotImplemented"
    },
    {
      "trigger": "kCGErrorRangeCheck (1007)",
      "contents": "KCGErrorRangeCheck"
    },
    {
      "trigger": "kCGErrorRetryRegistration (1029)",
      "contents": "KCGErrorRetryRegistration"
    },
    {
      "trigger": "kCGErrorSuccess (0)",
      "contents": "KCGErrorSuccess"
    },
    {
      "trigger": "kCGErrorTypeCheck (1008)",
      "contents": "KCGErrorTypeCheck"
    },
    {
      "trigger": "kCGFontIndexInvalid (65535)",
      "contents": "KCGFontIndexInvalid"
    },
    {
      "trigger": "kCGFontIndexMax (65534)",
      "contents": "KCGFontIndexMax"
    },
    {
      "trigger": "kCGFontPostScriptFormatType1 (1)",
      "contents": "KCGFontPostScriptFormatType1"
    },
    {
      "trigger": "kCGFontPostScriptFormatType3 (3)",
      "contents": "KCGFontPostScriptFormatType3"
    },
    {
      "trigger": "kCGFontPostScriptFormatType42 (42)",
      "contents": "KCGFontPostScriptFormatType42"
    },
    {
      "trigger": "kCGFontVariationAxisDefaultValue (CFStringRef)",
      "contents": "KCGFontVariationAxisDefaultValue"
    },
    {
      "trigger": "kCGFontVariationAxisMaxValue (CFStringRef)",
      "contents": "KCGFontVariationAxisMaxValue"
    },
    {
      "trigger": "kCGFontVariationAxisMinValue (CFStringRef)",
      "contents": "KCGFontVariationAxisMinValue"
    },
    {
      "trigger": "kCGFontVariationAxisName (CFStringRef)",
      "contents": "KCGFontVariationAxisName"
    },
    {
      "trigger": "kCGGlyphMax (65534)",
      "contents": "KCGGlyphMax"
    },
    {
      "trigger": "kCGGradientDrawsAfterEndLocation (2)",
      "contents": "KCGGradientDrawsAfterEndLocation"
    },
    {
      "trigger": "kCGGradientDrawsBeforeStartLocation (1)",
      "contents": "KCGGradientDrawsBeforeStartLocation"
    },
    {
      "trigger": "kCGImageAlphaFirst (4)",
      "contents": "KCGImageAlphaFirst"
    },
    {
      "trigger": "kCGImageAlphaLast (3)",
      "contents": "KCGImageAlphaLast"
    },
    {
      "trigger": "kCGImageAlphaNone (0)",
      "contents": "KCGImageAlphaNone"
    },
    {
      "trigger": "kCGImageAlphaNoneSkipFirst (6)",
      "contents": "KCGImageAlphaNoneSkipFirst"
    },
    {
      "trigger": "kCGImageAlphaNoneSkipLast (5)",
      "contents": "KCGImageAlphaNoneSkipLast"
    },
    {
      "trigger": "kCGImageAlphaOnly (7)",
      "contents": "KCGImageAlphaOnly"
    },
    {
      "trigger": "kCGImageAlphaPremultipliedFirst (2)",
      "contents": "KCGImageAlphaPremultipliedFirst"
    },
    {
      "trigger": "kCGImageAlphaPremultipliedLast (1)",
      "contents": "KCGImageAlphaPremultipliedLast"
    },
    {
      "trigger": "kCGImageDestinationBackgroundColor (CFStringRef)",
      "contents": "KCGImageDestinationBackgroundColor"
    },
    {
      "trigger": "kCGImageDestinationLossyCompressionQuality (CFStringRef)",
      "contents": "KCGImageDestinationLossyCompressionQuality"
    },
    {
      "trigger": "kCGImageProperty8BIMDictionary (CFStringRef)",
      "contents": "KCGImageProperty8BIMDictionary"
    },
    {
      "trigger": "kCGImageProperty8BIMLayerNames (CFStringRef)",
      "contents": "KCGImageProperty8BIMLayerNames"
    },
    {
      "trigger": "kCGImagePropertyCIFFCameraSerialNumber (CFStringRef)",
      "contents": "KCGImagePropertyCIFFCameraSerialNumber"
    },
    {
      "trigger": "kCGImagePropertyCIFFContinuousDrive (CFStringRef)",
      "contents": "KCGImagePropertyCIFFContinuousDrive"
    },
    {
      "trigger": "kCGImagePropertyCIFFDescription (CFStringRef)",
      "contents": "KCGImagePropertyCIFFDescription"
    },
    {
      "trigger": "kCGImagePropertyCIFFDictionary (CFStringRef)",
      "contents": "KCGImagePropertyCIFFDictionary"
    },
    {
      "trigger": "kCGImagePropertyCIFFFirmware (CFStringRef)",
      "contents": "KCGImagePropertyCIFFFirmware"
    },
    {
      "trigger": "kCGImagePropertyCIFFFlashExposureComp (CFStringRef)",
      "contents": "KCGImagePropertyCIFFFlashExposureComp"
    },
    {
      "trigger": "kCGImagePropertyCIFFFocusMode (CFStringRef)",
      "contents": "KCGImagePropertyCIFFFocusMode"
    },
    {
      "trigger": "kCGImagePropertyCIFFImageFileName (CFStringRef)",
      "contents": "KCGImagePropertyCIFFImageFileName"
    },
    {
      "trigger": "kCGImagePropertyCIFFImageName (CFStringRef)",
      "contents": "KCGImagePropertyCIFFImageName"
    },
    {
      "trigger": "kCGImagePropertyCIFFImageSerialNumber (CFStringRef)",
      "contents": "KCGImagePropertyCIFFImageSerialNumber"
    },
    {
      "trigger": "kCGImagePropertyCIFFLensMaxMM (CFStringRef)",
      "contents": "KCGImagePropertyCIFFLensMaxMM"
    },
    {
      "trigger": "kCGImagePropertyCIFFLensMinMM (CFStringRef)",
      "contents": "KCGImagePropertyCIFFLensMinMM"
    },
    {
      "trigger": "kCGImagePropertyCIFFLensModel (CFStringRef)",
      "contents": "KCGImagePropertyCIFFLensModel"
    },
    {
      "trigger": "kCGImagePropertyCIFFMeasuredEV (CFStringRef)",
      "contents": "KCGImagePropertyCIFFMeasuredEV"
    },
    {
      "trigger": "kCGImagePropertyCIFFMeteringMode (CFStringRef)",
      "contents": "KCGImagePropertyCIFFMeteringMode"
    },
    {
      "trigger": "kCGImagePropertyCIFFOwnerName (CFStringRef)",
      "contents": "KCGImagePropertyCIFFOwnerName"
    },
    {
      "trigger": "kCGImagePropertyCIFFRecordID (CFStringRef)",
      "contents": "KCGImagePropertyCIFFRecordID"
    },
    {
      "trigger": "kCGImagePropertyCIFFReleaseMethod (CFStringRef)",
      "contents": "KCGImagePropertyCIFFReleaseMethod"
    },
    {
      "trigger": "kCGImagePropertyCIFFReleaseTiming (CFStringRef)",
      "contents": "KCGImagePropertyCIFFReleaseTiming"
    },
    {
      "trigger": "kCGImagePropertyCIFFSelfTimingTime (CFStringRef)",
      "contents": "KCGImagePropertyCIFFSelfTimingTime"
    },
    {
      "trigger": "kCGImagePropertyCIFFShootingMode (CFStringRef)",
      "contents": "KCGImagePropertyCIFFShootingMode"
    },
    {
      "trigger": "kCGImagePropertyCIFFWhiteBalanceIndex (CFStringRef)",
      "contents": "KCGImagePropertyCIFFWhiteBalanceIndex"
    },
    {
      "trigger": "kCGImagePropertyColorModel (CFStringRef)",
      "contents": "KCGImagePropertyColorModel"
    },
    {
      "trigger": "kCGImagePropertyColorModelCMYK (CFStringRef)",
      "contents": "KCGImagePropertyColorModelCMYK"
    },
    {
      "trigger": "kCGImagePropertyColorModelGray (CFStringRef)",
      "contents": "KCGImagePropertyColorModelGray"
    },
    {
      "trigger": "kCGImagePropertyColorModelLab (CFStringRef)",
      "contents": "KCGImagePropertyColorModelLab"
    },
    {
      "trigger": "kCGImagePropertyColorModelRGB (CFStringRef)",
      "contents": "KCGImagePropertyColorModelRGB"
    },
    {
      "trigger": "kCGImagePropertyDNGBackwardVersion (CFStringRef)",
      "contents": "KCGImagePropertyDNGBackwardVersion"
    },
    {
      "trigger": "kCGImagePropertyDNGCameraSerialNumber (CFStringRef)",
      "contents": "KCGImagePropertyDNGCameraSerialNumber"
    },
    {
      "trigger": "kCGImagePropertyDNGDictionary (CFStringRef)",
      "contents": "KCGImagePropertyDNGDictionary"
    },
    {
      "trigger": "kCGImagePropertyDNGLensInfo (CFStringRef)",
      "contents": "KCGImagePropertyDNGLensInfo"
    },
    {
      "trigger": "kCGImagePropertyDNGLocalizedCameraModel (CFStringRef)",
      "contents": "KCGImagePropertyDNGLocalizedCameraModel"
    },
    {
      "trigger": "kCGImagePropertyDNGUniqueCameraModel (CFStringRef)",
      "contents": "KCGImagePropertyDNGUniqueCameraModel"
    },
    {
      "trigger": "kCGImagePropertyDNGVersion (CFStringRef)",
      "contents": "KCGImagePropertyDNGVersion"
    },
    {
      "trigger": "kCGImagePropertyDPIHeight (CFStringRef)",
      "contents": "KCGImagePropertyDPIHeight"
    },
    {
      "trigger": "kCGImagePropertyDPIWidth (CFStringRef)",
      "contents": "KCGImagePropertyDPIWidth"
    },
    {
      "trigger": "kCGImagePropertyDepth (CFStringRef)",
      "contents": "KCGImagePropertyDepth"
    },
    {
      "trigger": "kCGImagePropertyExifApertureValue (CFStringRef)",
      "contents": "KCGImagePropertyExifApertureValue"
    },
    {
      "trigger": "kCGImagePropertyExifAuxDictionary (CFStringRef)",
      "contents": "KCGImagePropertyExifAuxDictionary"
    },
    {
      "trigger": "kCGImagePropertyExifAuxFirmware (CFStringRef)",
      "contents": "KCGImagePropertyExifAuxFirmware"
    },
    {
      "trigger": "kCGImagePropertyExifAuxFlashCompensation (CFStringRef)",
      "contents": "KCGImagePropertyExifAuxFlashCompensation"
    },
    {
      "trigger": "kCGImagePropertyExifAuxImageNumber (CFStringRef)",
      "contents": "KCGImagePropertyExifAuxImageNumber"
    },
    {
      "trigger": "kCGImagePropertyExifAuxLensID (CFStringRef)",
      "contents": "KCGImagePropertyExifAuxLensID"
    },
    {
      "trigger": "kCGImagePropertyExifAuxLensInfo (CFStringRef)",
      "contents": "KCGImagePropertyExifAuxLensInfo"
    },
    {
      "trigger": "kCGImagePropertyExifAuxLensModel (CFStringRef)",
      "contents": "KCGImagePropertyExifAuxLensModel"
    },
    {
      "trigger": "kCGImagePropertyExifAuxLensSerialNumber (CFStringRef)",
      "contents": "KCGImagePropertyExifAuxLensSerialNumber"
    },
    {
      "trigger": "kCGImagePropertyExifAuxOwnerName (CFStringRef)",
      "contents": "KCGImagePropertyExifAuxOwnerName"
    },
    {
      "trigger": "kCGImagePropertyExifAuxSerialNumber (CFStringRef)",
      "contents": "KCGImagePropertyExifAuxSerialNumber"
    },
    {
      "trigger": "kCGImagePropertyExifBodySerialNumber (CFStringRef)",
      "contents": "KCGImagePropertyExifBodySerialNumber"
    },
    {
      "trigger": "kCGImagePropertyExifBrightnessValue (CFStringRef)",
      "contents": "KCGImagePropertyExifBrightnessValue"
    },
    {
      "trigger": "kCGImagePropertyExifCFAPattern (CFStringRef)",
      "contents": "KCGImagePropertyExifCFAPattern"
    },
    {
      "trigger": "kCGImagePropertyExifCameraOwnerName (CFStringRef)",
      "contents": "KCGImagePropertyExifCameraOwnerName"
    },
    {
      "trigger": "kCGImagePropertyExifColorSpace (CFStringRef)",
      "contents": "KCGImagePropertyExifColorSpace"
    },
    {
      "trigger": "kCGImagePropertyExifComponentsConfiguration (CFStringRef)",
      "contents": "KCGImagePropertyExifComponentsConfiguration"
    },
    {
      "trigger": "kCGImagePropertyExifCompressedBitsPerPixel (CFStringRef)",
      "contents": "KCGImagePropertyExifCompressedBitsPerPixel"
    },
    {
      "trigger": "kCGImagePropertyExifContrast (CFStringRef)",
      "contents": "KCGImagePropertyExifContrast"
    },
    {
      "trigger": "kCGImagePropertyExifCustomRendered (CFStringRef)",
      "contents": "KCGImagePropertyExifCustomRendered"
    },
    {
      "trigger": "kCGImagePropertyExifDateTimeDigitized (CFStringRef)",
      "contents": "KCGImagePropertyExifDateTimeDigitized"
    },
    {
      "trigger": "kCGImagePropertyExifDateTimeOriginal (CFStringRef)",
      "contents": "KCGImagePropertyExifDateTimeOriginal"
    },
    {
      "trigger": "kCGImagePropertyExifDeviceSettingDescription (CFStringRef)",
      "contents": "KCGImagePropertyExifDeviceSettingDescription"
    },
    {
      "trigger": "kCGImagePropertyExifDictionary (CFStringRef)",
      "contents": "KCGImagePropertyExifDictionary"
    },
    {
      "trigger": "kCGImagePropertyExifDigitalZoomRatio (CFStringRef)",
      "contents": "KCGImagePropertyExifDigitalZoomRatio"
    },
    {
      "trigger": "kCGImagePropertyExifExposureBiasValue (CFStringRef)",
      "contents": "KCGImagePropertyExifExposureBiasValue"
    },
    {
      "trigger": "kCGImagePropertyExifExposureIndex (CFStringRef)",
      "contents": "KCGImagePropertyExifExposureIndex"
    },
    {
      "trigger": "kCGImagePropertyExifExposureMode (CFStringRef)",
      "contents": "KCGImagePropertyExifExposureMode"
    },
    {
      "trigger": "kCGImagePropertyExifExposureProgram (CFStringRef)",
      "contents": "KCGImagePropertyExifExposureProgram"
    },
    {
      "trigger": "kCGImagePropertyExifExposureTime (CFStringRef)",
      "contents": "KCGImagePropertyExifExposureTime"
    },
    {
      "trigger": "kCGImagePropertyExifFNumber (CFStringRef)",
      "contents": "KCGImagePropertyExifFNumber"
    },
    {
      "trigger": "kCGImagePropertyExifFileSource (CFStringRef)",
      "contents": "KCGImagePropertyExifFileSource"
    },
    {
      "trigger": "kCGImagePropertyExifFlash (CFStringRef)",
      "contents": "KCGImagePropertyExifFlash"
    },
    {
      "trigger": "kCGImagePropertyExifFlashEnergy (CFStringRef)",
      "contents": "KCGImagePropertyExifFlashEnergy"
    },
    {
      "trigger": "kCGImagePropertyExifFlashPixVersion (CFStringRef)",
      "contents": "KCGImagePropertyExifFlashPixVersion"
    },
    {
      "trigger": "kCGImagePropertyExifFocalLenIn35mmFilm (CFStringRef)",
      "contents": "KCGImagePropertyExifFocalLenIn35mmFilm"
    },
    {
      "trigger": "kCGImagePropertyExifFocalLength (CFStringRef)",
      "contents": "KCGImagePropertyExifFocalLength"
    },
    {
      "trigger": "kCGImagePropertyExifFocalPlaneResolutionUnit (CFStringRef)",
      "contents": "KCGImagePropertyExifFocalPlaneResolutionUnit"
    },
    {
      "trigger": "kCGImagePropertyExifFocalPlaneXResolution (CFStringRef)",
      "contents": "KCGImagePropertyExifFocalPlaneXResolution"
    },
    {
      "trigger": "kCGImagePropertyExifFocalPlaneYResolution (CFStringRef)",
      "contents": "KCGImagePropertyExifFocalPlaneYResolution"
    },
    {
      "trigger": "kCGImagePropertyExifGainControl (CFStringRef)",
      "contents": "KCGImagePropertyExifGainControl"
    },
    {
      "trigger": "kCGImagePropertyExifGamma (CFStringRef)",
      "contents": "KCGImagePropertyExifGamma"
    },
    {
      "trigger": "kCGImagePropertyExifISOSpeedRatings (CFStringRef)",
      "contents": "KCGImagePropertyExifISOSpeedRatings"
    },
    {
      "trigger": "kCGImagePropertyExifImageUniqueID (CFStringRef)",
      "contents": "KCGImagePropertyExifImageUniqueID"
    },
    {
      "trigger": "kCGImagePropertyExifLensMake (CFStringRef)",
      "contents": "KCGImagePropertyExifLensMake"
    },
    {
      "trigger": "kCGImagePropertyExifLensModel (CFStringRef)",
      "contents": "KCGImagePropertyExifLensModel"
    },
    {
      "trigger": "kCGImagePropertyExifLensSerialNumber (CFStringRef)",
      "contents": "KCGImagePropertyExifLensSerialNumber"
    },
    {
      "trigger": "kCGImagePropertyExifLensSpecification (CFStringRef)",
      "contents": "KCGImagePropertyExifLensSpecification"
    },
    {
      "trigger": "kCGImagePropertyExifLightSource (CFStringRef)",
      "contents": "KCGImagePropertyExifLightSource"
    },
    {
      "trigger": "kCGImagePropertyExifMakerNote (CFStringRef)",
      "contents": "KCGImagePropertyExifMakerNote"
    },
    {
      "trigger": "kCGImagePropertyExifMaxApertureValue (CFStringRef)",
      "contents": "KCGImagePropertyExifMaxApertureValue"
    },
    {
      "trigger": "kCGImagePropertyExifMeteringMode (CFStringRef)",
      "contents": "KCGImagePropertyExifMeteringMode"
    },
    {
      "trigger": "kCGImagePropertyExifOECF (CFStringRef)",
      "contents": "KCGImagePropertyExifOECF"
    },
    {
      "trigger": "kCGImagePropertyExifPixelXDimension (CFStringRef)",
      "contents": "KCGImagePropertyExifPixelXDimension"
    },
    {
      "trigger": "kCGImagePropertyExifPixelYDimension (CFStringRef)",
      "contents": "KCGImagePropertyExifPixelYDimension"
    },
    {
      "trigger": "kCGImagePropertyExifRelatedSoundFile (CFStringRef)",
      "contents": "KCGImagePropertyExifRelatedSoundFile"
    },
    {
      "trigger": "kCGImagePropertyExifSaturation (CFStringRef)",
      "contents": "KCGImagePropertyExifSaturation"
    },
    {
      "trigger": "kCGImagePropertyExifSceneCaptureType (CFStringRef)",
      "contents": "KCGImagePropertyExifSceneCaptureType"
    },
    {
      "trigger": "kCGImagePropertyExifSceneType (CFStringRef)",
      "contents": "KCGImagePropertyExifSceneType"
    },
    {
      "trigger": "kCGImagePropertyExifSensingMethod (CFStringRef)",
      "contents": "KCGImagePropertyExifSensingMethod"
    },
    {
      "trigger": "kCGImagePropertyExifSharpness (CFStringRef)",
      "contents": "KCGImagePropertyExifSharpness"
    },
    {
      "trigger": "kCGImagePropertyExifShutterSpeedValue (CFStringRef)",
      "contents": "KCGImagePropertyExifShutterSpeedValue"
    },
    {
      "trigger": "kCGImagePropertyExifSpatialFrequencyResponse (CFStringRef)",
      "contents": "KCGImagePropertyExifSpatialFrequencyResponse"
    },
    {
      "trigger": "kCGImagePropertyExifSpectralSensitivity (CFStringRef)",
      "contents": "KCGImagePropertyExifSpectralSensitivity"
    },
    {
      "trigger": "kCGImagePropertyExifSubjectArea (CFStringRef)",
      "contents": "KCGImagePropertyExifSubjectArea"
    },
    {
      "trigger": "kCGImagePropertyExifSubjectDistRange (CFStringRef)",
      "contents": "KCGImagePropertyExifSubjectDistRange"
    },
    {
      "trigger": "kCGImagePropertyExifSubjectDistance (CFStringRef)",
      "contents": "KCGImagePropertyExifSubjectDistance"
    },
    {
      "trigger": "kCGImagePropertyExifSubjectLocation (CFStringRef)",
      "contents": "KCGImagePropertyExifSubjectLocation"
    },
    {
      "trigger": "kCGImagePropertyExifSubsecTime (CFStringRef)",
      "contents": "KCGImagePropertyExifSubsecTime"
    },
    {
      "trigger": "kCGImagePropertyExifSubsecTimeDigitized (CFStringRef)",
      "contents": "KCGImagePropertyExifSubsecTimeDigitized"
    },
    {
      "trigger": "kCGImagePropertyExifSubsecTimeOrginal (CFStringRef)",
      "contents": "KCGImagePropertyExifSubsecTimeOrginal"
    },
    {
      "trigger": "kCGImagePropertyExifUserComment (CFStringRef)",
      "contents": "KCGImagePropertyExifUserComment"
    },
    {
      "trigger": "kCGImagePropertyExifVersion (CFStringRef)",
      "contents": "KCGImagePropertyExifVersion"
    },
    {
      "trigger": "kCGImagePropertyExifWhiteBalance (CFStringRef)",
      "contents": "KCGImagePropertyExifWhiteBalance"
    },
    {
      "trigger": "kCGImagePropertyFileSize (CFStringRef)",
      "contents": "KCGImagePropertyFileSize"
    },
    {
      "trigger": "kCGImagePropertyGIFDelayTime (CFStringRef)",
      "contents": "KCGImagePropertyGIFDelayTime"
    },
    {
      "trigger": "kCGImagePropertyGIFDictionary (CFStringRef)",
      "contents": "KCGImagePropertyGIFDictionary"
    },
    {
      "trigger": "kCGImagePropertyGIFHasGlobalColorMap (CFStringRef)",
      "contents": "KCGImagePropertyGIFHasGlobalColorMap"
    },
    {
      "trigger": "kCGImagePropertyGIFImageColorMap (CFStringRef)",
      "contents": "KCGImagePropertyGIFImageColorMap"
    },
    {
      "trigger": "kCGImagePropertyGIFLoopCount (CFStringRef)",
      "contents": "KCGImagePropertyGIFLoopCount"
    },
    {
      "trigger": "kCGImagePropertyGIFUnclampedDelayTime (CFStringRef)",
      "contents": "KCGImagePropertyGIFUnclampedDelayTime"
    },
    {
      "trigger": "kCGImagePropertyGPSAltitude (CFStringRef)",
      "contents": "KCGImagePropertyGPSAltitude"
    },
    {
      "trigger": "kCGImagePropertyGPSAltitudeRef (CFStringRef)",
      "contents": "KCGImagePropertyGPSAltitudeRef"
    },
    {
      "trigger": "kCGImagePropertyGPSAreaInformation (CFStringRef)",
      "contents": "KCGImagePropertyGPSAreaInformation"
    },
    {
      "trigger": "kCGImagePropertyGPSDOP (CFStringRef)",
      "contents": "KCGImagePropertyGPSDOP"
    },
    {
      "trigger": "kCGImagePropertyGPSDateStamp (CFStringRef)",
      "contents": "KCGImagePropertyGPSDateStamp"
    },
    {
      "trigger": "kCGImagePropertyGPSDestBearing (CFStringRef)",
      "contents": "KCGImagePropertyGPSDestBearing"
    },
    {
      "trigger": "kCGImagePropertyGPSDestBearingRef (CFStringRef)",
      "contents": "KCGImagePropertyGPSDestBearingRef"
    },
    {
      "trigger": "kCGImagePropertyGPSDestDistance (CFStringRef)",
      "contents": "KCGImagePropertyGPSDestDistance"
    },
    {
      "trigger": "kCGImagePropertyGPSDestDistanceRef (CFStringRef)",
      "contents": "KCGImagePropertyGPSDestDistanceRef"
    },
    {
      "trigger": "kCGImagePropertyGPSDestLatitude (CFStringRef)",
      "contents": "KCGImagePropertyGPSDestLatitude"
    },
    {
      "trigger": "kCGImagePropertyGPSDestLatitudeRef (CFStringRef)",
      "contents": "KCGImagePropertyGPSDestLatitudeRef"
    },
    {
      "trigger": "kCGImagePropertyGPSDestLongitude (CFStringRef)",
      "contents": "KCGImagePropertyGPSDestLongitude"
    },
    {
      "trigger": "kCGImagePropertyGPSDestLongitudeRef (CFStringRef)",
      "contents": "KCGImagePropertyGPSDestLongitudeRef"
    },
    {
      "trigger": "kCGImagePropertyGPSDictionary (CFStringRef)",
      "contents": "KCGImagePropertyGPSDictionary"
    },
    {
      "trigger": "kCGImagePropertyGPSDifferental (CFStringRef)",
      "contents": "KCGImagePropertyGPSDifferental"
    },
    {
      "trigger": "kCGImagePropertyGPSImgDirection (CFStringRef)",
      "contents": "KCGImagePropertyGPSImgDirection"
    },
    {
      "trigger": "kCGImagePropertyGPSImgDirectionRef (CFStringRef)",
      "contents": "KCGImagePropertyGPSImgDirectionRef"
    },
    {
      "trigger": "kCGImagePropertyGPSLatitude (CFStringRef)",
      "contents": "KCGImagePropertyGPSLatitude"
    },
    {
      "trigger": "kCGImagePropertyGPSLatitudeRef (CFStringRef)",
      "contents": "KCGImagePropertyGPSLatitudeRef"
    },
    {
      "trigger": "kCGImagePropertyGPSLongitude (CFStringRef)",
      "contents": "KCGImagePropertyGPSLongitude"
    },
    {
      "trigger": "kCGImagePropertyGPSLongitudeRef (CFStringRef)",
      "contents": "KCGImagePropertyGPSLongitudeRef"
    },
    {
      "trigger": "kCGImagePropertyGPSMapDatum (CFStringRef)",
      "contents": "KCGImagePropertyGPSMapDatum"
    },
    {
      "trigger": "kCGImagePropertyGPSMeasureMode (CFStringRef)",
      "contents": "KCGImagePropertyGPSMeasureMode"
    },
    {
      "trigger": "kCGImagePropertyGPSProcessingMethod (CFStringRef)",
      "contents": "KCGImagePropertyGPSProcessingMethod"
    },
    {
      "trigger": "kCGImagePropertyGPSSatellites (CFStringRef)",
      "contents": "KCGImagePropertyGPSSatellites"
    },
    {
      "trigger": "kCGImagePropertyGPSSpeed (CFStringRef)",
      "contents": "KCGImagePropertyGPSSpeed"
    },
    {
      "trigger": "kCGImagePropertyGPSSpeedRef (CFStringRef)",
      "contents": "KCGImagePropertyGPSSpeedRef"
    },
    {
      "trigger": "kCGImagePropertyGPSStatus (CFStringRef)",
      "contents": "KCGImagePropertyGPSStatus"
    },
    {
      "trigger": "kCGImagePropertyGPSTimeStamp (CFStringRef)",
      "contents": "KCGImagePropertyGPSTimeStamp"
    },
    {
      "trigger": "kCGImagePropertyGPSTrack (CFStringRef)",
      "contents": "KCGImagePropertyGPSTrack"
    },
    {
      "trigger": "kCGImagePropertyGPSTrackRef (CFStringRef)",
      "contents": "KCGImagePropertyGPSTrackRef"
    },
    {
      "trigger": "kCGImagePropertyGPSVersion (CFStringRef)",
      "contents": "KCGImagePropertyGPSVersion"
    },
    {
      "trigger": "kCGImagePropertyHasAlpha (CFStringRef)",
      "contents": "KCGImagePropertyHasAlpha"
    },
    {
      "trigger": "kCGImagePropertyIPTCActionAdvised (CFStringRef)",
      "contents": "KCGImagePropertyIPTCActionAdvised"
    },
    {
      "trigger": "kCGImagePropertyIPTCByline (CFStringRef)",
      "contents": "KCGImagePropertyIPTCByline"
    },
    {
      "trigger": "kCGImagePropertyIPTCBylineTitle (CFStringRef)",
      "contents": "KCGImagePropertyIPTCBylineTitle"
    },
    {
      "trigger": "kCGImagePropertyIPTCCaptionAbstract (CFStringRef)",
      "contents": "KCGImagePropertyIPTCCaptionAbstract"
    },
    {
      "trigger": "kCGImagePropertyIPTCCategory (CFStringRef)",
      "contents": "KCGImagePropertyIPTCCategory"
    },
    {
      "trigger": "kCGImagePropertyIPTCCity (CFStringRef)",
      "contents": "KCGImagePropertyIPTCCity"
    },
    {
      "trigger": "kCGImagePropertyIPTCContact (CFStringRef)",
      "contents": "KCGImagePropertyIPTCContact"
    },
    {
      "trigger": "kCGImagePropertyIPTCContactInfoAddress (CFStringRef)",
      "contents": "KCGImagePropertyIPTCContactInfoAddress"
    },
    {
      "trigger": "kCGImagePropertyIPTCContactInfoCity (CFStringRef)",
      "contents": "KCGImagePropertyIPTCContactInfoCity"
    },
    {
      "trigger": "kCGImagePropertyIPTCContactInfoCountry (CFStringRef)",
      "contents": "KCGImagePropertyIPTCContactInfoCountry"
    },
    {
      "trigger": "kCGImagePropertyIPTCContactInfoEmails (CFStringRef)",
      "contents": "KCGImagePropertyIPTCContactInfoEmails"
    },
    {
      "trigger": "kCGImagePropertyIPTCContactInfoPhones (CFStringRef)",
      "contents": "KCGImagePropertyIPTCContactInfoPhones"
    },
    {
      "trigger": "kCGImagePropertyIPTCContactInfoPostalCode (CFStringRef)",
      "contents": "KCGImagePropertyIPTCContactInfoPostalCode"
    },
    {
      "trigger": "kCGImagePropertyIPTCContactInfoStateProvince (CFStringRef)",
      "contents": "KCGImagePropertyIPTCContactInfoStateProvince"
    },
    {
      "trigger": "kCGImagePropertyIPTCContactInfoWebURLs (CFStringRef)",
      "contents": "KCGImagePropertyIPTCContactInfoWebURLs"
    },
    {
      "trigger": "kCGImagePropertyIPTCContentLocationCode (CFStringRef)",
      "contents": "KCGImagePropertyIPTCContentLocationCode"
    },
    {
      "trigger": "kCGImagePropertyIPTCContentLocationName (CFStringRef)",
      "contents": "KCGImagePropertyIPTCContentLocationName"
    },
    {
      "trigger": "kCGImagePropertyIPTCCopyrightNotice (CFStringRef)",
      "contents": "KCGImagePropertyIPTCCopyrightNotice"
    },
    {
      "trigger": "kCGImagePropertyIPTCCountryPrimaryLocationCode (CFStringRef)",
      "contents": "KCGImagePropertyIPTCCountryPrimaryLocationCode"
    },
    {
      "trigger": "kCGImagePropertyIPTCCountryPrimaryLocationName (CFStringRef)",
      "contents": "KCGImagePropertyIPTCCountryPrimaryLocationName"
    },
    {
      "trigger": "kCGImagePropertyIPTCCreatorContactInfo (CFStringRef)",
      "contents": "KCGImagePropertyIPTCCreatorContactInfo"
    },
    {
      "trigger": "kCGImagePropertyIPTCCredit (CFStringRef)",
      "contents": "KCGImagePropertyIPTCCredit"
    },
    {
      "trigger": "kCGImagePropertyIPTCDateCreated (CFStringRef)",
      "contents": "KCGImagePropertyIPTCDateCreated"
    },
    {
      "trigger": "kCGImagePropertyIPTCDictionary (CFStringRef)",
      "contents": "KCGImagePropertyIPTCDictionary"
    },
    {
      "trigger": "kCGImagePropertyIPTCDigitalCreationDate (CFStringRef)",
      "contents": "KCGImagePropertyIPTCDigitalCreationDate"
    },
    {
      "trigger": "kCGImagePropertyIPTCDigitalCreationTime (CFStringRef)",
      "contents": "KCGImagePropertyIPTCDigitalCreationTime"
    },
    {
      "trigger": "kCGImagePropertyIPTCEditStatus (CFStringRef)",
      "contents": "KCGImagePropertyIPTCEditStatus"
    },
    {
      "trigger": "kCGImagePropertyIPTCEditorialUpdate (CFStringRef)",
      "contents": "KCGImagePropertyIPTCEditorialUpdate"
    },
    {
      "trigger": "kCGImagePropertyIPTCExpirationDate (CFStringRef)",
      "contents": "KCGImagePropertyIPTCExpirationDate"
    },
    {
      "trigger": "kCGImagePropertyIPTCExpirationTime (CFStringRef)",
      "contents": "KCGImagePropertyIPTCExpirationTime"
    },
    {
      "trigger": "kCGImagePropertyIPTCFixtureIdentifier (CFStringRef)",
      "contents": "KCGImagePropertyIPTCFixtureIdentifier"
    },
    {
      "trigger": "kCGImagePropertyIPTCHeadline (CFStringRef)",
      "contents": "KCGImagePropertyIPTCHeadline"
    },
    {
      "trigger": "kCGImagePropertyIPTCImageOrientation (CFStringRef)",
      "contents": "KCGImagePropertyIPTCImageOrientation"
    },
    {
      "trigger": "kCGImagePropertyIPTCImageType (CFStringRef)",
      "contents": "KCGImagePropertyIPTCImageType"
    },
    {
      "trigger": "kCGImagePropertyIPTCKeywords (CFStringRef)",
      "contents": "KCGImagePropertyIPTCKeywords"
    },
    {
      "trigger": "kCGImagePropertyIPTCLanguageIdentifier (CFStringRef)",
      "contents": "KCGImagePropertyIPTCLanguageIdentifier"
    },
    {
      "trigger": "kCGImagePropertyIPTCObjectAttributeReference (CFStringRef)",
      "contents": "KCGImagePropertyIPTCObjectAttributeReference"
    },
    {
      "trigger": "kCGImagePropertyIPTCObjectCycle (CFStringRef)",
      "contents": "KCGImagePropertyIPTCObjectCycle"
    },
    {
      "trigger": "kCGImagePropertyIPTCObjectName (CFStringRef)",
      "contents": "KCGImagePropertyIPTCObjectName"
    },
    {
      "trigger": "kCGImagePropertyIPTCObjectTypeReference (CFStringRef)",
      "contents": "KCGImagePropertyIPTCObjectTypeReference"
    },
    {
      "trigger": "kCGImagePropertyIPTCOriginalTransmissionReference (CFStringRef)",
      "contents": "KCGImagePropertyIPTCOriginalTransmissionReference"
    },
    {
      "trigger": "kCGImagePropertyIPTCOriginatingProgram (CFStringRef)",
      "contents": "KCGImagePropertyIPTCOriginatingProgram"
    },
    {
      "trigger": "kCGImagePropertyIPTCProgramVersion (CFStringRef)",
      "contents": "KCGImagePropertyIPTCProgramVersion"
    },
    {
      "trigger": "kCGImagePropertyIPTCProvinceState (CFStringRef)",
      "contents": "KCGImagePropertyIPTCProvinceState"
    },
    {
      "trigger": "kCGImagePropertyIPTCReferenceDate (CFStringRef)",
      "contents": "KCGImagePropertyIPTCReferenceDate"
    },
    {
      "trigger": "kCGImagePropertyIPTCReferenceNumber (CFStringRef)",
      "contents": "KCGImagePropertyIPTCReferenceNumber"
    },
    {
      "trigger": "kCGImagePropertyIPTCReferenceService (CFStringRef)",
      "contents": "KCGImagePropertyIPTCReferenceService"
    },
    {
      "trigger": "kCGImagePropertyIPTCReleaseDate (CFStringRef)",
      "contents": "KCGImagePropertyIPTCReleaseDate"
    },
    {
      "trigger": "kCGImagePropertyIPTCReleaseTime (CFStringRef)",
      "contents": "KCGImagePropertyIPTCReleaseTime"
    },
    {
      "trigger": "kCGImagePropertyIPTCRightsUsageTerms (CFStringRef)",
      "contents": "KCGImagePropertyIPTCRightsUsageTerms"
    },
    {
      "trigger": "kCGImagePropertyIPTCScene (CFStringRef)",
      "contents": "KCGImagePropertyIPTCScene"
    },
    {
      "trigger": "kCGImagePropertyIPTCSource (CFStringRef)",
      "contents": "KCGImagePropertyIPTCSource"
    },
    {
      "trigger": "kCGImagePropertyIPTCSpecialInstructions (CFStringRef)",
      "contents": "KCGImagePropertyIPTCSpecialInstructions"
    },
    {
      "trigger": "kCGImagePropertyIPTCStarRating (CFStringRef)",
      "contents": "KCGImagePropertyIPTCStarRating"
    },
    {
      "trigger": "kCGImagePropertyIPTCSubLocation (CFStringRef)",
      "contents": "KCGImagePropertyIPTCSubLocation"
    },
    {
      "trigger": "kCGImagePropertyIPTCSubjectReference (CFStringRef)",
      "contents": "KCGImagePropertyIPTCSubjectReference"
    },
    {
      "trigger": "kCGImagePropertyIPTCSupplementalCategory (CFStringRef)",
      "contents": "KCGImagePropertyIPTCSupplementalCategory"
    },
    {
      "trigger": "kCGImagePropertyIPTCTimeCreated (CFStringRef)",
      "contents": "KCGImagePropertyIPTCTimeCreated"
    },
    {
      "trigger": "kCGImagePropertyIPTCUrgency (CFStringRef)",
      "contents": "KCGImagePropertyIPTCUrgency"
    },
    {
      "trigger": "kCGImagePropertyIPTCWriterEditor (CFStringRef)",
      "contents": "KCGImagePropertyIPTCWriterEditor"
    },
    {
      "trigger": "kCGImagePropertyIsFloat (CFStringRef)",
      "contents": "KCGImagePropertyIsFloat"
    },
    {
      "trigger": "kCGImagePropertyIsIndexed (CFStringRef)",
      "contents": "KCGImagePropertyIsIndexed"
    },
    {
      "trigger": "kCGImagePropertyJFIFDensityUnit (CFStringRef)",
      "contents": "KCGImagePropertyJFIFDensityUnit"
    },
    {
      "trigger": "kCGImagePropertyJFIFDictionary (CFStringRef)",
      "contents": "KCGImagePropertyJFIFDictionary"
    },
    {
      "trigger": "kCGImagePropertyJFIFIsProgressive (CFStringRef)",
      "contents": "KCGImagePropertyJFIFIsProgressive"
    },
    {
      "trigger": "kCGImagePropertyJFIFVersion (CFStringRef)",
      "contents": "KCGImagePropertyJFIFVersion"
    },
    {
      "trigger": "kCGImagePropertyJFIFXDensity (CFStringRef)",
      "contents": "KCGImagePropertyJFIFXDensity"
    },
    {
      "trigger": "kCGImagePropertyJFIFYDensity (CFStringRef)",
      "contents": "KCGImagePropertyJFIFYDensity"
    },
    {
      "trigger": "kCGImagePropertyMakerCanonAspectRatioInfo (CFStringRef)",
      "contents": "KCGImagePropertyMakerCanonAspectRatioInfo"
    },
    {
      "trigger": "kCGImagePropertyMakerCanonCameraSerialNumber (CFStringRef)",
      "contents": "KCGImagePropertyMakerCanonCameraSerialNumber"
    },
    {
      "trigger": "kCGImagePropertyMakerCanonContinuousDrive (CFStringRef)",
      "contents": "KCGImagePropertyMakerCanonContinuousDrive"
    },
    {
      "trigger": "kCGImagePropertyMakerCanonDictionary (CFStringRef)",
      "contents": "KCGImagePropertyMakerCanonDictionary"
    },
    {
      "trigger": "kCGImagePropertyMakerCanonFirmware (CFStringRef)",
      "contents": "KCGImagePropertyMakerCanonFirmware"
    },
    {
      "trigger": "kCGImagePropertyMakerCanonFlashExposureComp (CFStringRef)",
      "contents": "KCGImagePropertyMakerCanonFlashExposureComp"
    },
    {
      "trigger": "kCGImagePropertyMakerCanonImageSerialNumber (CFStringRef)",
      "contents": "KCGImagePropertyMakerCanonImageSerialNumber"
    },
    {
      "trigger": "kCGImagePropertyMakerCanonLensModel (CFStringRef)",
      "contents": "KCGImagePropertyMakerCanonLensModel"
    },
    {
      "trigger": "kCGImagePropertyMakerCanonOwnerName (CFStringRef)",
      "contents": "KCGImagePropertyMakerCanonOwnerName"
    },
    {
      "trigger": "kCGImagePropertyMakerFujiDictionary (CFStringRef)",
      "contents": "KCGImagePropertyMakerFujiDictionary"
    },
    {
      "trigger": "kCGImagePropertyMakerMinoltaDictionary (CFStringRef)",
      "contents": "KCGImagePropertyMakerMinoltaDictionary"
    },
    {
      "trigger": "kCGImagePropertyMakerNikonCameraSerialNumber (CFStringRef)",
      "contents": "KCGImagePropertyMakerNikonCameraSerialNumber"
    },
    {
      "trigger": "kCGImagePropertyMakerNikonColorMode (CFStringRef)",
      "contents": "KCGImagePropertyMakerNikonColorMode"
    },
    {
      "trigger": "kCGImagePropertyMakerNikonDictionary (CFStringRef)",
      "contents": "KCGImagePropertyMakerNikonDictionary"
    },
    {
      "trigger": "kCGImagePropertyMakerNikonDigitalZoom (CFStringRef)",
      "contents": "KCGImagePropertyMakerNikonDigitalZoom"
    },
    {
      "trigger": "kCGImagePropertyMakerNikonFlashExposureComp (CFStringRef)",
      "contents": "KCGImagePropertyMakerNikonFlashExposureComp"
    },
    {
      "trigger": "kCGImagePropertyMakerNikonFlashSetting (CFStringRef)",
      "contents": "KCGImagePropertyMakerNikonFlashSetting"
    },
    {
      "trigger": "kCGImagePropertyMakerNikonFocusDistance (CFStringRef)",
      "contents": "KCGImagePropertyMakerNikonFocusDistance"
    },
    {
      "trigger": "kCGImagePropertyMakerNikonFocusMode (CFStringRef)",
      "contents": "KCGImagePropertyMakerNikonFocusMode"
    },
    {
      "trigger": "kCGImagePropertyMakerNikonISOSelection (CFStringRef)",
      "contents": "KCGImagePropertyMakerNikonISOSelection"
    },
    {
      "trigger": "kCGImagePropertyMakerNikonISOSetting (CFStringRef)",
      "contents": "KCGImagePropertyMakerNikonISOSetting"
    },
    {
      "trigger": "kCGImagePropertyMakerNikonImageAdjustment (CFStringRef)",
      "contents": "KCGImagePropertyMakerNikonImageAdjustment"
    },
    {
      "trigger": "kCGImagePropertyMakerNikonLensAdapter (CFStringRef)",
      "contents": "KCGImagePropertyMakerNikonLensAdapter"
    },
    {
      "trigger": "kCGImagePropertyMakerNikonLensInfo (CFStringRef)",
      "contents": "KCGImagePropertyMakerNikonLensInfo"
    },
    {
      "trigger": "kCGImagePropertyMakerNikonLensType (CFStringRef)",
      "contents": "KCGImagePropertyMakerNikonLensType"
    },
    {
      "trigger": "kCGImagePropertyMakerNikonQuality (CFStringRef)",
      "contents": "KCGImagePropertyMakerNikonQuality"
    },
    {
      "trigger": "kCGImagePropertyMakerNikonSharpenMode (CFStringRef)",
      "contents": "KCGImagePropertyMakerNikonSharpenMode"
    },
    {
      "trigger": "kCGImagePropertyMakerNikonShootingMode (CFStringRef)",
      "contents": "KCGImagePropertyMakerNikonShootingMode"
    },
    {
      "trigger": "kCGImagePropertyMakerNikonShutterCount (CFStringRef)",
      "contents": "KCGImagePropertyMakerNikonShutterCount"
    },
    {
      "trigger": "kCGImagePropertyMakerNikonWhiteBalanceMode (CFStringRef)",
      "contents": "KCGImagePropertyMakerNikonWhiteBalanceMode"
    },
    {
      "trigger": "kCGImagePropertyMakerOlympusDictionary (CFStringRef)",
      "contents": "KCGImagePropertyMakerOlympusDictionary"
    },
    {
      "trigger": "kCGImagePropertyMakerPentaxDictionary (CFStringRef)",
      "contents": "KCGImagePropertyMakerPentaxDictionary"
    },
    {
      "trigger": "kCGImagePropertyOrientation (CFStringRef)",
      "contents": "KCGImagePropertyOrientation"
    },
    {
      "trigger": "kCGImagePropertyPNGAuthor (CFStringRef)",
      "contents": "KCGImagePropertyPNGAuthor"
    },
    {
      "trigger": "kCGImagePropertyPNGChromaticities (CFStringRef)",
      "contents": "KCGImagePropertyPNGChromaticities"
    },
    {
      "trigger": "kCGImagePropertyPNGCopyright (CFStringRef)",
      "contents": "KCGImagePropertyPNGCopyright"
    },
    {
      "trigger": "kCGImagePropertyPNGCreationTime (CFStringRef)",
      "contents": "KCGImagePropertyPNGCreationTime"
    },
    {
      "trigger": "kCGImagePropertyPNGDescription (CFStringRef)",
      "contents": "KCGImagePropertyPNGDescription"
    },
    {
      "trigger": "kCGImagePropertyPNGDictionary (CFStringRef)",
      "contents": "KCGImagePropertyPNGDictionary"
    },
    {
      "trigger": "kCGImagePropertyPNGGamma (CFStringRef)",
      "contents": "KCGImagePropertyPNGGamma"
    },
    {
      "trigger": "kCGImagePropertyPNGInterlaceType (CFStringRef)",
      "contents": "KCGImagePropertyPNGInterlaceType"
    },
    {
      "trigger": "kCGImagePropertyPNGModificationTime (CFStringRef)",
      "contents": "KCGImagePropertyPNGModificationTime"
    },
    {
      "trigger": "kCGImagePropertyPNGSoftware (CFStringRef)",
      "contents": "KCGImagePropertyPNGSoftware"
    },
    {
      "trigger": "kCGImagePropertyPNGTitle (CFStringRef)",
      "contents": "KCGImagePropertyPNGTitle"
    },
    {
      "trigger": "kCGImagePropertyPNGXPixelsPerMeter (CFStringRef)",
      "contents": "KCGImagePropertyPNGXPixelsPerMeter"
    },
    {
      "trigger": "kCGImagePropertyPNGYPixelsPerMeter (CFStringRef)",
      "contents": "KCGImagePropertyPNGYPixelsPerMeter"
    },
    {
      "trigger": "kCGImagePropertyPNGsRGBIntent (CFStringRef)",
      "contents": "KCGImagePropertyPNGsRGBIntent"
    },
    {
      "trigger": "kCGImagePropertyPixelHeight (CFStringRef)",
      "contents": "KCGImagePropertyPixelHeight"
    },
    {
      "trigger": "kCGImagePropertyPixelWidth (CFStringRef)",
      "contents": "KCGImagePropertyPixelWidth"
    },
    {
      "trigger": "kCGImagePropertyProfileName (CFStringRef)",
      "contents": "KCGImagePropertyProfileName"
    },
    {
      "trigger": "kCGImagePropertyRawDictionary (CFStringRef)",
      "contents": "KCGImagePropertyRawDictionary"
    },
    {
      "trigger": "kCGImagePropertyTIFFArtist (CFStringRef)",
      "contents": "KCGImagePropertyTIFFArtist"
    },
    {
      "trigger": "kCGImagePropertyTIFFCompression (CFStringRef)",
      "contents": "KCGImagePropertyTIFFCompression"
    },
    {
      "trigger": "kCGImagePropertyTIFFCopyright (CFStringRef)",
      "contents": "KCGImagePropertyTIFFCopyright"
    },
    {
      "trigger": "kCGImagePropertyTIFFDateTime (CFStringRef)",
      "contents": "KCGImagePropertyTIFFDateTime"
    },
    {
      "trigger": "kCGImagePropertyTIFFDictionary (CFStringRef)",
      "contents": "KCGImagePropertyTIFFDictionary"
    },
    {
      "trigger": "kCGImagePropertyTIFFDocumentName (CFStringRef)",
      "contents": "KCGImagePropertyTIFFDocumentName"
    },
    {
      "trigger": "kCGImagePropertyTIFFHostComputer (CFStringRef)",
      "contents": "KCGImagePropertyTIFFHostComputer"
    },
    {
      "trigger": "kCGImagePropertyTIFFImageDescription (CFStringRef)",
      "contents": "KCGImagePropertyTIFFImageDescription"
    },
    {
      "trigger": "kCGImagePropertyTIFFMake (CFStringRef)",
      "contents": "KCGImagePropertyTIFFMake"
    },
    {
      "trigger": "kCGImagePropertyTIFFModel (CFStringRef)",
      "contents": "KCGImagePropertyTIFFModel"
    },
    {
      "trigger": "kCGImagePropertyTIFFOrientation (CFStringRef)",
      "contents": "KCGImagePropertyTIFFOrientation"
    },
    {
      "trigger": "kCGImagePropertyTIFFPhotometricInterpretation (CFStringRef)",
      "contents": "KCGImagePropertyTIFFPhotometricInterpretation"
    },
    {
      "trigger": "kCGImagePropertyTIFFPrimaryChromaticities (CFStringRef)",
      "contents": "KCGImagePropertyTIFFPrimaryChromaticities"
    },
    {
      "trigger": "kCGImagePropertyTIFFResolutionUnit (CFStringRef)",
      "contents": "KCGImagePropertyTIFFResolutionUnit"
    },
    {
      "trigger": "kCGImagePropertyTIFFSoftware (CFStringRef)",
      "contents": "KCGImagePropertyTIFFSoftware"
    },
    {
      "trigger": "kCGImagePropertyTIFFTransferFunction (CFStringRef)",
      "contents": "KCGImagePropertyTIFFTransferFunction"
    },
    {
      "trigger": "kCGImagePropertyTIFFWhitePoint (CFStringRef)",
      "contents": "KCGImagePropertyTIFFWhitePoint"
    },
    {
      "trigger": "kCGImagePropertyTIFFXResolution (CFStringRef)",
      "contents": "KCGImagePropertyTIFFXResolution"
    },
    {
      "trigger": "kCGImagePropertyTIFFYResolution (CFStringRef)",
      "contents": "KCGImagePropertyTIFFYResolution"
    },
    {
      "trigger": "kCGImageSourceCreateThumbnailFromImageAlways (CFStringRef)",
      "contents": "KCGImageSourceCreateThumbnailFromImageAlways"
    },
    {
      "trigger": "kCGImageSourceCreateThumbnailFromImageIfAbsent (CFStringRef)",
      "contents": "KCGImageSourceCreateThumbnailFromImageIfAbsent"
    },
    {
      "trigger": "kCGImageSourceCreateThumbnailWithTransform (CFStringRef)",
      "contents": "KCGImageSourceCreateThumbnailWithTransform"
    },
    {
      "trigger": "kCGImageSourceShouldAllowFloat (CFStringRef)",
      "contents": "KCGImageSourceShouldAllowFloat"
    },
    {
      "trigger": "kCGImageSourceShouldCache (CFStringRef)",
      "contents": "KCGImageSourceShouldCache"
    },
    {
      "trigger": "kCGImageSourceThumbnailMaxPixelSize (CFStringRef)",
      "contents": "KCGImageSourceThumbnailMaxPixelSize"
    },
    {
      "trigger": "kCGImageSourceTypeIdentifierHint (CFStringRef)",
      "contents": "KCGImageSourceTypeIdentifierHint"
    },
    {
      "trigger": "kCGImageStatusComplete (0)",
      "contents": "KCGImageStatusComplete"
    },
    {
      "trigger": "kCGImageStatusIncomplete (-1)",
      "contents": "KCGImageStatusIncomplete"
    },
    {
      "trigger": "kCGImageStatusInvalidData (-4)",
      "contents": "KCGImageStatusInvalidData"
    },
    {
      "trigger": "kCGImageStatusReadingHeader (-2)",
      "contents": "KCGImageStatusReadingHeader"
    },
    {
      "trigger": "kCGImageStatusUnexpectedEOF (-5)",
      "contents": "KCGImageStatusUnexpectedEOF"
    },
    {
      "trigger": "kCGImageStatusUnknownType (-3)",
      "contents": "KCGImageStatusUnknownType"
    },
    {
      "trigger": "kCGInterpolationDefault (0)",
      "contents": "KCGInterpolationDefault"
    },
    {
      "trigger": "kCGInterpolationHigh (3)",
      "contents": "KCGInterpolationHigh"
    },
    {
      "trigger": "kCGInterpolationLow (2)",
      "contents": "KCGInterpolationLow"
    },
    {
      "trigger": "kCGInterpolationMedium (4)",
      "contents": "KCGInterpolationMedium"
    },
    {
      "trigger": "kCGInterpolationNone (1)",
      "contents": "KCGInterpolationNone"
    },
    {
      "trigger": "kCGLineCapButt (0)",
      "contents": "KCGLineCapButt"
    },
    {
      "trigger": "kCGLineCapRound (1)",
      "contents": "KCGLineCapRound"
    },
    {
      "trigger": "kCGLineCapSquare (2)",
      "contents": "KCGLineCapSquare"
    },
    {
      "trigger": "kCGLineJoinBevel (2)",
      "contents": "KCGLineJoinBevel"
    },
    {
      "trigger": "kCGLineJoinMiter (0)",
      "contents": "KCGLineJoinMiter"
    },
    {
      "trigger": "kCGLineJoinRound (1)",
      "contents": "KCGLineJoinRound"
    },
    {
      "trigger": "kCGPDFArtBox (4)",
      "contents": "KCGPDFArtBox"
    },
    {
      "trigger": "kCGPDFBleedBox (2)",
      "contents": "KCGPDFBleedBox"
    },
    {
      "trigger": "kCGPDFContextAllowsCopying (CFStringRef)",
      "contents": "KCGPDFContextAllowsCopying"
    },
    {
      "trigger": "kCGPDFContextAllowsPrinting (CFStringRef)",
      "contents": "KCGPDFContextAllowsPrinting"
    },
    {
      "trigger": "kCGPDFContextArtBox (CFStringRef)",
      "contents": "KCGPDFContextArtBox"
    },
    {
      "trigger": "kCGPDFContextAuthor (CFStringRef)",
      "contents": "KCGPDFContextAuthor"
    },
    {
      "trigger": "kCGPDFContextBleedBox (CFStringRef)",
      "contents": "KCGPDFContextBleedBox"
    },
    {
      "trigger": "kCGPDFContextCreator (CFStringRef)",
      "contents": "KCGPDFContextCreator"
    },
    {
      "trigger": "kCGPDFContextCropBox (CFStringRef)",
      "contents": "KCGPDFContextCropBox"
    },
    {
      "trigger": "kCGPDFContextEncryptionKeyLength (CFStringRef)",
      "contents": "KCGPDFContextEncryptionKeyLength"
    },
    {
      "trigger": "kCGPDFContextKeywords (CFStringRef)",
      "contents": "KCGPDFContextKeywords"
    },
    {
      "trigger": "kCGPDFContextMediaBox (CFStringRef)",
      "contents": "KCGPDFContextMediaBox"
    },
    {
      "trigger": "kCGPDFContextOwnerPassword (CFStringRef)",
      "contents": "KCGPDFContextOwnerPassword"
    },
    {
      "trigger": "kCGPDFContextSubject (CFStringRef)",
      "contents": "KCGPDFContextSubject"
    },
    {
      "trigger": "kCGPDFContextTitle (CFStringRef)",
      "contents": "KCGPDFContextTitle"
    },
    {
      "trigger": "kCGPDFContextTrimBox (CFStringRef)",
      "contents": "KCGPDFContextTrimBox"
    },
    {
      "trigger": "kCGPDFContextUserPassword (CFStringRef)",
      "contents": "KCGPDFContextUserPassword"
    },
    {
      "trigger": "kCGPDFCropBox (1)",
      "contents": "KCGPDFCropBox"
    },
    {
      "trigger": "kCGPDFMediaBox (0)",
      "contents": "KCGPDFMediaBox"
    },
    {
      "trigger": "kCGPDFObjectTypeArray (7)",
      "contents": "KCGPDFObjectTypeArray"
    },
    {
      "trigger": "kCGPDFObjectTypeBoolean (2)",
      "contents": "KCGPDFObjectTypeBoolean"
    },
    {
      "trigger": "kCGPDFObjectTypeDictionary (8)",
      "contents": "KCGPDFObjectTypeDictionary"
    },
    {
      "trigger": "kCGPDFObjectTypeInteger (3)",
      "contents": "KCGPDFObjectTypeInteger"
    },
    {
      "trigger": "kCGPDFObjectTypeName (5)",
      "contents": "KCGPDFObjectTypeName"
    },
    {
      "trigger": "kCGPDFObjectTypeNull (1)",
      "contents": "KCGPDFObjectTypeNull"
    },
    {
      "trigger": "kCGPDFObjectTypeReal (4)",
      "contents": "KCGPDFObjectTypeReal"
    },
    {
      "trigger": "kCGPDFObjectTypeStream (9)",
      "contents": "KCGPDFObjectTypeStream"
    },
    {
      "trigger": "kCGPDFObjectTypeString (6)",
      "contents": "KCGPDFObjectTypeString"
    },
    {
      "trigger": "kCGPDFTrimBox (3)",
      "contents": "KCGPDFTrimBox"
    },
    {
      "trigger": "kCGPathEOFill (1)",
      "contents": "KCGPathEOFill"
    },
    {
      "trigger": "kCGPathEOFillStroke (4)",
      "contents": "KCGPathEOFillStroke"
    },
    {
      "trigger": "kCGPathElementAddCurveToPoint (3)",
      "contents": "KCGPathElementAddCurveToPoint"
    },
    {
      "trigger": "kCGPathElementAddLineToPoint (1)",
      "contents": "KCGPathElementAddLineToPoint"
    },
    {
      "trigger": "kCGPathElementAddQuadCurveToPoint (2)",
      "contents": "KCGPathElementAddQuadCurveToPoint"
    },
    {
      "trigger": "kCGPathElementCloseSubpath (4)",
      "contents": "KCGPathElementCloseSubpath"
    },
    {
      "trigger": "kCGPathElementMoveToPoint (0)",
      "contents": "KCGPathElementMoveToPoint"
    },
    {
      "trigger": "kCGPathFill (0)",
      "contents": "KCGPathFill"
    },
    {
      "trigger": "kCGPathFillStroke (3)",
      "contents": "KCGPathFillStroke"
    },
    {
      "trigger": "kCGPathStroke (2)",
      "contents": "KCGPathStroke"
    },
    {
      "trigger": "kCGPatternTilingConstantSpacing (2)",
      "contents": "KCGPatternTilingConstantSpacing"
    },
    {
      "trigger": "kCGPatternTilingConstantSpacingMinimalDistortion (1)",
      "contents": "KCGPatternTilingConstantSpacingMinimalDistortion"
    },
    {
      "trigger": "kCGPatternTilingNoDistortion (0)",
      "contents": "KCGPatternTilingNoDistortion"
    },
    {
      "trigger": "kCGRenderingIntentAbsoluteColorimetric (1)",
      "contents": "KCGRenderingIntentAbsoluteColorimetric"
    },
    {
      "trigger": "kCGRenderingIntentDefault (0)",
      "contents": "KCGRenderingIntentDefault"
    },
    {
      "trigger": "kCGRenderingIntentPerceptual (3)",
      "contents": "KCGRenderingIntentPerceptual"
    },
    {
      "trigger": "kCGRenderingIntentRelativeColorimetric (2)",
      "contents": "KCGRenderingIntentRelativeColorimetric"
    },
    {
      "trigger": "kCGRenderingIntentSaturation (4)",
      "contents": "KCGRenderingIntentSaturation"
    },
    {
      "trigger": "kCGTextClip (7)",
      "contents": "KCGTextClip"
    },
    {
      "trigger": "kCGTextFill (0)",
      "contents": "KCGTextFill"
    },
    {
      "trigger": "kCGTextFillClip (4)",
      "contents": "KCGTextFillClip"
    },
    {
      "trigger": "kCGTextFillStroke (2)",
      "contents": "KCGTextFillStroke"
    },
    {
      "trigger": "kCGTextFillStrokeClip (6)",
      "contents": "KCGTextFillStrokeClip"
    },
    {
      "trigger": "kCGTextInvisible (3)",
      "contents": "KCGTextInvisible"
    },
    {
      "trigger": "kCGTextStroke (1)",
      "contents": "KCGTextStroke"
    },
    {
      "trigger": "kCGTextStrokeClip (5)",
      "contents": "KCGTextStrokeClip"
    },
    {
      "trigger": "kCIAttributeClass (NSString*)",
      "contents": "KCIAttributeClass"
    },
    {
      "trigger": "kCIAttributeDefault (NSString*)",
      "contents": "KCIAttributeDefault"
    },
    {
      "trigger": "kCIAttributeDisplayName (NSString*)",
      "contents": "KCIAttributeDisplayName"
    },
    {
      "trigger": "kCIAttributeFilterCategories (NSString*)",
      "contents": "KCIAttributeFilterCategories"
    },
    {
      "trigger": "kCIAttributeFilterDisplayName (NSString*)",
      "contents": "KCIAttributeFilterDisplayName"
    },
    {
      "trigger": "kCIAttributeFilterName (NSString*)",
      "contents": "KCIAttributeFilterName"
    },
    {
      "trigger": "kCIAttributeIdentity (NSString*)",
      "contents": "KCIAttributeIdentity"
    },
    {
      "trigger": "kCIAttributeMax (NSString*)",
      "contents": "KCIAttributeMax"
    },
    {
      "trigger": "kCIAttributeMin (NSString*)",
      "contents": "KCIAttributeMin"
    },
    {
      "trigger": "kCIAttributeName (NSString*)",
      "contents": "KCIAttributeName"
    },
    {
      "trigger": "kCIAttributeSliderMax (NSString*)",
      "contents": "KCIAttributeSliderMax"
    },
    {
      "trigger": "kCIAttributeSliderMin (NSString*)",
      "contents": "KCIAttributeSliderMin"
    },
    {
      "trigger": "kCIAttributeType (NSString*)",
      "contents": "KCIAttributeType"
    },
    {
      "trigger": "kCIAttributeTypeAngle (NSString*)",
      "contents": "KCIAttributeTypeAngle"
    },
    {
      "trigger": "kCIAttributeTypeBoolean (NSString*)",
      "contents": "KCIAttributeTypeBoolean"
    },
    {
      "trigger": "kCIAttributeTypeColor (NSString*)",
      "contents": "KCIAttributeTypeColor"
    },
    {
      "trigger": "kCIAttributeTypeCount (NSString*)",
      "contents": "KCIAttributeTypeCount"
    },
    {
      "trigger": "kCIAttributeTypeDistance (NSString*)",
      "contents": "KCIAttributeTypeDistance"
    },
    {
      "trigger": "kCIAttributeTypeImage (NSString*)",
      "contents": "KCIAttributeTypeImage"
    },
    {
      "trigger": "kCIAttributeTypeInteger (NSString*)",
      "contents": "KCIAttributeTypeInteger"
    },
    {
      "trigger": "kCIAttributeTypeOffset (NSString*)",
      "contents": "KCIAttributeTypeOffset"
    },
    {
      "trigger": "kCIAttributeTypePosition (NSString*)",
      "contents": "KCIAttributeTypePosition"
    },
    {
      "trigger": "kCIAttributeTypePosition3 (NSString*)",
      "contents": "KCIAttributeTypePosition3"
    },
    {
      "trigger": "kCIAttributeTypeRectangle (NSString*)",
      "contents": "KCIAttributeTypeRectangle"
    },
    {
      "trigger": "kCIAttributeTypeScalar (NSString*)",
      "contents": "KCIAttributeTypeScalar"
    },
    {
      "trigger": "kCIAttributeTypeTime (NSString*)",
      "contents": "KCIAttributeTypeTime"
    },
    {
      "trigger": "kCIAttributeTypeTransform (NSString*)",
      "contents": "KCIAttributeTypeTransform"
    },
    {
      "trigger": "kCICategoryApplePrivate (NSString*)",
      "contents": "KCICategoryApplePrivate"
    },
    {
      "trigger": "kCICategoryBlur (NSString*)",
      "contents": "KCICategoryBlur"
    },
    {
      "trigger": "kCICategoryBuiltIn (NSString*)",
      "contents": "KCICategoryBuiltIn"
    },
    {
      "trigger": "kCICategoryColorAdjustment (NSString*)",
      "contents": "KCICategoryColorAdjustment"
    },
    {
      "trigger": "kCICategoryColorEffect (NSString*)",
      "contents": "KCICategoryColorEffect"
    },
    {
      "trigger": "kCICategoryCompositeOperation (NSString*)",
      "contents": "KCICategoryCompositeOperation"
    },
    {
      "trigger": "kCICategoryDistortionEffect (NSString*)",
      "contents": "KCICategoryDistortionEffect"
    },
    {
      "trigger": "kCICategoryGenerator (NSString*)",
      "contents": "KCICategoryGenerator"
    },
    {
      "trigger": "kCICategoryGeometryAdjustment (NSString*)",
      "contents": "KCICategoryGeometryAdjustment"
    },
    {
      "trigger": "kCICategoryGradient (NSString*)",
      "contents": "KCICategoryGradient"
    },
    {
      "trigger": "kCICategoryHalftoneEffect (NSString*)",
      "contents": "KCICategoryHalftoneEffect"
    },
    {
      "trigger": "kCICategoryHighDynamicRange (NSString*)",
      "contents": "KCICategoryHighDynamicRange"
    },
    {
      "trigger": "kCICategoryInterlaced (NSString*)",
      "contents": "KCICategoryInterlaced"
    },
    {
      "trigger": "kCICategoryNonSquarePixels (NSString*)",
      "contents": "KCICategoryNonSquarePixels"
    },
    {
      "trigger": "kCICategoryReduction (NSString*)",
      "contents": "KCICategoryReduction"
    },
    {
      "trigger": "kCICategorySharpen (NSString*)",
      "contents": "KCICategorySharpen"
    },
    {
      "trigger": "kCICategoryStillImage (NSString*)",
      "contents": "KCICategoryStillImage"
    },
    {
      "trigger": "kCICategoryStylize (NSString*)",
      "contents": "KCICategoryStylize"
    },
    {
      "trigger": "kCICategoryTileEffect (NSString*)",
      "contents": "KCICategoryTileEffect"
    },
    {
      "trigger": "kCICategoryTransition (NSString*)",
      "contents": "KCICategoryTransition"
    },
    {
      "trigger": "kCICategoryVideo (NSString*)",
      "contents": "KCICategoryVideo"
    },
    {
      "trigger": "kCIContextOutputColorSpace (NSString*)",
      "contents": "KCIContextOutputColorSpace"
    },
    {
      "trigger": "kCIContextUseSoftwareRenderer (NSString*)",
      "contents": "KCIContextUseSoftwareRenderer"
    },
    {
      "trigger": "kCIContextWorkingColorSpace (NSString*)",
      "contents": "KCIContextWorkingColorSpace"
    },
    {
      "trigger": "kCIFormatBGRA8 (CIFormat)",
      "contents": "KCIFormatBGRA8"
    },
    {
      "trigger": "kCIFormatRGBA8 (CIFormat)",
      "contents": "KCIFormatRGBA8"
    },
    {
      "trigger": "kCIImageAutoAdjustEnhance (NSString*)",
      "contents": "KCIImageAutoAdjustEnhance"
    },
    {
      "trigger": "kCIImageAutoAdjustFeatures (NSString*)",
      "contents": "KCIImageAutoAdjustFeatures"
    },
    {
      "trigger": "kCIImageAutoAdjustRedEye (NSString*)",
      "contents": "KCIImageAutoAdjustRedEye"
    },
    {
      "trigger": "kCIImageColorSpace (NSString*)",
      "contents": "KCIImageColorSpace"
    },
    {
      "trigger": "kCIImageProperties (NSString*)",
      "contents": "KCIImageProperties"
    },
    {
      "trigger": "kCIInputBackgroundImageKey (NSString*)",
      "contents": "KCIInputBackgroundImageKey"
    },
    {
      "trigger": "kCIInputImageKey (NSString*)",
      "contents": "KCIInputImageKey"
    },
    {
      "trigger": "kCIOutputImageKey (NSString*)",
      "contents": "KCIOutputImageKey"
    },
    {
      "trigger": "kCJKItalicRomanOffSelector (3)",
      "contents": "KCJKItalicRomanOffSelector"
    },
    {
      "trigger": "kCJKItalicRomanOnSelector (2)",
      "contents": "KCJKItalicRomanOnSelector"
    },
    {
      "trigger": "kCJKItalicRomanSelector (1)",
      "contents": "KCJKItalicRomanSelector"
    },
    {
      "trigger": "kCJKRomanSpacingType (103)",
      "contents": "KCJKRomanSpacingType"
    },
    {
      "trigger": "kCJKSymbolAltFiveSelector (5)",
      "contents": "KCJKSymbolAltFiveSelector"
    },
    {
      "trigger": "kCJKSymbolAltFourSelector (4)",
      "contents": "KCJKSymbolAltFourSelector"
    },
    {
      "trigger": "kCJKSymbolAltOneSelector (1)",
      "contents": "KCJKSymbolAltOneSelector"
    },
    {
      "trigger": "kCJKSymbolAltThreeSelector (3)",
      "contents": "KCJKSymbolAltThreeSelector"
    },
    {
      "trigger": "kCJKSymbolAltTwoSelector (2)",
      "contents": "KCJKSymbolAltTwoSelector"
    },
    {
      "trigger": "kCJKSymbolAlternativesType (29)",
      "contents": "KCJKSymbolAlternativesType"
    },
    {
      "trigger": "kCJKVerticalRomanCenteredSelector (0)",
      "contents": "KCJKVerticalRomanCenteredSelector"
    },
    {
      "trigger": "kCJKVerticalRomanHBaselineSelector (1)",
      "contents": "KCJKVerticalRomanHBaselineSelector"
    },
    {
      "trigger": "kCJKVerticalRomanPlacementType (31)",
      "contents": "KCJKVerticalRomanPlacementType"
    },
    {
      "trigger": "kCLAuthorizationStatusAuthorized (3)",
      "contents": "KCLAuthorizationStatusAuthorized"
    },
    {
      "trigger": "kCLAuthorizationStatusDenied (2)",
      "contents": "KCLAuthorizationStatusDenied"
    },
    {
      "trigger": "kCLAuthorizationStatusNotDetermined (0)",
      "contents": "KCLAuthorizationStatusNotDetermined"
    },
    {
      "trigger": "kCLAuthorizationStatusRestricted (1)",
      "contents": "KCLAuthorizationStatusRestricted"
    },
    {
      "trigger": "kCLDistanceFilterNone (CLLocationDistance)",
      "contents": "KCLDistanceFilterNone"
    },
    {
      "trigger": "kCLErrorDenied (1)",
      "contents": "KCLErrorDenied"
    },
    {
      "trigger": "kCLErrorDomain (NSString*)",
      "contents": "KCLErrorDomain"
    },
    {
      "trigger": "kCLErrorGeocodeCanceled (10)",
      "contents": "KCLErrorGeocodeCanceled"
    },
    {
      "trigger": "kCLErrorGeocodeFoundNoResult (8)",
      "contents": "KCLErrorGeocodeFoundNoResult"
    },
    {
      "trigger": "kCLErrorGeocodeFoundPartialResult (9)",
      "contents": "KCLErrorGeocodeFoundPartialResult"
    },
    {
      "trigger": "kCLErrorHeadingFailure (3)",
      "contents": "KCLErrorHeadingFailure"
    },
    {
      "trigger": "kCLErrorLocationUnknown (0)",
      "contents": "KCLErrorLocationUnknown"
    },
    {
      "trigger": "kCLErrorNetwork (2)",
      "contents": "KCLErrorNetwork"
    },
    {
      "trigger": "kCLErrorRegionMonitoringDenied (4)",
      "contents": "KCLErrorRegionMonitoringDenied"
    },
    {
      "trigger": "kCLErrorRegionMonitoringFailure (5)",
      "contents": "KCLErrorRegionMonitoringFailure"
    },
    {
      "trigger": "kCLErrorRegionMonitoringResponseDelayed (7)",
      "contents": "KCLErrorRegionMonitoringResponseDelayed"
    },
    {
      "trigger": "kCLErrorRegionMonitoringSetupDelayed (6)",
      "contents": "KCLErrorRegionMonitoringSetupDelayed"
    },
    {
      "trigger": "kCLErrorUserInfoAlternateRegionKey (NSString*)",
      "contents": "KCLErrorUserInfoAlternateRegionKey"
    },
    {
      "trigger": "kCLHeadingFilterNone (CLLocationDegrees)",
      "contents": "KCLHeadingFilterNone"
    },
    {
      "trigger": "kCLLocationAccuracyBest (CLLocationAccuracy)",
      "contents": "KCLLocationAccuracyBest"
    },
    {
      "trigger": "kCLLocationAccuracyBestForNavigation (CLLocationAccuracy)",
      "contents": "KCLLocationAccuracyBestForNavigation"
    },
    {
      "trigger": "kCLLocationAccuracyHundredMeters (CLLocationAccuracy)",
      "contents": "KCLLocationAccuracyHundredMeters"
    },
    {
      "trigger": "kCLLocationAccuracyKilometer (CLLocationAccuracy)",
      "contents": "KCLLocationAccuracyKilometer"
    },
    {
      "trigger": "kCLLocationAccuracyNearestTenMeters (CLLocationAccuracy)",
      "contents": "KCLLocationAccuracyNearestTenMeters"
    },
    {
      "trigger": "kCLLocationAccuracyThreeKilometers (CLLocationAccuracy)",
      "contents": "KCLLocationAccuracyThreeKilometers"
    },
    {
      "trigger": "kCLLocationCoordinate2DInvalid (CLLocationCoordinate2D)",
      "contents": "KCLLocationCoordinate2DInvalid"
    },
    {
      "trigger": "kCMAttachmentMode_ShouldNotPropagate (0)",
      "contents": "KCMAttachmentMode_ShouldNotPropagate"
    },
    {
      "trigger": "kCMAttachmentMode_ShouldPropagate (1)",
      "contents": "KCMAttachmentMode_ShouldPropagate"
    },
    {
      "trigger": "kCMAudioCodecType_AAC_AudibleProtected (1633771875)",
      "contents": "KCMAudioCodecType_AAC_AudibleProtected"
    },
    {
      "trigger": "kCMAudioCodecType_AAC_LCProtected (1885430115)",
      "contents": "KCMAudioCodecType_AAC_LCProtected"
    },
    {
      "trigger": "kCMAudioFormatDescriptionMask_All (15)",
      "contents": "KCMAudioFormatDescriptionMask_All"
    },
    {
      "trigger": "kCMAudioFormatDescriptionMask_ChannelLayout (4)",
      "contents": "KCMAudioFormatDescriptionMask_ChannelLayout"
    },
    {
      "trigger": "kCMAudioFormatDescriptionMask_Extensions (8)",
      "contents": "KCMAudioFormatDescriptionMask_Extensions"
    },
    {
      "trigger": "kCMAudioFormatDescriptionMask_MagicCookie (2)",
      "contents": "KCMAudioFormatDescriptionMask_MagicCookie"
    },
    {
      "trigger": "kCMAudioFormatDescriptionMask_StreamBasicDescription (1)",
      "contents": "KCMAudioFormatDescriptionMask_StreamBasicDescription"
    },
    {
      "trigger": "kCMBlockBufferAlwaysCopyDataFlag (2)",
      "contents": "KCMBlockBufferAlwaysCopyDataFlag"
    },
    {
      "trigger": "kCMBlockBufferAssureMemoryNowFlag (1)",
      "contents": "KCMBlockBufferAssureMemoryNowFlag"
    },
    {
      "trigger": "kCMBlockBufferBadCustomBlockSourceErr (-12702)",
      "contents": "KCMBlockBufferBadCustomBlockSourceErr"
    },
    {
      "trigger": "kCMBlockBufferBadLengthParameterErr (-12704)",
      "contents": "KCMBlockBufferBadLengthParameterErr"
    },
    {
      "trigger": "kCMBlockBufferBadOffsetParameterErr (-12703)",
      "contents": "KCMBlockBufferBadOffsetParameterErr"
    },
    {
      "trigger": "kCMBlockBufferBadPointerParameterErr (-12705)",
      "contents": "KCMBlockBufferBadPointerParameterErr"
    },
    {
      "trigger": "kCMBlockBufferBlockAllocationFailedErr (-12701)",
      "contents": "KCMBlockBufferBlockAllocationFailedErr"
    },
    {
      "trigger": "kCMBlockBufferCustomBlockSourceVersion (0)",
      "contents": "KCMBlockBufferCustomBlockSourceVersion"
    },
    {
      "trigger": "kCMBlockBufferDontOptimizeDepthFlag (4)",
      "contents": "KCMBlockBufferDontOptimizeDepthFlag"
    },
    {
      "trigger": "kCMBlockBufferEmptyBBufErr (-12706)",
      "contents": "KCMBlockBufferEmptyBBufErr"
    },
    {
      "trigger": "kCMBlockBufferNoErr (0)",
      "contents": "KCMBlockBufferNoErr"
    },
    {
      "trigger": "kCMBlockBufferPermitEmptyReferenceFlag (8)",
      "contents": "KCMBlockBufferPermitEmptyReferenceFlag"
    },
    {
      "trigger": "kCMBlockBufferStructureAllocationFailedErr (-12700)",
      "contents": "KCMBlockBufferStructureAllocationFailedErr"
    },
    {
      "trigger": "kCMBlockBufferUnallocatedBlockErr (-12707)",
      "contents": "KCMBlockBufferUnallocatedBlockErr"
    },
    {
      "trigger": "kCMBufferQueueError_AllocationFailed (-12760)",
      "contents": "KCMBufferQueueError_AllocationFailed"
    },
    {
      "trigger": "kCMBufferQueueError_BadTriggerDuration (-12765)",
      "contents": "KCMBufferQueueError_BadTriggerDuration"
    },
    {
      "trigger": "kCMBufferQueueError_CannotModifyQueueFromTriggerCallback (-12766)",
      "contents": "KCMBufferQueueError_CannotModifyQueueFromTriggerCallback"
    },
    {
      "trigger": "kCMBufferQueueError_EnqueueAfterEndOfData (-12763)",
      "contents": "KCMBufferQueueError_EnqueueAfterEndOfData"
    },
    {
      "trigger": "kCMBufferQueueError_InvalidBuffer (-12769)",
      "contents": "KCMBufferQueueError_InvalidBuffer"
    },
    {
      "trigger": "kCMBufferQueueError_InvalidCMBufferCallbacksStruct (-12762)",
      "contents": "KCMBufferQueueError_InvalidCMBufferCallbacksStruct"
    },
    {
      "trigger": "kCMBufferQueueError_InvalidTriggerCondition (-12767)",
      "contents": "KCMBufferQueueError_InvalidTriggerCondition"
    },
    {
      "trigger": "kCMBufferQueueError_InvalidTriggerToken (-12768)",
      "contents": "KCMBufferQueueError_InvalidTriggerToken"
    },
    {
      "trigger": "kCMBufferQueueError_QueueIsFull (-12764)",
      "contents": "KCMBufferQueueError_QueueIsFull"
    },
    {
      "trigger": "kCMBufferQueueError_RequiredParameterMissing (-12761)",
      "contents": "KCMBufferQueueError_RequiredParameterMissing"
    },
    {
      "trigger": "kCMBufferQueueTrigger_WhenBufferCountBecomesGreaterThan (11)",
      "contents": "KCMBufferQueueTrigger_WhenBufferCountBecomesGreaterThan"
    },
    {
      "trigger": "kCMBufferQueueTrigger_WhenBufferCountBecomesLessThan (10)",
      "contents": "KCMBufferQueueTrigger_WhenBufferCountBecomesLessThan"
    },
    {
      "trigger": "kCMBufferQueueTrigger_WhenDataBecomesReady (7)",
      "contents": "KCMBufferQueueTrigger_WhenDataBecomesReady"
    },
    {
      "trigger": "kCMBufferQueueTrigger_WhenDurationBecomesGreaterThan (3)",
      "contents": "KCMBufferQueueTrigger_WhenDurationBecomesGreaterThan"
    },
    {
      "trigger": "kCMBufferQueueTrigger_WhenDurationBecomesGreaterThanOrEqualTo (4)",
      "contents": "KCMBufferQueueTrigger_WhenDurationBecomesGreaterThanOrEqualTo"
    },
    {
      "trigger": "kCMBufferQueueTrigger_WhenDurationBecomesLessThan (1)",
      "contents": "KCMBufferQueueTrigger_WhenDurationBecomesLessThan"
    },
    {
      "trigger": "kCMBufferQueueTrigger_WhenDurationBecomesLessThanOrEqualTo (2)",
      "contents": "KCMBufferQueueTrigger_WhenDurationBecomesLessThanOrEqualTo"
    },
    {
      "trigger": "kCMBufferQueueTrigger_WhenEndOfDataReached (8)",
      "contents": "KCMBufferQueueTrigger_WhenEndOfDataReached"
    },
    {
      "trigger": "kCMBufferQueueTrigger_WhenMaxPresentationTimeStampChanges (6)",
      "contents": "KCMBufferQueueTrigger_WhenMaxPresentationTimeStampChanges"
    },
    {
      "trigger": "kCMBufferQueueTrigger_WhenMinPresentationTimeStampChanges (5)",
      "contents": "KCMBufferQueueTrigger_WhenMinPresentationTimeStampChanges"
    },
    {
      "trigger": "kCMBufferQueueTrigger_WhenReset (9)",
      "contents": "KCMBufferQueueTrigger_WhenReset"
    },
    {
      "trigger": "kCMClosedCaptionFormatType_ATSC (1635017571)",
      "contents": "KCMClosedCaptionFormatType_ATSC"
    },
    {
      "trigger": "kCMClosedCaptionFormatType_CEA608 (1664495672)",
      "contents": "KCMClosedCaptionFormatType_CEA608"
    },
    {
      "trigger": "kCMClosedCaptionFormatType_CEA708 (1664561208)",
      "contents": "KCMClosedCaptionFormatType_CEA708"
    },
    {
      "trigger": "kCMFormatDescriptionConformsToMPEG2VideoProfile (CFStringRef)",
      "contents": "KCMFormatDescriptionConformsToMPEG2VideoProfile"
    },
    {
      "trigger": "kCMFormatDescriptionError_AllocationFailed (-12711)",
      "contents": "KCMFormatDescriptionError_AllocationFailed"
    },
    {
      "trigger": "kCMFormatDescriptionError_InvalidParameter (-12710)",
      "contents": "KCMFormatDescriptionError_InvalidParameter"
    },
    {
      "trigger": "kCMFormatDescriptionExtensionKey_MetadataKeyTable (CFStringRef)",
      "contents": "KCMFormatDescriptionExtensionKey_MetadataKeyTable"
    },
    {
      "trigger": "kCMFormatDescriptionExtension_BytesPerRow (CFStringRef)",
      "contents": "KCMFormatDescriptionExtension_BytesPerRow"
    },
    {
      "trigger": "kCMFormatDescriptionExtension_Depth (CFStringRef)",
      "contents": "KCMFormatDescriptionExtension_Depth"
    },
    {
      "trigger": "kCMFormatDescriptionExtension_FormatName (CFStringRef)",
      "contents": "KCMFormatDescriptionExtension_FormatName"
    },
    {
      "trigger": "kCMFormatDescriptionExtension_FullRangeVideo (CFStringRef)",
      "contents": "KCMFormatDescriptionExtension_FullRangeVideo"
    },
    {
      "trigger": "kCMFormatDescriptionExtension_ICCProfile (CFStringRef)",
      "contents": "KCMFormatDescriptionExtension_ICCProfile"
    },
    {
      "trigger": "kCMFormatDescriptionExtension_OriginalCompressionSettings (CFStringRef)",
      "contents": "KCMFormatDescriptionExtension_OriginalCompressionSettings"
    },
    {
      "trigger": "kCMFormatDescriptionExtension_RevisionLevel (CFStringRef)",
      "contents": "KCMFormatDescriptionExtension_RevisionLevel"
    },
    {
      "trigger": "kCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms (CFStringRef)",
      "contents": "KCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms"
    },
    {
      "trigger": "kCMFormatDescriptionExtension_SpatialQuality (CFStringRef)",
      "contents": "KCMFormatDescriptionExtension_SpatialQuality"
    },
    {
      "trigger": "kCMFormatDescriptionExtension_TemporalQuality (CFStringRef)",
      "contents": "KCMFormatDescriptionExtension_TemporalQuality"
    },
    {
      "trigger": "kCMFormatDescriptionExtension_Vendor (CFStringRef)",
      "contents": "KCMFormatDescriptionExtension_Vendor"
    },
    {
      "trigger": "kCMFormatDescriptionExtension_VerbatimISOSampleEntry (CFStringRef)",
      "contents": "KCMFormatDescriptionExtension_VerbatimISOSampleEntry"
    },
    {
      "trigger": "kCMFormatDescriptionExtension_VerbatimSampleDescription (CFStringRef)",
      "contents": "KCMFormatDescriptionExtension_VerbatimSampleDescription"
    },
    {
      "trigger": "kCMFormatDescriptionExtension_Version (CFStringRef)",
      "contents": "KCMFormatDescriptionExtension_Version"
    },
    {
      "trigger": "kCMFormatDescriptionKey_CleanApertureHeightRational (CFStringRef)",
      "contents": "KCMFormatDescriptionKey_CleanApertureHeightRational"
    },
    {
      "trigger": "kCMFormatDescriptionKey_CleanApertureHorizontalOffsetRational (CFStringRef)",
      "contents": "KCMFormatDescriptionKey_CleanApertureHorizontalOffsetRational"
    },
    {
      "trigger": "kCMFormatDescriptionKey_CleanApertureVerticalOffsetRational (CFStringRef)",
      "contents": "KCMFormatDescriptionKey_CleanApertureVerticalOffsetRational"
    },
    {
      "trigger": "kCMFormatDescriptionKey_CleanApertureWidthRational (CFStringRef)",
      "contents": "KCMFormatDescriptionKey_CleanApertureWidthRational"
    },
    {
      "trigger": "kCMFormatDescriptionVendor_Apple (CFStringRef)",
      "contents": "KCMFormatDescriptionVendor_Apple"
    },
    {
      "trigger": "kCMMPEG2VideoProfile_HDV_1080i50 (1751414323)",
      "contents": "KCMMPEG2VideoProfile_HDV_1080i50"
    },
    {
      "trigger": "kCMMPEG2VideoProfile_HDV_1080i60 (1751414322)",
      "contents": "KCMMPEG2VideoProfile_HDV_1080i60"
    },
    {
      "trigger": "kCMMPEG2VideoProfile_HDV_1080p24 (1751414326)",
      "contents": "KCMMPEG2VideoProfile_HDV_1080p24"
    },
    {
      "trigger": "kCMMPEG2VideoProfile_HDV_1080p25 (1751414327)",
      "contents": "KCMMPEG2VideoProfile_HDV_1080p25"
    },
    {
      "trigger": "kCMMPEG2VideoProfile_HDV_1080p30 (1751414328)",
      "contents": "KCMMPEG2VideoProfile_HDV_1080p30"
    },
    {
      "trigger": "kCMMPEG2VideoProfile_HDV_720p24 (1751414324)",
      "contents": "KCMMPEG2VideoProfile_HDV_720p24"
    },
    {
      "trigger": "kCMMPEG2VideoProfile_HDV_720p25 (1751414325)",
      "contents": "KCMMPEG2VideoProfile_HDV_720p25"
    },
    {
      "trigger": "kCMMPEG2VideoProfile_HDV_720p30 (1751414321)",
      "contents": "KCMMPEG2VideoProfile_HDV_720p30"
    },
    {
      "trigger": "kCMMPEG2VideoProfile_HDV_720p50 (1751414369)",
      "contents": "KCMMPEG2VideoProfile_HDV_720p50"
    },
    {
      "trigger": "kCMMPEG2VideoProfile_HDV_720p60 (1751414329)",
      "contents": "KCMMPEG2VideoProfile_HDV_720p60"
    },
    {
      "trigger": "kCMMPEG2VideoProfile_XDCAM_EX_1080i50_VBR35 (2019849827)",
      "contents": "KCMMPEG2VideoProfile_XDCAM_EX_1080i50_VBR35"
    },
    {
      "trigger": "kCMMPEG2VideoProfile_XDCAM_EX_1080i60_VBR35 (2019849826)",
      "contents": "KCMMPEG2VideoProfile_XDCAM_EX_1080i60_VBR35"
    },
    {
      "trigger": "kCMMPEG2VideoProfile_XDCAM_EX_1080p24_VBR35 (2019849828)",
      "contents": "KCMMPEG2VideoProfile_XDCAM_EX_1080p24_VBR35"
    },
    {
      "trigger": "kCMMPEG2VideoProfile_XDCAM_EX_1080p25_VBR35 (2019849829)",
      "contents": "KCMMPEG2VideoProfile_XDCAM_EX_1080p25_VBR35"
    },
    {
      "trigger": "kCMMPEG2VideoProfile_XDCAM_EX_1080p30_VBR35 (2019849830)",
      "contents": "KCMMPEG2VideoProfile_XDCAM_EX_1080p30_VBR35"
    },
    {
      "trigger": "kCMMPEG2VideoProfile_XDCAM_EX_720p24_VBR35 (2019849780)",
      "contents": "KCMMPEG2VideoProfile_XDCAM_EX_720p24_VBR35"
    },
    {
      "trigger": "kCMMPEG2VideoProfile_XDCAM_EX_720p25_VBR35 (2019849781)",
      "contents": "KCMMPEG2VideoProfile_XDCAM_EX_720p25_VBR35"
    },
    {
      "trigger": "kCMMPEG2VideoProfile_XDCAM_EX_720p30_VBR35 (2019849777)",
      "contents": "KCMMPEG2VideoProfile_XDCAM_EX_720p30_VBR35"
    },
    {
      "trigger": "kCMMPEG2VideoProfile_XDCAM_EX_720p50_VBR35 (2019849825)",
      "contents": "KCMMPEG2VideoProfile_XDCAM_EX_720p50_VBR35"
    },
    {
      "trigger": "kCMMPEG2VideoProfile_XDCAM_EX_720p60_VBR35 (2019849785)",
      "contents": "KCMMPEG2VideoProfile_XDCAM_EX_720p60_VBR35"
    },
    {
      "trigger": "kCMMPEG2VideoProfile_XDCAM_HD422_1080i50_CBR50 (2019833187)",
      "contents": "KCMMPEG2VideoProfile_XDCAM_HD422_1080i50_CBR50"
    },
    {
      "trigger": "kCMMPEG2VideoProfile_XDCAM_HD422_1080i60_CBR50 (2019833186)",
      "contents": "KCMMPEG2VideoProfile_XDCAM_HD422_1080i60_CBR50"
    },
    {
      "trigger": "kCMMPEG2VideoProfile_XDCAM_HD422_1080p24_CBR50 (2019833188)",
      "contents": "KCMMPEG2VideoProfile_XDCAM_HD422_1080p24_CBR50"
    },
    {
      "trigger": "kCMMPEG2VideoProfile_XDCAM_HD422_1080p25_CBR50 (2019833189)",
      "contents": "KCMMPEG2VideoProfile_XDCAM_HD422_1080p25_CBR50"
    },
    {
      "trigger": "kCMMPEG2VideoProfile_XDCAM_HD422_1080p30_CBR50 (2019833190)",
      "contents": "KCMMPEG2VideoProfile_XDCAM_HD422_1080p30_CBR50"
    },
    {
      "trigger": "kCMMPEG2VideoProfile_XDCAM_HD422_540p (2019846194)",
      "contents": "KCMMPEG2VideoProfile_XDCAM_HD422_540p"
    },
    {
      "trigger": "kCMMPEG2VideoProfile_XDCAM_HD422_720p24_CBR50 (2019833140)",
      "contents": "KCMMPEG2VideoProfile_XDCAM_HD422_720p24_CBR50"
    },
    {
      "trigger": "kCMMPEG2VideoProfile_XDCAM_HD422_720p25_CBR50 (2019833141)",
      "contents": "KCMMPEG2VideoProfile_XDCAM_HD422_720p25_CBR50"
    },
    {
      "trigger": "kCMMPEG2VideoProfile_XDCAM_HD422_720p30_CBR50 (2019833137)",
      "contents": "KCMMPEG2VideoProfile_XDCAM_HD422_720p30_CBR50"
    },
    {
      "trigger": "kCMMPEG2VideoProfile_XDCAM_HD422_720p50_CBR50 (2019833185)",
      "contents": "KCMMPEG2VideoProfile_XDCAM_HD422_720p50_CBR50"
    },
    {
      "trigger": "kCMMPEG2VideoProfile_XDCAM_HD422_720p60_CBR50 (2019833145)",
      "contents": "KCMMPEG2VideoProfile_XDCAM_HD422_720p60_CBR50"
    },
    {
      "trigger": "kCMMPEG2VideoProfile_XDCAM_HD_1080i50_VBR35 (2019849779)",
      "contents": "KCMMPEG2VideoProfile_XDCAM_HD_1080i50_VBR35"
    },
    {
      "trigger": "kCMMPEG2VideoProfile_XDCAM_HD_1080i60_VBR35 (2019849778)",
      "contents": "KCMMPEG2VideoProfile_XDCAM_HD_1080i60_VBR35"
    },
    {
      "trigger": "kCMMPEG2VideoProfile_XDCAM_HD_1080p24_VBR35 (2019849782)",
      "contents": "KCMMPEG2VideoProfile_XDCAM_HD_1080p24_VBR35"
    },
    {
      "trigger": "kCMMPEG2VideoProfile_XDCAM_HD_1080p25_VBR35 (2019849783)",
      "contents": "KCMMPEG2VideoProfile_XDCAM_HD_1080p25_VBR35"
    },
    {
      "trigger": "kCMMPEG2VideoProfile_XDCAM_HD_1080p30_VBR35 (2019849784)",
      "contents": "KCMMPEG2VideoProfile_XDCAM_HD_1080p30_VBR35"
    },
    {
      "trigger": "kCMMPEG2VideoProfile_XDCAM_HD_540p (2019846244)",
      "contents": "KCMMPEG2VideoProfile_XDCAM_HD_540p"
    },
    {
      "trigger": "kCMMediaType_Audio (1936684398)",
      "contents": "KCMMediaType_Audio"
    },
    {
      "trigger": "kCMMediaType_ClosedCaption (1668047728)",
      "contents": "KCMMediaType_ClosedCaption"
    },
    {
      "trigger": "kCMMediaType_Muxed (1836415096)",
      "contents": "KCMMediaType_Muxed"
    },
    {
      "trigger": "kCMMediaType_Subtitle (1935832172)",
      "contents": "KCMMediaType_Subtitle"
    },
    {
      "trigger": "kCMMediaType_Text (1952807028)",
      "contents": "KCMMediaType_Text"
    },
    {
      "trigger": "kCMMediaType_TimeCode (1953325924)",
      "contents": "KCMMediaType_TimeCode"
    },
    {
      "trigger": "kCMMediaType_TimedMetadata (1953326452)",
      "contents": "KCMMediaType_TimedMetadata"
    },
    {
      "trigger": "kCMMediaType_Video (1986618469)",
      "contents": "KCMMediaType_Video"
    },
    {
      "trigger": "kCMMetadataFormatDescriptionKey_LocalID (CFStringRef)",
      "contents": "KCMMetadataFormatDescriptionKey_LocalID"
    },
    {
      "trigger": "kCMMetadataFormatDescriptionKey_Namespace (CFStringRef)",
      "contents": "KCMMetadataFormatDescriptionKey_Namespace"
    },
    {
      "trigger": "kCMMetadataFormatDescriptionKey_Value (CFStringRef)",
      "contents": "KCMMetadataFormatDescriptionKey_Value"
    },
    {
      "trigger": "kCMMuxedStreamType_DV (1685463072)",
      "contents": "KCMMuxedStreamType_DV"
    },
    {
      "trigger": "kCMMuxedStreamType_MPEG1System (1836069235)",
      "contents": "KCMMuxedStreamType_MPEG1System"
    },
    {
      "trigger": "kCMMuxedStreamType_MPEG2Program (1836069488)",
      "contents": "KCMMuxedStreamType_MPEG2Program"
    },
    {
      "trigger": "kCMMuxedStreamType_MPEG2Transport (1836069492)",
      "contents": "KCMMuxedStreamType_MPEG2Transport"
    },
    {
      "trigger": "kCMPersistentTrackID_Invalid (0)",
      "contents": "KCMPersistentTrackID_Invalid"
    },
    {
      "trigger": "kCMPixelFormat_16BE555 (16)",
      "contents": "KCMPixelFormat_16BE555"
    },
    {
      "trigger": "kCMPixelFormat_16BE565 (1110783541)",
      "contents": "KCMPixelFormat_16BE565"
    },
    {
      "trigger": "kCMPixelFormat_16LE555 (1278555445)",
      "contents": "KCMPixelFormat_16LE555"
    },
    {
      "trigger": "kCMPixelFormat_16LE5551 (892679473)",
      "contents": "KCMPixelFormat_16LE5551"
    },
    {
      "trigger": "kCMPixelFormat_16LE565 (1278555701)",
      "contents": "KCMPixelFormat_16LE565"
    },
    {
      "trigger": "kCMPixelFormat_24RGB (24)",
      "contents": "KCMPixelFormat_24RGB"
    },
    {
      "trigger": "kCMPixelFormat_32ARGB (32)",
      "contents": "KCMPixelFormat_32ARGB"
    },
    {
      "trigger": "kCMPixelFormat_32BGRA (1111970369)",
      "contents": "KCMPixelFormat_32BGRA"
    },
    {
      "trigger": "kCMPixelFormat_422YpCbCr10 (1983000880)",
      "contents": "KCMPixelFormat_422YpCbCr10"
    },
    {
      "trigger": "kCMPixelFormat_422YpCbCr16 (1983000886)",
      "contents": "KCMPixelFormat_422YpCbCr16"
    },
    {
      "trigger": "kCMPixelFormat_422YpCbCr8 (846624121)",
      "contents": "KCMPixelFormat_422YpCbCr8"
    },
    {
      "trigger": "kCMPixelFormat_422YpCbCr8_yuvs (2037741171)",
      "contents": "KCMPixelFormat_422YpCbCr8_yuvs"
    },
    {
      "trigger": "kCMPixelFormat_4444YpCbCrA8 (1983131704)",
      "contents": "KCMPixelFormat_4444YpCbCrA8"
    },
    {
      "trigger": "kCMPixelFormat_444YpCbCr10 (1983131952)",
      "contents": "KCMPixelFormat_444YpCbCr10"
    },
    {
      "trigger": "kCMPixelFormat_444YpCbCr8 (1983066168)",
      "contents": "KCMPixelFormat_444YpCbCr8"
    },
    {
      "trigger": "kCMPixelFormat_8IndexedGray_WhiteIsZero (40)",
      "contents": "KCMPixelFormat_8IndexedGray_WhiteIsZero"
    },
    {
      "trigger": "kCMSampleAttachmentKey_DependsOnOthers (CFStringRef)",
      "contents": "KCMSampleAttachmentKey_DependsOnOthers"
    },
    {
      "trigger": "kCMSampleAttachmentKey_DisplayImmediately (CFStringRef)",
      "contents": "KCMSampleAttachmentKey_DisplayImmediately"
    },
    {
      "trigger": "kCMSampleAttachmentKey_DoNotDisplay (CFStringRef)",
      "contents": "KCMSampleAttachmentKey_DoNotDisplay"
    },
    {
      "trigger": "kCMSampleAttachmentKey_EarlierDisplayTimesAllowed (CFStringRef)",
      "contents": "KCMSampleAttachmentKey_EarlierDisplayTimesAllowed"
    },
    {
      "trigger": "kCMSampleAttachmentKey_HasRedundantCoding (CFStringRef)",
      "contents": "KCMSampleAttachmentKey_HasRedundantCoding"
    },
    {
      "trigger": "kCMSampleAttachmentKey_IsDependedOnByOthers (CFStringRef)",
      "contents": "KCMSampleAttachmentKey_IsDependedOnByOthers"
    },
    {
      "trigger": "kCMSampleAttachmentKey_NotSync (CFStringRef)",
      "contents": "KCMSampleAttachmentKey_NotSync"
    },
    {
      "trigger": "kCMSampleAttachmentKey_PartialSync (CFStringRef)",
      "contents": "KCMSampleAttachmentKey_PartialSync"
    },
    {
      "trigger": "kCMSampleBufferAttachmentKey_DisplayEmptyMediaImmediately (CFStringRef)",
      "contents": "KCMSampleBufferAttachmentKey_DisplayEmptyMediaImmediately"
    },
    {
      "trigger": "kCMSampleBufferAttachmentKey_DrainAfterDecoding (CFStringRef)",
      "contents": "KCMSampleBufferAttachmentKey_DrainAfterDecoding"
    },
    {
      "trigger": "kCMSampleBufferAttachmentKey_EmptyMedia (CFStringRef)",
      "contents": "KCMSampleBufferAttachmentKey_EmptyMedia"
    },
    {
      "trigger": "kCMSampleBufferAttachmentKey_EndsPreviousSampleDuration (CFStringRef)",
      "contents": "KCMSampleBufferAttachmentKey_EndsPreviousSampleDuration"
    },
    {
      "trigger": "kCMSampleBufferAttachmentKey_FillDiscontinuitiesWithSilence (CFStringRef)",
      "contents": "KCMSampleBufferAttachmentKey_FillDiscontinuitiesWithSilence"
    },
    {
      "trigger": "kCMSampleBufferAttachmentKey_GradualDecoderRefresh (CFStringRef)",
      "contents": "KCMSampleBufferAttachmentKey_GradualDecoderRefresh"
    },
    {
      "trigger": "kCMSampleBufferAttachmentKey_PermanentEmptyMedia (CFStringRef)",
      "contents": "KCMSampleBufferAttachmentKey_PermanentEmptyMedia"
    },
    {
      "trigger": "kCMSampleBufferAttachmentKey_PostNotificationWhenConsumed (CFStringRef)",
      "contents": "KCMSampleBufferAttachmentKey_PostNotificationWhenConsumed"
    },
    {
      "trigger": "kCMSampleBufferAttachmentKey_ResetDecoderBeforeDecoding (CFStringRef)",
      "contents": "KCMSampleBufferAttachmentKey_ResetDecoderBeforeDecoding"
    },
    {
      "trigger": "kCMSampleBufferAttachmentKey_ResumeOutput (CFStringRef)",
      "contents": "KCMSampleBufferAttachmentKey_ResumeOutput"
    },
    {
      "trigger": "kCMSampleBufferAttachmentKey_Reverse (CFStringRef)",
      "contents": "KCMSampleBufferAttachmentKey_Reverse"
    },
    {
      "trigger": "kCMSampleBufferAttachmentKey_SampleReferenceByteOffset (CFStringRef)",
      "contents": "KCMSampleBufferAttachmentKey_SampleReferenceByteOffset"
    },
    {
      "trigger": "kCMSampleBufferAttachmentKey_SampleReferenceURL (CFStringRef)",
      "contents": "KCMSampleBufferAttachmentKey_SampleReferenceURL"
    },
    {
      "trigger": "kCMSampleBufferAttachmentKey_SpeedMultiplier (CFStringRef)",
      "contents": "KCMSampleBufferAttachmentKey_SpeedMultiplier"
    },
    {
      "trigger": "kCMSampleBufferAttachmentKey_TransitionID (CFStringRef)",
      "contents": "KCMSampleBufferAttachmentKey_TransitionID"
    },
    {
      "trigger": "kCMSampleBufferAttachmentKey_TrimDurationAtEnd (CFStringRef)",
      "contents": "KCMSampleBufferAttachmentKey_TrimDurationAtEnd"
    },
    {
      "trigger": "kCMSampleBufferAttachmentKey_TrimDurationAtStart (CFStringRef)",
      "contents": "KCMSampleBufferAttachmentKey_TrimDurationAtStart"
    },
    {
      "trigger": "kCMSampleBufferConduitNotificationParameter_MaxUpcomingOutputPTS (CFStringRef)",
      "contents": "KCMSampleBufferConduitNotificationParameter_MaxUpcomingOutputPTS"
    },
    {
      "trigger": "kCMSampleBufferConduitNotificationParameter_MinUpcomingOutputPTS (CFStringRef)",
      "contents": "KCMSampleBufferConduitNotificationParameter_MinUpcomingOutputPTS"
    },
    {
      "trigger": "kCMSampleBufferConduitNotificationParameter_ResumeTag (CFStringRef)",
      "contents": "KCMSampleBufferConduitNotificationParameter_ResumeTag"
    },
    {
      "trigger": "kCMSampleBufferConduitNotificationParameter_UpcomingOutputPTSRangeMayOverlapQueuedOutputPTSRange (CFStringRef)",
      "contents": "KCMSampleBufferConduitNotificationParameter_UpcomingOutputPTSRangeMayOverlapQueuedOutputPTSRange"
    },
    {
      "trigger": "kCMSampleBufferConduitNotification_InhibitOutputUntil (CFStringRef)",
      "contents": "KCMSampleBufferConduitNotification_InhibitOutputUntil"
    },
    {
      "trigger": "kCMSampleBufferConduitNotification_ResetOutput (CFStringRef)",
      "contents": "KCMSampleBufferConduitNotification_ResetOutput"
    },
    {
      "trigger": "kCMSampleBufferConduitNotification_UpcomingOutputPTSRangeChanged (CFStringRef)",
      "contents": "KCMSampleBufferConduitNotification_UpcomingOutputPTSRangeChanged"
    },
    {
      "trigger": "kCMSampleBufferConsumerNotification_BufferConsumed (CFStringRef)",
      "contents": "KCMSampleBufferConsumerNotification_BufferConsumed"
    },
    {
      "trigger": "kCMSampleBufferError_AllocationFailed (-12730)",
      "contents": "KCMSampleBufferError_AllocationFailed"
    },
    {
      "trigger": "kCMSampleBufferError_AlreadyHasDataBuffer (-12732)",
      "contents": "KCMSampleBufferError_AlreadyHasDataBuffer"
    },
    {
      "trigger": "kCMSampleBufferError_ArrayTooSmall (-12737)",
      "contents": "KCMSampleBufferError_ArrayTooSmall"
    },
    {
      "trigger": "kCMSampleBufferError_BufferHasNoSampleSizes (-12735)",
      "contents": "KCMSampleBufferError_BufferHasNoSampleSizes"
    },
    {
      "trigger": "kCMSampleBufferError_BufferHasNoSampleTimingInfo (-12736)",
      "contents": "KCMSampleBufferError_BufferHasNoSampleTimingInfo"
    },
    {
      "trigger": "kCMSampleBufferError_BufferNotReady (-12733)",
      "contents": "KCMSampleBufferError_BufferNotReady"
    },
    {
      "trigger": "kCMSampleBufferError_CannotSubdivide (-12739)",
      "contents": "KCMSampleBufferError_CannotSubdivide"
    },
    {
      "trigger": "kCMSampleBufferError_InvalidEntryCount (-12738)",
      "contents": "KCMSampleBufferError_InvalidEntryCount"
    },
    {
      "trigger": "kCMSampleBufferError_InvalidMediaFormat (-12743)",
      "contents": "KCMSampleBufferError_InvalidMediaFormat"
    },
    {
      "trigger": "kCMSampleBufferError_InvalidMediaTypeForOperation (-12741)",
      "contents": "KCMSampleBufferError_InvalidMediaTypeForOperation"
    },
    {
      "trigger": "kCMSampleBufferError_InvalidSampleData (-12742)",
      "contents": "KCMSampleBufferError_InvalidSampleData"
    },
    {
      "trigger": "kCMSampleBufferError_Invalidated (-12744)",
      "contents": "KCMSampleBufferError_Invalidated"
    },
    {
      "trigger": "kCMSampleBufferError_RequiredParameterMissing (-12731)",
      "contents": "KCMSampleBufferError_RequiredParameterMissing"
    },
    {
      "trigger": "kCMSampleBufferError_SampleIndexOutOfRange (-12734)",
      "contents": "KCMSampleBufferError_SampleIndexOutOfRange"
    },
    {
      "trigger": "kCMSampleBufferError_SampleTimingInfoInvalid (-12740)",
      "contents": "KCMSampleBufferError_SampleTimingInfoInvalid"
    },
    {
      "trigger": "kCMSampleBufferFlag_AudioBufferList_Assure16ByteAlignment (1)",
      "contents": "KCMSampleBufferFlag_AudioBufferList_Assure16ByteAlignment"
    },
    {
      "trigger": "kCMSampleBufferNotification_DataBecameReady (CFStringRef)",
      "contents": "KCMSampleBufferNotification_DataBecameReady"
    },
    {
      "trigger": "kCMSimpleQueueError_AllocationFailed (-12770)",
      "contents": "KCMSimpleQueueError_AllocationFailed"
    },
    {
      "trigger": "kCMSimpleQueueError_ParameterOutOfRange (-12772)",
      "contents": "KCMSimpleQueueError_ParameterOutOfRange"
    },
    {
      "trigger": "kCMSimpleQueueError_QueueIsFull (-12773)",
      "contents": "KCMSimpleQueueError_QueueIsFull"
    },
    {
      "trigger": "kCMSimpleQueueError_RequiredParameterMissing (-12771)",
      "contents": "KCMSimpleQueueError_RequiredParameterMissing"
    },
    {
      "trigger": "kCMTextDisplayFlag_allSubtitlesForced (2147483648)",
      "contents": "KCMTextDisplayFlag_allSubtitlesForced"
    },
    {
      "trigger": "kCMTextDisplayFlag_continuousKaraoke (2048)",
      "contents": "KCMTextDisplayFlag_continuousKaraoke"
    },
    {
      "trigger": "kCMTextDisplayFlag_fillTextRegion (262144)",
      "contents": "KCMTextDisplayFlag_fillTextRegion"
    },
    {
      "trigger": "kCMTextDisplayFlag_forcedSubtitlesPresent (1073741824)",
      "contents": "KCMTextDisplayFlag_forcedSubtitlesPresent"
    },
    {
      "trigger": "kCMTextDisplayFlag_obeySubtitleFormatting (536870912)",
      "contents": "KCMTextDisplayFlag_obeySubtitleFormatting"
    },
    {
      "trigger": "kCMTextDisplayFlag_scrollDirectionMask (384)",
      "contents": "KCMTextDisplayFlag_scrollDirectionMask"
    },
    {
      "trigger": "kCMTextDisplayFlag_scrollDirection_bottomToTop (0)",
      "contents": "KCMTextDisplayFlag_scrollDirection_bottomToTop"
    },
    {
      "trigger": "kCMTextDisplayFlag_scrollDirection_leftToRight (384)",
      "contents": "KCMTextDisplayFlag_scrollDirection_leftToRight"
    },
    {
      "trigger": "kCMTextDisplayFlag_scrollDirection_rightToLeft (128)",
      "contents": "KCMTextDisplayFlag_scrollDirection_rightToLeft"
    },
    {
      "trigger": "kCMTextDisplayFlag_scrollDirection_topToBottom (256)",
      "contents": "KCMTextDisplayFlag_scrollDirection_topToBottom"
    },
    {
      "trigger": "kCMTextDisplayFlag_scrollIn (32)",
      "contents": "KCMTextDisplayFlag_scrollIn"
    },
    {
      "trigger": "kCMTextDisplayFlag_scrollOut (64)",
      "contents": "KCMTextDisplayFlag_scrollOut"
    },
    {
      "trigger": "kCMTextDisplayFlag_writeTextVertically (131072)",
      "contents": "KCMTextDisplayFlag_writeTextVertically"
    },
    {
      "trigger": "kCMTextFormatDescriptionColor_Alpha (CFStringRef)",
      "contents": "KCMTextFormatDescriptionColor_Alpha"
    },
    {
      "trigger": "kCMTextFormatDescriptionColor_Blue (CFStringRef)",
      "contents": "KCMTextFormatDescriptionColor_Blue"
    },
    {
      "trigger": "kCMTextFormatDescriptionColor_Green (CFStringRef)",
      "contents": "KCMTextFormatDescriptionColor_Green"
    },
    {
      "trigger": "kCMTextFormatDescriptionColor_Red (CFStringRef)",
      "contents": "KCMTextFormatDescriptionColor_Red"
    },
    {
      "trigger": "kCMTextFormatDescriptionExtension_BackgroundColor (CFStringRef)",
      "contents": "KCMTextFormatDescriptionExtension_BackgroundColor"
    },
    {
      "trigger": "kCMTextFormatDescriptionExtension_DefaultFontName (CFStringRef)",
      "contents": "KCMTextFormatDescriptionExtension_DefaultFontName"
    },
    {
      "trigger": "kCMTextFormatDescriptionExtension_DefaultStyle (CFStringRef)",
      "contents": "KCMTextFormatDescriptionExtension_DefaultStyle"
    },
    {
      "trigger": "kCMTextFormatDescriptionExtension_DefaultTextBox (CFStringRef)",
      "contents": "KCMTextFormatDescriptionExtension_DefaultTextBox"
    },
    {
      "trigger": "kCMTextFormatDescriptionExtension_DisplayFlags (CFStringRef)",
      "contents": "KCMTextFormatDescriptionExtension_DisplayFlags"
    },
    {
      "trigger": "kCMTextFormatDescriptionExtension_FontTable (CFStringRef)",
      "contents": "KCMTextFormatDescriptionExtension_FontTable"
    },
    {
      "trigger": "kCMTextFormatDescriptionExtension_HorizontalJustification (CFStringRef)",
      "contents": "KCMTextFormatDescriptionExtension_HorizontalJustification"
    },
    {
      "trigger": "kCMTextFormatDescriptionExtension_TextJustification (CFStringRef)",
      "contents": "KCMTextFormatDescriptionExtension_TextJustification"
    },
    {
      "trigger": "kCMTextFormatDescriptionExtension_VerticalJustification (CFStringRef)",
      "contents": "KCMTextFormatDescriptionExtension_VerticalJustification"
    },
    {
      "trigger": "kCMTextFormatDescriptionRect_Bottom (CFStringRef)",
      "contents": "KCMTextFormatDescriptionRect_Bottom"
    },
    {
      "trigger": "kCMTextFormatDescriptionRect_Left (CFStringRef)",
      "contents": "KCMTextFormatDescriptionRect_Left"
    },
    {
      "trigger": "kCMTextFormatDescriptionRect_Right (CFStringRef)",
      "contents": "KCMTextFormatDescriptionRect_Right"
    },
    {
      "trigger": "kCMTextFormatDescriptionRect_Top (CFStringRef)",
      "contents": "KCMTextFormatDescriptionRect_Top"
    },
    {
      "trigger": "kCMTextFormatDescriptionStyle_Ascent (CFStringRef)",
      "contents": "KCMTextFormatDescriptionStyle_Ascent"
    },
    {
      "trigger": "kCMTextFormatDescriptionStyle_EndChar (CFStringRef)",
      "contents": "KCMTextFormatDescriptionStyle_EndChar"
    },
    {
      "trigger": "kCMTextFormatDescriptionStyle_Font (CFStringRef)",
      "contents": "KCMTextFormatDescriptionStyle_Font"
    },
    {
      "trigger": "kCMTextFormatDescriptionStyle_FontFace (CFStringRef)",
      "contents": "KCMTextFormatDescriptionStyle_FontFace"
    },
    {
      "trigger": "kCMTextFormatDescriptionStyle_FontSize (CFStringRef)",
      "contents": "KCMTextFormatDescriptionStyle_FontSize"
    },
    {
      "trigger": "kCMTextFormatDescriptionStyle_ForegroundColor (CFStringRef)",
      "contents": "KCMTextFormatDescriptionStyle_ForegroundColor"
    },
    {
      "trigger": "kCMTextFormatDescriptionStyle_Height (CFStringRef)",
      "contents": "KCMTextFormatDescriptionStyle_Height"
    },
    {
      "trigger": "kCMTextFormatDescriptionStyle_StartChar (CFStringRef)",
      "contents": "KCMTextFormatDescriptionStyle_StartChar"
    },
    {
      "trigger": "kCMTextFormatType_3GText (1954034535)",
      "contents": "KCMTextFormatType_3GText"
    },
    {
      "trigger": "kCMTextFormatType_QTText (1952807028)",
      "contents": "KCMTextFormatType_QTText"
    },
    {
      "trigger": "kCMTextJustification_bottom_right (-1)",
      "contents": "KCMTextJustification_bottom_right"
    },
    {
      "trigger": "kCMTextJustification_centered (1)",
      "contents": "KCMTextJustification_centered"
    },
    {
      "trigger": "kCMTextJustification_left_top (0)",
      "contents": "KCMTextJustification_left_top"
    },
    {
      "trigger": "kCMTimeCodeFlag_24HourMax (2)",
      "contents": "KCMTimeCodeFlag_24HourMax"
    },
    {
      "trigger": "kCMTimeCodeFlag_DropFrame (1)",
      "contents": "KCMTimeCodeFlag_DropFrame"
    },
    {
      "trigger": "kCMTimeCodeFlag_NegTimesOK (4)",
      "contents": "KCMTimeCodeFlag_NegTimesOK"
    },
    {
      "trigger": "kCMTimeCodeFormatDescriptionExtension_SourceReferenceName (CFStringRef)",
      "contents": "KCMTimeCodeFormatDescriptionExtension_SourceReferenceName"
    },
    {
      "trigger": "kCMTimeCodeFormatDescriptionKey_LangCode (CFStringRef)",
      "contents": "KCMTimeCodeFormatDescriptionKey_LangCode"
    },
    {
      "trigger": "kCMTimeCodeFormatDescriptionKey_Value (CFStringRef)",
      "contents": "KCMTimeCodeFormatDescriptionKey_Value"
    },
    {
      "trigger": "kCMTimeCodeFormatType_Counter32 (1668166450)",
      "contents": "KCMTimeCodeFormatType_Counter32"
    },
    {
      "trigger": "kCMTimeCodeFormatType_Counter64 (1668167220)",
      "contents": "KCMTimeCodeFormatType_Counter64"
    },
    {
      "trigger": "kCMTimeCodeFormatType_TimeCode32 (1953325924)",
      "contents": "KCMTimeCodeFormatType_TimeCode32"
    },
    {
      "trigger": "kCMTimeCodeFormatType_TimeCode64 (1952658996)",
      "contents": "KCMTimeCodeFormatType_TimeCode64"
    },
    {
      "trigger": "kCMTimeEpochKey (CFStringRef)",
      "contents": "KCMTimeEpochKey"
    },
    {
      "trigger": "kCMTimeFlagsKey (CFStringRef)",
      "contents": "KCMTimeFlagsKey"
    },
    {
      "trigger": "kCMTimeFlags_HasBeenRounded (2)",
      "contents": "KCMTimeFlags_HasBeenRounded"
    },
    {
      "trigger": "kCMTimeFlags_ImpliedValueFlagsMask (28)",
      "contents": "KCMTimeFlags_ImpliedValueFlagsMask"
    },
    {
      "trigger": "kCMTimeFlags_Indefinite (16)",
      "contents": "KCMTimeFlags_Indefinite"
    },
    {
      "trigger": "kCMTimeFlags_NegativeInfinity (8)",
      "contents": "KCMTimeFlags_NegativeInfinity"
    },
    {
      "trigger": "kCMTimeFlags_PositiveInfinity (4)",
      "contents": "KCMTimeFlags_PositiveInfinity"
    },
    {
      "trigger": "kCMTimeFlags_Valid (1)",
      "contents": "KCMTimeFlags_Valid"
    },
    {
      "trigger": "kCMTimeIndefinite (CMTime)",
      "contents": "KCMTimeIndefinite"
    },
    {
      "trigger": "kCMTimeInvalid (CMTime)",
      "contents": "KCMTimeInvalid"
    },
    {
      "trigger": "kCMTimeMaxTimescale (2147483647)",
      "contents": "KCMTimeMaxTimescale"
    },
    {
      "trigger": "kCMTimeNegativeInfinity (CMTime)",
      "contents": "KCMTimeNegativeInfinity"
    },
    {
      "trigger": "kCMTimePositiveInfinity (CMTime)",
      "contents": "KCMTimePositiveInfinity"
    },
    {
      "trigger": "kCMTimeRangeDurationKey (CFStringRef)",
      "contents": "KCMTimeRangeDurationKey"
    },
    {
      "trigger": "kCMTimeRangeInvalid (CMTimeRange)",
      "contents": "KCMTimeRangeInvalid"
    },
    {
      "trigger": "kCMTimeRangeStartKey (CFStringRef)",
      "contents": "KCMTimeRangeStartKey"
    },
    {
      "trigger": "kCMTimeRangeZero (CMTimeRange)",
      "contents": "KCMTimeRangeZero"
    },
    {
      "trigger": "kCMTimeRoundingMethod_Default (1)",
      "contents": "KCMTimeRoundingMethod_Default"
    },
    {
      "trigger": "kCMTimeRoundingMethod_QuickTime (4)",
      "contents": "KCMTimeRoundingMethod_QuickTime"
    },
    {
      "trigger": "kCMTimeRoundingMethod_RoundAwayFromZero (3)",
      "contents": "KCMTimeRoundingMethod_RoundAwayFromZero"
    },
    {
      "trigger": "kCMTimeRoundingMethod_RoundHalfAwayFromZero (1)",
      "contents": "KCMTimeRoundingMethod_RoundHalfAwayFromZero"
    },
    {
      "trigger": "kCMTimeRoundingMethod_RoundTowardNegativeInfinity (6)",
      "contents": "KCMTimeRoundingMethod_RoundTowardNegativeInfinity"
    },
    {
      "trigger": "kCMTimeRoundingMethod_RoundTowardPositiveInfinity (5)",
      "contents": "KCMTimeRoundingMethod_RoundTowardPositiveInfinity"
    },
    {
      "trigger": "kCMTimeRoundingMethod_RoundTowardZero (2)",
      "contents": "KCMTimeRoundingMethod_RoundTowardZero"
    },
    {
      "trigger": "kCMTimeScaleKey (CFStringRef)",
      "contents": "KCMTimeScaleKey"
    },
    {
      "trigger": "kCMTimeValueKey (CFStringRef)",
      "contents": "KCMTimeValueKey"
    },
    {
      "trigger": "kCMTimeZero (CMTime)",
      "contents": "KCMTimeZero"
    },
    {
      "trigger": "kCMTimedMetadataFormatType_Boxed (1835360888)",
      "contents": "KCMTimedMetadataFormatType_Boxed"
    },
    {
      "trigger": "kCMTimedMetadataFormatType_ICY (1768126752)",
      "contents": "KCMTimedMetadataFormatType_ICY"
    },
    {
      "trigger": "kCMTimedMetadataFormatType_ID3 (1768174368)",
      "contents": "KCMTimedMetadataFormatType_ID3"
    },
    {
      "trigger": "kCMTimingInfoInvalid (CMSampleTimingInfo)",
      "contents": "KCMTimingInfoInvalid"
    },
    {
      "trigger": "kCMVideoCodecType_422YpCbCr8 (846624121)",
      "contents": "KCMVideoCodecType_422YpCbCr8"
    },
    {
      "trigger": "kCMVideoCodecType_Animation (1919706400)",
      "contents": "KCMVideoCodecType_Animation"
    },
    {
      "trigger": "kCMVideoCodecType_AppleProRes422 (1634755438)",
      "contents": "KCMVideoCodecType_AppleProRes422"
    },
    {
      "trigger": "kCMVideoCodecType_AppleProRes422HQ (1634755432)",
      "contents": "KCMVideoCodecType_AppleProRes422HQ"
    },
    {
      "trigger": "kCMVideoCodecType_AppleProRes422LT (1634755443)",
      "contents": "KCMVideoCodecType_AppleProRes422LT"
    },
    {
      "trigger": "kCMVideoCodecType_AppleProRes422Proxy (1634755439)",
      "contents": "KCMVideoCodecType_AppleProRes422Proxy"
    },
    {
      "trigger": "kCMVideoCodecType_AppleProRes4444 (1634743400)",
      "contents": "KCMVideoCodecType_AppleProRes4444"
    },
    {
      "trigger": "kCMVideoCodecType_Cinepak (1668704612)",
      "contents": "KCMVideoCodecType_Cinepak"
    },
    {
      "trigger": "kCMVideoCodecType_DVCNTSC (1685480224)",
      "contents": "KCMVideoCodecType_DVCNTSC"
    },
    {
      "trigger": "kCMVideoCodecType_DVCPAL (1685480304)",
      "contents": "KCMVideoCodecType_DVCPAL"
    },
    {
      "trigger": "kCMVideoCodecType_DVCPROHD1080i50 (1685481525)",
      "contents": "KCMVideoCodecType_DVCPROHD1080i50"
    },
    {
      "trigger": "kCMVideoCodecType_DVCPROHD1080i60 (1685481526)",
      "contents": "KCMVideoCodecType_DVCPROHD1080i60"
    },
    {
      "trigger": "kCMVideoCodecType_DVCPROHD1080p25 (1685481522)",
      "contents": "KCMVideoCodecType_DVCPROHD1080p25"
    },
    {
      "trigger": "kCMVideoCodecType_DVCPROHD1080p30 (1685481523)",
      "contents": "KCMVideoCodecType_DVCPROHD1080p30"
    },
    {
      "trigger": "kCMVideoCodecType_DVCPROHD720p50 (1685481585)",
      "contents": "KCMVideoCodecType_DVCPROHD720p50"
    },
    {
      "trigger": "kCMVideoCodecType_DVCPROHD720p60 (1685481584)",
      "contents": "KCMVideoCodecType_DVCPROHD720p60"
    },
    {
      "trigger": "kCMVideoCodecType_DVCPro50NTSC (1685468526)",
      "contents": "KCMVideoCodecType_DVCPro50NTSC"
    },
    {
      "trigger": "kCMVideoCodecType_DVCPro50PAL (1685468528)",
      "contents": "KCMVideoCodecType_DVCPro50PAL"
    },
    {
      "trigger": "kCMVideoCodecType_DVCProPAL (1685483632)",
      "contents": "KCMVideoCodecType_DVCProPAL"
    },
    {
      "trigger": "kCMVideoCodecType_H263 (1748121139)",
      "contents": "KCMVideoCodecType_H263"
    },
    {
      "trigger": "kCMVideoCodecType_H264 (1635148593)",
      "contents": "KCMVideoCodecType_H264"
    },
    {
      "trigger": "kCMVideoCodecType_JPEG (1785750887)",
      "contents": "KCMVideoCodecType_JPEG"
    },
    {
      "trigger": "kCMVideoCodecType_JPEG_OpenDML (1684890161)",
      "contents": "KCMVideoCodecType_JPEG_OpenDML"
    },
    {
      "trigger": "kCMVideoCodecType_MPEG1Video (1836069238)",
      "contents": "KCMVideoCodecType_MPEG1Video"
    },
    {
      "trigger": "kCMVideoCodecType_MPEG2Video (1836069494)",
      "contents": "KCMVideoCodecType_MPEG2Video"
    },
    {
      "trigger": "kCMVideoCodecType_MPEG4Video (1836070006)",
      "contents": "KCMVideoCodecType_MPEG4Video"
    },
    {
      "trigger": "kCMVideoCodecType_SorensonVideo (1398165809)",
      "contents": "KCMVideoCodecType_SorensonVideo"
    },
    {
      "trigger": "kCMVideoCodecType_SorensonVideo3 (1398165811)",
      "contents": "KCMVideoCodecType_SorensonVideo3"
    },
    {
      "trigger": "kCNNetworkInfoKeyBSSID (CFStringRef)",
      "contents": "KCNNetworkInfoKeyBSSID"
    },
    {
      "trigger": "kCNNetworkInfoKeySSID (CFStringRef)",
      "contents": "KCNNetworkInfoKeySSID"
    },
    {
      "trigger": "kCNNetworkInfoKeySSIDData (CFStringRef)",
      "contents": "KCNNetworkInfoKeySSIDData"
    },
    {
      "trigger": "kCTAdobeCNS1CharacterCollection (1)",
      "contents": "KCTAdobeCNS1CharacterCollection"
    },
    {
      "trigger": "kCTAdobeGB1CharacterCollection (2)",
      "contents": "KCTAdobeGB1CharacterCollection"
    },
    {
      "trigger": "kCTAdobeJapan1CharacterCollection (3)",
      "contents": "KCTAdobeJapan1CharacterCollection"
    },
    {
      "trigger": "kCTAdobeJapan2CharacterCollection (4)",
      "contents": "KCTAdobeJapan2CharacterCollection"
    },
    {
      "trigger": "kCTAdobeKorea1CharacterCollection (5)",
      "contents": "KCTAdobeKorea1CharacterCollection"
    },
    {
      "trigger": "kCTCenterTextAlignment (2)",
      "contents": "KCTCenterTextAlignment"
    },
    {
      "trigger": "kCTCharacterShapeAttributeName (CFStringRef)",
      "contents": "KCTCharacterShapeAttributeName"
    },
    {
      "trigger": "kCTFontAlertHeaderFontType (18)",
      "contents": "KCTFontAlertHeaderFontType"
    },
    {
      "trigger": "kCTFontApplicationFontType (9)",
      "contents": "KCTFontApplicationFontType"
    },
    {
      "trigger": "kCTFontAttributeName (CFStringRef)",
      "contents": "KCTFontAttributeName"
    },
    {
      "trigger": "kCTFontBaselineAdjustAttribute (CFStringRef)",
      "contents": "KCTFontBaselineAdjustAttribute"
    },
    {
      "trigger": "kCTFontBoldTrait (2)",
      "contents": "KCTFontBoldTrait"
    },
    {
      "trigger": "kCTFontCascadeListAttribute (CFStringRef)",
      "contents": "KCTFontCascadeListAttribute"
    },
    {
      "trigger": "kCTFontCharacterSetAttribute (CFStringRef)",
      "contents": "KCTFontCharacterSetAttribute"
    },
    {
      "trigger": "kCTFontClarendonSerifsClass (1073741824)",
      "contents": "KCTFontClarendonSerifsClass"
    },
    {
      "trigger": "kCTFontClassMaskShift (28)",
      "contents": "KCTFontClassMaskShift"
    },
    {
      "trigger": "kCTFontClassMaskTrait (-268435456)",
      "contents": "KCTFontClassMaskTrait"
    },
    {
      "trigger": "kCTFontCollectionCopyDefaultOptions (0)",
      "contents": "KCTFontCollectionCopyDefaultOptions"
    },
    {
      "trigger": "kCTFontCollectionCopyStandardSort (2)",
      "contents": "KCTFontCollectionCopyStandardSort"
    },
    {
      "trigger": "kCTFontCollectionCopyUnique (1)",
      "contents": "KCTFontCollectionCopyUnique"
    },
    {
      "trigger": "kCTFontCollectionRemoveDuplicatesOption (CFStringRef)",
      "contents": "KCTFontCollectionRemoveDuplicatesOption"
    },
    {
      "trigger": "kCTFontColorGlyphsTrait (8192)",
      "contents": "KCTFontColorGlyphsTrait"
    },
    {
      "trigger": "kCTFontCondensedTrait (64)",
      "contents": "KCTFontCondensedTrait"
    },
    {
      "trigger": "kCTFontControlContentFontType (26)",
      "contents": "KCTFontControlContentFontType"
    },
    {
      "trigger": "kCTFontCopyrightNameKey (CFStringRef)",
      "contents": "KCTFontCopyrightNameKey"
    },
    {
      "trigger": "kCTFontDefaultOrientation (0)",
      "contents": "KCTFontDefaultOrientation"
    },
    {
      "trigger": "kCTFontDescriptionNameKey (CFStringRef)",
      "contents": "KCTFontDescriptionNameKey"
    },
    {
      "trigger": "kCTFontDesignerNameKey (CFStringRef)",
      "contents": "KCTFontDesignerNameKey"
    },
    {
      "trigger": "kCTFontDesignerURLNameKey (CFStringRef)",
      "contents": "KCTFontDesignerURLNameKey"
    },
    {
      "trigger": "kCTFontDisplayNameAttribute (CFStringRef)",
      "contents": "KCTFontDisplayNameAttribute"
    },
    {
      "trigger": "kCTFontEmphasizedSystemDetailFontType (20)",
      "contents": "KCTFontEmphasizedSystemDetailFontType"
    },
    {
      "trigger": "kCTFontEmphasizedSystemFontType (3)",
      "contents": "KCTFontEmphasizedSystemFontType"
    },
    {
      "trigger": "kCTFontEnabledAttribute (CFStringRef)",
      "contents": "KCTFontEnabledAttribute"
    },
    {
      "trigger": "kCTFontExpandedTrait (32)",
      "contents": "KCTFontExpandedTrait"
    },
    {
      "trigger": "kCTFontFamilyNameAttribute (CFStringRef)",
      "contents": "KCTFontFamilyNameAttribute"
    },
    {
      "trigger": "kCTFontFamilyNameKey (CFStringRef)",
      "contents": "KCTFontFamilyNameKey"
    },
    {
      "trigger": "kCTFontFeatureSelectorDefaultKey (CFStringRef)",
      "contents": "KCTFontFeatureSelectorDefaultKey"
    },
    {
      "trigger": "kCTFontFeatureSelectorIdentifierKey (CFStringRef)",
      "contents": "KCTFontFeatureSelectorIdentifierKey"
    },
    {
      "trigger": "kCTFontFeatureSelectorNameKey (CFStringRef)",
      "contents": "KCTFontFeatureSelectorNameKey"
    },
    {
      "trigger": "kCTFontFeatureSelectorSettingKey (CFStringRef)",
      "contents": "KCTFontFeatureSelectorSettingKey"
    },
    {
      "trigger": "kCTFontFeatureSettingsAttribute (CFStringRef)",
      "contents": "KCTFontFeatureSettingsAttribute"
    },
    {
      "trigger": "kCTFontFeatureTypeExclusiveKey (CFStringRef)",
      "contents": "KCTFontFeatureTypeExclusiveKey"
    },
    {
      "trigger": "kCTFontFeatureTypeIdentifierKey (CFStringRef)",
      "contents": "KCTFontFeatureTypeIdentifierKey"
    },
    {
      "trigger": "kCTFontFeatureTypeNameKey (CFStringRef)",
      "contents": "KCTFontFeatureTypeNameKey"
    },
    {
      "trigger": "kCTFontFeatureTypeSelectorsKey (CFStringRef)",
      "contents": "KCTFontFeatureTypeSelectorsKey"
    },
    {
      "trigger": "kCTFontFeaturesAttribute (CFStringRef)",
      "contents": "KCTFontFeaturesAttribute"
    },
    {
      "trigger": "kCTFontFixedAdvanceAttribute (CFStringRef)",
      "contents": "KCTFontFixedAdvanceAttribute"
    },
    {
      "trigger": "kCTFontFormatAttribute (CFStringRef)",
      "contents": "KCTFontFormatAttribute"
    },
    {
      "trigger": "kCTFontFormatBitmap (5)",
      "contents": "KCTFontFormatBitmap"
    },
    {
      "trigger": "kCTFontFormatOpenTypePostScript (1)",
      "contents": "KCTFontFormatOpenTypePostScript"
    },
    {
      "trigger": "kCTFontFormatOpenTypeTrueType (2)",
      "contents": "KCTFontFormatOpenTypeTrueType"
    },
    {
      "trigger": "kCTFontFormatPostScript (4)",
      "contents": "KCTFontFormatPostScript"
    },
    {
      "trigger": "kCTFontFormatTrueType (3)",
      "contents": "KCTFontFormatTrueType"
    },
    {
      "trigger": "kCTFontFormatUnrecognized (0)",
      "contents": "KCTFontFormatUnrecognized"
    },
    {
      "trigger": "kCTFontFreeformSerifsClass (1879048192)",
      "contents": "KCTFontFreeformSerifsClass"
    },
    {
      "trigger": "kCTFontFullNameKey (CFStringRef)",
      "contents": "KCTFontFullNameKey"
    },
    {
      "trigger": "kCTFontHorizontalOrientation (1)",
      "contents": "KCTFontHorizontalOrientation"
    },
    {
      "trigger": "kCTFontItalicTrait (1)",
      "contents": "KCTFontItalicTrait"
    },
    {
      "trigger": "kCTFontLabelFontType (10)",
      "contents": "KCTFontLabelFontType"
    },
    {
      "trigger": "kCTFontLanguagesAttribute (CFStringRef)",
      "contents": "KCTFontLanguagesAttribute"
    },
    {
      "trigger": "kCTFontLicenseNameKey (CFStringRef)",
      "contents": "KCTFontLicenseNameKey"
    },
    {
      "trigger": "kCTFontLicenseURLNameKey (CFStringRef)",
      "contents": "KCTFontLicenseURLNameKey"
    },
    {
      "trigger": "kCTFontMacintoshEncodingsAttribute (CFStringRef)",
      "contents": "KCTFontMacintoshEncodingsAttribute"
    },
    {
      "trigger": "kCTFontManagerAutoActivationDefault (0)",
      "contents": "KCTFontManagerAutoActivationDefault"
    },
    {
      "trigger": "kCTFontManagerAutoActivationDisabled (1)",
      "contents": "KCTFontManagerAutoActivationDisabled"
    },
    {
      "trigger": "kCTFontManagerAutoActivationEnabled (2)",
      "contents": "KCTFontManagerAutoActivationEnabled"
    },
    {
      "trigger": "kCTFontManagerAutoActivationPromptUser (3)",
      "contents": "KCTFontManagerAutoActivationPromptUser"
    },
    {
      "trigger": "kCTFontManagerErrorAlreadyRegistered (105)",
      "contents": "KCTFontManagerErrorAlreadyRegistered"
    },
    {
      "trigger": "kCTFontManagerErrorDomain (CFStringRef)",
      "contents": "KCTFontManagerErrorDomain"
    },
    {
      "trigger": "kCTFontManagerErrorFileNotFound (101)",
      "contents": "KCTFontManagerErrorFileNotFound"
    },
    {
      "trigger": "kCTFontManagerErrorFontURLsKey (CFStringRef)",
      "contents": "KCTFontManagerErrorFontURLsKey"
    },
    {
      "trigger": "kCTFontManagerErrorInUse (202)",
      "contents": "KCTFontManagerErrorInUse"
    },
    {
      "trigger": "kCTFontManagerErrorInsufficientPermissions (102)",
      "contents": "KCTFontManagerErrorInsufficientPermissions"
    },
    {
      "trigger": "kCTFontManagerErrorInvalidFontData (104)",
      "contents": "KCTFontManagerErrorInvalidFontData"
    },
    {
      "trigger": "kCTFontManagerErrorNotRegistered (201)",
      "contents": "KCTFontManagerErrorNotRegistered"
    },
    {
      "trigger": "kCTFontManagerErrorSystemRequired (202)",
      "contents": "KCTFontManagerErrorSystemRequired"
    },
    {
      "trigger": "kCTFontManagerErrorUnrecognizedFormat (103)",
      "contents": "KCTFontManagerErrorUnrecognizedFormat"
    },
    {
      "trigger": "kCTFontManagerScopeNone (0)",
      "contents": "KCTFontManagerScopeNone"
    },
    {
      "trigger": "kCTFontManagerScopeProcess (1)",
      "contents": "KCTFontManagerScopeProcess"
    },
    {
      "trigger": "kCTFontManagerScopeSession (3)",
      "contents": "KCTFontManagerScopeSession"
    },
    {
      "trigger": "kCTFontManagerScopeUser (2)",
      "contents": "KCTFontManagerScopeUser"
    },
    {
      "trigger": "kCTFontManufacturerNameKey (CFStringRef)",
      "contents": "KCTFontManufacturerNameKey"
    },
    {
      "trigger": "kCTFontMatrixAttribute (CFStringRef)",
      "contents": "KCTFontMatrixAttribute"
    },
    {
      "trigger": "kCTFontMenuItemCmdKeyFontType (14)",
      "contents": "KCTFontMenuItemCmdKeyFontType"
    },
    {
      "trigger": "kCTFontMenuItemFontType (12)",
      "contents": "KCTFontMenuItemFontType"
    },
    {
      "trigger": "kCTFontMenuItemMarkFontType (13)",
      "contents": "KCTFontMenuItemMarkFontType"
    },
    {
      "trigger": "kCTFontMenuTitleFontType (11)",
      "contents": "KCTFontMenuTitleFontType"
    },
    {
      "trigger": "kCTFontMessageFontType (23)",
      "contents": "KCTFontMessageFontType"
    },
    {
      "trigger": "kCTFontMiniEmphasizedSystemFontType (7)",
      "contents": "KCTFontMiniEmphasizedSystemFontType"
    },
    {
      "trigger": "kCTFontMiniSystemFontType (6)",
      "contents": "KCTFontMiniSystemFontType"
    },
    {
      "trigger": "kCTFontModernSerifsClass (805306368)",
      "contents": "KCTFontModernSerifsClass"
    },
    {
      "trigger": "kCTFontMonoSpaceTrait (1024)",
      "contents": "KCTFontMonoSpaceTrait"
    },
    {
      "trigger": "kCTFontNameAttribute (CFStringRef)",
      "contents": "KCTFontNameAttribute"
    },
    {
      "trigger": "kCTFontNoFontType (4294967295)",
      "contents": "KCTFontNoFontType"
    },
    {
      "trigger": "kCTFontOldStyleSerifsClass (268435456)",
      "contents": "KCTFontOldStyleSerifsClass"
    },
    {
      "trigger": "kCTFontOptionsDefault (0)",
      "contents": "KCTFontOptionsDefault"
    },
    {
      "trigger": "kCTFontOptionsPreferSystemFont (4)",
      "contents": "KCTFontOptionsPreferSystemFont"
    },
    {
      "trigger": "kCTFontOptionsPreventAutoActivation (1)",
      "contents": "KCTFontOptionsPreventAutoActivation"
    },
    {
      "trigger": "kCTFontOrientationAttribute (CFStringRef)",
      "contents": "KCTFontOrientationAttribute"
    },
    {
      "trigger": "kCTFontOrnamentalsClass (-1879048192)",
      "contents": "KCTFontOrnamentalsClass"
    },
    {
      "trigger": "kCTFontPaletteFontType (24)",
      "contents": "KCTFontPaletteFontType"
    },
    {
      "trigger": "kCTFontPostScriptCIDNameKey (CFStringRef)",
      "contents": "KCTFontPostScriptCIDNameKey"
    },
    {
      "trigger": "kCTFontPostScriptNameKey (CFStringRef)",
      "contents": "KCTFontPostScriptNameKey"
    },
    {
      "trigger": "kCTFontPriorityAttribute (CFStringRef)",
      "contents": "KCTFontPriorityAttribute"
    },
    {
      "trigger": "kCTFontPriorityComputer (30000)",
      "contents": "KCTFontPriorityComputer"
    },
    {
      "trigger": "kCTFontPriorityDynamic (50000)",
      "contents": "KCTFontPriorityDynamic"
    },
    {
      "trigger": "kCTFontPriorityNetwork (20000)",
      "contents": "KCTFontPriorityNetwork"
    },
    {
      "trigger": "kCTFontPriorityProcess (60000)",
      "contents": "KCTFontPriorityProcess"
    },
    {
      "trigger": "kCTFontPrioritySystem (10000)",
      "contents": "KCTFontPrioritySystem"
    },
    {
      "trigger": "kCTFontPriorityUser (40000)",
      "contents": "KCTFontPriorityUser"
    },
    {
      "trigger": "kCTFontPushButtonFontType (16)",
      "contents": "KCTFontPushButtonFontType"
    },
    {
      "trigger": "kCTFontRegistrationScopeAttribute (CFStringRef)",
      "contents": "KCTFontRegistrationScopeAttribute"
    },
    {
      "trigger": "kCTFontSampleTextNameKey (CFStringRef)",
      "contents": "KCTFontSampleTextNameKey"
    },
    {
      "trigger": "kCTFontSansSerifClass (-2147483648)",
      "contents": "KCTFontSansSerifClass"
    },
    {
      "trigger": "kCTFontScriptsClass (-1610612736)",
      "contents": "KCTFontScriptsClass"
    },
    {
      "trigger": "kCTFontSizeAttribute (CFStringRef)",
      "contents": "KCTFontSizeAttribute"
    },
    {
      "trigger": "kCTFontSlabSerifsClass (1342177280)",
      "contents": "KCTFontSlabSerifsClass"
    },
    {
      "trigger": "kCTFontSlantTrait (CFStringRef)",
      "contents": "KCTFontSlantTrait"
    },
    {
      "trigger": "kCTFontSmallEmphasizedSystemFontType (5)",
      "contents": "KCTFontSmallEmphasizedSystemFontType"
    },
    {
      "trigger": "kCTFontSmallSystemFontType (4)",
      "contents": "KCTFontSmallSystemFontType"
    },
    {
      "trigger": "kCTFontSmallToolbarFontType (22)",
      "contents": "KCTFontSmallToolbarFontType"
    },
    {
      "trigger": "kCTFontStyleNameAttribute (CFStringRef)",
      "contents": "KCTFontStyleNameAttribute"
    },
    {
      "trigger": "kCTFontStyleNameKey (CFStringRef)",
      "contents": "KCTFontStyleNameKey"
    },
    {
      "trigger": "kCTFontSubFamilyNameKey (CFStringRef)",
      "contents": "KCTFontSubFamilyNameKey"
    },
    {
      "trigger": "kCTFontSymbolicClass (-1073741824)",
      "contents": "KCTFontSymbolicClass"
    },
    {
      "trigger": "kCTFontSymbolicTrait (CFStringRef)",
      "contents": "KCTFontSymbolicTrait"
    },
    {
      "trigger": "kCTFontSystemDetailFontType (19)",
      "contents": "KCTFontSystemDetailFontType"
    },
    {
      "trigger": "kCTFontSystemFontType (2)",
      "contents": "KCTFontSystemFontType"
    },
    {
      "trigger": "kCTFontTableAcnt (1633906292)",
      "contents": "KCTFontTableAcnt"
    },
    {
      "trigger": "kCTFontTableAvar (1635148146)",
      "contents": "KCTFontTableAvar"
    },
    {
      "trigger": "kCTFontTableBASE (1111577413)",
      "contents": "KCTFontTableBASE"
    },
    {
      "trigger": "kCTFontTableBdat (1650745716)",
      "contents": "KCTFontTableBdat"
    },
    {
      "trigger": "kCTFontTableBhed (1651008868)",
      "contents": "KCTFontTableBhed"
    },
    {
      "trigger": "kCTFontTableBloc (1651273571)",
      "contents": "KCTFontTableBloc"
    },
    {
      "trigger": "kCTFontTableBsln (1651731566)",
      "contents": "KCTFontTableBsln"
    },
    {
      "trigger": "kCTFontTableCFF (1128678944)",
      "contents": "KCTFontTableCFF"
    },
    {
      "trigger": "kCTFontTableCmap (1668112752)",
      "contents": "KCTFontTableCmap"
    },
    {
      "trigger": "kCTFontTableCvar (1668702578)",
      "contents": "KCTFontTableCvar"
    },
    {
      "trigger": "kCTFontTableCvt (1668707360)",
      "contents": "KCTFontTableCvt"
    },
    {
      "trigger": "kCTFontTableDSIG (1146308935)",
      "contents": "KCTFontTableDSIG"
    },
    {
      "trigger": "kCTFontTableEBDT (1161970772)",
      "contents": "KCTFontTableEBDT"
    },
    {
      "trigger": "kCTFontTableEBLC (1161972803)",
      "contents": "KCTFontTableEBLC"
    },
    {
      "trigger": "kCTFontTableEBSC (1161974595)",
      "contents": "KCTFontTableEBSC"
    },
    {
      "trigger": "kCTFontTableFdsc (1717859171)",
      "contents": "KCTFontTableFdsc"
    },
    {
      "trigger": "kCTFontTableFeat (1717920116)",
      "contents": "KCTFontTableFeat"
    },
    {
      "trigger": "kCTFontTableFmtx (1718449272)",
      "contents": "KCTFontTableFmtx"
    },
    {
      "trigger": "kCTFontTableFpgm (1718642541)",
      "contents": "KCTFontTableFpgm"
    },
    {
      "trigger": "kCTFontTableFvar (1719034226)",
      "contents": "KCTFontTableFvar"
    },
    {
      "trigger": "kCTFontTableGDEF (1195656518)",
      "contents": "KCTFontTableGDEF"
    },
    {
      "trigger": "kCTFontTableGPOS (1196445523)",
      "contents": "KCTFontTableGPOS"
    },
    {
      "trigger": "kCTFontTableGSUB (1196643650)",
      "contents": "KCTFontTableGSUB"
    },
    {
      "trigger": "kCTFontTableGasp (1734439792)",
      "contents": "KCTFontTableGasp"
    },
    {
      "trigger": "kCTFontTableGlyf (1735162214)",
      "contents": "KCTFontTableGlyf"
    },
    {
      "trigger": "kCTFontTableGvar (1735811442)",
      "contents": "KCTFontTableGvar"
    },
    {
      "trigger": "kCTFontTableHdmx (1751412088)",
      "contents": "KCTFontTableHdmx"
    },
    {
      "trigger": "kCTFontTableHead (1751474532)",
      "contents": "KCTFontTableHead"
    },
    {
      "trigger": "kCTFontTableHhea (1751672161)",
      "contents": "KCTFontTableHhea"
    },
    {
      "trigger": "kCTFontTableHmtx (1752003704)",
      "contents": "KCTFontTableHmtx"
    },
    {
      "trigger": "kCTFontTableHsty (1752396921)",
      "contents": "KCTFontTableHsty"
    },
    {
      "trigger": "kCTFontTableJSTF (1246975046)",
      "contents": "KCTFontTableJSTF"
    },
    {
      "trigger": "kCTFontTableJust (1786082164)",
      "contents": "KCTFontTableJust"
    },
    {
      "trigger": "kCTFontTableKern (1801810542)",
      "contents": "KCTFontTableKern"
    },
    {
      "trigger": "kCTFontTableKerx (1801810552)",
      "contents": "KCTFontTableKerx"
    },
    {
      "trigger": "kCTFontTableLTSH (1280594760)",
      "contents": "KCTFontTableLTSH"
    },
    {
      "trigger": "kCTFontTableLcar (1818452338)",
      "contents": "KCTFontTableLcar"
    },
    {
      "trigger": "kCTFontTableLoca (1819239265)",
      "contents": "KCTFontTableLoca"
    },
    {
      "trigger": "kCTFontTableMaxp (1835104368)",
      "contents": "KCTFontTableMaxp"
    },
    {
      "trigger": "kCTFontTableMort (1836020340)",
      "contents": "KCTFontTableMort"
    },
    {
      "trigger": "kCTFontTableMorx (1836020344)",
      "contents": "KCTFontTableMorx"
    },
    {
      "trigger": "kCTFontTableName (1851878757)",
      "contents": "KCTFontTableName"
    },
    {
      "trigger": "kCTFontTableOS2 (1330851634)",
      "contents": "KCTFontTableOS2"
    },
    {
      "trigger": "kCTFontTableOpbd (1869636196)",
      "contents": "KCTFontTableOpbd"
    },
    {
      "trigger": "kCTFontTableOptionExcludeSynthetic (1)",
      "contents": "KCTFontTableOptionExcludeSynthetic"
    },
    {
      "trigger": "kCTFontTableOptionNoOptions (0)",
      "contents": "KCTFontTableOptionNoOptions"
    },
    {
      "trigger": "kCTFontTablePCLT (1346587732)",
      "contents": "KCTFontTablePCLT"
    },
    {
      "trigger": "kCTFontTablePost (1886352244)",
      "contents": "KCTFontTablePost"
    },
    {
      "trigger": "kCTFontTablePrep (1886545264)",
      "contents": "KCTFontTablePrep"
    },
    {
      "trigger": "kCTFontTableProp (1886547824)",
      "contents": "KCTFontTableProp"
    },
    {
      "trigger": "kCTFontTableSbit (1935829364)",
      "contents": "KCTFontTableSbit"
    },
    {
      "trigger": "kCTFontTableSbix (1935829368)",
      "contents": "KCTFontTableSbix"
    },
    {
      "trigger": "kCTFontTableTrak (1953653099)",
      "contents": "KCTFontTableTrak"
    },
    {
      "trigger": "kCTFontTableVDMX (1447316824)",
      "contents": "KCTFontTableVDMX"
    },
    {
      "trigger": "kCTFontTableVORG (1448038983)",
      "contents": "KCTFontTableVORG"
    },
    {
      "trigger": "kCTFontTableVhea (1986553185)",
      "contents": "KCTFontTableVhea"
    },
    {
      "trigger": "kCTFontTableVmtx (1986884728)",
      "contents": "KCTFontTableVmtx"
    },
    {
      "trigger": "kCTFontTableZapf (1516335206)",
      "contents": "KCTFontTableZapf"
    },
    {
      "trigger": "kCTFontToolTipFontType (25)",
      "contents": "KCTFontToolTipFontType"
    },
    {
      "trigger": "kCTFontToolbarFontType (21)",
      "contents": "KCTFontToolbarFontType"
    },
    {
      "trigger": "kCTFontTrademarkNameKey (CFStringRef)",
      "contents": "KCTFontTrademarkNameKey"
    },
    {
      "trigger": "kCTFontTraitsAttribute (CFStringRef)",
      "contents": "KCTFontTraitsAttribute"
    },
    {
      "trigger": "kCTFontTransitionalSerifsClass (536870912)",
      "contents": "KCTFontTransitionalSerifsClass"
    },
    {
      "trigger": "kCTFontUIOptimizedTrait (4096)",
      "contents": "KCTFontUIOptimizedTrait"
    },
    {
      "trigger": "kCTFontURLAttribute (CFStringRef)",
      "contents": "KCTFontURLAttribute"
    },
    {
      "trigger": "kCTFontUniqueNameKey (CFStringRef)",
      "contents": "KCTFontUniqueNameKey"
    },
    {
      "trigger": "kCTFontUnknownClass (0)",
      "contents": "KCTFontUnknownClass"
    },
    {
      "trigger": "kCTFontUserFixedPitchFontType (1)",
      "contents": "KCTFontUserFixedPitchFontType"
    },
    {
      "trigger": "kCTFontUserFontType (0)",
      "contents": "KCTFontUserFontType"
    },
    {
      "trigger": "kCTFontUtilityWindowTitleFontType (17)",
      "contents": "KCTFontUtilityWindowTitleFontType"
    },
    {
      "trigger": "kCTFontVariationAttribute (CFStringRef)",
      "contents": "KCTFontVariationAttribute"
    },
    {
      "trigger": "kCTFontVariationAxisDefaultValueKey (CFStringRef)",
      "contents": "KCTFontVariationAxisDefaultValueKey"
    },
    {
      "trigger": "kCTFontVariationAxisIdentifierKey (CFStringRef)",
      "contents": "KCTFontVariationAxisIdentifierKey"
    },
    {
      "trigger": "kCTFontVariationAxisMaximumValueKey (CFStringRef)",
      "contents": "KCTFontVariationAxisMaximumValueKey"
    },
    {
      "trigger": "kCTFontVariationAxisMinimumValueKey (CFStringRef)",
      "contents": "KCTFontVariationAxisMinimumValueKey"
    },
    {
      "trigger": "kCTFontVariationAxisNameKey (CFStringRef)",
      "contents": "KCTFontVariationAxisNameKey"
    },
    {
      "trigger": "kCTFontVendorURLNameKey (CFStringRef)",
      "contents": "KCTFontVendorURLNameKey"
    },
    {
      "trigger": "kCTFontVersionNameKey (CFStringRef)",
      "contents": "KCTFontVersionNameKey"
    },
    {
      "trigger": "kCTFontVerticalOrientation (2)",
      "contents": "KCTFontVerticalOrientation"
    },
    {
      "trigger": "kCTFontVerticalTrait (2048)",
      "contents": "KCTFontVerticalTrait"
    },
    {
      "trigger": "kCTFontViewsFontType (8)",
      "contents": "KCTFontViewsFontType"
    },
    {
      "trigger": "kCTFontWeightTrait (CFStringRef)",
      "contents": "KCTFontWeightTrait"
    },
    {
      "trigger": "kCTFontWidthTrait (CFStringRef)",
      "contents": "KCTFontWidthTrait"
    },
    {
      "trigger": "kCTFontWindowTitleFontType (15)",
      "contents": "KCTFontWindowTitleFontType"
    },
    {
      "trigger": "kCTForegroundColorAttributeName (CFStringRef)",
      "contents": "KCTForegroundColorAttributeName"
    },
    {
      "trigger": "kCTForegroundColorFromContextAttributeName (CFStringRef)",
      "contents": "KCTForegroundColorFromContextAttributeName"
    },
    {
      "trigger": "kCTFrameClippingPathsAttributeName (CFStringRef)",
      "contents": "KCTFrameClippingPathsAttributeName"
    },
    {
      "trigger": "kCTFramePathClippingPathAttributeName (CFStringRef)",
      "contents": "KCTFramePathClippingPathAttributeName"
    },
    {
      "trigger": "kCTFramePathFillEvenOdd (0)",
      "contents": "KCTFramePathFillEvenOdd"
    },
    {
      "trigger": "kCTFramePathFillRuleAttributeName (CFStringRef)",
      "contents": "KCTFramePathFillRuleAttributeName"
    },
    {
      "trigger": "kCTFramePathFillWindingNumber (1)",
      "contents": "KCTFramePathFillWindingNumber"
    },
    {
      "trigger": "kCTFramePathWidthAttributeName (CFStringRef)",
      "contents": "KCTFramePathWidthAttributeName"
    },
    {
      "trigger": "kCTFrameProgressionAttributeName (CFStringRef)",
      "contents": "KCTFrameProgressionAttributeName"
    },
    {
      "trigger": "kCTFrameProgressionRightToLeft (1)",
      "contents": "KCTFrameProgressionRightToLeft"
    },
    {
      "trigger": "kCTFrameProgressionTopToBottom (0)",
      "contents": "KCTFrameProgressionTopToBottom"
    },
    {
      "trigger": "kCTGlyphInfoAttributeName (CFStringRef)",
      "contents": "KCTGlyphInfoAttributeName"
    },
    {
      "trigger": "kCTIdentityMappingCharacterCollection (0)",
      "contents": "KCTIdentityMappingCharacterCollection"
    },
    {
      "trigger": "kCTJustifiedTextAlignment (3)",
      "contents": "KCTJustifiedTextAlignment"
    },
    {
      "trigger": "kCTKernAttributeName (CFStringRef)",
      "contents": "KCTKernAttributeName"
    },
    {
      "trigger": "kCTLeftTextAlignment (0)",
      "contents": "KCTLeftTextAlignment"
    },
    {
      "trigger": "kCTLigatureAttributeName (CFStringRef)",
      "contents": "KCTLigatureAttributeName"
    },
    {
      "trigger": "kCTLineBreakByCharWrapping (1)",
      "contents": "KCTLineBreakByCharWrapping"
    },
    {
      "trigger": "kCTLineBreakByClipping (2)",
      "contents": "KCTLineBreakByClipping"
    },
    {
      "trigger": "kCTLineBreakByTruncatingHead (3)",
      "contents": "KCTLineBreakByTruncatingHead"
    },
    {
      "trigger": "kCTLineBreakByTruncatingMiddle (5)",
      "contents": "KCTLineBreakByTruncatingMiddle"
    },
    {
      "trigger": "kCTLineBreakByTruncatingTail (4)",
      "contents": "KCTLineBreakByTruncatingTail"
    },
    {
      "trigger": "kCTLineBreakByWordWrapping (0)",
      "contents": "KCTLineBreakByWordWrapping"
    },
    {
      "trigger": "kCTLineTruncationEnd (1)",
      "contents": "KCTLineTruncationEnd"
    },
    {
      "trigger": "kCTLineTruncationMiddle (2)",
      "contents": "KCTLineTruncationMiddle"
    },
    {
      "trigger": "kCTLineTruncationStart (0)",
      "contents": "KCTLineTruncationStart"
    },
    {
      "trigger": "kCTNaturalTextAlignment (4)",
      "contents": "KCTNaturalTextAlignment"
    },
    {
      "trigger": "kCTParagraphStyleAttributeName (CFStringRef)",
      "contents": "KCTParagraphStyleAttributeName"
    },
    {
      "trigger": "kCTParagraphStyleSpecifierAlignment (0)",
      "contents": "KCTParagraphStyleSpecifierAlignment"
    },
    {
      "trigger": "kCTParagraphStyleSpecifierBaseWritingDirection (13)",
      "contents": "KCTParagraphStyleSpecifierBaseWritingDirection"
    },
    {
      "trigger": "kCTParagraphStyleSpecifierCount (17)",
      "contents": "KCTParagraphStyleSpecifierCount"
    },
    {
      "trigger": "kCTParagraphStyleSpecifierDefaultTabInterval (5)",
      "contents": "KCTParagraphStyleSpecifierDefaultTabInterval"
    },
    {
      "trigger": "kCTParagraphStyleSpecifierFirstLineHeadIndent (1)",
      "contents": "KCTParagraphStyleSpecifierFirstLineHeadIndent"
    },
    {
      "trigger": "kCTParagraphStyleSpecifierHeadIndent (2)",
      "contents": "KCTParagraphStyleSpecifierHeadIndent"
    },
    {
      "trigger": "kCTParagraphStyleSpecifierLineBreakMode (6)",
      "contents": "KCTParagraphStyleSpecifierLineBreakMode"
    },
    {
      "trigger": "kCTParagraphStyleSpecifierLineHeightMultiple (7)",
      "contents": "KCTParagraphStyleSpecifierLineHeightMultiple"
    },
    {
      "trigger": "kCTParagraphStyleSpecifierLineSpacing (10)",
      "contents": "KCTParagraphStyleSpecifierLineSpacing"
    },
    {
      "trigger": "kCTParagraphStyleSpecifierLineSpacingAdjustment (16)",
      "contents": "KCTParagraphStyleSpecifierLineSpacingAdjustment"
    },
    {
      "trigger": "kCTParagraphStyleSpecifierMaximumLineHeight (8)",
      "contents": "KCTParagraphStyleSpecifierMaximumLineHeight"
    },
    {
      "trigger": "kCTParagraphStyleSpecifierMaximumLineSpacing (14)",
      "contents": "KCTParagraphStyleSpecifierMaximumLineSpacing"
    },
    {
      "trigger": "kCTParagraphStyleSpecifierMinimumLineHeight (9)",
      "contents": "KCTParagraphStyleSpecifierMinimumLineHeight"
    },
    {
      "trigger": "kCTParagraphStyleSpecifierMinimumLineSpacing (15)",
      "contents": "KCTParagraphStyleSpecifierMinimumLineSpacing"
    },
    {
      "trigger": "kCTParagraphStyleSpecifierParagraphSpacing (11)",
      "contents": "KCTParagraphStyleSpecifierParagraphSpacing"
    },
    {
      "trigger": "kCTParagraphStyleSpecifierParagraphSpacingBefore (12)",
      "contents": "KCTParagraphStyleSpecifierParagraphSpacingBefore"
    },
    {
      "trigger": "kCTParagraphStyleSpecifierTabStops (4)",
      "contents": "KCTParagraphStyleSpecifierTabStops"
    },
    {
      "trigger": "kCTParagraphStyleSpecifierTailIndent (3)",
      "contents": "KCTParagraphStyleSpecifierTailIndent"
    },
    {
      "trigger": "kCTRightTextAlignment (1)",
      "contents": "KCTRightTextAlignment"
    },
    {
      "trigger": "kCTRunDelegateAttributeName (CFStringRef)",
      "contents": "KCTRunDelegateAttributeName"
    },
    {
      "trigger": "kCTRunDelegateCurrentVersion (1)",
      "contents": "KCTRunDelegateCurrentVersion"
    },
    {
      "trigger": "kCTRunDelegateVersion1 (1)",
      "contents": "KCTRunDelegateVersion1"
    },
    {
      "trigger": "kCTRunStatusHasNonIdentityMatrix (4)",
      "contents": "KCTRunStatusHasNonIdentityMatrix"
    },
    {
      "trigger": "kCTRunStatusNoStatus (0)",
      "contents": "KCTRunStatusNoStatus"
    },
    {
      "trigger": "kCTRunStatusNonMonotonic (2)",
      "contents": "KCTRunStatusNonMonotonic"
    },
    {
      "trigger": "kCTRunStatusRightToLeft (1)",
      "contents": "KCTRunStatusRightToLeft"
    },
    {
      "trigger": "kCTStrokeColorAttributeName (CFStringRef)",
      "contents": "KCTStrokeColorAttributeName"
    },
    {
      "trigger": "kCTStrokeWidthAttributeName (CFStringRef)",
      "contents": "KCTStrokeWidthAttributeName"
    },
    {
      "trigger": "kCTSuperscriptAttributeName (CFStringRef)",
      "contents": "KCTSuperscriptAttributeName"
    },
    {
      "trigger": "kCTTabColumnTerminatorsAttributeName (CFStringRef)",
      "contents": "KCTTabColumnTerminatorsAttributeName"
    },
    {
      "trigger": "kCTTypesetterOptionDisableBidiProcessing (CFStringRef)",
      "contents": "KCTTypesetterOptionDisableBidiProcessing"
    },
    {
      "trigger": "kCTTypesetterOptionForcedEmbeddingLevel (CFStringRef)",
      "contents": "KCTTypesetterOptionForcedEmbeddingLevel"
    },
    {
      "trigger": "kCTUnderlineColorAttributeName (CFStringRef)",
      "contents": "KCTUnderlineColorAttributeName"
    },
    {
      "trigger": "kCTUnderlinePatternDash (512)",
      "contents": "KCTUnderlinePatternDash"
    },
    {
      "trigger": "kCTUnderlinePatternDashDot (768)",
      "contents": "KCTUnderlinePatternDashDot"
    },
    {
      "trigger": "kCTUnderlinePatternDashDotDot (1024)",
      "contents": "KCTUnderlinePatternDashDotDot"
    },
    {
      "trigger": "kCTUnderlinePatternDot (256)",
      "contents": "KCTUnderlinePatternDot"
    },
    {
      "trigger": "kCTUnderlinePatternSolid (0)",
      "contents": "KCTUnderlinePatternSolid"
    },
    {
      "trigger": "kCTUnderlineStyleAttributeName (CFStringRef)",
      "contents": "KCTUnderlineStyleAttributeName"
    },
    {
      "trigger": "kCTUnderlineStyleDouble (9)",
      "contents": "KCTUnderlineStyleDouble"
    },
    {
      "trigger": "kCTUnderlineStyleNone (0)",
      "contents": "KCTUnderlineStyleNone"
    },
    {
      "trigger": "kCTUnderlineStyleSingle (1)",
      "contents": "KCTUnderlineStyleSingle"
    },
    {
      "trigger": "kCTUnderlineStyleThick (2)",
      "contents": "KCTUnderlineStyleThick"
    },
    {
      "trigger": "kCTVersionNumber10_5 (131072)",
      "contents": "KCTVersionNumber10_5"
    },
    {
      "trigger": "kCTVersionNumber10_5_2 (131073)",
      "contents": "KCTVersionNumber10_5_2"
    },
    {
      "trigger": "kCTVersionNumber10_5_3 (131074)",
      "contents": "KCTVersionNumber10_5_3"
    },
    {
      "trigger": "kCTVersionNumber10_5_5 (131075)",
      "contents": "KCTVersionNumber10_5_5"
    },
    {
      "trigger": "kCTVersionNumber10_6 (196608)",
      "contents": "KCTVersionNumber10_6"
    },
    {
      "trigger": "kCTVersionNumber10_7 (262144)",
      "contents": "KCTVersionNumber10_7"
    },
    {
      "trigger": "kCTVerticalFormsAttributeName (CFStringRef)",
      "contents": "KCTVerticalFormsAttributeName"
    },
    {
      "trigger": "kCTWritingDirectionLeftToRight (0)",
      "contents": "KCTWritingDirectionLeftToRight"
    },
    {
      "trigger": "kCTWritingDirectionNatural (-1)",
      "contents": "KCTWritingDirectionNatural"
    },
    {
      "trigger": "kCTWritingDirectionRightToLeft (1)",
      "contents": "KCTWritingDirectionRightToLeft"
    },
    {
      "trigger": "kCVAttachmentMode_ShouldNotPropagate (0)",
      "contents": "KCVAttachmentMode_ShouldNotPropagate"
    },
    {
      "trigger": "kCVAttachmentMode_ShouldPropagate (1)",
      "contents": "KCVAttachmentMode_ShouldPropagate"
    },
    {
      "trigger": "kCVBufferMovieTimeKey (CFStringRef)",
      "contents": "KCVBufferMovieTimeKey"
    },
    {
      "trigger": "kCVBufferNonPropagatedAttachmentsKey (CFStringRef)",
      "contents": "KCVBufferNonPropagatedAttachmentsKey"
    },
    {
      "trigger": "kCVBufferPropagatedAttachmentsKey (CFStringRef)",
      "contents": "KCVBufferPropagatedAttachmentsKey"
    },
    {
      "trigger": "kCVBufferTimeScaleKey (CFStringRef)",
      "contents": "KCVBufferTimeScaleKey"
    },
    {
      "trigger": "kCVBufferTimeValueKey (CFStringRef)",
      "contents": "KCVBufferTimeValueKey"
    },
    {
      "trigger": "kCVImageBufferCGColorSpaceKey (CFStringRef)",
      "contents": "KCVImageBufferCGColorSpaceKey"
    },
    {
      "trigger": "kCVImageBufferChromaLocationBottomFieldKey (CFStringRef)",
      "contents": "KCVImageBufferChromaLocationBottomFieldKey"
    },
    {
      "trigger": "kCVImageBufferChromaLocationTopFieldKey (CFStringRef)",
      "contents": "KCVImageBufferChromaLocationTopFieldKey"
    },
    {
      "trigger": "kCVImageBufferChromaLocation_Bottom (CFStringRef)",
      "contents": "KCVImageBufferChromaLocation_Bottom"
    },
    {
      "trigger": "kCVImageBufferChromaLocation_BottomLeft (CFStringRef)",
      "contents": "KCVImageBufferChromaLocation_BottomLeft"
    },
    {
      "trigger": "kCVImageBufferChromaLocation_Center (CFStringRef)",
      "contents": "KCVImageBufferChromaLocation_Center"
    },
    {
      "trigger": "kCVImageBufferChromaLocation_DV420 (CFStringRef)",
      "contents": "KCVImageBufferChromaLocation_DV420"
    },
    {
      "trigger": "kCVImageBufferChromaLocation_Left (CFStringRef)",
      "contents": "KCVImageBufferChromaLocation_Left"
    },
    {
      "trigger": "kCVImageBufferChromaLocation_Top (CFStringRef)",
      "contents": "KCVImageBufferChromaLocation_Top"
    },
    {
      "trigger": "kCVImageBufferChromaLocation_TopLeft (CFStringRef)",
      "contents": "KCVImageBufferChromaLocation_TopLeft"
    },
    {
      "trigger": "kCVImageBufferChromaSubsamplingKey (CFStringRef)",
      "contents": "KCVImageBufferChromaSubsamplingKey"
    },
    {
      "trigger": "kCVImageBufferChromaSubsampling_411 (CFStringRef)",
      "contents": "KCVImageBufferChromaSubsampling_411"
    },
    {
      "trigger": "kCVImageBufferChromaSubsampling_420 (CFStringRef)",
      "contents": "KCVImageBufferChromaSubsampling_420"
    },
    {
      "trigger": "kCVImageBufferChromaSubsampling_422 (CFStringRef)",
      "contents": "KCVImageBufferChromaSubsampling_422"
    },
    {
      "trigger": "kCVImageBufferCleanApertureHeightKey (CFStringRef)",
      "contents": "KCVImageBufferCleanApertureHeightKey"
    },
    {
      "trigger": "kCVImageBufferCleanApertureHorizontalOffsetKey (CFStringRef)",
      "contents": "KCVImageBufferCleanApertureHorizontalOffsetKey"
    },
    {
      "trigger": "kCVImageBufferCleanApertureKey (CFStringRef)",
      "contents": "KCVImageBufferCleanApertureKey"
    },
    {
      "trigger": "kCVImageBufferCleanApertureVerticalOffsetKey (CFStringRef)",
      "contents": "KCVImageBufferCleanApertureVerticalOffsetKey"
    },
    {
      "trigger": "kCVImageBufferCleanApertureWidthKey (CFStringRef)",
      "contents": "KCVImageBufferCleanApertureWidthKey"
    },
    {
      "trigger": "kCVImageBufferColorPrimariesKey (CFStringRef)",
      "contents": "KCVImageBufferColorPrimariesKey"
    },
    {
      "trigger": "kCVImageBufferColorPrimaries_EBU_3213 (CFStringRef)",
      "contents": "KCVImageBufferColorPrimaries_EBU_3213"
    },
    {
      "trigger": "kCVImageBufferColorPrimaries_ITU_R_709_2 (CFStringRef)",
      "contents": "KCVImageBufferColorPrimaries_ITU_R_709_2"
    },
    {
      "trigger": "kCVImageBufferColorPrimaries_SMPTE_C (CFStringRef)",
      "contents": "KCVImageBufferColorPrimaries_SMPTE_C"
    },
    {
      "trigger": "kCVImageBufferDisplayDimensionsKey (CFStringRef)",
      "contents": "KCVImageBufferDisplayDimensionsKey"
    },
    {
      "trigger": "kCVImageBufferDisplayHeightKey (CFStringRef)",
      "contents": "KCVImageBufferDisplayHeightKey"
    },
    {
      "trigger": "kCVImageBufferDisplayWidthKey (CFStringRef)",
      "contents": "KCVImageBufferDisplayWidthKey"
    },
    {
      "trigger": "kCVImageBufferFieldCountKey (CFStringRef)",
      "contents": "KCVImageBufferFieldCountKey"
    },
    {
      "trigger": "kCVImageBufferFieldDetailKey (CFStringRef)",
      "contents": "KCVImageBufferFieldDetailKey"
    },
    {
      "trigger": "kCVImageBufferFieldDetailSpatialFirstLineEarly (CFStringRef)",
      "contents": "KCVImageBufferFieldDetailSpatialFirstLineEarly"
    },
    {
      "trigger": "kCVImageBufferFieldDetailSpatialFirstLineLate (CFStringRef)",
      "contents": "KCVImageBufferFieldDetailSpatialFirstLineLate"
    },
    {
      "trigger": "kCVImageBufferFieldDetailTemporalBottomFirst (CFStringRef)",
      "contents": "KCVImageBufferFieldDetailTemporalBottomFirst"
    },
    {
      "trigger": "kCVImageBufferFieldDetailTemporalTopFirst (CFStringRef)",
      "contents": "KCVImageBufferFieldDetailTemporalTopFirst"
    },
    {
      "trigger": "kCVImageBufferGammaLevelKey (CFStringRef)",
      "contents": "KCVImageBufferGammaLevelKey"
    },
    {
      "trigger": "kCVImageBufferICCProfileKey (CFStringRef)",
      "contents": "KCVImageBufferICCProfileKey"
    },
    {
      "trigger": "kCVImageBufferPixelAspectRatioHorizontalSpacingKey (CFStringRef)",
      "contents": "KCVImageBufferPixelAspectRatioHorizontalSpacingKey"
    },
    {
      "trigger": "kCVImageBufferPixelAspectRatioKey (CFStringRef)",
      "contents": "KCVImageBufferPixelAspectRatioKey"
    },
    {
      "trigger": "kCVImageBufferPixelAspectRatioVerticalSpacingKey (CFStringRef)",
      "contents": "KCVImageBufferPixelAspectRatioVerticalSpacingKey"
    },
    {
      "trigger": "kCVImageBufferPreferredCleanApertureKey (CFStringRef)",
      "contents": "KCVImageBufferPreferredCleanApertureKey"
    },
    {
      "trigger": "kCVImageBufferTransferFunctionKey (CFStringRef)",
      "contents": "KCVImageBufferTransferFunctionKey"
    },
    {
      "trigger": "kCVImageBufferTransferFunction_ITU_R_709_2 (CFStringRef)",
      "contents": "KCVImageBufferTransferFunction_ITU_R_709_2"
    },
    {
      "trigger": "kCVImageBufferTransferFunction_SMPTE_240M_1995 (CFStringRef)",
      "contents": "KCVImageBufferTransferFunction_SMPTE_240M_1995"
    },
    {
      "trigger": "kCVImageBufferTransferFunction_UseGamma (CFStringRef)",
      "contents": "KCVImageBufferTransferFunction_UseGamma"
    },
    {
      "trigger": "kCVImageBufferYCbCrMatrixKey (CFStringRef)",
      "contents": "KCVImageBufferYCbCrMatrixKey"
    },
    {
      "trigger": "kCVImageBufferYCbCrMatrix_ITU_R_601_4 (CFStringRef)",
      "contents": "KCVImageBufferYCbCrMatrix_ITU_R_601_4"
    },
    {
      "trigger": "kCVImageBufferYCbCrMatrix_ITU_R_709_2 (CFStringRef)",
      "contents": "KCVImageBufferYCbCrMatrix_ITU_R_709_2"
    },
    {
      "trigger": "kCVImageBufferYCbCrMatrix_SMPTE_240M_1995 (CFStringRef)",
      "contents": "KCVImageBufferYCbCrMatrix_SMPTE_240M_1995"
    },
    {
      "trigger": "kCVIndefiniteTime (CVTime)",
      "contents": "KCVIndefiniteTime"
    },
    {
      "trigger": "kCVOpenGLESTextureCacheMaximumTextureAgeKey (CFStringRef)",
      "contents": "KCVOpenGLESTextureCacheMaximumTextureAgeKey"
    },
    {
      "trigger": "kCVPixelBufferBytesPerRowAlignmentKey (CFStringRef)",
      "contents": "KCVPixelBufferBytesPerRowAlignmentKey"
    },
    {
      "trigger": "kCVPixelBufferCGBitmapContextCompatibilityKey (CFStringRef)",
      "contents": "KCVPixelBufferCGBitmapContextCompatibilityKey"
    },
    {
      "trigger": "kCVPixelBufferCGImageCompatibilityKey (CFStringRef)",
      "contents": "KCVPixelBufferCGImageCompatibilityKey"
    },
    {
      "trigger": "kCVPixelBufferExtendedPixelsBottomKey (CFStringRef)",
      "contents": "KCVPixelBufferExtendedPixelsBottomKey"
    },
    {
      "trigger": "kCVPixelBufferExtendedPixelsLeftKey (CFStringRef)",
      "contents": "KCVPixelBufferExtendedPixelsLeftKey"
    },
    {
      "trigger": "kCVPixelBufferExtendedPixelsRightKey (CFStringRef)",
      "contents": "KCVPixelBufferExtendedPixelsRightKey"
    },
    {
      "trigger": "kCVPixelBufferExtendedPixelsTopKey (CFStringRef)",
      "contents": "KCVPixelBufferExtendedPixelsTopKey"
    },
    {
      "trigger": "kCVPixelBufferHeightKey (CFStringRef)",
      "contents": "KCVPixelBufferHeightKey"
    },
    {
      "trigger": "kCVPixelBufferIOSurfacePropertiesKey (CFStringRef)",
      "contents": "KCVPixelBufferIOSurfacePropertiesKey"
    },
    {
      "trigger": "kCVPixelBufferLock_ReadOnly (1)",
      "contents": "KCVPixelBufferLock_ReadOnly"
    },
    {
      "trigger": "kCVPixelBufferMemoryAllocatorKey (CFStringRef)",
      "contents": "KCVPixelBufferMemoryAllocatorKey"
    },
    {
      "trigger": "kCVPixelBufferOpenGLCompatibilityKey (CFStringRef)",
      "contents": "KCVPixelBufferOpenGLCompatibilityKey"
    },
    {
      "trigger": "kCVPixelBufferPixelFormatTypeKey (CFStringRef)",
      "contents": "KCVPixelBufferPixelFormatTypeKey"
    },
    {
      "trigger": "kCVPixelBufferPlaneAlignmentKey (CFStringRef)",
      "contents": "KCVPixelBufferPlaneAlignmentKey"
    },
    {
      "trigger": "kCVPixelBufferPoolAllocationThresholdKey (CFStringRef)",
      "contents": "KCVPixelBufferPoolAllocationThresholdKey"
    },
    {
      "trigger": "kCVPixelBufferPoolFreeBufferNotification (CFStringRef)",
      "contents": "KCVPixelBufferPoolFreeBufferNotification"
    },
    {
      "trigger": "kCVPixelBufferPoolMaximumBufferAgeKey (CFStringRef)",
      "contents": "KCVPixelBufferPoolMaximumBufferAgeKey"
    },
    {
      "trigger": "kCVPixelBufferPoolMinimumBufferCountKey (CFStringRef)",
      "contents": "KCVPixelBufferPoolMinimumBufferCountKey"
    },
    {
      "trigger": "kCVPixelBufferWidthKey (CFStringRef)",
      "contents": "KCVPixelBufferWidthKey"
    },
    {
      "trigger": "kCVPixelFormatBitsPerBlock (CFStringRef)",
      "contents": "KCVPixelFormatBitsPerBlock"
    },
    {
      "trigger": "kCVPixelFormatBlackBlock (CFStringRef)",
      "contents": "KCVPixelFormatBlackBlock"
    },
    {
      "trigger": "kCVPixelFormatBlockHeight (CFStringRef)",
      "contents": "KCVPixelFormatBlockHeight"
    },
    {
      "trigger": "kCVPixelFormatBlockHorizontalAlignment (CFStringRef)",
      "contents": "KCVPixelFormatBlockHorizontalAlignment"
    },
    {
      "trigger": "kCVPixelFormatBlockVerticalAlignment (CFStringRef)",
      "contents": "KCVPixelFormatBlockVerticalAlignment"
    },
    {
      "trigger": "kCVPixelFormatBlockWidth (CFStringRef)",
      "contents": "KCVPixelFormatBlockWidth"
    },
    {
      "trigger": "kCVPixelFormatCGBitmapContextCompatibility (CFStringRef)",
      "contents": "KCVPixelFormatCGBitmapContextCompatibility"
    },
    {
      "trigger": "kCVPixelFormatCGBitmapInfo (CFStringRef)",
      "contents": "KCVPixelFormatCGBitmapInfo"
    },
    {
      "trigger": "kCVPixelFormatCGImageCompatibility (CFStringRef)",
      "contents": "KCVPixelFormatCGImageCompatibility"
    },
    {
      "trigger": "kCVPixelFormatCodecType (CFStringRef)",
      "contents": "KCVPixelFormatCodecType"
    },
    {
      "trigger": "kCVPixelFormatConstant (CFStringRef)",
      "contents": "KCVPixelFormatConstant"
    },
    {
      "trigger": "kCVPixelFormatContainsAlpha (CFStringRef)",
      "contents": "KCVPixelFormatContainsAlpha"
    },
    {
      "trigger": "kCVPixelFormatFillExtendedPixelsCallback (CFStringRef)",
      "contents": "KCVPixelFormatFillExtendedPixelsCallback"
    },
    {
      "trigger": "kCVPixelFormatFourCC (CFStringRef)",
      "contents": "KCVPixelFormatFourCC"
    },
    {
      "trigger": "kCVPixelFormatHorizontalSubsampling (CFStringRef)",
      "contents": "KCVPixelFormatHorizontalSubsampling"
    },
    {
      "trigger": "kCVPixelFormatName (CFStringRef)",
      "contents": "KCVPixelFormatName"
    },
    {
      "trigger": "kCVPixelFormatOpenGLCompatibility (CFStringRef)",
      "contents": "KCVPixelFormatOpenGLCompatibility"
    },
    {
      "trigger": "kCVPixelFormatOpenGLESCompatibility (CFStringRef)",
      "contents": "KCVPixelFormatOpenGLESCompatibility"
    },
    {
      "trigger": "kCVPixelFormatOpenGLFormat (CFStringRef)",
      "contents": "KCVPixelFormatOpenGLFormat"
    },
    {
      "trigger": "kCVPixelFormatOpenGLInternalFormat (CFStringRef)",
      "contents": "KCVPixelFormatOpenGLInternalFormat"
    },
    {
      "trigger": "kCVPixelFormatOpenGLType (CFStringRef)",
      "contents": "KCVPixelFormatOpenGLType"
    },
    {
      "trigger": "kCVPixelFormatPlanes (CFStringRef)",
      "contents": "KCVPixelFormatPlanes"
    },
    {
      "trigger": "kCVPixelFormatQDCompatibility (CFStringRef)",
      "contents": "KCVPixelFormatQDCompatibility"
    },
    {
      "trigger": "kCVPixelFormatType_16BE555 (16)",
      "contents": "KCVPixelFormatType_16BE555"
    },
    {
      "trigger": "kCVPixelFormatType_16BE565 (1110783541)",
      "contents": "KCVPixelFormatType_16BE565"
    },
    {
      "trigger": "kCVPixelFormatType_16Gray (1647392359)",
      "contents": "KCVPixelFormatType_16Gray"
    },
    {
      "trigger": "kCVPixelFormatType_16LE555 (1278555445)",
      "contents": "KCVPixelFormatType_16LE555"
    },
    {
      "trigger": "kCVPixelFormatType_16LE5551 (892679473)",
      "contents": "KCVPixelFormatType_16LE5551"
    },
    {
      "trigger": "kCVPixelFormatType_16LE565 (1278555701)",
      "contents": "KCVPixelFormatType_16LE565"
    },
    {
      "trigger": "kCVPixelFormatType_1IndexedGray_WhiteIsZero (33)",
      "contents": "KCVPixelFormatType_1IndexedGray_WhiteIsZero"
    },
    {
      "trigger": "kCVPixelFormatType_1Monochrome (1)",
      "contents": "KCVPixelFormatType_1Monochrome"
    },
    {
      "trigger": "kCVPixelFormatType_24BGR (842285639)",
      "contents": "KCVPixelFormatType_24BGR"
    },
    {
      "trigger": "kCVPixelFormatType_24RGB (24)",
      "contents": "KCVPixelFormatType_24RGB"
    },
    {
      "trigger": "kCVPixelFormatType_2Indexed (2)",
      "contents": "KCVPixelFormatType_2Indexed"
    },
    {
      "trigger": "kCVPixelFormatType_2IndexedGray_WhiteIsZero (34)",
      "contents": "KCVPixelFormatType_2IndexedGray_WhiteIsZero"
    },
    {
      "trigger": "kCVPixelFormatType_30RGB (1378955371)",
      "contents": "KCVPixelFormatType_30RGB"
    },
    {
      "trigger": "kCVPixelFormatType_32ABGR (1094862674)",
      "contents": "KCVPixelFormatType_32ABGR"
    },
    {
      "trigger": "kCVPixelFormatType_32ARGB (32)",
      "contents": "KCVPixelFormatType_32ARGB"
    },
    {
      "trigger": "kCVPixelFormatType_32AlphaGray (1647522401)",
      "contents": "KCVPixelFormatType_32AlphaGray"
    },
    {
      "trigger": "kCVPixelFormatType_32BGRA (1111970369)",
      "contents": "KCVPixelFormatType_32BGRA"
    },
    {
      "trigger": "kCVPixelFormatType_32RGBA (1380401729)",
      "contents": "KCVPixelFormatType_32RGBA"
    },
    {
      "trigger": "kCVPixelFormatType_420YpCbCr8BiPlanarFullRange (875704422)",
      "contents": "KCVPixelFormatType_420YpCbCr8BiPlanarFullRange"
    },
    {
      "trigger": "kCVPixelFormatType_420YpCbCr8BiPlanarVideoRange (875704438)",
      "contents": "KCVPixelFormatType_420YpCbCr8BiPlanarVideoRange"
    },
    {
      "trigger": "kCVPixelFormatType_420YpCbCr8Planar (2033463856)",
      "contents": "KCVPixelFormatType_420YpCbCr8Planar"
    },
    {
      "trigger": "kCVPixelFormatType_420YpCbCr8PlanarFullRange (1714696752)",
      "contents": "KCVPixelFormatType_420YpCbCr8PlanarFullRange"
    },
    {
      "trigger": "kCVPixelFormatType_422YpCbCr10 (1983000880)",
      "contents": "KCVPixelFormatType_422YpCbCr10"
    },
    {
      "trigger": "kCVPixelFormatType_422YpCbCr16 (1983000886)",
      "contents": "KCVPixelFormatType_422YpCbCr16"
    },
    {
      "trigger": "kCVPixelFormatType_422YpCbCr8 (846624121)",
      "contents": "KCVPixelFormatType_422YpCbCr8"
    },
    {
      "trigger": "kCVPixelFormatType_422YpCbCr8FullRange (2037741158)",
      "contents": "KCVPixelFormatType_422YpCbCr8FullRange"
    },
    {
      "trigger": "kCVPixelFormatType_422YpCbCr8_yuvs (2037741171)",
      "contents": "KCVPixelFormatType_422YpCbCr8_yuvs"
    },
    {
      "trigger": "kCVPixelFormatType_422YpCbCr_4A_8BiPlanar (1630697081)",
      "contents": "KCVPixelFormatType_422YpCbCr_4A_8BiPlanar"
    },
    {
      "trigger": "kCVPixelFormatType_4444AYpCbCr16 (2033463606)",
      "contents": "KCVPixelFormatType_4444AYpCbCr16"
    },
    {
      "trigger": "kCVPixelFormatType_4444AYpCbCr8 (2033463352)",
      "contents": "KCVPixelFormatType_4444AYpCbCr8"
    },
    {
      "trigger": "kCVPixelFormatType_4444YpCbCrA8 (1983131704)",
      "contents": "KCVPixelFormatType_4444YpCbCrA8"
    },
    {
      "trigger": "kCVPixelFormatType_4444YpCbCrA8R (1916022840)",
      "contents": "KCVPixelFormatType_4444YpCbCrA8R"
    },
    {
      "trigger": "kCVPixelFormatType_444YpCbCr10 (1983131952)",
      "contents": "KCVPixelFormatType_444YpCbCr10"
    },
    {
      "trigger": "kCVPixelFormatType_444YpCbCr8 (1983066168)",
      "contents": "KCVPixelFormatType_444YpCbCr8"
    },
    {
      "trigger": "kCVPixelFormatType_48RGB (1647589490)",
      "contents": "KCVPixelFormatType_48RGB"
    },
    {
      "trigger": "kCVPixelFormatType_4Indexed (4)",
      "contents": "KCVPixelFormatType_4Indexed"
    },
    {
      "trigger": "kCVPixelFormatType_4IndexedGray_WhiteIsZero (36)",
      "contents": "KCVPixelFormatType_4IndexedGray_WhiteIsZero"
    },
    {
      "trigger": "kCVPixelFormatType_64ARGB (1647719521)",
      "contents": "KCVPixelFormatType_64ARGB"
    },
    {
      "trigger": "kCVPixelFormatType_8Indexed (8)",
      "contents": "KCVPixelFormatType_8Indexed"
    },
    {
      "trigger": "kCVPixelFormatType_8IndexedGray_WhiteIsZero (40)",
      "contents": "KCVPixelFormatType_8IndexedGray_WhiteIsZero"
    },
    {
      "trigger": "kCVPixelFormatType_OneComponent8 (1278226488)",
      "contents": "KCVPixelFormatType_OneComponent8"
    },
    {
      "trigger": "kCVPixelFormatType_TwoComponent8 (843264056)",
      "contents": "KCVPixelFormatType_TwoComponent8"
    },
    {
      "trigger": "kCVPixelFormatVerticalSubsampling (CFStringRef)",
      "contents": "KCVPixelFormatVerticalSubsampling"
    },
    {
      "trigger": "kCVReturnAllocationFailed (-6662)",
      "contents": "KCVReturnAllocationFailed"
    },
    {
      "trigger": "kCVReturnDisplayLinkAlreadyRunning (-6671)",
      "contents": "KCVReturnDisplayLinkAlreadyRunning"
    },
    {
      "trigger": "kCVReturnDisplayLinkCallbacksNotSet (-6673)",
      "contents": "KCVReturnDisplayLinkCallbacksNotSet"
    },
    {
      "trigger": "kCVReturnDisplayLinkNotRunning (-6672)",
      "contents": "KCVReturnDisplayLinkNotRunning"
    },
    {
      "trigger": "kCVReturnError (-6660)",
      "contents": "KCVReturnError"
    },
    {
      "trigger": "kCVReturnFirst (-6660)",
      "contents": "KCVReturnFirst"
    },
    {
      "trigger": "kCVReturnInvalidArgument (-6661)",
      "contents": "KCVReturnInvalidArgument"
    },
    {
      "trigger": "kCVReturnInvalidDisplay (-6670)",
      "contents": "KCVReturnInvalidDisplay"
    },
    {
      "trigger": "kCVReturnInvalidPixelBufferAttributes (-6682)",
      "contents": "KCVReturnInvalidPixelBufferAttributes"
    },
    {
      "trigger": "kCVReturnInvalidPixelFormat (-6680)",
      "contents": "KCVReturnInvalidPixelFormat"
    },
    {
      "trigger": "kCVReturnInvalidPoolAttributes (-6691)",
      "contents": "KCVReturnInvalidPoolAttributes"
    },
    {
      "trigger": "kCVReturnInvalidSize (-6681)",
      "contents": "KCVReturnInvalidSize"
    },
    {
      "trigger": "kCVReturnLast (-6699)",
      "contents": "KCVReturnLast"
    },
    {
      "trigger": "kCVReturnPixelBufferNotOpenGLCompatible (-6683)",
      "contents": "KCVReturnPixelBufferNotOpenGLCompatible"
    },
    {
      "trigger": "kCVReturnPoolAllocationFailed (-6690)",
      "contents": "KCVReturnPoolAllocationFailed"
    },
    {
      "trigger": "kCVReturnSuccess (0)",
      "contents": "KCVReturnSuccess"
    },
    {
      "trigger": "kCVReturnWouldExceedAllocationThreshold (-6689)",
      "contents": "KCVReturnWouldExceedAllocationThreshold"
    },
    {
      "trigger": "kCVSMPTETimeRunning (2)",
      "contents": "KCVSMPTETimeRunning"
    },
    {
      "trigger": "kCVSMPTETimeType24 (0)",
      "contents": "KCVSMPTETimeType24"
    },
    {
      "trigger": "kCVSMPTETimeType25 (1)",
      "contents": "KCVSMPTETimeType25"
    },
    {
      "trigger": "kCVSMPTETimeType2997 (4)",
      "contents": "KCVSMPTETimeType2997"
    },
    {
      "trigger": "kCVSMPTETimeType2997Drop (5)",
      "contents": "KCVSMPTETimeType2997Drop"
    },
    {
      "trigger": "kCVSMPTETimeType30 (3)",
      "contents": "KCVSMPTETimeType30"
    },
    {
      "trigger": "kCVSMPTETimeType30Drop (2)",
      "contents": "KCVSMPTETimeType30Drop"
    },
    {
      "trigger": "kCVSMPTETimeType5994 (7)",
      "contents": "KCVSMPTETimeType5994"
    },
    {
      "trigger": "kCVSMPTETimeType60 (6)",
      "contents": "KCVSMPTETimeType60"
    },
    {
      "trigger": "kCVSMPTETimeValid (1)",
      "contents": "KCVSMPTETimeValid"
    },
    {
      "trigger": "kCVTimeIsIndefinite (1)",
      "contents": "KCVTimeIsIndefinite"
    },
    {
      "trigger": "kCVTimeStampBottomField (131072)",
      "contents": "KCVTimeStampBottomField"
    },
    {
      "trigger": "kCVTimeStampHostTimeValid (2)",
      "contents": "KCVTimeStampHostTimeValid"
    },
    {
      "trigger": "kCVTimeStampIsInterlaced (196608)",
      "contents": "KCVTimeStampIsInterlaced"
    },
    {
      "trigger": "kCVTimeStampRateScalarValid (16)",
      "contents": "KCVTimeStampRateScalarValid"
    },
    {
      "trigger": "kCVTimeStampSMPTETimeValid (4)",
      "contents": "KCVTimeStampSMPTETimeValid"
    },
    {
      "trigger": "kCVTimeStampTopField (65536)",
      "contents": "KCVTimeStampTopField"
    },
    {
      "trigger": "kCVTimeStampVideoHostTimeValid (3)",
      "contents": "KCVTimeStampVideoHostTimeValid"
    },
    {
      "trigger": "kCVTimeStampVideoRefreshPeriodValid (8)",
      "contents": "KCVTimeStampVideoRefreshPeriodValid"
    },
    {
      "trigger": "kCVTimeStampVideoTimeValid (1)",
      "contents": "KCVTimeStampVideoTimeValid"
    },
    {
      "trigger": "kCVZeroTime (CVTime)",
      "contents": "KCVZeroTime"
    },
    {
      "trigger": "kCanonicalCompositionOffSelector (1)",
      "contents": "KCanonicalCompositionOffSelector"
    },
    {
      "trigger": "kCanonicalCompositionOnSelector (0)",
      "contents": "KCanonicalCompositionOnSelector"
    },
    {
      "trigger": "kCharacterAlternativesType (17)",
      "contents": "KCharacterAlternativesType"
    },
    {
      "trigger": "kCharacterShapeType (20)",
      "contents": "KCharacterShapeType"
    },
    {
      "trigger": "kCircleAnnotationSelector (3)",
      "contents": "KCircleAnnotationSelector"
    },
    {
      "trigger": "kCommonLigaturesOffSelector (3)",
      "contents": "KCommonLigaturesOffSelector"
    },
    {
      "trigger": "kCommonLigaturesOnSelector (2)",
      "contents": "KCommonLigaturesOnSelector"
    },
    {
      "trigger": "kCompatibilityCompositionOffSelector (3)",
      "contents": "KCompatibilityCompositionOffSelector"
    },
    {
      "trigger": "kCompatibilityCompositionOnSelector (2)",
      "contents": "KCompatibilityCompositionOnSelector"
    },
    {
      "trigger": "kConverterPrimeMethod_None (2)",
      "contents": "KConverterPrimeMethod_None"
    },
    {
      "trigger": "kConverterPrimeMethod_Normal (1)",
      "contents": "KConverterPrimeMethod_Normal"
    },
    {
      "trigger": "kConverterPrimeMethod_Pre (0)",
      "contents": "KConverterPrimeMethod_Pre"
    },
    {
      "trigger": "kCursiveConnectionType (2)",
      "contents": "KCursiveConnectionType"
    },
    {
      "trigger": "kCursiveSelector (2)",
      "contents": "KCursiveSelector"
    },
    {
      "trigger": "kDTLSProtocol1 (9)",
      "contents": "KDTLSProtocol1"
    },
    {
      "trigger": "kDecomposeDiacriticsSelector (2)",
      "contents": "KDecomposeDiacriticsSelector"
    },
    {
      "trigger": "kDecorativeBordersSelector (4)",
      "contents": "KDecorativeBordersSelector"
    },
    {
      "trigger": "kDefaultCJKRomanSelector (2)",
      "contents": "KDefaultCJKRomanSelector"
    },
    {
      "trigger": "kDesignComplexityType (18)",
      "contents": "KDesignComplexityType"
    },
    {
      "trigger": "kDesignLevel1Selector (0)",
      "contents": "KDesignLevel1Selector"
    },
    {
      "trigger": "kDesignLevel2Selector (1)",
      "contents": "KDesignLevel2Selector"
    },
    {
      "trigger": "kDesignLevel3Selector (2)",
      "contents": "KDesignLevel3Selector"
    },
    {
      "trigger": "kDesignLevel4Selector (3)",
      "contents": "KDesignLevel4Selector"
    },
    {
      "trigger": "kDesignLevel5Selector (4)",
      "contents": "KDesignLevel5Selector"
    },
    {
      "trigger": "kDiacriticsType (9)",
      "contents": "KDiacriticsType"
    },
    {
      "trigger": "kDiagonalFractionsSelector (2)",
      "contents": "KDiagonalFractionsSelector"
    },
    {
      "trigger": "kDiamondAnnotationSelector (8)",
      "contents": "KDiamondAnnotationSelector"
    },
    {
      "trigger": "kDingbatsSelector (1)",
      "contents": "KDingbatsSelector"
    },
    {
      "trigger": "kDiphthongLigaturesOffSelector (11)",
      "contents": "KDiphthongLigaturesOffSelector"
    },
    {
      "trigger": "kDiphthongLigaturesOnSelector (10)",
      "contents": "KDiphthongLigaturesOnSelector"
    },
    {
      "trigger": "kDisplayTextSelector (1)",
      "contents": "KDisplayTextSelector"
    },
    {
      "trigger": "kEAGLColorFormatRGB565 (NSString*)",
      "contents": "KEAGLColorFormatRGB565"
    },
    {
      "trigger": "kEAGLColorFormatRGBA8 (NSString*)",
      "contents": "KEAGLColorFormatRGBA8"
    },
    {
      "trigger": "kEAGLDrawablePropertyColorFormat (NSString*)",
      "contents": "KEAGLDrawablePropertyColorFormat"
    },
    {
      "trigger": "kEAGLDrawablePropertyRetainedBacking (NSString*)",
      "contents": "KEAGLDrawablePropertyRetainedBacking"
    },
    {
      "trigger": "kEAGLRenderingAPIOpenGLES1 (1)",
      "contents": "KEAGLRenderingAPIOpenGLES1"
    },
    {
      "trigger": "kEAGLRenderingAPIOpenGLES2 (2)",
      "contents": "KEAGLRenderingAPIOpenGLES2"
    },
    {
      "trigger": "kEngravedTextSelector (2)",
      "contents": "KEngravedTextSelector"
    },
    {
      "trigger": "kExpertCharactersSelector (10)",
      "contents": "KExpertCharactersSelector"
    },
    {
      "trigger": "kExponentsOffSelector (9)",
      "contents": "KExponentsOffSelector"
    },
    {
      "trigger": "kExponentsOnSelector (8)",
      "contents": "KExponentsOnSelector"
    },
    {
      "trigger": "kExtAudioFileError_AsyncWriteBufferOverflow (-66570)",
      "contents": "KExtAudioFileError_AsyncWriteBufferOverflow"
    },
    {
      "trigger": "kExtAudioFileError_AsyncWriteTooLarge (-66569)",
      "contents": "KExtAudioFileError_AsyncWriteTooLarge"
    },
    {
      "trigger": "kExtAudioFileError_CodecUnavailableInputConsumed (-66559)",
      "contents": "KExtAudioFileError_CodecUnavailableInputConsumed"
    },
    {
      "trigger": "kExtAudioFileError_CodecUnavailableInputNotConsumed (-66560)",
      "contents": "KExtAudioFileError_CodecUnavailableInputNotConsumed"
    },
    {
      "trigger": "kExtAudioFileError_InvalidChannelMap (-66564)",
      "contents": "KExtAudioFileError_InvalidChannelMap"
    },
    {
      "trigger": "kExtAudioFileError_InvalidDataFormat (-66566)",
      "contents": "KExtAudioFileError_InvalidDataFormat"
    },
    {
      "trigger": "kExtAudioFileError_InvalidOperationOrder (-66565)",
      "contents": "KExtAudioFileError_InvalidOperationOrder"
    },
    {
      "trigger": "kExtAudioFileError_InvalidProperty (-66561)",
      "contents": "KExtAudioFileError_InvalidProperty"
    },
    {
      "trigger": "kExtAudioFileError_InvalidPropertySize (-66562)",
      "contents": "KExtAudioFileError_InvalidPropertySize"
    },
    {
      "trigger": "kExtAudioFileError_InvalidSeek (-66568)",
      "contents": "KExtAudioFileError_InvalidSeek"
    },
    {
      "trigger": "kExtAudioFileError_MaxPacketSizeUnknown (-66567)",
      "contents": "KExtAudioFileError_MaxPacketSizeUnknown"
    },
    {
      "trigger": "kExtAudioFileError_NonPCMClientFormat (-66563)",
      "contents": "KExtAudioFileError_NonPCMClientFormat"
    },
    {
      "trigger": "kExtAudioFileProperty_AudioConverter (1633906294)",
      "contents": "KExtAudioFileProperty_AudioConverter"
    },
    {
      "trigger": "kExtAudioFileProperty_AudioFile (1634101612)",
      "contents": "KExtAudioFileProperty_AudioFile"
    },
    {
      "trigger": "kExtAudioFileProperty_ClientChannelLayout (1667460207)",
      "contents": "KExtAudioFileProperty_ClientChannelLayout"
    },
    {
      "trigger": "kExtAudioFileProperty_ClientDataFormat (1667657076)",
      "contents": "KExtAudioFileProperty_ClientDataFormat"
    },
    {
      "trigger": "kExtAudioFileProperty_ClientMaxPacketSize (1668116595)",
      "contents": "KExtAudioFileProperty_ClientMaxPacketSize"
    },
    {
      "trigger": "kExtAudioFileProperty_CodecManufacturer (1668112750)",
      "contents": "KExtAudioFileProperty_CodecManufacturer"
    },
    {
      "trigger": "kExtAudioFileProperty_ConverterConfig (1633903462)",
      "contents": "KExtAudioFileProperty_ConverterConfig"
    },
    {
      "trigger": "kExtAudioFileProperty_FileChannelLayout (1717791855)",
      "contents": "KExtAudioFileProperty_FileChannelLayout"
    },
    {
      "trigger": "kExtAudioFileProperty_FileDataFormat (1717988724)",
      "contents": "KExtAudioFileProperty_FileDataFormat"
    },
    {
      "trigger": "kExtAudioFileProperty_FileLengthFrames (593916525)",
      "contents": "KExtAudioFileProperty_FileLengthFrames"
    },
    {
      "trigger": "kExtAudioFileProperty_FileMaxPacketSize (1718448243)",
      "contents": "KExtAudioFileProperty_FileMaxPacketSize"
    },
    {
      "trigger": "kExtAudioFileProperty_IOBuffer (1768907366)",
      "contents": "KExtAudioFileProperty_IOBuffer"
    },
    {
      "trigger": "kExtAudioFileProperty_IOBufferSizeBytes (1768907379)",
      "contents": "KExtAudioFileProperty_IOBufferSizeBytes"
    },
    {
      "trigger": "kExtAudioFileProperty_PacketTable (2020635753)",
      "contents": "KExtAudioFileProperty_PacketTable"
    },
    {
      "trigger": "kFleuronsSelector (3)",
      "contents": "KFleuronsSelector"
    },
    {
      "trigger": "kFontAlbanianLanguage (36)",
      "contents": "KFontAlbanianLanguage"
    },
    {
      "trigger": "kFontAmharicLanguage (85)",
      "contents": "KFontAmharicLanguage"
    },
    {
      "trigger": "kFontAmharicScript (28)",
      "contents": "KFontAmharicScript"
    },
    {
      "trigger": "kFontArabicLanguage (12)",
      "contents": "KFontArabicLanguage"
    },
    {
      "trigger": "kFontArabicScript (4)",
      "contents": "KFontArabicScript"
    },
    {
      "trigger": "kFontArmenianLanguage (51)",
      "contents": "KFontArmenianLanguage"
    },
    {
      "trigger": "kFontArmenianScript (24)",
      "contents": "KFontArmenianScript"
    },
    {
      "trigger": "kFontAssameseLanguage (68)",
      "contents": "KFontAssameseLanguage"
    },
    {
      "trigger": "kFontAymaraLanguage (134)",
      "contents": "KFontAymaraLanguage"
    },
    {
      "trigger": "kFontAzerbaijanArLanguage (50)",
      "contents": "KFontAzerbaijanArLanguage"
    },
    {
      "trigger": "kFontAzerbaijaniLanguage (49)",
      "contents": "KFontAzerbaijaniLanguage"
    },
    {
      "trigger": "kFontBasqueLanguage (129)",
      "contents": "KFontBasqueLanguage"
    },
    {
      "trigger": "kFontBengaliLanguage (67)",
      "contents": "KFontBengaliLanguage"
    },
    {
      "trigger": "kFontBengaliScript (13)",
      "contents": "KFontBengaliScript"
    },
    {
      "trigger": "kFontBulgarianLanguage (44)",
      "contents": "KFontBulgarianLanguage"
    },
    {
      "trigger": "kFontBurmeseLanguage (77)",
      "contents": "KFontBurmeseLanguage"
    },
    {
      "trigger": "kFontBurmeseScript (19)",
      "contents": "KFontBurmeseScript"
    },
    {
      "trigger": "kFontByelorussianLanguage (46)",
      "contents": "KFontByelorussianLanguage"
    },
    {
      "trigger": "kFontCatalanLanguage (130)",
      "contents": "KFontCatalanLanguage"
    },
    {
      "trigger": "kFontChewaLanguage (92)",
      "contents": "KFontChewaLanguage"
    },
    {
      "trigger": "kFontChineseScript (2)",
      "contents": "KFontChineseScript"
    },
    {
      "trigger": "kFontCopyrightName (0)",
      "contents": "KFontCopyrightName"
    },
    {
      "trigger": "kFontCroatianLanguage (18)",
      "contents": "KFontCroatianLanguage"
    },
    {
      "trigger": "kFontCustom16BitScript (2)",
      "contents": "KFontCustom16BitScript"
    },
    {
      "trigger": "kFontCustom816BitScript (1)",
      "contents": "KFontCustom816BitScript"
    },
    {
      "trigger": "kFontCustom8BitScript (0)",
      "contents": "KFontCustom8BitScript"
    },
    {
      "trigger": "kFontCustomPlatform (4)",
      "contents": "KFontCustomPlatform"
    },
    {
      "trigger": "kFontCyrillicScript (7)",
      "contents": "KFontCyrillicScript"
    },
    {
      "trigger": "kFontCzechLanguage (38)",
      "contents": "KFontCzechLanguage"
    },
    {
      "trigger": "kFontDanishLanguage (7)",
      "contents": "KFontDanishLanguage"
    },
    {
      "trigger": "kFontDescriptionName (10)",
      "contents": "KFontDescriptionName"
    },
    {
      "trigger": "kFontDesignerName (9)",
      "contents": "KFontDesignerName"
    },
    {
      "trigger": "kFontDesignerURLName (12)",
      "contents": "KFontDesignerURLName"
    },
    {
      "trigger": "kFontDevanagariScript (9)",
      "contents": "KFontDevanagariScript"
    },
    {
      "trigger": "kFontDutchLanguage (4)",
      "contents": "KFontDutchLanguage"
    },
    {
      "trigger": "kFontDzongkhaLanguage (137)",
      "contents": "KFontDzongkhaLanguage"
    },
    {
      "trigger": "kFontEastEuropeanRomanScript (29)",
      "contents": "KFontEastEuropeanRomanScript"
    },
    {
      "trigger": "kFontEnglishLanguage (0)",
      "contents": "KFontEnglishLanguage"
    },
    {
      "trigger": "kFontEsperantoLanguage (94)",
      "contents": "KFontEsperantoLanguage"
    },
    {
      "trigger": "kFontEstonianLanguage (27)",
      "contents": "KFontEstonianLanguage"
    },
    {
      "trigger": "kFontEthiopicScript (28)",
      "contents": "KFontEthiopicScript"
    },
    {
      "trigger": "kFontExtendedArabicScript (31)",
      "contents": "KFontExtendedArabicScript"
    },
    {
      "trigger": "kFontFaeroeseLanguage (30)",
      "contents": "KFontFaeroeseLanguage"
    },
    {
      "trigger": "kFontFamilyName (1)",
      "contents": "KFontFamilyName"
    },
    {
      "trigger": "kFontFarsiLanguage (31)",
      "contents": "KFontFarsiLanguage"
    },
    {
      "trigger": "kFontFinnishLanguage (13)",
      "contents": "KFontFinnishLanguage"
    },
    {
      "trigger": "kFontFlemishLanguage (34)",
      "contents": "KFontFlemishLanguage"
    },
    {
      "trigger": "kFontFrenchLanguage (1)",
      "contents": "KFontFrenchLanguage"
    },
    {
      "trigger": "kFontFullName (4)",
      "contents": "KFontFullName"
    },
    {
      "trigger": "kFontGallaLanguage (87)",
      "contents": "KFontGallaLanguage"
    },
    {
      "trigger": "kFontGeezScript (28)",
      "contents": "KFontGeezScript"
    },
    {
      "trigger": "kFontGeorgianLanguage (52)",
      "contents": "KFontGeorgianLanguage"
    },
    {
      "trigger": "kFontGeorgianScript (23)",
      "contents": "KFontGeorgianScript"
    },
    {
      "trigger": "kFontGermanLanguage (2)",
      "contents": "KFontGermanLanguage"
    },
    {
      "trigger": "kFontGreekLanguage (14)",
      "contents": "KFontGreekLanguage"
    },
    {
      "trigger": "kFontGreekScript (6)",
      "contents": "KFontGreekScript"
    },
    {
      "trigger": "kFontGuaraniLanguage (133)",
      "contents": "KFontGuaraniLanguage"
    },
    {
      "trigger": "kFontGujaratiLanguage (69)",
      "contents": "KFontGujaratiLanguage"
    },
    {
      "trigger": "kFontGujaratiScript (11)",
      "contents": "KFontGujaratiScript"
    },
    {
      "trigger": "kFontGurmukhiScript (10)",
      "contents": "KFontGurmukhiScript"
    },
    {
      "trigger": "kFontHebrewLanguage (10)",
      "contents": "KFontHebrewLanguage"
    },
    {
      "trigger": "kFontHebrewScript (5)",
      "contents": "KFontHebrewScript"
    },
    {
      "trigger": "kFontHindiLanguage (21)",
      "contents": "KFontHindiLanguage"
    },
    {
      "trigger": "kFontHungarianLanguage (26)",
      "contents": "KFontHungarianLanguage"
    },
    {
      "trigger": "kFontISO10646_1993Semantics (2)",
      "contents": "KFontISO10646_1993Semantics"
    },
    {
      "trigger": "kFontIcelandicLanguage (15)",
      "contents": "KFontIcelandicLanguage"
    },
    {
      "trigger": "kFontIndonesianLanguage (81)",
      "contents": "KFontIndonesianLanguage"
    },
    {
      "trigger": "kFontIrishLanguage (35)",
      "contents": "KFontIrishLanguage"
    },
    {
      "trigger": "kFontItalianLanguage (3)",
      "contents": "KFontItalianLanguage"
    },
    {
      "trigger": "kFontJapaneseLanguage (11)",
      "contents": "KFontJapaneseLanguage"
    },
    {
      "trigger": "kFontJapaneseScript (1)",
      "contents": "KFontJapaneseScript"
    },
    {
      "trigger": "kFontJavaneseRomLanguage (138)",
      "contents": "KFontJavaneseRomLanguage"
    },
    {
      "trigger": "kFontKannadaLanguage (73)",
      "contents": "KFontKannadaLanguage"
    },
    {
      "trigger": "kFontKannadaScript (16)",
      "contents": "KFontKannadaScript"
    },
    {
      "trigger": "kFontKashmiriLanguage (61)",
      "contents": "KFontKashmiriLanguage"
    },
    {
      "trigger": "kFontKazakhLanguage (48)",
      "contents": "KFontKazakhLanguage"
    },
    {
      "trigger": "kFontKhmerLanguage (78)",
      "contents": "KFontKhmerLanguage"
    },
    {
      "trigger": "kFontKhmerScript (20)",
      "contents": "KFontKhmerScript"
    },
    {
      "trigger": "kFontKirghizLanguage (54)",
      "contents": "KFontKirghizLanguage"
    },
    {
      "trigger": "kFontKoreanLanguage (23)",
      "contents": "KFontKoreanLanguage"
    },
    {
      "trigger": "kFontKoreanScript (3)",
      "contents": "KFontKoreanScript"
    },
    {
      "trigger": "kFontKurdishLanguage (60)",
      "contents": "KFontKurdishLanguage"
    },
    {
      "trigger": "kFontLaoLanguage (79)",
      "contents": "KFontLaoLanguage"
    },
    {
      "trigger": "kFontLaotianScript (22)",
      "contents": "KFontLaotianScript"
    },
    {
      "trigger": "kFontLappishLanguage (29)",
      "contents": "KFontLappishLanguage"
    },
    {
      "trigger": "kFontLastReservedName (255)",
      "contents": "KFontLastReservedName"
    },
    {
      "trigger": "kFontLatinLanguage (131)",
      "contents": "KFontLatinLanguage"
    },
    {
      "trigger": "kFontLatvianLanguage (28)",
      "contents": "KFontLatvianLanguage"
    },
    {
      "trigger": "kFontLettishLanguage (28)",
      "contents": "KFontLettishLanguage"
    },
    {
      "trigger": "kFontLicenseDescriptionName (13)",
      "contents": "KFontLicenseDescriptionName"
    },
    {
      "trigger": "kFontLicenseInfoURLName (14)",
      "contents": "KFontLicenseInfoURLName"
    },
    {
      "trigger": "kFontLithuanianLanguage (24)",
      "contents": "KFontLithuanianLanguage"
    },
    {
      "trigger": "kFontMacCompatibleFullName (18)",
      "contents": "KFontMacCompatibleFullName"
    },
    {
      "trigger": "kFontMacedonianLanguage (43)",
      "contents": "KFontMacedonianLanguage"
    },
    {
      "trigger": "kFontMacintoshPlatform (1)",
      "contents": "KFontMacintoshPlatform"
    },
    {
      "trigger": "kFontMalagasyLanguage (93)",
      "contents": "KFontMalagasyLanguage"
    },
    {
      "trigger": "kFontMalayArabicLanguage (84)",
      "contents": "KFontMalayArabicLanguage"
    },
    {
      "trigger": "kFontMalayRomanLanguage (83)",
      "contents": "KFontMalayRomanLanguage"
    },
    {
      "trigger": "kFontMalayalamLanguage (72)",
      "contents": "KFontMalayalamLanguage"
    },
    {
      "trigger": "kFontMalayalamScript (17)",
      "contents": "KFontMalayalamScript"
    },
    {
      "trigger": "kFontMalteseLanguage (16)",
      "contents": "KFontMalteseLanguage"
    },
    {
      "trigger": "kFontManufacturerName (8)",
      "contents": "KFontManufacturerName"
    },
    {
      "trigger": "kFontMarathiLanguage (66)",
      "contents": "KFontMarathiLanguage"
    },
    {
      "trigger": "kFontMicrosoftPlatform (3)",
      "contents": "KFontMicrosoftPlatform"
    },
    {
      "trigger": "kFontMicrosoftStandardScript (1)",
      "contents": "KFontMicrosoftStandardScript"
    },
    {
      "trigger": "kFontMicrosoftSymbolScript (0)",
      "contents": "KFontMicrosoftSymbolScript"
    },
    {
      "trigger": "kFontMicrosoftUCS4Script (10)",
      "contents": "KFontMicrosoftUCS4Script"
    },
    {
      "trigger": "kFontMoldavianLanguage (53)",
      "contents": "KFontMoldavianLanguage"
    },
    {
      "trigger": "kFontMongolianCyrLanguage (58)",
      "contents": "KFontMongolianCyrLanguage"
    },
    {
      "trigger": "kFontMongolianLanguage (57)",
      "contents": "KFontMongolianLanguage"
    },
    {
      "trigger": "kFontMongolianScript (27)",
      "contents": "KFontMongolianScript"
    },
    {
      "trigger": "kFontNepaliLanguage (64)",
      "contents": "KFontNepaliLanguage"
    },
    {
      "trigger": "kFontNoLanguageCode (4294967295)",
      "contents": "KFontNoLanguageCode"
    },
    {
      "trigger": "kFontNoNameCode (4294967295)",
      "contents": "KFontNoNameCode"
    },
    {
      "trigger": "kFontNoPlatformCode (4294967295)",
      "contents": "KFontNoPlatformCode"
    },
    {
      "trigger": "kFontNoScriptCode (4294967295)",
      "contents": "KFontNoScriptCode"
    },
    {
      "trigger": "kFontNorwegianLanguage (9)",
      "contents": "KFontNorwegianLanguage"
    },
    {
      "trigger": "kFontOriyaLanguage (71)",
      "contents": "KFontOriyaLanguage"
    },
    {
      "trigger": "kFontOriyaScript (12)",
      "contents": "KFontOriyaScript"
    },
    {
      "trigger": "kFontOromoLanguage (87)",
      "contents": "KFontOromoLanguage"
    },
    {
      "trigger": "kFontPashtoLanguage (59)",
      "contents": "KFontPashtoLanguage"
    },
    {
      "trigger": "kFontPersianLanguage (31)",
      "contents": "KFontPersianLanguage"
    },
    {
      "trigger": "kFontPolishLanguage (25)",
      "contents": "KFontPolishLanguage"
    },
    {
      "trigger": "kFontPortugueseLanguage (8)",
      "contents": "KFontPortugueseLanguage"
    },
    {
      "trigger": "kFontPostScriptCIDName (20)",
      "contents": "KFontPostScriptCIDName"
    },
    {
      "trigger": "kFontPostscriptName (6)",
      "contents": "KFontPostscriptName"
    },
    {
      "trigger": "kFontPreferredFamilyName (16)",
      "contents": "KFontPreferredFamilyName"
    },
    {
      "trigger": "kFontPreferredSubfamilyName (17)",
      "contents": "KFontPreferredSubfamilyName"
    },
    {
      "trigger": "kFontPunjabiLanguage (70)",
      "contents": "KFontPunjabiLanguage"
    },
    {
      "trigger": "kFontQuechuaLanguage (132)",
      "contents": "KFontQuechuaLanguage"
    },
    {
      "trigger": "kFontRSymbolScript (8)",
      "contents": "KFontRSymbolScript"
    },
    {
      "trigger": "kFontReservedPlatform (2)",
      "contents": "KFontReservedPlatform"
    },
    {
      "trigger": "kFontRomanScript (0)",
      "contents": "KFontRomanScript"
    },
    {
      "trigger": "kFontRomanianLanguage (37)",
      "contents": "KFontRomanianLanguage"
    },
    {
      "trigger": "kFontRuandaLanguage (90)",
      "contents": "KFontRuandaLanguage"
    },
    {
      "trigger": "kFontRundiLanguage (91)",
      "contents": "KFontRundiLanguage"
    },
    {
      "trigger": "kFontRussian (7)",
      "contents": "KFontRussian"
    },
    {
      "trigger": "kFontRussianLanguage (32)",
      "contents": "KFontRussianLanguage"
    },
    {
      "trigger": "kFontSaamiskLanguage (29)",
      "contents": "KFontSaamiskLanguage"
    },
    {
      "trigger": "kFontSampleTextName (19)",
      "contents": "KFontSampleTextName"
    },
    {
      "trigger": "kFontSanskritLanguage (65)",
      "contents": "KFontSanskritLanguage"
    },
    {
      "trigger": "kFontSerbianLanguage (42)",
      "contents": "KFontSerbianLanguage"
    },
    {
      "trigger": "kFontSimpChineseLanguage (33)",
      "contents": "KFontSimpChineseLanguage"
    },
    {
      "trigger": "kFontSimpleChineseScript (25)",
      "contents": "KFontSimpleChineseScript"
    },
    {
      "trigger": "kFontSindhiLanguage (62)",
      "contents": "KFontSindhiLanguage"
    },
    {
      "trigger": "kFontSindhiScript (31)",
      "contents": "KFontSindhiScript"
    },
    {
      "trigger": "kFontSinhaleseLanguage (76)",
      "contents": "KFontSinhaleseLanguage"
    },
    {
      "trigger": "kFontSinhaleseScript (18)",
      "contents": "KFontSinhaleseScript"
    },
    {
      "trigger": "kFontSlavicScript (29)",
      "contents": "KFontSlavicScript"
    },
    {
      "trigger": "kFontSlovakLanguage (39)",
      "contents": "KFontSlovakLanguage"
    },
    {
      "trigger": "kFontSlovenianLanguage (40)",
      "contents": "KFontSlovenianLanguage"
    },
    {
      "trigger": "kFontSomaliLanguage (88)",
      "contents": "KFontSomaliLanguage"
    },
    {
      "trigger": "kFontSpanishLanguage (6)",
      "contents": "KFontSpanishLanguage"
    },
    {
      "trigger": "kFontStyleName (2)",
      "contents": "KFontStyleName"
    },
    {
      "trigger": "kFontSundaneseRomLanguage (139)",
      "contents": "KFontSundaneseRomLanguage"
    },
    {
      "trigger": "kFontSwahiliLanguage (89)",
      "contents": "KFontSwahiliLanguage"
    },
    {
      "trigger": "kFontSwedishLanguage (5)",
      "contents": "KFontSwedishLanguage"
    },
    {
      "trigger": "kFontTagalogLanguage (82)",
      "contents": "KFontTagalogLanguage"
    },
    {
      "trigger": "kFontTajikiLanguage (55)",
      "contents": "KFontTajikiLanguage"
    },
    {
      "trigger": "kFontTamilLanguage (74)",
      "contents": "KFontTamilLanguage"
    },
    {
      "trigger": "kFontTamilScript (14)",
      "contents": "KFontTamilScript"
    },
    {
      "trigger": "kFontTatarLanguage (135)",
      "contents": "KFontTatarLanguage"
    },
    {
      "trigger": "kFontTeluguLanguage (75)",
      "contents": "KFontTeluguLanguage"
    },
    {
      "trigger": "kFontTeluguScript (15)",
      "contents": "KFontTeluguScript"
    },
    {
      "trigger": "kFontThaiLanguage (22)",
      "contents": "KFontThaiLanguage"
    },
    {
      "trigger": "kFontThaiScript (21)",
      "contents": "KFontThaiScript"
    },
    {
      "trigger": "kFontTibetanLanguage (63)",
      "contents": "KFontTibetanLanguage"
    },
    {
      "trigger": "kFontTibetanScript (26)",
      "contents": "KFontTibetanScript"
    },
    {
      "trigger": "kFontTigrinyaLanguage (86)",
      "contents": "KFontTigrinyaLanguage"
    },
    {
      "trigger": "kFontTradChineseLanguage (19)",
      "contents": "KFontTradChineseLanguage"
    },
    {
      "trigger": "kFontTrademarkName (7)",
      "contents": "KFontTrademarkName"
    },
    {
      "trigger": "kFontTraditionalChineseScript (2)",
      "contents": "KFontTraditionalChineseScript"
    },
    {
      "trigger": "kFontTurkishLanguage (17)",
      "contents": "KFontTurkishLanguage"
    },
    {
      "trigger": "kFontTurkmenLanguage (56)",
      "contents": "KFontTurkmenLanguage"
    },
    {
      "trigger": "kFontUighurLanguage (136)",
      "contents": "KFontUighurLanguage"
    },
    {
      "trigger": "kFontUkrainianLanguage (45)",
      "contents": "KFontUkrainianLanguage"
    },
    {
      "trigger": "kFontUnicodeDefaultSemantics (0)",
      "contents": "KFontUnicodeDefaultSemantics"
    },
    {
      "trigger": "kFontUnicodePlatform (0)",
      "contents": "KFontUnicodePlatform"
    },
    {
      "trigger": "kFontUnicodeV1_1Semantics (1)",
      "contents": "KFontUnicodeV1_1Semantics"
    },
    {
      "trigger": "kFontUnicodeV2_0BMPOnlySemantics (3)",
      "contents": "KFontUnicodeV2_0BMPOnlySemantics"
    },
    {
      "trigger": "kFontUnicodeV2_0FullCoverageSemantics (4)",
      "contents": "KFontUnicodeV2_0FullCoverageSemantics"
    },
    {
      "trigger": "kFontUnicodeV4_0VariationSequenceSemantics (5)",
      "contents": "KFontUnicodeV4_0VariationSequenceSemantics"
    },
    {
      "trigger": "kFontUninterpretedScript (32)",
      "contents": "KFontUninterpretedScript"
    },
    {
      "trigger": "kFontUniqueName (3)",
      "contents": "KFontUniqueName"
    },
    {
      "trigger": "kFontUrduLanguage (20)",
      "contents": "KFontUrduLanguage"
    },
    {
      "trigger": "kFontUzbekLanguage (47)",
      "contents": "KFontUzbekLanguage"
    },
    {
      "trigger": "kFontVendorURLName (11)",
      "contents": "KFontVendorURLName"
    },
    {
      "trigger": "kFontVersionName (5)",
      "contents": "KFontVersionName"
    },
    {
      "trigger": "kFontVietnameseLanguage (80)",
      "contents": "KFontVietnameseLanguage"
    },
    {
      "trigger": "kFontVietnameseScript (30)",
      "contents": "KFontVietnameseScript"
    },
    {
      "trigger": "kFontWelshLanguage (128)",
      "contents": "KFontWelshLanguage"
    },
    {
      "trigger": "kFontYiddishLanguage (41)",
      "contents": "KFontYiddishLanguage"
    },
    {
      "trigger": "kFormInterrobangOffSelector (7)",
      "contents": "KFormInterrobangOffSelector"
    },
    {
      "trigger": "kFormInterrobangOnSelector (6)",
      "contents": "KFormInterrobangOnSelector"
    },
    {
      "trigger": "kFractionsType (11)",
      "contents": "KFractionsType"
    },
    {
      "trigger": "kFullWidthCJKRomanSelector (3)",
      "contents": "KFullWidthCJKRomanSelector"
    },
    {
      "trigger": "kFullWidthIdeographsSelector (0)",
      "contents": "KFullWidthIdeographsSelector"
    },
    {
      "trigger": "kFullWidthKanaSelector (0)",
      "contents": "KFullWidthKanaSelector"
    },
    {
      "trigger": "kHalfWidthCJKRomanSelector (0)",
      "contents": "KHalfWidthCJKRomanSelector"
    },
    {
      "trigger": "kHalfWidthIdeographsSelector (2)",
      "contents": "KHalfWidthIdeographsSelector"
    },
    {
      "trigger": "kHalfWidthTextSelector (2)",
      "contents": "KHalfWidthTextSelector"
    },
    {
      "trigger": "kHanjaToHangulAltOneSelector (7)",
      "contents": "KHanjaToHangulAltOneSelector"
    },
    {
      "trigger": "kHanjaToHangulAltThreeSelector (9)",
      "contents": "KHanjaToHangulAltThreeSelector"
    },
    {
      "trigger": "kHanjaToHangulAltTwoSelector (8)",
      "contents": "KHanjaToHangulAltTwoSelector"
    },
    {
      "trigger": "kHanjaToHangulSelector (1)",
      "contents": "KHanjaToHangulSelector"
    },
    {
      "trigger": "kHideDiacriticsSelector (1)",
      "contents": "KHideDiacriticsSelector"
    },
    {
      "trigger": "kHiraganaToKatakanaSelector (2)",
      "contents": "KHiraganaToKatakanaSelector"
    },
    {
      "trigger": "kHyphenToEnDashOffSelector (3)",
      "contents": "KHyphenToEnDashOffSelector"
    },
    {
      "trigger": "kHyphenToEnDashOnSelector (2)",
      "contents": "KHyphenToEnDashOnSelector"
    },
    {
      "trigger": "kHyphenToMinusOffSelector (1)",
      "contents": "KHyphenToMinusOffSelector"
    },
    {
      "trigger": "kHyphenToMinusOnSelector (0)",
      "contents": "KHyphenToMinusOnSelector"
    },
    {
      "trigger": "kHyphensToEmDashOffSelector (1)",
      "contents": "KHyphensToEmDashOffSelector"
    },
    {
      "trigger": "kHyphensToEmDashOnSelector (0)",
      "contents": "KHyphensToEmDashOnSelector"
    },
    {
      "trigger": "kIdeographicAltFiveSelector (5)",
      "contents": "KIdeographicAltFiveSelector"
    },
    {
      "trigger": "kIdeographicAltFourSelector (4)",
      "contents": "KIdeographicAltFourSelector"
    },
    {
      "trigger": "kIdeographicAltOneSelector (1)",
      "contents": "KIdeographicAltOneSelector"
    },
    {
      "trigger": "kIdeographicAltThreeSelector (3)",
      "contents": "KIdeographicAltThreeSelector"
    },
    {
      "trigger": "kIdeographicAltTwoSelector (2)",
      "contents": "KIdeographicAltTwoSelector"
    },
    {
      "trigger": "kIdeographicAlternativesType (30)",
      "contents": "KIdeographicAlternativesType"
    },
    {
      "trigger": "kIdeographicSpacingType (26)",
      "contents": "KIdeographicSpacingType"
    },
    {
      "trigger": "kIlluminatedCapsSelector (3)",
      "contents": "KIlluminatedCapsSelector"
    },
    {
      "trigger": "kInequalityLigaturesOffSelector (7)",
      "contents": "KInequalityLigaturesOffSelector"
    },
    {
      "trigger": "kInequalityLigaturesOnSelector (6)",
      "contents": "KInequalityLigaturesOnSelector"
    },
    {
      "trigger": "kInferiorsSelector (2)",
      "contents": "KInferiorsSelector"
    },
    {
      "trigger": "kInitialCapsAndSmallCapsSelector (5)",
      "contents": "KInitialCapsAndSmallCapsSelector"
    },
    {
      "trigger": "kInitialCapsSelector (4)",
      "contents": "KInitialCapsSelector"
    },
    {
      "trigger": "kInternationalSymbolsSelector (5)",
      "contents": "KInternationalSymbolsSelector"
    },
    {
      "trigger": "kInvertedBoxAnnotationSelector (9)",
      "contents": "KInvertedBoxAnnotationSelector"
    },
    {
      "trigger": "kInvertedCircleAnnotationSelector (4)",
      "contents": "KInvertedCircleAnnotationSelector"
    },
    {
      "trigger": "kInvertedRoundedBoxAnnotationSelector (10)",
      "contents": "KInvertedRoundedBoxAnnotationSelector"
    },
    {
      "trigger": "kItalicCJKRomanType (32)",
      "contents": "KItalicCJKRomanType"
    },
    {
      "trigger": "kJIS1978CharactersSelector (2)",
      "contents": "KJIS1978CharactersSelector"
    },
    {
      "trigger": "kJIS1983CharactersSelector (3)",
      "contents": "KJIS1983CharactersSelector"
    },
    {
      "trigger": "kJIS1990CharactersSelector (4)",
      "contents": "KJIS1990CharactersSelector"
    },
    {
      "trigger": "kJUSTCurrentVersion (65536)",
      "contents": "KJUSTCurrentVersion"
    },
    {
      "trigger": "kJUSTKashidaPriority (0)",
      "contents": "KJUSTKashidaPriority"
    },
    {
      "trigger": "kJUSTLetterPriority (2)",
      "contents": "KJUSTLetterPriority"
    },
    {
      "trigger": "kJUSTNullPriority (3)",
      "contents": "KJUSTNullPriority"
    },
    {
      "trigger": "kJUSTOverrideLimits (16384)",
      "contents": "KJUSTOverrideLimits"
    },
    {
      "trigger": "kJUSTOverridePriority (32768)",
      "contents": "KJUSTOverridePriority"
    },
    {
      "trigger": "kJUSTOverrideUnlimited (8192)",
      "contents": "KJUSTOverrideUnlimited"
    },
    {
      "trigger": "kJUSTPriorityCount (4)",
      "contents": "KJUSTPriorityCount"
    },
    {
      "trigger": "kJUSTPriorityMask (3)",
      "contents": "KJUSTPriorityMask"
    },
    {
      "trigger": "kJUSTSpacePriority (1)",
      "contents": "KJUSTSpacePriority"
    },
    {
      "trigger": "kJUSTStandardFormat (0)",
      "contents": "KJUSTStandardFormat"
    },
    {
      "trigger": "kJUSTTag (1786082164)",
      "contents": "KJUSTTag"
    },
    {
      "trigger": "kJUSTUnlimited (4096)",
      "contents": "KJUSTUnlimited"
    },
    {
      "trigger": "kJUSTnoGlyphcode (65535)",
      "contents": "KJUSTnoGlyphcode"
    },
    {
      "trigger": "kJUSTpcConditionalAddAction (2)",
      "contents": "KJUSTpcConditionalAddAction"
    },
    {
      "trigger": "kJUSTpcDecompositionAction (0)",
      "contents": "KJUSTpcDecompositionAction"
    },
    {
      "trigger": "kJUSTpcDuctilityAction (4)",
      "contents": "KJUSTpcDuctilityAction"
    },
    {
      "trigger": "kJUSTpcGlyphRepeatAddAction (5)",
      "contents": "KJUSTpcGlyphRepeatAddAction"
    },
    {
      "trigger": "kJUSTpcGlyphStretchAction (3)",
      "contents": "KJUSTpcGlyphStretchAction"
    },
    {
      "trigger": "kJUSTpcUnconditionalAddAction (1)",
      "contents": "KJUSTpcUnconditionalAddAction"
    },
    {
      "trigger": "kKERNCrossStream (16384)",
      "contents": "KKERNCrossStream"
    },
    {
      "trigger": "kKERNCrossStreamResetNote (2)",
      "contents": "KKERNCrossStreamResetNote"
    },
    {
      "trigger": "kKERNCurrentVersion (65536)",
      "contents": "KKERNCurrentVersion"
    },
    {
      "trigger": "kKERNFormatMask (255)",
      "contents": "KKERNFormatMask"
    },
    {
      "trigger": "kKERNIndexArray (3)",
      "contents": "KKERNIndexArray"
    },
    {
      "trigger": "kKERNLineEndKerning (2)",
      "contents": "KKERNLineEndKerning"
    },
    {
      "trigger": "kKERNLineStart (1)",
      "contents": "KKERNLineStart"
    },
    {
      "trigger": "kKERNNoCrossKerning (4)",
      "contents": "KKERNNoCrossKerning"
    },
    {
      "trigger": "kKERNNoStakeNote (1)",
      "contents": "KKERNNoStakeNote"
    },
    {
      "trigger": "kKERNNotApplied (1)",
      "contents": "KKERNNotApplied"
    },
    {
      "trigger": "kKERNNotesRequested (8)",
      "contents": "KKERNNotesRequested"
    },
    {
      "trigger": "kKERNOrderedList (0)",
      "contents": "KKERNOrderedList"
    },
    {
      "trigger": "kKERNResetCrossStream (32768)",
      "contents": "KKERNResetCrossStream"
    },
    {
      "trigger": "kKERNSimpleArray (2)",
      "contents": "KKERNSimpleArray"
    },
    {
      "trigger": "kKERNStateTable (1)",
      "contents": "KKERNStateTable"
    },
    {
      "trigger": "kKERNTag (1801810542)",
      "contents": "KKERNTag"
    },
    {
      "trigger": "kKERNUnusedBits (7936)",
      "contents": "KKERNUnusedBits"
    },
    {
      "trigger": "kKERNVariation (8192)",
      "contents": "KKERNVariation"
    },
    {
      "trigger": "kKERNVertical (32768)",
      "contents": "KKERNVertical"
    },
    {
      "trigger": "kKERXActionOffsetMask (2147483647)",
      "contents": "KKERXActionOffsetMask"
    },
    {
      "trigger": "kKERXControlPoint (4)",
      "contents": "KKERXControlPoint"
    },
    {
      "trigger": "kKERXCrossStream (1073741824)",
      "contents": "KKERXCrossStream"
    },
    {
      "trigger": "kKERXCrossStreamResetNote (2)",
      "contents": "KKERXCrossStreamResetNote"
    },
    {
      "trigger": "kKERXCurrentVersion (131072)",
      "contents": "KKERXCurrentVersion"
    },
    {
      "trigger": "kKERXFormatMask (255)",
      "contents": "KKERXFormatMask"
    },
    {
      "trigger": "kKERXIndexArray (3)",
      "contents": "KKERXIndexArray"
    },
    {
      "trigger": "kKERXLineEndKerning (2)",
      "contents": "KKERXLineEndKerning"
    },
    {
      "trigger": "kKERXLineStart (1)",
      "contents": "KKERXLineStart"
    },
    {
      "trigger": "kKERXNoCrossKerning (4)",
      "contents": "KKERXNoCrossKerning"
    },
    {
      "trigger": "kKERXNoStakeNote (1)",
      "contents": "KKERXNoStakeNote"
    },
    {
      "trigger": "kKERXNotApplied (1)",
      "contents": "KKERXNotApplied"
    },
    {
      "trigger": "kKERXNotesRequested (8)",
      "contents": "KKERXNotesRequested"
    },
    {
      "trigger": "kKERXOrderedList (0)",
      "contents": "KKERXOrderedList"
    },
    {
      "trigger": "kKERXResetCrossStream (32768)",
      "contents": "KKERXResetCrossStream"
    },
    {
      "trigger": "kKERXSimpleArray (2)",
      "contents": "KKERXSimpleArray"
    },
    {
      "trigger": "kKERXStateTable (1)",
      "contents": "KKERXStateTable"
    },
    {
      "trigger": "kKERXTag (1801810552)",
      "contents": "KKERXTag"
    },
    {
      "trigger": "kKERXUnusedBits (536870656)",
      "contents": "KKERXUnusedBits"
    },
    {
      "trigger": "kKERXUsesCoordinates (-2147483648)",
      "contents": "KKERXUsesCoordinates"
    },
    {
      "trigger": "kKERXVariation (536870912)",
      "contents": "KKERXVariation"
    },
    {
      "trigger": "kKERXVertical (-2147483648)",
      "contents": "KKERXVertical"
    },
    {
      "trigger": "kKanaSpacingType (25)",
      "contents": "KKanaSpacingType"
    },
    {
      "trigger": "kKanaToRomanizationSelector (4)",
      "contents": "KKanaToRomanizationSelector"
    },
    {
      "trigger": "kKatakanaToHiraganaSelector (3)",
      "contents": "KKatakanaToHiraganaSelector"
    },
    {
      "trigger": "kLCARCtlPointFormat (1)",
      "contents": "KLCARCtlPointFormat"
    },
    {
      "trigger": "kLCARCurrentVersion (65536)",
      "contents": "KLCARCurrentVersion"
    },
    {
      "trigger": "kLCARLinearFormat (0)",
      "contents": "KLCARLinearFormat"
    },
    {
      "trigger": "kLCARTag (1818452338)",
      "contents": "KLCARTag"
    },
    {
      "trigger": "kLastFeatureType (-1)",
      "contents": "KLastFeatureType"
    },
    {
      "trigger": "kLetterCaseType (3)",
      "contents": "KLetterCaseType"
    },
    {
      "trigger": "kLigaturesType (1)",
      "contents": "KLigaturesType"
    },
    {
      "trigger": "kLineFinalSwashesOffSelector (7)",
      "contents": "KLineFinalSwashesOffSelector"
    },
    {
      "trigger": "kLineFinalSwashesOnSelector (6)",
      "contents": "KLineFinalSwashesOnSelector"
    },
    {
      "trigger": "kLineInitialSwashesOffSelector (5)",
      "contents": "KLineInitialSwashesOffSelector"
    },
    {
      "trigger": "kLineInitialSwashesOnSelector (4)",
      "contents": "KLineInitialSwashesOnSelector"
    },
    {
      "trigger": "kLinearPCMFormatFlagIsAlignedHigh (16)",
      "contents": "KLinearPCMFormatFlagIsAlignedHigh"
    },
    {
      "trigger": "kLinearPCMFormatFlagIsBigEndian (2)",
      "contents": "KLinearPCMFormatFlagIsBigEndian"
    },
    {
      "trigger": "kLinearPCMFormatFlagIsFloat (1)",
      "contents": "KLinearPCMFormatFlagIsFloat"
    },
    {
      "trigger": "kLinearPCMFormatFlagIsNonInterleaved (32)",
      "contents": "KLinearPCMFormatFlagIsNonInterleaved"
    },
    {
      "trigger": "kLinearPCMFormatFlagIsNonMixable (64)",
      "contents": "KLinearPCMFormatFlagIsNonMixable"
    },
    {
      "trigger": "kLinearPCMFormatFlagIsPacked (8)",
      "contents": "KLinearPCMFormatFlagIsPacked"
    },
    {
      "trigger": "kLinearPCMFormatFlagIsSignedInteger (4)",
      "contents": "KLinearPCMFormatFlagIsSignedInteger"
    },
    {
      "trigger": "kLinearPCMFormatFlagsAreAllClear (-2147483648)",
      "contents": "KLinearPCMFormatFlagsAreAllClear"
    },
    {
      "trigger": "kLinearPCMFormatFlagsSampleFractionMask (8064)",
      "contents": "KLinearPCMFormatFlagsSampleFractionMask"
    },
    {
      "trigger": "kLinearPCMFormatFlagsSampleFractionShift (7)",
      "contents": "KLinearPCMFormatFlagsSampleFractionShift"
    },
    {
      "trigger": "kLinguisticRearrangementOffSelector (1)",
      "contents": "KLinguisticRearrangementOffSelector"
    },
    {
      "trigger": "kLinguisticRearrangementOnSelector (0)",
      "contents": "KLinguisticRearrangementOnSelector"
    },
    {
      "trigger": "kLinguisticRearrangementType (5)",
      "contents": "KLinguisticRearrangementType"
    },
    {
      "trigger": "kLogosOffSelector (7)",
      "contents": "KLogosOffSelector"
    },
    {
      "trigger": "kLogosOnSelector (6)",
      "contents": "KLogosOnSelector"
    },
    {
      "trigger": "kLowerCaseNumbersSelector (0)",
      "contents": "KLowerCaseNumbersSelector"
    },
    {
      "trigger": "kMIDIControlType_14Bit (1)",
      "contents": "KMIDIControlType_14Bit"
    },
    {
      "trigger": "kMIDIControlType_14BitNRPN (5)",
      "contents": "KMIDIControlType_14BitNRPN"
    },
    {
      "trigger": "kMIDIControlType_14BitRPN (3)",
      "contents": "KMIDIControlType_14BitRPN"
    },
    {
      "trigger": "kMIDIControlType_7Bit (0)",
      "contents": "KMIDIControlType_7Bit"
    },
    {
      "trigger": "kMIDIControlType_7BitNRPN (4)",
      "contents": "KMIDIControlType_7BitNRPN"
    },
    {
      "trigger": "kMIDIControlType_7BitRPN (2)",
      "contents": "KMIDIControlType_7BitRPN"
    },
    {
      "trigger": "kMIDIIDNotUnique (-10843)",
      "contents": "KMIDIIDNotUnique"
    },
    {
      "trigger": "kMIDIInvalidClient (-10830)",
      "contents": "KMIDIInvalidClient"
    },
    {
      "trigger": "kMIDIInvalidPort (-10831)",
      "contents": "KMIDIInvalidPort"
    },
    {
      "trigger": "kMIDIInvalidUniqueID (0)",
      "contents": "KMIDIInvalidUniqueID"
    },
    {
      "trigger": "kMIDIMessageSendErr (-10838)",
      "contents": "KMIDIMessageSendErr"
    },
    {
      "trigger": "kMIDIMsgIOError (7)",
      "contents": "KMIDIMsgIOError"
    },
    {
      "trigger": "kMIDIMsgObjectAdded (2)",
      "contents": "KMIDIMsgObjectAdded"
    },
    {
      "trigger": "kMIDIMsgObjectRemoved (3)",
      "contents": "KMIDIMsgObjectRemoved"
    },
    {
      "trigger": "kMIDIMsgPropertyChanged (4)",
      "contents": "KMIDIMsgPropertyChanged"
    },
    {
      "trigger": "kMIDIMsgSerialPortOwnerChanged (6)",
      "contents": "KMIDIMsgSerialPortOwnerChanged"
    },
    {
      "trigger": "kMIDIMsgSetupChanged (1)",
      "contents": "KMIDIMsgSetupChanged"
    },
    {
      "trigger": "kMIDIMsgThruConnectionsChanged (5)",
      "contents": "KMIDIMsgThruConnectionsChanged"
    },
    {
      "trigger": "kMIDINoConnection (-10833)",
      "contents": "KMIDINoConnection"
    },
    {
      "trigger": "kMIDINoCurrentSetup (-10837)",
      "contents": "KMIDINoCurrentSetup"
    },
    {
      "trigger": "kMIDIObjectNotFound (-10842)",
      "contents": "KMIDIObjectNotFound"
    },
    {
      "trigger": "kMIDIObjectType_Destination (3)",
      "contents": "KMIDIObjectType_Destination"
    },
    {
      "trigger": "kMIDIObjectType_Device (0)",
      "contents": "KMIDIObjectType_Device"
    },
    {
      "trigger": "kMIDIObjectType_Entity (1)",
      "contents": "KMIDIObjectType_Entity"
    },
    {
      "trigger": "kMIDIObjectType_ExternalDestination (19)",
      "contents": "KMIDIObjectType_ExternalDestination"
    },
    {
      "trigger": "kMIDIObjectType_ExternalDevice (16)",
      "contents": "KMIDIObjectType_ExternalDevice"
    },
    {
      "trigger": "kMIDIObjectType_ExternalEntity (17)",
      "contents": "KMIDIObjectType_ExternalEntity"
    },
    {
      "trigger": "kMIDIObjectType_ExternalMask (16)",
      "contents": "KMIDIObjectType_ExternalMask"
    },
    {
      "trigger": "kMIDIObjectType_ExternalSource (18)",
      "contents": "KMIDIObjectType_ExternalSource"
    },
    {
      "trigger": "kMIDIObjectType_Other (-1)",
      "contents": "KMIDIObjectType_Other"
    },
    {
      "trigger": "kMIDIObjectType_Source (2)",
      "contents": "KMIDIObjectType_Source"
    },
    {
      "trigger": "kMIDIPropertyAdvanceScheduleTimeMuSec (CFStringRef)",
      "contents": "KMIDIPropertyAdvanceScheduleTimeMuSec"
    },
    {
      "trigger": "kMIDIPropertyCanRoute (CFStringRef)",
      "contents": "KMIDIPropertyCanRoute"
    },
    {
      "trigger": "kMIDIPropertyConnectionUniqueID (CFStringRef)",
      "contents": "KMIDIPropertyConnectionUniqueID"
    },
    {
      "trigger": "kMIDIPropertyDeviceID (CFStringRef)",
      "contents": "KMIDIPropertyDeviceID"
    },
    {
      "trigger": "kMIDIPropertyDisplayName (CFStringRef)",
      "contents": "KMIDIPropertyDisplayName"
    },
    {
      "trigger": "kMIDIPropertyDriverDeviceEditorApp (CFStringRef)",
      "contents": "KMIDIPropertyDriverDeviceEditorApp"
    },
    {
      "trigger": "kMIDIPropertyDriverOwner (CFStringRef)",
      "contents": "KMIDIPropertyDriverOwner"
    },
    {
      "trigger": "kMIDIPropertyDriverVersion (CFStringRef)",
      "contents": "KMIDIPropertyDriverVersion"
    },
    {
      "trigger": "kMIDIPropertyImage (CFStringRef)",
      "contents": "KMIDIPropertyImage"
    },
    {
      "trigger": "kMIDIPropertyIsBroadcast (CFStringRef)",
      "contents": "KMIDIPropertyIsBroadcast"
    },
    {
      "trigger": "kMIDIPropertyIsDrumMachine (CFStringRef)",
      "contents": "KMIDIPropertyIsDrumMachine"
    },
    {
      "trigger": "kMIDIPropertyIsEffectUnit (CFStringRef)",
      "contents": "KMIDIPropertyIsEffectUnit"
    },
    {
      "trigger": "kMIDIPropertyIsEmbeddedEntity (CFStringRef)",
      "contents": "KMIDIPropertyIsEmbeddedEntity"
    },
    {
      "trigger": "kMIDIPropertyIsMixer (CFStringRef)",
      "contents": "KMIDIPropertyIsMixer"
    },
    {
      "trigger": "kMIDIPropertyIsSampler (CFStringRef)",
      "contents": "KMIDIPropertyIsSampler"
    },
    {
      "trigger": "kMIDIPropertyManufacturer (CFStringRef)",
      "contents": "KMIDIPropertyManufacturer"
    },
    {
      "trigger": "kMIDIPropertyMaxReceiveChannels (CFStringRef)",
      "contents": "KMIDIPropertyMaxReceiveChannels"
    },
    {
      "trigger": "kMIDIPropertyMaxSysExSpeed (CFStringRef)",
      "contents": "KMIDIPropertyMaxSysExSpeed"
    },
    {
      "trigger": "kMIDIPropertyMaxTransmitChannels (CFStringRef)",
      "contents": "KMIDIPropertyMaxTransmitChannels"
    },
    {
      "trigger": "kMIDIPropertyModel (CFStringRef)",
      "contents": "KMIDIPropertyModel"
    },
    {
      "trigger": "kMIDIPropertyName (CFStringRef)",
      "contents": "KMIDIPropertyName"
    },
    {
      "trigger": "kMIDIPropertyNameConfiguration (CFStringRef)",
      "contents": "KMIDIPropertyNameConfiguration"
    },
    {
      "trigger": "kMIDIPropertyOffline (CFStringRef)",
      "contents": "KMIDIPropertyOffline"
    },
    {
      "trigger": "kMIDIPropertyPanDisruptsStereo (CFStringRef)",
      "contents": "KMIDIPropertyPanDisruptsStereo"
    },
    {
      "trigger": "kMIDIPropertyPrivate (CFStringRef)",
      "contents": "KMIDIPropertyPrivate"
    },
    {
      "trigger": "kMIDIPropertyReceiveChannels (CFStringRef)",
      "contents": "KMIDIPropertyReceiveChannels"
    },
    {
      "trigger": "kMIDIPropertyReceivesBankSelectLSB (CFStringRef)",
      "contents": "KMIDIPropertyReceivesBankSelectLSB"
    },
    {
      "trigger": "kMIDIPropertyReceivesBankSelectMSB (CFStringRef)",
      "contents": "KMIDIPropertyReceivesBankSelectMSB"
    },
    {
      "trigger": "kMIDIPropertyReceivesClock (CFStringRef)",
      "contents": "KMIDIPropertyReceivesClock"
    },
    {
      "trigger": "kMIDIPropertyReceivesMTC (CFStringRef)",
      "contents": "KMIDIPropertyReceivesMTC"
    },
    {
      "trigger": "kMIDIPropertyReceivesNotes (CFStringRef)",
      "contents": "KMIDIPropertyReceivesNotes"
    },
    {
      "trigger": "kMIDIPropertyReceivesProgramChanges (CFStringRef)",
      "contents": "KMIDIPropertyReceivesProgramChanges"
    },
    {
      "trigger": "kMIDIPropertySingleRealtimeEntity (CFStringRef)",
      "contents": "KMIDIPropertySingleRealtimeEntity"
    },
    {
      "trigger": "kMIDIPropertySupportsGeneralMIDI (CFStringRef)",
      "contents": "KMIDIPropertySupportsGeneralMIDI"
    },
    {
      "trigger": "kMIDIPropertySupportsMMC (CFStringRef)",
      "contents": "KMIDIPropertySupportsMMC"
    },
    {
      "trigger": "kMIDIPropertySupportsShowControl (CFStringRef)",
      "contents": "KMIDIPropertySupportsShowControl"
    },
    {
      "trigger": "kMIDIPropertyTransmitChannels (CFStringRef)",
      "contents": "KMIDIPropertyTransmitChannels"
    },
    {
      "trigger": "kMIDIPropertyTransmitsBankSelectLSB (CFStringRef)",
      "contents": "KMIDIPropertyTransmitsBankSelectLSB"
    },
    {
      "trigger": "kMIDIPropertyTransmitsBankSelectMSB (CFStringRef)",
      "contents": "KMIDIPropertyTransmitsBankSelectMSB"
    },
    {
      "trigger": "kMIDIPropertyTransmitsClock (CFStringRef)",
      "contents": "KMIDIPropertyTransmitsClock"
    },
    {
      "trigger": "kMIDIPropertyTransmitsMTC (CFStringRef)",
      "contents": "KMIDIPropertyTransmitsMTC"
    },
    {
      "trigger": "kMIDIPropertyTransmitsNotes (CFStringRef)",
      "contents": "KMIDIPropertyTransmitsNotes"
    },
    {
      "trigger": "kMIDIPropertyTransmitsProgramChanges (CFStringRef)",
      "contents": "KMIDIPropertyTransmitsProgramChanges"
    },
    {
      "trigger": "kMIDIPropertyUniqueID (CFStringRef)",
      "contents": "KMIDIPropertyUniqueID"
    },
    {
      "trigger": "kMIDIServerStartErr (-10839)",
      "contents": "KMIDIServerStartErr"
    },
    {
      "trigger": "kMIDISetupFormatErr (-10840)",
      "contents": "KMIDISetupFormatErr"
    },
    {
      "trigger": "kMIDIThruConnection_MaxEndpoints (8)",
      "contents": "KMIDIThruConnection_MaxEndpoints"
    },
    {
      "trigger": "kMIDITransform_Add (8)",
      "contents": "KMIDITransform_Add"
    },
    {
      "trigger": "kMIDITransform_FilterOut (1)",
      "contents": "KMIDITransform_FilterOut"
    },
    {
      "trigger": "kMIDITransform_MapControl (2)",
      "contents": "KMIDITransform_MapControl"
    },
    {
      "trigger": "kMIDITransform_MapValue (12)",
      "contents": "KMIDITransform_MapValue"
    },
    {
      "trigger": "kMIDITransform_MaxValue (11)",
      "contents": "KMIDITransform_MaxValue"
    },
    {
      "trigger": "kMIDITransform_MinValue (10)",
      "contents": "KMIDITransform_MinValue"
    },
    {
      "trigger": "kMIDITransform_None (0)",
      "contents": "KMIDITransform_None"
    },
    {
      "trigger": "kMIDITransform_Scale (9)",
      "contents": "KMIDITransform_Scale"
    },
    {
      "trigger": "kMIDIUnknownEndpoint (-10834)",
      "contents": "KMIDIUnknownEndpoint"
    },
    {
      "trigger": "kMIDIUnknownProperty (-10835)",
      "contents": "KMIDIUnknownProperty"
    },
    {
      "trigger": "kMIDIWrongEndpointType (-10832)",
      "contents": "KMIDIWrongEndpointType"
    },
    {
      "trigger": "kMIDIWrongPropertyType (-10836)",
      "contents": "KMIDIWrongPropertyType"
    },
    {
      "trigger": "kMIDIWrongThread (-10841)",
      "contents": "KMIDIWrongThread"
    },
    {
      "trigger": "kMORTContextualType (1)",
      "contents": "KMORTContextualType"
    },
    {
      "trigger": "kMORTCoverDescending (16384)",
      "contents": "KMORTCoverDescending"
    },
    {
      "trigger": "kMORTCoverIgnoreVertical (8192)",
      "contents": "KMORTCoverIgnoreVertical"
    },
    {
      "trigger": "kMORTCoverTypeMask (15)",
      "contents": "KMORTCoverTypeMask"
    },
    {
      "trigger": "kMORTCoverVertical (32768)",
      "contents": "KMORTCoverVertical"
    },
    {
      "trigger": "kMORTCurrInsertBefore (2048)",
      "contents": "KMORTCurrInsertBefore"
    },
    {
      "trigger": "kMORTCurrInsertCountMask (992)",
      "contents": "KMORTCurrInsertCountMask"
    },
    {
      "trigger": "kMORTCurrInsertCountShift (5)",
      "contents": "KMORTCurrInsertCountShift"
    },
    {
      "trigger": "kMORTCurrInsertKashidaLike (8192)",
      "contents": "KMORTCurrInsertKashidaLike"
    },
    {
      "trigger": "kMORTCurrJustTableCountMask (127)",
      "contents": "KMORTCurrJustTableCountMask"
    },
    {
      "trigger": "kMORTCurrJustTableCountShift (0)",
      "contents": "KMORTCurrJustTableCountShift"
    },
    {
      "trigger": "kMORTCurrentVersion (65536)",
      "contents": "KMORTCurrentVersion"
    },
    {
      "trigger": "kMORTDoInsertionsBefore (128)",
      "contents": "KMORTDoInsertionsBefore"
    },
    {
      "trigger": "kMORTInsertionType (5)",
      "contents": "KMORTInsertionType"
    },
    {
      "trigger": "kMORTInsertionsCountMask (63)",
      "contents": "KMORTInsertionsCountMask"
    },
    {
      "trigger": "kMORTIsSplitVowelPiece (64)",
      "contents": "KMORTIsSplitVowelPiece"
    },
    {
      "trigger": "kMORTLigFormOffsetMask (1073741823)",
      "contents": "KMORTLigFormOffsetMask"
    },
    {
      "trigger": "kMORTLigFormOffsetShift (2)",
      "contents": "KMORTLigFormOffsetShift"
    },
    {
      "trigger": "kMORTLigLastAction (-2147483648)",
      "contents": "KMORTLigLastAction"
    },
    {
      "trigger": "kMORTLigStoreLigature (1073741824)",
      "contents": "KMORTLigStoreLigature"
    },
    {
      "trigger": "kMORTLigatureType (2)",
      "contents": "KMORTLigatureType"
    },
    {
      "trigger": "kMORTMarkInsertBefore (1024)",
      "contents": "KMORTMarkInsertBefore"
    },
    {
      "trigger": "kMORTMarkInsertCountMask (31)",
      "contents": "KMORTMarkInsertCountMask"
    },
    {
      "trigger": "kMORTMarkInsertCountShift (0)",
      "contents": "KMORTMarkInsertCountShift"
    },
    {
      "trigger": "kMORTMarkInsertKashidaLike (4096)",
      "contents": "KMORTMarkInsertKashidaLike"
    },
    {
      "trigger": "kMORTMarkJustTableCountMask (16256)",
      "contents": "KMORTMarkJustTableCountMask"
    },
    {
      "trigger": "kMORTMarkJustTableCountShift (7)",
      "contents": "KMORTMarkJustTableCountShift"
    },
    {
      "trigger": "kMORTRearrangementType (0)",
      "contents": "KMORTRearrangementType"
    },
    {
      "trigger": "kMORTSwashType (4)",
      "contents": "KMORTSwashType"
    },
    {
      "trigger": "kMORTTag (1836020340)",
      "contents": "KMORTTag"
    },
    {
      "trigger": "kMORTraCDx (6)",
      "contents": "KMORTraCDx"
    },
    {
      "trigger": "kMORTraCDxA (8)",
      "contents": "KMORTraCDxA"
    },
    {
      "trigger": "kMORTraCDxAB (12)",
      "contents": "KMORTraCDxAB"
    },
    {
      "trigger": "kMORTraCDxBA (13)",
      "contents": "KMORTraCDxBA"
    },
    {
      "trigger": "kMORTraDCx (7)",
      "contents": "KMORTraDCx"
    },
    {
      "trigger": "kMORTraDCxA (9)",
      "contents": "KMORTraDCxA"
    },
    {
      "trigger": "kMORTraDCxAB (14)",
      "contents": "KMORTraDCxAB"
    },
    {
      "trigger": "kMORTraDCxBA (15)",
      "contents": "KMORTraDCxBA"
    },
    {
      "trigger": "kMORTraDx (2)",
      "contents": "KMORTraDx"
    },
    {
      "trigger": "kMORTraDxA (3)",
      "contents": "KMORTraDxA"
    },
    {
      "trigger": "kMORTraDxAB (10)",
      "contents": "KMORTraDxAB"
    },
    {
      "trigger": "kMORTraDxBA (11)",
      "contents": "KMORTraDxBA"
    },
    {
      "trigger": "kMORTraNoAction (0)",
      "contents": "KMORTraNoAction"
    },
    {
      "trigger": "kMORTraxA (1)",
      "contents": "KMORTraxA"
    },
    {
      "trigger": "kMORTraxAB (4)",
      "contents": "KMORTraxAB"
    },
    {
      "trigger": "kMORTraxBA (5)",
      "contents": "KMORTraxBA"
    },
    {
      "trigger": "kMORXCoverDescending (1073741824)",
      "contents": "KMORXCoverDescending"
    },
    {
      "trigger": "kMORXCoverIgnoreVertical (536870912)",
      "contents": "KMORXCoverIgnoreVertical"
    },
    {
      "trigger": "kMORXCoverTypeMask (255)",
      "contents": "KMORXCoverTypeMask"
    },
    {
      "trigger": "kMORXCoverVertical (-2147483648)",
      "contents": "KMORXCoverVertical"
    },
    {
      "trigger": "kMORXCurrentVersion (131072)",
      "contents": "KMORXCurrentVersion"
    },
    {
      "trigger": "kMORXTag (1836020344)",
      "contents": "KMORXTag"
    },
    {
      "trigger": "kMPEG4Object_AAC_LC (2)",
      "contents": "KMPEG4Object_AAC_LC"
    },
    {
      "trigger": "kMPEG4Object_AAC_LTP (4)",
      "contents": "KMPEG4Object_AAC_LTP"
    },
    {
      "trigger": "kMPEG4Object_AAC_Main (1)",
      "contents": "KMPEG4Object_AAC_Main"
    },
    {
      "trigger": "kMPEG4Object_AAC_SBR (5)",
      "contents": "KMPEG4Object_AAC_SBR"
    },
    {
      "trigger": "kMPEG4Object_AAC_SSR (3)",
      "contents": "KMPEG4Object_AAC_SSR"
    },
    {
      "trigger": "kMPEG4Object_AAC_Scalable (6)",
      "contents": "KMPEG4Object_AAC_Scalable"
    },
    {
      "trigger": "kMPEG4Object_CELP (8)",
      "contents": "KMPEG4Object_CELP"
    },
    {
      "trigger": "kMPEG4Object_HVXC (9)",
      "contents": "KMPEG4Object_HVXC"
    },
    {
      "trigger": "kMPEG4Object_TwinVQ (7)",
      "contents": "KMPEG4Object_TwinVQ"
    },
    {
      "trigger": "kMathSymbolsSelector (6)",
      "contents": "KMathSymbolsSelector"
    },
    {
      "trigger": "kMathematicalExtrasType (15)",
      "contents": "KMathematicalExtrasType"
    },
    {
      "trigger": "kMonospacedNumbersSelector (0)",
      "contents": "KMonospacedNumbersSelector"
    },
    {
      "trigger": "kMonospacedTextSelector (1)",
      "contents": "KMonospacedTextSelector"
    },
    {
      "trigger": "kMusicEventType_AUPreset (10)",
      "contents": "KMusicEventType_AUPreset"
    },
    {
      "trigger": "kMusicEventType_ExtendedNote (1)",
      "contents": "KMusicEventType_ExtendedNote"
    },
    {
      "trigger": "kMusicEventType_ExtendedTempo (3)",
      "contents": "KMusicEventType_ExtendedTempo"
    },
    {
      "trigger": "kMusicEventType_MIDIChannelMessage (7)",
      "contents": "KMusicEventType_MIDIChannelMessage"
    },
    {
      "trigger": "kMusicEventType_MIDINoteMessage (6)",
      "contents": "KMusicEventType_MIDINoteMessage"
    },
    {
      "trigger": "kMusicEventType_MIDIRawData (8)",
      "contents": "KMusicEventType_MIDIRawData"
    },
    {
      "trigger": "kMusicEventType_Meta (5)",
      "contents": "KMusicEventType_Meta"
    },
    {
      "trigger": "kMusicEventType_NULL (0)",
      "contents": "KMusicEventType_NULL"
    },
    {
      "trigger": "kMusicEventType_Parameter (9)",
      "contents": "KMusicEventType_Parameter"
    },
    {
      "trigger": "kMusicEventType_User (4)",
      "contents": "KMusicEventType_User"
    },
    {
      "trigger": "kMusicSequenceFileFlags_EraseFile (1)",
      "contents": "KMusicSequenceFileFlags_EraseFile"
    },
    {
      "trigger": "kMusicSequenceFile_MIDIType (1835623529)",
      "contents": "KMusicSequenceFile_MIDIType"
    },
    {
      "trigger": "kMusicSequenceFile_iMelodyType (1768777068)",
      "contents": "KMusicSequenceFile_iMelodyType"
    },
    {
      "trigger": "kMusicSequenceLoadSMF_ChannelsToTracks (1)",
      "contents": "KMusicSequenceLoadSMF_ChannelsToTracks"
    },
    {
      "trigger": "kMusicSequenceType_Beats (1650811252)",
      "contents": "KMusicSequenceType_Beats"
    },
    {
      "trigger": "kMusicSequenceType_Samples (1935764848)",
      "contents": "KMusicSequenceType_Samples"
    },
    {
      "trigger": "kMusicSequenceType_Seconds (1936024435)",
      "contents": "KMusicSequenceType_Seconds"
    },
    {
      "trigger": "kNeverAuthenticate (0)",
      "contents": "KNeverAuthenticate"
    },
    {
      "trigger": "kNoAlternatesSelector (0)",
      "contents": "KNoAlternatesSelector"
    },
    {
      "trigger": "kNoAnnotationSelector (0)",
      "contents": "KNoAnnotationSelector"
    },
    {
      "trigger": "kNoCJKItalicRomanSelector (0)",
      "contents": "KNoCJKItalicRomanSelector"
    },
    {
      "trigger": "kNoCJKSymbolAlternativesSelector (0)",
      "contents": "KNoCJKSymbolAlternativesSelector"
    },
    {
      "trigger": "kNoFractionsSelector (0)",
      "contents": "KNoFractionsSelector"
    },
    {
      "trigger": "kNoIdeographicAlternativesSelector (0)",
      "contents": "KNoIdeographicAlternativesSelector"
    },
    {
      "trigger": "kNoOrnamentsSelector (0)",
      "contents": "KNoOrnamentsSelector"
    },
    {
      "trigger": "kNoRubyKanaSelector (0)",
      "contents": "KNoRubyKanaSelector"
    },
    {
      "trigger": "kNoStyleOptionsSelector (0)",
      "contents": "KNoStyleOptionsSelector"
    },
    {
      "trigger": "kNoTransliterationSelector (0)",
      "contents": "KNoTransliterationSelector"
    },
    {
      "trigger": "kNonFinalSwashesOffSelector (9)",
      "contents": "KNonFinalSwashesOffSelector"
    },
    {
      "trigger": "kNonFinalSwashesOnSelector (8)",
      "contents": "KNonFinalSwashesOnSelector"
    },
    {
      "trigger": "kNormalPositionSelector (0)",
      "contents": "KNormalPositionSelector"
    },
    {
      "trigger": "kNumberCaseType (21)",
      "contents": "KNumberCaseType"
    },
    {
      "trigger": "kNumberSpacingType (6)",
      "contents": "KNumberSpacingType"
    },
    {
      "trigger": "kOrdinalsSelector (3)",
      "contents": "KOrdinalsSelector"
    },
    {
      "trigger": "kOrnamentSetsType (16)",
      "contents": "KOrnamentSetsType"
    },
    {
      "trigger": "kOverlappingCharactersType (13)",
      "contents": "KOverlappingCharactersType"
    },
    {
      "trigger": "kPROPALDirectionClass (2)",
      "contents": "KPROPALDirectionClass"
    },
    {
      "trigger": "kPROPANDirectionClass (6)",
      "contents": "KPROPANDirectionClass"
    },
    {
      "trigger": "kPROPBNDirectionClass (19)",
      "contents": "KPROPBNDirectionClass"
    },
    {
      "trigger": "kPROPCSDirectionClass (7)",
      "contents": "KPROPCSDirectionClass"
    },
    {
      "trigger": "kPROPCanHangLTMask (16384)",
      "contents": "KPROPCanHangLTMask"
    },
    {
      "trigger": "kPROPCanHangRBMask (8192)",
      "contents": "KPROPCanHangRBMask"
    },
    {
      "trigger": "kPROPCurrentVersion (196608)",
      "contents": "KPROPCurrentVersion"
    },
    {
      "trigger": "kPROPDirectionMask (31)",
      "contents": "KPROPDirectionMask"
    },
    {
      "trigger": "kPROPENDirectionClass (3)",
      "contents": "KPROPENDirectionClass"
    },
    {
      "trigger": "kPROPESDirectionClass (4)",
      "contents": "KPROPESDirectionClass"
    },
    {
      "trigger": "kPROPETDirectionClass (5)",
      "contents": "KPROPETDirectionClass"
    },
    {
      "trigger": "kPROPIsFloaterMask (32768)",
      "contents": "KPROPIsFloaterMask"
    },
    {
      "trigger": "kPROPLDirectionClass (0)",
      "contents": "KPROPLDirectionClass"
    },
    {
      "trigger": "kPROPLREDirectionClass (13)",
      "contents": "KPROPLREDirectionClass"
    },
    {
      "trigger": "kPROPLRODirectionClass (14)",
      "contents": "KPROPLRODirectionClass"
    },
    {
      "trigger": "kPROPNSMDirectionClass (18)",
      "contents": "KPROPNSMDirectionClass"
    },
    {
      "trigger": "kPROPNumDirectionClasses (20)",
      "contents": "KPROPNumDirectionClasses"
    },
    {
      "trigger": "kPROPONDirectionClass (11)",
      "contents": "KPROPONDirectionClass"
    },
    {
      "trigger": "kPROPPDFDirectionClass (17)",
      "contents": "KPROPPDFDirectionClass"
    },
    {
      "trigger": "kPROPPSDirectionClass (8)",
      "contents": "KPROPPSDirectionClass"
    },
    {
      "trigger": "kPROPPairOffsetMask (3840)",
      "contents": "KPROPPairOffsetMask"
    },
    {
      "trigger": "kPROPPairOffsetShift (8)",
      "contents": "KPROPPairOffsetShift"
    },
    {
      "trigger": "kPROPPairOffsetSign (7)",
      "contents": "KPROPPairOffsetSign"
    },
    {
      "trigger": "kPROPRDirectionClass (1)",
      "contents": "KPROPRDirectionClass"
    },
    {
      "trigger": "kPROPRLEDirectionClass (15)",
      "contents": "KPROPRLEDirectionClass"
    },
    {
      "trigger": "kPROPRLODirectionClass (16)",
      "contents": "KPROPRLODirectionClass"
    },
    {
      "trigger": "kPROPRightConnectMask (128)",
      "contents": "KPROPRightConnectMask"
    },
    {
      "trigger": "kPROPSDirectionClass (9)",
      "contents": "KPROPSDirectionClass"
    },
    {
      "trigger": "kPROPSENDirectionClass (12)",
      "contents": "KPROPSENDirectionClass"
    },
    {
      "trigger": "kPROPTag (1886547824)",
      "contents": "KPROPTag"
    },
    {
      "trigger": "kPROPUseRLPairMask (4096)",
      "contents": "KPROPUseRLPairMask"
    },
    {
      "trigger": "kPROPWSDirectionClass (10)",
      "contents": "KPROPWSDirectionClass"
    },
    {
      "trigger": "kPROPZeroReserved (96)",
      "contents": "KPROPZeroReserved"
    },
    {
      "trigger": "kPanningMode_SoundField (3)",
      "contents": "KPanningMode_SoundField"
    },
    {
      "trigger": "kPanningMode_VectorBasedPanning (4)",
      "contents": "KPanningMode_VectorBasedPanning"
    },
    {
      "trigger": "kParenthesisAnnotationSelector (5)",
      "contents": "KParenthesisAnnotationSelector"
    },
    {
      "trigger": "kPartiallyConnectedSelector (1)",
      "contents": "KPartiallyConnectedSelector"
    },
    {
      "trigger": "kPeriodAnnotationSelector (6)",
      "contents": "KPeriodAnnotationSelector"
    },
    {
      "trigger": "kPeriodsToEllipsisOffSelector (11)",
      "contents": "KPeriodsToEllipsisOffSelector"
    },
    {
      "trigger": "kPeriodsToEllipsisOnSelector (10)",
      "contents": "KPeriodsToEllipsisOnSelector"
    },
    {
      "trigger": "kPiCharactersSelector (2)",
      "contents": "KPiCharactersSelector"
    },
    {
      "trigger": "kPreventOverlapOffSelector (1)",
      "contents": "KPreventOverlapOffSelector"
    },
    {
      "trigger": "kPreventOverlapOnSelector (0)",
      "contents": "KPreventOverlapOnSelector"
    },
    {
      "trigger": "kProportionalCJKRomanSelector (1)",
      "contents": "KProportionalCJKRomanSelector"
    },
    {
      "trigger": "kProportionalIdeographsSelector (1)",
      "contents": "KProportionalIdeographsSelector"
    },
    {
      "trigger": "kProportionalKanaSelector (1)",
      "contents": "KProportionalKanaSelector"
    },
    {
      "trigger": "kProportionalNumbersSelector (1)",
      "contents": "KProportionalNumbersSelector"
    },
    {
      "trigger": "kProportionalTextSelector (0)",
      "contents": "KProportionalTextSelector"
    },
    {
      "trigger": "kQuarterWidthNumbersSelector (3)",
      "contents": "KQuarterWidthNumbersSelector"
    },
    {
      "trigger": "kRareLigaturesOffSelector (5)",
      "contents": "KRareLigaturesOffSelector"
    },
    {
      "trigger": "kRareLigaturesOnSelector (4)",
      "contents": "KRareLigaturesOnSelector"
    },
    {
      "trigger": "kRebusPicturesOffSelector (9)",
      "contents": "KRebusPicturesOffSelector"
    },
    {
      "trigger": "kRebusPicturesOnSelector (8)",
      "contents": "KRebusPicturesOnSelector"
    },
    {
      "trigger": "kRequiredLigaturesOffSelector (1)",
      "contents": "KRequiredLigaturesOffSelector"
    },
    {
      "trigger": "kRequiredLigaturesOnSelector (0)",
      "contents": "KRequiredLigaturesOnSelector"
    },
    {
      "trigger": "kRomanNumeralAnnotationSelector (7)",
      "contents": "KRomanNumeralAnnotationSelector"
    },
    {
      "trigger": "kRomanizationToHiraganaSelector (5)",
      "contents": "KRomanizationToHiraganaSelector"
    },
    {
      "trigger": "kRomanizationToKatakanaSelector (6)",
      "contents": "KRomanizationToKatakanaSelector"
    },
    {
      "trigger": "kRoundedBoxAnnotationSelector (2)",
      "contents": "KRoundedBoxAnnotationSelector"
    },
    {
      "trigger": "kRubyKanaOffSelector (3)",
      "contents": "KRubyKanaOffSelector"
    },
    {
      "trigger": "kRubyKanaOnSelector (2)",
      "contents": "KRubyKanaOnSelector"
    },
    {
      "trigger": "kRubyKanaSelector (1)",
      "contents": "KRubyKanaSelector"
    },
    {
      "trigger": "kRubyKanaType (28)",
      "contents": "KRubyKanaType"
    },
    {
      "trigger": "kSCBondStatusLinkInvalid (1)",
      "contents": "KSCBondStatusLinkInvalid"
    },
    {
      "trigger": "kSCBondStatusNoPartner (2)",
      "contents": "KSCBondStatusNoPartner"
    },
    {
      "trigger": "kSCBondStatusNotInActiveGroup (3)",
      "contents": "KSCBondStatusNotInActiveGroup"
    },
    {
      "trigger": "kSCBondStatusOK (0)",
      "contents": "KSCBondStatusOK"
    },
    {
      "trigger": "kSCBondStatusUnknown (999)",
      "contents": "KSCBondStatusUnknown"
    },
    {
      "trigger": "kSCNetworkConnectionBytesIn (BytesIn)",
      "contents": "KSCNetworkConnectionBytesIn"
    },
    {
      "trigger": "kSCNetworkConnectionBytesOut (BytesOut)",
      "contents": "KSCNetworkConnectionBytesOut"
    },
    {
      "trigger": "kSCNetworkConnectionConnected (2)",
      "contents": "KSCNetworkConnectionConnected"
    },
    {
      "trigger": "kSCNetworkConnectionConnecting (1)",
      "contents": "KSCNetworkConnectionConnecting"
    },
    {
      "trigger": "kSCNetworkConnectionDisconnected (0)",
      "contents": "KSCNetworkConnectionDisconnected"
    },
    {
      "trigger": "kSCNetworkConnectionDisconnecting (3)",
      "contents": "KSCNetworkConnectionDisconnecting"
    },
    {
      "trigger": "kSCNetworkConnectionErrorsIn (ErrorsIn)",
      "contents": "KSCNetworkConnectionErrorsIn"
    },
    {
      "trigger": "kSCNetworkConnectionErrorsOut (ErrorsOut)",
      "contents": "KSCNetworkConnectionErrorsOut"
    },
    {
      "trigger": "kSCNetworkConnectionInvalid (-1)",
      "contents": "KSCNetworkConnectionInvalid"
    },
    {
      "trigger": "kSCNetworkConnectionPPPAuthenticating (5)",
      "contents": "KSCNetworkConnectionPPPAuthenticating"
    },
    {
      "trigger": "kSCNetworkConnectionPPPConnected (8)",
      "contents": "KSCNetworkConnectionPPPConnected"
    },
    {
      "trigger": "kSCNetworkConnectionPPPConnectingLink (2)",
      "contents": "KSCNetworkConnectionPPPConnectingLink"
    },
    {
      "trigger": "kSCNetworkConnectionPPPDialOnTraffic (3)",
      "contents": "KSCNetworkConnectionPPPDialOnTraffic"
    },
    {
      "trigger": "kSCNetworkConnectionPPPDisconnected (0)",
      "contents": "KSCNetworkConnectionPPPDisconnected"
    },
    {
      "trigger": "kSCNetworkConnectionPPPDisconnectingLink (10)",
      "contents": "KSCNetworkConnectionPPPDisconnectingLink"
    },
    {
      "trigger": "kSCNetworkConnectionPPPHoldingLinkOff (11)",
      "contents": "KSCNetworkConnectionPPPHoldingLinkOff"
    },
    {
      "trigger": "kSCNetworkConnectionPPPInitializing (1)",
      "contents": "KSCNetworkConnectionPPPInitializing"
    },
    {
      "trigger": "kSCNetworkConnectionPPPNegotiatingLink (4)",
      "contents": "KSCNetworkConnectionPPPNegotiatingLink"
    },
    {
      "trigger": "kSCNetworkConnectionPPPNegotiatingNetwork (7)",
      "contents": "KSCNetworkConnectionPPPNegotiatingNetwork"
    },
    {
      "trigger": "kSCNetworkConnectionPPPSuspended (12)",
      "contents": "KSCNetworkConnectionPPPSuspended"
    },
    {
      "trigger": "kSCNetworkConnectionPPPTerminating (9)",
      "contents": "KSCNetworkConnectionPPPTerminating"
    },
    {
      "trigger": "kSCNetworkConnectionPPPWaitingForCallBack (6)",
      "contents": "KSCNetworkConnectionPPPWaitingForCallBack"
    },
    {
      "trigger": "kSCNetworkConnectionPPPWaitingForRedial (13)",
      "contents": "KSCNetworkConnectionPPPWaitingForRedial"
    },
    {
      "trigger": "kSCNetworkConnectionPacketsIn (PacketsIn)",
      "contents": "KSCNetworkConnectionPacketsIn"
    },
    {
      "trigger": "kSCNetworkConnectionPacketsOut (PacketsOut)",
      "contents": "KSCNetworkConnectionPacketsOut"
    },
    {
      "trigger": "kSCNetworkConnectionSelectionOptionOnDemandHostName (OnDemandHostName)",
      "contents": "KSCNetworkConnectionSelectionOptionOnDemandHostName"
    },
    {
      "trigger": "kSCNetworkConnectionSelectionOptionOnDemandRetry (OnDemandRetry)",
      "contents": "KSCNetworkConnectionSelectionOptionOnDemandRetry"
    },
    {
      "trigger": "kSCNetworkFlagsConnectionAutomatic (8)",
      "contents": "KSCNetworkFlagsConnectionAutomatic"
    },
    {
      "trigger": "kSCNetworkFlagsConnectionRequired (4)",
      "contents": "KSCNetworkFlagsConnectionRequired"
    },
    {
      "trigger": "kSCNetworkFlagsInterventionRequired (16)",
      "contents": "KSCNetworkFlagsInterventionRequired"
    },
    {
      "trigger": "kSCNetworkFlagsIsDirect (131072)",
      "contents": "KSCNetworkFlagsIsDirect"
    },
    {
      "trigger": "kSCNetworkFlagsIsLocalAddress (65536)",
      "contents": "KSCNetworkFlagsIsLocalAddress"
    },
    {
      "trigger": "kSCNetworkFlagsReachable (2)",
      "contents": "KSCNetworkFlagsReachable"
    },
    {
      "trigger": "kSCNetworkFlagsTransientConnection (1)",
      "contents": "KSCNetworkFlagsTransientConnection"
    },
    {
      "trigger": "kSCNetworkReachabilityFlagsConnectionAutomatic (8)",
      "contents": "KSCNetworkReachabilityFlagsConnectionAutomatic"
    },
    {
      "trigger": "kSCNetworkReachabilityFlagsConnectionOnDemand (32)",
      "contents": "KSCNetworkReachabilityFlagsConnectionOnDemand"
    },
    {
      "trigger": "kSCNetworkReachabilityFlagsConnectionOnTraffic (8)",
      "contents": "KSCNetworkReachabilityFlagsConnectionOnTraffic"
    },
    {
      "trigger": "kSCNetworkReachabilityFlagsConnectionRequired (4)",
      "contents": "KSCNetworkReachabilityFlagsConnectionRequired"
    },
    {
      "trigger": "kSCNetworkReachabilityFlagsInterventionRequired (16)",
      "contents": "KSCNetworkReachabilityFlagsInterventionRequired"
    },
    {
      "trigger": "kSCNetworkReachabilityFlagsIsDirect (131072)",
      "contents": "KSCNetworkReachabilityFlagsIsDirect"
    },
    {
      "trigger": "kSCNetworkReachabilityFlagsIsLocalAddress (65536)",
      "contents": "KSCNetworkReachabilityFlagsIsLocalAddress"
    },
    {
      "trigger": "kSCNetworkReachabilityFlagsIsWWAN (262144)",
      "contents": "KSCNetworkReachabilityFlagsIsWWAN"
    },
    {
      "trigger": "kSCNetworkReachabilityFlagsReachable (2)",
      "contents": "KSCNetworkReachabilityFlagsReachable"
    },
    {
      "trigger": "kSCNetworkReachabilityFlagsTransientConnection (1)",
      "contents": "KSCNetworkReachabilityFlagsTransientConnection"
    },
    {
      "trigger": "kSCPreferencesNotificationApply (2)",
      "contents": "KSCPreferencesNotificationApply"
    },
    {
      "trigger": "kSCPreferencesNotificationCommit (1)",
      "contents": "KSCPreferencesNotificationCommit"
    },
    {
      "trigger": "kSCStatusAccessError (1003)",
      "contents": "KSCStatusAccessError"
    },
    {
      "trigger": "kSCStatusConnectionNoService (5001)",
      "contents": "KSCStatusConnectionNoService"
    },
    {
      "trigger": "kSCStatusFailed (1001)",
      "contents": "KSCStatusFailed"
    },
    {
      "trigger": "kSCStatusInvalidArgument (1002)",
      "contents": "KSCStatusInvalidArgument"
    },
    {
      "trigger": "kSCStatusKeyExists (1005)",
      "contents": "KSCStatusKeyExists"
    },
    {
      "trigger": "kSCStatusLocked (1006)",
      "contents": "KSCStatusLocked"
    },
    {
      "trigger": "kSCStatusMaxLink (3006)",
      "contents": "KSCStatusMaxLink"
    },
    {
      "trigger": "kSCStatusNeedLock (1007)",
      "contents": "KSCStatusNeedLock"
    },
    {
      "trigger": "kSCStatusNoConfigFile (3003)",
      "contents": "KSCStatusNoConfigFile"
    },
    {
      "trigger": "kSCStatusNoKey (1004)",
      "contents": "KSCStatusNoKey"
    },
    {
      "trigger": "kSCStatusNoLink (3004)",
      "contents": "KSCStatusNoLink"
    },
    {
      "trigger": "kSCStatusNoPrefsSession (3001)",
      "contents": "KSCStatusNoPrefsSession"
    },
    {
      "trigger": "kSCStatusNoStoreServer (2002)",
      "contents": "KSCStatusNoStoreServer"
    },
    {
      "trigger": "kSCStatusNoStoreSession (2001)",
      "contents": "KSCStatusNoStoreSession"
    },
    {
      "trigger": "kSCStatusNotifierActive (2003)",
      "contents": "KSCStatusNotifierActive"
    },
    {
      "trigger": "kSCStatusOK (0)",
      "contents": "KSCStatusOK"
    },
    {
      "trigger": "kSCStatusPrefsBusy (3002)",
      "contents": "KSCStatusPrefsBusy"
    },
    {
      "trigger": "kSCStatusReachabilityUnknown (4001)",
      "contents": "KSCStatusReachabilityUnknown"
    },
    {
      "trigger": "kSCStatusStale (3005)",
      "contents": "KSCStatusStale"
    },
    {
      "trigger": "kSFNTLookupSegmentArray (4)",
      "contents": "KSFNTLookupSegmentArray"
    },
    {
      "trigger": "kSFNTLookupSegmentSingle (2)",
      "contents": "KSFNTLookupSegmentSingle"
    },
    {
      "trigger": "kSFNTLookupSimpleArray (0)",
      "contents": "KSFNTLookupSimpleArray"
    },
    {
      "trigger": "kSFNTLookupSingleTable (6)",
      "contents": "KSFNTLookupSingleTable"
    },
    {
      "trigger": "kSFNTLookupTrimmedArray (8)",
      "contents": "KSFNTLookupTrimmedArray"
    },
    {
      "trigger": "kSMPTETimeRunning (2)",
      "contents": "KSMPTETimeRunning"
    },
    {
      "trigger": "kSMPTETimeType2398 (11)",
      "contents": "KSMPTETimeType2398"
    },
    {
      "trigger": "kSMPTETimeType24 (0)",
      "contents": "KSMPTETimeType24"
    },
    {
      "trigger": "kSMPTETimeType25 (1)",
      "contents": "KSMPTETimeType25"
    },
    {
      "trigger": "kSMPTETimeType2997 (4)",
      "contents": "KSMPTETimeType2997"
    },
    {
      "trigger": "kSMPTETimeType2997Drop (5)",
      "contents": "KSMPTETimeType2997Drop"
    },
    {
      "trigger": "kSMPTETimeType30 (3)",
      "contents": "KSMPTETimeType30"
    },
    {
      "trigger": "kSMPTETimeType30Drop (2)",
      "contents": "KSMPTETimeType30Drop"
    },
    {
      "trigger": "kSMPTETimeType50 (10)",
      "contents": "KSMPTETimeType50"
    },
    {
      "trigger": "kSMPTETimeType5994 (7)",
      "contents": "KSMPTETimeType5994"
    },
    {
      "trigger": "kSMPTETimeType5994Drop (9)",
      "contents": "KSMPTETimeType5994Drop"
    },
    {
      "trigger": "kSMPTETimeType60 (6)",
      "contents": "KSMPTETimeType60"
    },
    {
      "trigger": "kSMPTETimeType60Drop (8)",
      "contents": "KSMPTETimeType60Drop"
    },
    {
      "trigger": "kSMPTETimeValid (1)",
      "contents": "KSMPTETimeValid"
    },
    {
      "trigger": "kSOCKS5NoAcceptableMethod (255)",
      "contents": "KSOCKS5NoAcceptableMethod"
    },
    {
      "trigger": "kSSLAborted (4)",
      "contents": "KSSLAborted"
    },
    {
      "trigger": "kSSLClientCertNone (0)",
      "contents": "KSSLClientCertNone"
    },
    {
      "trigger": "kSSLClientCertRejected (3)",
      "contents": "KSSLClientCertRejected"
    },
    {
      "trigger": "kSSLClientCertRequested (1)",
      "contents": "KSSLClientCertRequested"
    },
    {
      "trigger": "kSSLClientCertSent (2)",
      "contents": "KSSLClientCertSent"
    },
    {
      "trigger": "kSSLClientSide (1)",
      "contents": "KSSLClientSide"
    },
    {
      "trigger": "kSSLClosed (3)",
      "contents": "KSSLClosed"
    },
    {
      "trigger": "kSSLConnected (2)",
      "contents": "KSSLConnected"
    },
    {
      "trigger": "kSSLDatagramType (1)",
      "contents": "KSSLDatagramType"
    },
    {
      "trigger": "kSSLHandshake (1)",
      "contents": "KSSLHandshake"
    },
    {
      "trigger": "kSSLIdle (0)",
      "contents": "KSSLIdle"
    },
    {
      "trigger": "kSSLProtocol2 (1)",
      "contents": "KSSLProtocol2"
    },
    {
      "trigger": "kSSLProtocol3 (2)",
      "contents": "KSSLProtocol3"
    },
    {
      "trigger": "kSSLProtocol3Only (3)",
      "contents": "KSSLProtocol3Only"
    },
    {
      "trigger": "kSSLProtocolAll (6)",
      "contents": "KSSLProtocolAll"
    },
    {
      "trigger": "kSSLProtocolUnknown (0)",
      "contents": "KSSLProtocolUnknown"
    },
    {
      "trigger": "kSSLServerSide (0)",
      "contents": "KSSLServerSide"
    },
    {
      "trigger": "kSSLSessionOptionBreakOnCertRequested (1)",
      "contents": "KSSLSessionOptionBreakOnCertRequested"
    },
    {
      "trigger": "kSSLSessionOptionBreakOnClientAuth (2)",
      "contents": "KSSLSessionOptionBreakOnClientAuth"
    },
    {
      "trigger": "kSSLSessionOptionBreakOnServerAuth (0)",
      "contents": "KSSLSessionOptionBreakOnServerAuth"
    },
    {
      "trigger": "kSSLStreamType (0)",
      "contents": "KSSLStreamType"
    },
    {
      "trigger": "kSTClassDeletedGlyph (2)",
      "contents": "KSTClassDeletedGlyph"
    },
    {
      "trigger": "kSTClassEndOfLine (3)",
      "contents": "KSTClassEndOfLine"
    },
    {
      "trigger": "kSTClassEndOfText (0)",
      "contents": "KSTClassEndOfText"
    },
    {
      "trigger": "kSTClassOutOfBounds (1)",
      "contents": "KSTClassOutOfBounds"
    },
    {
      "trigger": "kSTLigActionMask (16383)",
      "contents": "KSTLigActionMask"
    },
    {
      "trigger": "kSTMarkEnd (8192)",
      "contents": "KSTMarkEnd"
    },
    {
      "trigger": "kSTNoAdvance (16384)",
      "contents": "KSTNoAdvance"
    },
    {
      "trigger": "kSTRearrVerbMask (15)",
      "contents": "KSTRearrVerbMask"
    },
    {
      "trigger": "kSTSetMark (32768)",
      "contents": "KSTSetMark"
    },
    {
      "trigger": "kSTXHasLigAction (8192)",
      "contents": "KSTXHasLigAction"
    },
    {
      "trigger": "kSecAttrAccessGroup (CFTypeRef)",
      "contents": "KSecAttrAccessGroup"
    },
    {
      "trigger": "kSecAttrAccessible (CFTypeRef)",
      "contents": "KSecAttrAccessible"
    },
    {
      "trigger": "kSecAttrAccessibleAfterFirstUnlock (CFTypeRef)",
      "contents": "KSecAttrAccessibleAfterFirstUnlock"
    },
    {
      "trigger": "kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly (CFTypeRef)",
      "contents": "KSecAttrAccessibleAfterFirstUnlockThisDeviceOnly"
    },
    {
      "trigger": "kSecAttrAccessibleAlways (CFTypeRef)",
      "contents": "KSecAttrAccessibleAlways"
    },
    {
      "trigger": "kSecAttrAccessibleAlwaysThisDeviceOnly (CFTypeRef)",
      "contents": "KSecAttrAccessibleAlwaysThisDeviceOnly"
    },
    {
      "trigger": "kSecAttrAccessibleWhenUnlocked (CFTypeRef)",
      "contents": "KSecAttrAccessibleWhenUnlocked"
    },
    {
      "trigger": "kSecAttrAccessibleWhenUnlockedThisDeviceOnly (CFTypeRef)",
      "contents": "KSecAttrAccessibleWhenUnlockedThisDeviceOnly"
    },
    {
      "trigger": "kSecAttrAccount (CFTypeRef)",
      "contents": "KSecAttrAccount"
    },
    {
      "trigger": "kSecAttrApplicationLabel (CFTypeRef)",
      "contents": "KSecAttrApplicationLabel"
    },
    {
      "trigger": "kSecAttrApplicationTag (CFTypeRef)",
      "contents": "KSecAttrApplicationTag"
    },
    {
      "trigger": "kSecAttrAuthenticationType (CFTypeRef)",
      "contents": "KSecAttrAuthenticationType"
    },
    {
      "trigger": "kSecAttrAuthenticationTypeDPA (CFTypeRef)",
      "contents": "KSecAttrAuthenticationTypeDPA"
    },
    {
      "trigger": "kSecAttrAuthenticationTypeDefault (CFTypeRef)",
      "contents": "KSecAttrAuthenticationTypeDefault"
    },
    {
      "trigger": "kSecAttrAuthenticationTypeHTMLForm (CFTypeRef)",
      "contents": "KSecAttrAuthenticationTypeHTMLForm"
    },
    {
      "trigger": "kSecAttrAuthenticationTypeHTTPBasic (CFTypeRef)",
      "contents": "KSecAttrAuthenticationTypeHTTPBasic"
    },
    {
      "trigger": "kSecAttrAuthenticationTypeHTTPDigest (CFTypeRef)",
      "contents": "KSecAttrAuthenticationTypeHTTPDigest"
    },
    {
      "trigger": "kSecAttrAuthenticationTypeMSN (CFTypeRef)",
      "contents": "KSecAttrAuthenticationTypeMSN"
    },
    {
      "trigger": "kSecAttrAuthenticationTypeNTLM (CFTypeRef)",
      "contents": "KSecAttrAuthenticationTypeNTLM"
    },
    {
      "trigger": "kSecAttrAuthenticationTypeRPA (CFTypeRef)",
      "contents": "KSecAttrAuthenticationTypeRPA"
    },
    {
      "trigger": "kSecAttrCanDecrypt (CFTypeRef)",
      "contents": "KSecAttrCanDecrypt"
    },
    {
      "trigger": "kSecAttrCanDerive (CFTypeRef)",
      "contents": "KSecAttrCanDerive"
    },
    {
      "trigger": "kSecAttrCanEncrypt (CFTypeRef)",
      "contents": "KSecAttrCanEncrypt"
    },
    {
      "trigger": "kSecAttrCanSign (CFTypeRef)",
      "contents": "KSecAttrCanSign"
    },
    {
      "trigger": "kSecAttrCanUnwrap (CFTypeRef)",
      "contents": "KSecAttrCanUnwrap"
    },
    {
      "trigger": "kSecAttrCanVerify (CFTypeRef)",
      "contents": "KSecAttrCanVerify"
    },
    {
      "trigger": "kSecAttrCanWrap (CFTypeRef)",
      "contents": "KSecAttrCanWrap"
    },
    {
      "trigger": "kSecAttrCertificateEncoding (CFTypeRef)",
      "contents": "KSecAttrCertificateEncoding"
    },
    {
      "trigger": "kSecAttrCertificateType (CFTypeRef)",
      "contents": "KSecAttrCertificateType"
    },
    {
      "trigger": "kSecAttrComment (CFTypeRef)",
      "contents": "KSecAttrComment"
    },
    {
      "trigger": "kSecAttrCreationDate (CFTypeRef)",
      "contents": "KSecAttrCreationDate"
    },
    {
      "trigger": "kSecAttrCreator (CFTypeRef)",
      "contents": "KSecAttrCreator"
    },
    {
      "trigger": "kSecAttrDescription (CFTypeRef)",
      "contents": "KSecAttrDescription"
    },
    {
      "trigger": "kSecAttrEffectiveKeySize (CFTypeRef)",
      "contents": "KSecAttrEffectiveKeySize"
    },
    {
      "trigger": "kSecAttrGeneric (CFTypeRef)",
      "contents": "KSecAttrGeneric"
    },
    {
      "trigger": "kSecAttrIsInvisible (CFTypeRef)",
      "contents": "KSecAttrIsInvisible"
    },
    {
      "trigger": "kSecAttrIsNegative (CFTypeRef)",
      "contents": "KSecAttrIsNegative"
    },
    {
      "trigger": "kSecAttrIsPermanent (CFTypeRef)",
      "contents": "KSecAttrIsPermanent"
    },
    {
      "trigger": "kSecAttrIssuer (CFTypeRef)",
      "contents": "KSecAttrIssuer"
    },
    {
      "trigger": "kSecAttrKeyClass (CFTypeRef)",
      "contents": "KSecAttrKeyClass"
    },
    {
      "trigger": "kSecAttrKeyClassPrivate (CFTypeRef)",
      "contents": "KSecAttrKeyClassPrivate"
    },
    {
      "trigger": "kSecAttrKeyClassPublic (CFTypeRef)",
      "contents": "KSecAttrKeyClassPublic"
    },
    {
      "trigger": "kSecAttrKeyClassSymmetric (CFTypeRef)",
      "contents": "KSecAttrKeyClassSymmetric"
    },
    {
      "trigger": "kSecAttrKeySizeInBits (CFTypeRef)",
      "contents": "KSecAttrKeySizeInBits"
    },
    {
      "trigger": "kSecAttrKeyType (CFTypeRef)",
      "contents": "KSecAttrKeyType"
    },
    {
      "trigger": "kSecAttrKeyTypeEC (CFTypeRef)",
      "contents": "KSecAttrKeyTypeEC"
    },
    {
      "trigger": "kSecAttrKeyTypeRSA (CFTypeRef)",
      "contents": "KSecAttrKeyTypeRSA"
    },
    {
      "trigger": "kSecAttrLabel (CFTypeRef)",
      "contents": "KSecAttrLabel"
    },
    {
      "trigger": "kSecAttrModificationDate (CFTypeRef)",
      "contents": "KSecAttrModificationDate"
    },
    {
      "trigger": "kSecAttrPath (CFTypeRef)",
      "contents": "KSecAttrPath"
    },
    {
      "trigger": "kSecAttrPort (CFTypeRef)",
      "contents": "KSecAttrPort"
    },
    {
      "trigger": "kSecAttrProtocol (CFTypeRef)",
      "contents": "KSecAttrProtocol"
    },
    {
      "trigger": "kSecAttrProtocolAFP (CFTypeRef)",
      "contents": "KSecAttrProtocolAFP"
    },
    {
      "trigger": "kSecAttrProtocolAppleTalk (CFTypeRef)",
      "contents": "KSecAttrProtocolAppleTalk"
    },
    {
      "trigger": "kSecAttrProtocolDAAP (CFTypeRef)",
      "contents": "KSecAttrProtocolDAAP"
    },
    {
      "trigger": "kSecAttrProtocolEPPC (CFTypeRef)",
      "contents": "KSecAttrProtocolEPPC"
    },
    {
      "trigger": "kSecAttrProtocolFTP (CFTypeRef)",
      "contents": "KSecAttrProtocolFTP"
    },
    {
      "trigger": "kSecAttrProtocolFTPAccount (CFTypeRef)",
      "contents": "KSecAttrProtocolFTPAccount"
    },
    {
      "trigger": "kSecAttrProtocolFTPProxy (CFTypeRef)",
      "contents": "KSecAttrProtocolFTPProxy"
    },
    {
      "trigger": "kSecAttrProtocolFTPS (CFTypeRef)",
      "contents": "KSecAttrProtocolFTPS"
    },
    {
      "trigger": "kSecAttrProtocolHTTP (CFTypeRef)",
      "contents": "KSecAttrProtocolHTTP"
    },
    {
      "trigger": "kSecAttrProtocolHTTPProxy (CFTypeRef)",
      "contents": "KSecAttrProtocolHTTPProxy"
    },
    {
      "trigger": "kSecAttrProtocolHTTPS (CFTypeRef)",
      "contents": "KSecAttrProtocolHTTPS"
    },
    {
      "trigger": "kSecAttrProtocolHTTPSProxy (CFTypeRef)",
      "contents": "KSecAttrProtocolHTTPSProxy"
    },
    {
      "trigger": "kSecAttrProtocolIMAP (CFTypeRef)",
      "contents": "KSecAttrProtocolIMAP"
    },
    {
      "trigger": "kSecAttrProtocolIMAPS (CFTypeRef)",
      "contents": "KSecAttrProtocolIMAPS"
    },
    {
      "trigger": "kSecAttrProtocolIPP (CFTypeRef)",
      "contents": "KSecAttrProtocolIPP"
    },
    {
      "trigger": "kSecAttrProtocolIRC (CFTypeRef)",
      "contents": "KSecAttrProtocolIRC"
    },
    {
      "trigger": "kSecAttrProtocolIRCS (CFTypeRef)",
      "contents": "KSecAttrProtocolIRCS"
    },
    {
      "trigger": "kSecAttrProtocolLDAP (CFTypeRef)",
      "contents": "KSecAttrProtocolLDAP"
    },
    {
      "trigger": "kSecAttrProtocolLDAPS (CFTypeRef)",
      "contents": "KSecAttrProtocolLDAPS"
    },
    {
      "trigger": "kSecAttrProtocolNNTP (CFTypeRef)",
      "contents": "KSecAttrProtocolNNTP"
    },
    {
      "trigger": "kSecAttrProtocolNNTPS (CFTypeRef)",
      "contents": "KSecAttrProtocolNNTPS"
    },
    {
      "trigger": "kSecAttrProtocolPOP3 (CFTypeRef)",
      "contents": "KSecAttrProtocolPOP3"
    },
    {
      "trigger": "kSecAttrProtocolPOP3S (CFTypeRef)",
      "contents": "KSecAttrProtocolPOP3S"
    },
    {
      "trigger": "kSecAttrProtocolRTSP (CFTypeRef)",
      "contents": "KSecAttrProtocolRTSP"
    },
    {
      "trigger": "kSecAttrProtocolRTSPProxy (CFTypeRef)",
      "contents": "KSecAttrProtocolRTSPProxy"
    },
    {
      "trigger": "kSecAttrProtocolSMB (CFTypeRef)",
      "contents": "KSecAttrProtocolSMB"
    },
    {
      "trigger": "kSecAttrProtocolSMTP (CFTypeRef)",
      "contents": "KSecAttrProtocolSMTP"
    },
    {
      "trigger": "kSecAttrProtocolSOCKS (CFTypeRef)",
      "contents": "KSecAttrProtocolSOCKS"
    },
    {
      "trigger": "kSecAttrProtocolSSH (CFTypeRef)",
      "contents": "KSecAttrProtocolSSH"
    },
    {
      "trigger": "kSecAttrProtocolTelnet (CFTypeRef)",
      "contents": "KSecAttrProtocolTelnet"
    },
    {
      "trigger": "kSecAttrProtocolTelnetS (CFTypeRef)",
      "contents": "KSecAttrProtocolTelnetS"
    },
    {
      "trigger": "kSecAttrPublicKeyHash (CFTypeRef)",
      "contents": "KSecAttrPublicKeyHash"
    },
    {
      "trigger": "kSecAttrSecurityDomain (CFTypeRef)",
      "contents": "KSecAttrSecurityDomain"
    },
    {
      "trigger": "kSecAttrSerialNumber (CFTypeRef)",
      "contents": "KSecAttrSerialNumber"
    },
    {
      "trigger": "kSecAttrServer (CFTypeRef)",
      "contents": "KSecAttrServer"
    },
    {
      "trigger": "kSecAttrService (CFTypeRef)",
      "contents": "KSecAttrService"
    },
    {
      "trigger": "kSecAttrSubject (CFTypeRef)",
      "contents": "KSecAttrSubject"
    },
    {
      "trigger": "kSecAttrSubjectKeyID (CFTypeRef)",
      "contents": "KSecAttrSubjectKeyID"
    },
    {
      "trigger": "kSecAttrType (CFTypeRef)",
      "contents": "KSecAttrType"
    },
    {
      "trigger": "kSecClass (CFTypeRef)",
      "contents": "KSecClass"
    },
    {
      "trigger": "kSecClassCertificate (CFTypeRef)",
      "contents": "KSecClassCertificate"
    },
    {
      "trigger": "kSecClassGenericPassword (CFTypeRef)",
      "contents": "KSecClassGenericPassword"
    },
    {
      "trigger": "kSecClassIdentity (CFTypeRef)",
      "contents": "KSecClassIdentity"
    },
    {
      "trigger": "kSecClassInternetPassword (CFTypeRef)",
      "contents": "KSecClassInternetPassword"
    },
    {
      "trigger": "kSecClassKey (CFTypeRef)",
      "contents": "KSecClassKey"
    },
    {
      "trigger": "kSecImportExportPassphrase (CFStringRef)",
      "contents": "KSecImportExportPassphrase"
    },
    {
      "trigger": "kSecImportItemCertChain (CFStringRef)",
      "contents": "KSecImportItemCertChain"
    },
    {
      "trigger": "kSecImportItemIdentity (CFStringRef)",
      "contents": "KSecImportItemIdentity"
    },
    {
      "trigger": "kSecImportItemKeyID (CFStringRef)",
      "contents": "KSecImportItemKeyID"
    },
    {
      "trigger": "kSecImportItemLabel (CFStringRef)",
      "contents": "KSecImportItemLabel"
    },
    {
      "trigger": "kSecImportItemTrust (CFStringRef)",
      "contents": "KSecImportItemTrust"
    },
    {
      "trigger": "kSecMatchCaseInsensitive (CFTypeRef)",
      "contents": "KSecMatchCaseInsensitive"
    },
    {
      "trigger": "kSecMatchEmailAddressIfPresent (CFTypeRef)",
      "contents": "KSecMatchEmailAddressIfPresent"
    },
    {
      "trigger": "kSecMatchIssuers (CFTypeRef)",
      "contents": "KSecMatchIssuers"
    },
    {
      "trigger": "kSecMatchItemList (CFTypeRef)",
      "contents": "KSecMatchItemList"
    },
    {
      "trigger": "kSecMatchLimit (CFTypeRef)",
      "contents": "KSecMatchLimit"
    },
    {
      "trigger": "kSecMatchLimitAll (CFTypeRef)",
      "contents": "KSecMatchLimitAll"
    },
    {
      "trigger": "kSecMatchLimitOne (CFTypeRef)",
      "contents": "KSecMatchLimitOne"
    },
    {
      "trigger": "kSecMatchPolicy (CFTypeRef)",
      "contents": "KSecMatchPolicy"
    },
    {
      "trigger": "kSecMatchSearchList (CFTypeRef)",
      "contents": "KSecMatchSearchList"
    },
    {
      "trigger": "kSecMatchSubjectContains (CFTypeRef)",
      "contents": "KSecMatchSubjectContains"
    },
    {
      "trigger": "kSecMatchTrustedOnly (CFTypeRef)",
      "contents": "KSecMatchTrustedOnly"
    },
    {
      "trigger": "kSecMatchValidOnDate (CFTypeRef)",
      "contents": "KSecMatchValidOnDate"
    },
    {
      "trigger": "kSecPaddingNone (0)",
      "contents": "KSecPaddingNone"
    },
    {
      "trigger": "kSecPaddingOAEP (2)",
      "contents": "KSecPaddingOAEP"
    },
    {
      "trigger": "kSecPaddingPKCS1 (1)",
      "contents": "KSecPaddingPKCS1"
    },
    {
      "trigger": "kSecPaddingPKCS1MD2 (32768)",
      "contents": "KSecPaddingPKCS1MD2"
    },
    {
      "trigger": "kSecPaddingPKCS1MD5 (32769)",
      "contents": "KSecPaddingPKCS1MD5"
    },
    {
      "trigger": "kSecPaddingPKCS1SHA1 (32770)",
      "contents": "KSecPaddingPKCS1SHA1"
    },
    {
      "trigger": "kSecPrivateKeyAttrs (CFTypeRef)",
      "contents": "KSecPrivateKeyAttrs"
    },
    {
      "trigger": "kSecPublicKeyAttrs (CFTypeRef)",
      "contents": "KSecPublicKeyAttrs"
    },
    {
      "trigger": "kSecRandomDefault (SecRandomRef)",
      "contents": "KSecRandomDefault"
    },
    {
      "trigger": "kSecReturnAttributes (CFTypeRef)",
      "contents": "KSecReturnAttributes"
    },
    {
      "trigger": "kSecReturnData (CFTypeRef)",
      "contents": "KSecReturnData"
    },
    {
      "trigger": "kSecReturnPersistentRef (CFTypeRef)",
      "contents": "KSecReturnPersistentRef"
    },
    {
      "trigger": "kSecReturnRef (CFTypeRef)",
      "contents": "KSecReturnRef"
    },
    {
      "trigger": "kSecTrustResultConfirm (2)",
      "contents": "KSecTrustResultConfirm"
    },
    {
      "trigger": "kSecTrustResultDeny (3)",
      "contents": "KSecTrustResultDeny"
    },
    {
      "trigger": "kSecTrustResultFatalTrustFailure (6)",
      "contents": "KSecTrustResultFatalTrustFailure"
    },
    {
      "trigger": "kSecTrustResultInvalid (0)",
      "contents": "KSecTrustResultInvalid"
    },
    {
      "trigger": "kSecTrustResultOtherError (7)",
      "contents": "KSecTrustResultOtherError"
    },
    {
      "trigger": "kSecTrustResultProceed (1)",
      "contents": "KSecTrustResultProceed"
    },
    {
      "trigger": "kSecTrustResultRecoverableTrustFailure (5)",
      "contents": "KSecTrustResultRecoverableTrustFailure"
    },
    {
      "trigger": "kSecTrustResultUnspecified (4)",
      "contents": "KSecTrustResultUnspecified"
    },
    {
      "trigger": "kSecUseItemList (CFTypeRef)",
      "contents": "KSecUseItemList"
    },
    {
      "trigger": "kSecValueData (CFTypeRef)",
      "contents": "KSecValueData"
    },
    {
      "trigger": "kSecValuePersistentRef (CFTypeRef)",
      "contents": "KSecValuePersistentRef"
    },
    {
      "trigger": "kSecValueRef (CFTypeRef)",
      "contents": "KSecValueRef"
    },
    {
      "trigger": "kSequenceTrackProperty_AutomatedParameters (4)",
      "contents": "KSequenceTrackProperty_AutomatedParameters"
    },
    {
      "trigger": "kSequenceTrackProperty_LoopInfo (0)",
      "contents": "KSequenceTrackProperty_LoopInfo"
    },
    {
      "trigger": "kSequenceTrackProperty_MuteStatus (2)",
      "contents": "KSequenceTrackProperty_MuteStatus"
    },
    {
      "trigger": "kSequenceTrackProperty_OffsetTime (1)",
      "contents": "KSequenceTrackProperty_OffsetTime"
    },
    {
      "trigger": "kSequenceTrackProperty_SoloStatus (3)",
      "contents": "KSequenceTrackProperty_SoloStatus"
    },
    {
      "trigger": "kSequenceTrackProperty_TimeResolution (6)",
      "contents": "KSequenceTrackProperty_TimeResolution"
    },
    {
      "trigger": "kSequenceTrackProperty_TrackLength (5)",
      "contents": "KSequenceTrackProperty_TrackLength"
    },
    {
      "trigger": "kShowDiacriticsSelector (0)",
      "contents": "KShowDiacriticsSelector"
    },
    {
      "trigger": "kSimplifiedCharactersSelector (1)",
      "contents": "KSimplifiedCharactersSelector"
    },
    {
      "trigger": "kSlashToDivideOffSelector (5)",
      "contents": "KSlashToDivideOffSelector"
    },
    {
      "trigger": "kSlashToDivideOnSelector (4)",
      "contents": "KSlashToDivideOnSelector"
    },
    {
      "trigger": "kSlashedZeroOffSelector (5)",
      "contents": "KSlashedZeroOffSelector"
    },
    {
      "trigger": "kSlashedZeroOnSelector (4)",
      "contents": "KSlashedZeroOnSelector"
    },
    {
      "trigger": "kSmallCapsSelector (3)",
      "contents": "KSmallCapsSelector"
    },
    {
      "trigger": "kSmartQuotesOffSelector (9)",
      "contents": "KSmartQuotesOffSelector"
    },
    {
      "trigger": "kSmartQuotesOnSelector (8)",
      "contents": "KSmartQuotesOnSelector"
    },
    {
      "trigger": "kSmartSwashType (8)",
      "contents": "KSmartSwashType"
    },
    {
      "trigger": "kSquaredLigaturesOffSelector (13)",
      "contents": "KSquaredLigaturesOffSelector"
    },
    {
      "trigger": "kSquaredLigaturesOnSelector (12)",
      "contents": "KSquaredLigaturesOnSelector"
    },
    {
      "trigger": "kStyleOptionsType (19)",
      "contents": "KStyleOptionsType"
    },
    {
      "trigger": "kSubstituteVerticalFormsOffSelector (1)",
      "contents": "KSubstituteVerticalFormsOffSelector"
    },
    {
      "trigger": "kSubstituteVerticalFormsOnSelector (0)",
      "contents": "KSubstituteVerticalFormsOnSelector"
    },
    {
      "trigger": "kSuperiorsSelector (1)",
      "contents": "KSuperiorsSelector"
    },
    {
      "trigger": "kSymbolLigaturesOffSelector (17)",
      "contents": "KSymbolLigaturesOffSelector"
    },
    {
      "trigger": "kSymbolLigaturesOnSelector (16)",
      "contents": "KSymbolLigaturesOnSelector"
    },
    {
      "trigger": "kSystemSoundID_Vibrate (4095)",
      "contents": "KSystemSoundID_Vibrate"
    },
    {
      "trigger": "kTLSProtocol1 (4)",
      "contents": "KTLSProtocol1"
    },
    {
      "trigger": "kTLSProtocol11 (7)",
      "contents": "KTLSProtocol11"
    },
    {
      "trigger": "kTLSProtocol12 (8)",
      "contents": "KTLSProtocol12"
    },
    {
      "trigger": "kTLSProtocol1Only (5)",
      "contents": "KTLSProtocol1Only"
    },
    {
      "trigger": "kTallCapsSelector (5)",
      "contents": "KTallCapsSelector"
    },
    {
      "trigger": "kTextSpacingType (22)",
      "contents": "KTextSpacingType"
    },
    {
      "trigger": "kThirdWidthNumbersSelector (2)",
      "contents": "KThirdWidthNumbersSelector"
    },
    {
      "trigger": "kTitlingCapsSelector (4)",
      "contents": "KTitlingCapsSelector"
    },
    {
      "trigger": "kTraditionalAltFiveSelector (9)",
      "contents": "KTraditionalAltFiveSelector"
    },
    {
      "trigger": "kTraditionalAltFourSelector (8)",
      "contents": "KTraditionalAltFourSelector"
    },
    {
      "trigger": "kTraditionalAltOneSelector (5)",
      "contents": "KTraditionalAltOneSelector"
    },
    {
      "trigger": "kTraditionalAltThreeSelector (7)",
      "contents": "KTraditionalAltThreeSelector"
    },
    {
      "trigger": "kTraditionalAltTwoSelector (6)",
      "contents": "KTraditionalAltTwoSelector"
    },
    {
      "trigger": "kTraditionalCharactersSelector (0)",
      "contents": "KTraditionalCharactersSelector"
    },
    {
      "trigger": "kTranscodingCompositionOffSelector (5)",
      "contents": "KTranscodingCompositionOffSelector"
    },
    {
      "trigger": "kTranscodingCompositionOnSelector (4)",
      "contents": "KTranscodingCompositionOnSelector"
    },
    {
      "trigger": "kTransliterationType (23)",
      "contents": "KTransliterationType"
    },
    {
      "trigger": "kTryAuthenticate (2)",
      "contents": "KTryAuthenticate"
    },
    {
      "trigger": "kTypographicExtrasType (14)",
      "contents": "KTypographicExtrasType"
    },
    {
      "trigger": "kUTExportedTypeDeclarationsKey (CFStringRef)",
      "contents": "KUTExportedTypeDeclarationsKey"
    },
    {
      "trigger": "kUTImportedTypeDeclarationsKey (CFStringRef)",
      "contents": "KUTImportedTypeDeclarationsKey"
    },
    {
      "trigger": "kUTTagClassFilenameExtension (CFStringRef)",
      "contents": "KUTTagClassFilenameExtension"
    },
    {
      "trigger": "kUTTagClassMIMEType (CFStringRef)",
      "contents": "KUTTagClassMIMEType"
    },
    {
      "trigger": "kUTTypeAliasFile (CFStringRef)",
      "contents": "KUTTypeAliasFile"
    },
    {
      "trigger": "kUTTypeAliasRecord (CFStringRef)",
      "contents": "KUTTypeAliasRecord"
    },
    {
      "trigger": "kUTTypeAppleICNS (CFStringRef)",
      "contents": "KUTTypeAppleICNS"
    },
    {
      "trigger": "kUTTypeAppleProtectedMPEG4Audio (CFStringRef)",
      "contents": "KUTTypeAppleProtectedMPEG4Audio"
    },
    {
      "trigger": "kUTTypeApplication (CFStringRef)",
      "contents": "KUTTypeApplication"
    },
    {
      "trigger": "kUTTypeApplicationBundle (CFStringRef)",
      "contents": "KUTTypeApplicationBundle"
    },
    {
      "trigger": "kUTTypeApplicationFile (CFStringRef)",
      "contents": "KUTTypeApplicationFile"
    },
    {
      "trigger": "kUTTypeArchive (CFStringRef)",
      "contents": "KUTTypeArchive"
    },
    {
      "trigger": "kUTTypeAudio (CFStringRef)",
      "contents": "KUTTypeAudio"
    },
    {
      "trigger": "kUTTypeAudiovisualContent (CFStringRef)",
      "contents": "KUTTypeAudiovisualContent"
    },
    {
      "trigger": "kUTTypeBMP (CFStringRef)",
      "contents": "KUTTypeBMP"
    },
    {
      "trigger": "kUTTypeBundle (CFStringRef)",
      "contents": "KUTTypeBundle"
    },
    {
      "trigger": "kUTTypeCHeader (CFStringRef)",
      "contents": "KUTTypeCHeader"
    },
    {
      "trigger": "kUTTypeCPlusPlusHeader (CFStringRef)",
      "contents": "KUTTypeCPlusPlusHeader"
    },
    {
      "trigger": "kUTTypeCPlusPlusSource (CFStringRef)",
      "contents": "KUTTypeCPlusPlusSource"
    },
    {
      "trigger": "kUTTypeCSource (CFStringRef)",
      "contents": "KUTTypeCSource"
    },
    {
      "trigger": "kUTTypeCompositeContent (CFStringRef)",
      "contents": "KUTTypeCompositeContent"
    },
    {
      "trigger": "kUTTypeConformsToKey (CFStringRef)",
      "contents": "KUTTypeConformsToKey"
    },
    {
      "trigger": "kUTTypeContact (CFStringRef)",
      "contents": "KUTTypeContact"
    },
    {
      "trigger": "kUTTypeContent (CFStringRef)",
      "contents": "KUTTypeContent"
    },
    {
      "trigger": "kUTTypeData (CFStringRef)",
      "contents": "KUTTypeData"
    },
    {
      "trigger": "kUTTypeDescriptionKey (CFStringRef)",
      "contents": "KUTTypeDescriptionKey"
    },
    {
      "trigger": "kUTTypeDirectory (CFStringRef)",
      "contents": "KUTTypeDirectory"
    },
    {
      "trigger": "kUTTypeDiskImage (CFStringRef)",
      "contents": "KUTTypeDiskImage"
    },
    {
      "trigger": "kUTTypeFileURL (CFStringRef)",
      "contents": "KUTTypeFileURL"
    },
    {
      "trigger": "kUTTypeFlatRTFD (CFStringRef)",
      "contents": "KUTTypeFlatRTFD"
    },
    {
      "trigger": "kUTTypeFolder (CFStringRef)",
      "contents": "KUTTypeFolder"
    },
    {
      "trigger": "kUTTypeFramework (CFStringRef)",
      "contents": "KUTTypeFramework"
    },
    {
      "trigger": "kUTTypeGIF (CFStringRef)",
      "contents": "KUTTypeGIF"
    },
    {
      "trigger": "kUTTypeHTML (CFStringRef)",
      "contents": "KUTTypeHTML"
    },
    {
      "trigger": "kUTTypeICO (CFStringRef)",
      "contents": "KUTTypeICO"
    },
    {
      "trigger": "kUTTypeIconFileKey (CFStringRef)",
      "contents": "KUTTypeIconFileKey"
    },
    {
      "trigger": "kUTTypeIdentifierKey (CFStringRef)",
      "contents": "KUTTypeIdentifierKey"
    },
    {
      "trigger": "kUTTypeImage (CFStringRef)",
      "contents": "KUTTypeImage"
    },
    {
      "trigger": "kUTTypeInkText (CFStringRef)",
      "contents": "KUTTypeInkText"
    },
    {
      "trigger": "kUTTypeItem (CFStringRef)",
      "contents": "KUTTypeItem"
    },
    {
      "trigger": "kUTTypeJPEG (CFStringRef)",
      "contents": "KUTTypeJPEG"
    },
    {
      "trigger": "kUTTypeJPEG2000 (CFStringRef)",
      "contents": "KUTTypeJPEG2000"
    },
    {
      "trigger": "kUTTypeJavaSource (CFStringRef)",
      "contents": "KUTTypeJavaSource"
    },
    {
      "trigger": "kUTTypeMP3 (CFStringRef)",
      "contents": "KUTTypeMP3"
    },
    {
      "trigger": "kUTTypeMPEG (CFStringRef)",
      "contents": "KUTTypeMPEG"
    },
    {
      "trigger": "kUTTypeMPEG4 (CFStringRef)",
      "contents": "KUTTypeMPEG4"
    },
    {
      "trigger": "kUTTypeMPEG4Audio (CFStringRef)",
      "contents": "KUTTypeMPEG4Audio"
    },
    {
      "trigger": "kUTTypeMessage (CFStringRef)",
      "contents": "KUTTypeMessage"
    },
    {
      "trigger": "kUTTypeMountPoint (CFStringRef)",
      "contents": "KUTTypeMountPoint"
    },
    {
      "trigger": "kUTTypeMovie (CFStringRef)",
      "contents": "KUTTypeMovie"
    },
    {
      "trigger": "kUTTypeObjectiveCPlusPlusSource (CFStringRef)",
      "contents": "KUTTypeObjectiveCPlusPlusSource"
    },
    {
      "trigger": "kUTTypeObjectiveCSource (CFStringRef)",
      "contents": "KUTTypeObjectiveCSource"
    },
    {
      "trigger": "kUTTypePDF (CFStringRef)",
      "contents": "KUTTypePDF"
    },
    {
      "trigger": "kUTTypePICT (CFStringRef)",
      "contents": "KUTTypePICT"
    },
    {
      "trigger": "kUTTypePNG (CFStringRef)",
      "contents": "KUTTypePNG"
    },
    {
      "trigger": "kUTTypePackage (CFStringRef)",
      "contents": "KUTTypePackage"
    },
    {
      "trigger": "kUTTypePlainText (CFStringRef)",
      "contents": "KUTTypePlainText"
    },
    {
      "trigger": "kUTTypeQuickTimeImage (CFStringRef)",
      "contents": "KUTTypeQuickTimeImage"
    },
    {
      "trigger": "kUTTypeQuickTimeMovie (CFStringRef)",
      "contents": "KUTTypeQuickTimeMovie"
    },
    {
      "trigger": "kUTTypeRTF (CFStringRef)",
      "contents": "KUTTypeRTF"
    },
    {
      "trigger": "kUTTypeRTFD (CFStringRef)",
      "contents": "KUTTypeRTFD"
    },
    {
      "trigger": "kUTTypeReferenceURLKey (CFStringRef)",
      "contents": "KUTTypeReferenceURLKey"
    },
    {
      "trigger": "kUTTypeResolvable (CFStringRef)",
      "contents": "KUTTypeResolvable"
    },
    {
      "trigger": "kUTTypeSourceCode (CFStringRef)",
      "contents": "KUTTypeSourceCode"
    },
    {
      "trigger": "kUTTypeSymLink (CFStringRef)",
      "contents": "KUTTypeSymLink"
    },
    {
      "trigger": "kUTTypeTIFF (CFStringRef)",
      "contents": "KUTTypeTIFF"
    },
    {
      "trigger": "kUTTypeTXNTextAndMultimediaData (CFStringRef)",
      "contents": "KUTTypeTXNTextAndMultimediaData"
    },
    {
      "trigger": "kUTTypeTagSpecificationKey (CFStringRef)",
      "contents": "KUTTypeTagSpecificationKey"
    },
    {
      "trigger": "kUTTypeText (CFStringRef)",
      "contents": "KUTTypeText"
    },
    {
      "trigger": "kUTTypeURL (CFStringRef)",
      "contents": "KUTTypeURL"
    },
    {
      "trigger": "kUTTypeUTF16ExternalPlainText (CFStringRef)",
      "contents": "KUTTypeUTF16ExternalPlainText"
    },
    {
      "trigger": "kUTTypeUTF16PlainText (CFStringRef)",
      "contents": "KUTTypeUTF16PlainText"
    },
    {
      "trigger": "kUTTypeUTF8PlainText (CFStringRef)",
      "contents": "KUTTypeUTF8PlainText"
    },
    {
      "trigger": "kUTTypeVCard (CFStringRef)",
      "contents": "KUTTypeVCard"
    },
    {
      "trigger": "kUTTypeVersionKey (CFStringRef)",
      "contents": "KUTTypeVersionKey"
    },
    {
      "trigger": "kUTTypeVideo (CFStringRef)",
      "contents": "KUTTypeVideo"
    },
    {
      "trigger": "kUTTypeVolume (CFStringRef)",
      "contents": "KUTTypeVolume"
    },
    {
      "trigger": "kUTTypeWebArchive (CFStringRef)",
      "contents": "KUTTypeWebArchive"
    },
    {
      "trigger": "kUTTypeXML (CFStringRef)",
      "contents": "KUTTypeXML"
    },
    {
      "trigger": "kUnconnectedSelector (0)",
      "contents": "KUnconnectedSelector"
    },
    {
      "trigger": "kUnicodeDecompositionType (27)",
      "contents": "KUnicodeDecompositionType"
    },
    {
      "trigger": "kUpperAndLowerCaseSelector (0)",
      "contents": "KUpperAndLowerCaseSelector"
    },
    {
      "trigger": "kUpperCaseNumbersSelector (1)",
      "contents": "KUpperCaseNumbersSelector"
    },
    {
      "trigger": "kVerticalFractionsSelector (1)",
      "contents": "KVerticalFractionsSelector"
    },
    {
      "trigger": "kVerticalPositionType (10)",
      "contents": "KVerticalPositionType"
    },
    {
      "trigger": "kVerticalSubstitutionType (4)",
      "contents": "KVerticalSubstitutionType"
    },
    {
      "trigger": "kWordFinalSwashesOffSelector (3)",
      "contents": "KWordFinalSwashesOffSelector"
    },
    {
      "trigger": "kWordFinalSwashesOnSelector (2)",
      "contents": "KWordFinalSwashesOnSelector"
    },
    {
      "trigger": "kWordInitialSwashesOffSelector (1)",
      "contents": "KWordInitialSwashesOffSelector"
    },
    {
      "trigger": "kWordInitialSwashesOnSelector (0)",
      "contents": "KWordInitialSwashesOnSelector"
    },
    {
      "trigger": "keyForFileWrapper:",
      "contents": "keyForFileWrapper(${1:NSFileWrapper* child})"
    },
    {
      "trigger": "keysOfEntriesPassingTest:",
      "contents": "keysOfEntriesPassingTest(${1:BOOL (^)(id, id, BOOL *) predicate})"
    },
    {
      "trigger": "keysOfEntriesWithOptions:passingTest:",
      "contents": "keysOfEntriesWithOptions(${1:NSEnumerationOptions opts}, passingTest:${2:BOOL (^)(id, id, BOOL *) predicate})"
    },
    {
      "trigger": "keysSortedByValueUsingComparator:",
      "contents": "keysSortedByValueUsingComparator(${1:NSComparator cmptr})"
    },
    {
      "trigger": "keysSortedByValueUsingSelector:",
      "contents": "keysSortedByValueUsingSelector(${1:SEL comparator})"
    },
    {
      "trigger": "keysSortedByValueWithOptions:usingComparator:",
      "contents": "keysSortedByValueWithOptions(${1:NSSortOptions opts}, usingComparator:${2:NSComparator cmptr})"
    },
    {
      "trigger": "languagesForScript:",
      "contents": "languagesForScript(${1:NSString* script})"
    },
    {
      "trigger": "laterDate:",
      "contents": "laterDate(${1:NSDate* anotherDate})"
    },
    {
      "trigger": "layoutSublayersOfLayer:",
      "contents": "layoutSublayersOfLayer(${1:CALayer* layer})"
    },
    {
      "trigger": "leaderboardViewControllerDidFinish:",
      "contents": "leaderboardViewControllerDidFinish(${1:GKLeaderboardViewController* viewController})"
    },
    {
      "trigger": "leftViewRectForBounds:",
      "contents": "leftViewRectForBounds(${1:CGRect bounds})"
    },
    {
      "trigger": "lengthOfBytesUsingEncoding:",
      "contents": "lengthOfBytesUsingEncoding(${1:NSStringEncoding enc})"
    },
    {
      "trigger": "limitDateForMode:",
      "contents": "limitDateForMode(${1:NSString* mode})"
    },
    {
      "trigger": "lineRangeForRange:",
      "contents": "lineRangeForRange(${1:NSRange range})"
    },
    {
      "trigger": "linguisticTagsInRange:scheme:options:orthography:tokenRanges:",
      "contents": "linguisticTagsInRange(${1:NSRange range}, scheme:${2:NSString* tagScheme}, options:${3:NSLinguisticTaggerOptions opts}, orthography:${4:NSOrthography* orthography}, tokenRanges:${5:NSArray** tokenRanges})"
    },
    {
      "trigger": "linkItemAtPath:toPath:error:",
      "contents": "linkItemAtPath(${1:NSString* srcPath}, toPath:${2:NSString* dstPath}, error:${3:NSError** error})"
    },
    {
      "trigger": "linkItemAtURL:toURL:error:",
      "contents": "linkItemAtURL(${1:NSURL* srcURL}, toURL:${2:NSURL* dstURL}, error:${3:NSError** error})"
    },
    {
      "trigger": "load:",
      "contents": "load(${1:NSError** error})"
    },
    {
      "trigger": "loadAndReturnError:",
      "contents": "loadAndReturnError(${1:NSError** error})"
    },
    {
      "trigger": "loadData:MIMEType:textEncodingName:baseURL:",
      "contents": "loadData(${1:NSData* data}, MIMEType:${2:NSString* MIMEType}, textEncodingName:${3:NSString* textEncodingName}, baseURL:${4:NSURL* baseURL})"
    },
    {
      "trigger": "loadFriendsWithCompletionHandler:",
      "contents": "loadFriendsWithCompletionHandler(${1:void (^)(NSArray *, NSError *) completionHandler})"
    },
    {
      "trigger": "loadFromContents:ofType:error:",
      "contents": "loadFromContents(${1:id contents}, ofType:${2:NSString* typeName}, error:${3:NSError** outError})"
    },
    {
      "trigger": "loadHTMLString:baseURL:",
      "contents": "loadHTMLString(${1:NSString* string}, baseURL:${2:NSURL* baseURL})"
    },
    {
      "trigger": "loadImageWithCompletionHandler:",
      "contents": "loadImageWithCompletionHandler(${1:void (^)(UIImage *, NSError *) completionHandler})"
    },
    {
      "trigger": "loadMatchDataWithCompletionHandler:",
      "contents": "loadMatchDataWithCompletionHandler(${1:void (^)(NSData *, NSError *) completionHandler})"
    },
    {
      "trigger": "loadMetadata:",
      "contents": "loadMetadata(${1:NSError** error})"
    },
    {
      "trigger": "loadNibNamed:owner:options:",
      "contents": "loadNibNamed(${1:NSString* name}, owner:${2:id owner}, options:${3:NSDictionary* options})"
    },
    {
      "trigger": "loadPhotoForSize:withCompletionHandler:",
      "contents": "loadPhotoForSize(${1:GKPhotoSize size}, withCompletionHandler:${2:void (^)(UIImage *, NSError *) completionHandler})"
    },
    {
      "trigger": "loadRequest:",
      "contents": "loadRequest(${1:NSURLRequest* request})"
    },
    {
      "trigger": "loadScoresWithCompletionHandler:",
      "contents": "loadScoresWithCompletionHandler(${1:void (^)(NSArray *, NSError *) completionHandler})"
    },
    {
      "trigger": "loadValuesAsynchronouslyForKeys:completionHandler:",
      "contents": "loadValuesAsynchronouslyForKeys(${1:NSArray* keys}, completionHandler:${2:void (^)(void) handler})"
    },
    {
      "trigger": "localizedCaseInsensitiveCompare:",
      "contents": "localizedCaseInsensitiveCompare(${1:NSString* string})"
    },
    {
      "trigger": "localizedCompare:",
      "contents": "localizedCompare(${1:NSString* string})"
    },
    {
      "trigger": "localizedName:locale:",
      "contents": "localizedName(${1:NSTimeZoneNameStyle style}, locale:${2:NSLocale* locale})"
    },
    {
      "trigger": "localizedStandardCompare:",
      "contents": "localizedStandardCompare(${1:NSString* string})"
    },
    {
      "trigger": "localizedStringForKey:value:table:",
      "contents": "localizedStringForKey(${1:NSString* key}, value:${2:NSString* value}, table:${3:NSString* tableName})"
    },
    {
      "trigger": "locationInView:",
      "contents": "locationInView(${1:UIView* view})"
    },
    {
      "trigger": "locationManager:didChangeAuthorizationStatus:",
      "contents": "locationManager(${1:CLLocationManager* manager}, didChangeAuthorizationStatus:${2:CLAuthorizationStatus status})"
    },
    {
      "trigger": "locationManager:didEnterRegion:",
      "contents": "locationManager(${1:CLLocationManager* manager}, didEnterRegion:${2:CLRegion* region})"
    },
    {
      "trigger": "locationManager:didExitRegion:",
      "contents": "locationManager(${1:CLLocationManager* manager}, didExitRegion:${2:CLRegion* region})"
    },
    {
      "trigger": "locationManager:didFailWithError:",
      "contents": "locationManager(${1:CLLocationManager* manager}, didFailWithError:${2:NSError* error})"
    },
    {
      "trigger": "locationManager:didStartMonitoringForRegion:",
      "contents": "locationManager(${1:CLLocationManager* manager}, didStartMonitoringForRegion:${2:CLRegion* region})"
    },
    {
      "trigger": "locationManager:didUpdateHeading:",
      "contents": "locationManager(${1:CLLocationManager* manager}, didUpdateHeading:${2:CLHeading* newHeading})"
    },
    {
      "trigger": "locationManager:didUpdateToLocation:fromLocation:",
      "contents": "locationManager(${1:CLLocationManager* manager}, didUpdateToLocation:${2:CLLocation* newLocation}, fromLocation:${3:CLLocation* oldLocation})"
    },
    {
      "trigger": "locationManager:monitoringDidFailForRegion:withError:",
      "contents": "locationManager(${1:CLLocationManager* manager}, monitoringDidFailForRegion:${2:CLRegion* region}, withError:${3:NSError* error})"
    },
    {
      "trigger": "locationManagerShouldDisplayHeadingCalibration:",
      "contents": "locationManagerShouldDisplayHeadingCalibration(${1:CLLocationManager* manager})"
    },
    {
      "trigger": "locationOfTouch:inView:",
      "contents": "locationOfTouch(${1:NSUInteger touchIndex}, inView:${2:UIView* view})"
    },
    {
      "trigger": "lockBeforeDate:",
      "contents": "lockBeforeDate(${1:NSDate* limit})"
    },
    {
      "trigger": "lockForConfiguration:",
      "contents": "lockForConfiguration(${1:NSError** outError})"
    },
    {
      "trigger": "lockWhenCondition:",
      "contents": "lockWhenCondition(${1:NSInteger condition})"
    },
    {
      "trigger": "lockWhenCondition:beforeDate:",
      "contents": "lockWhenCondition(${1:NSInteger condition}, beforeDate:${2:NSDate* limit})"
    },
    {
      "trigger": "longCharacterIsMember:",
      "contents": "longCharacterIsMember(${1:UTF32Char theLongChar})"
    },
    {
      "trigger": "longLongForKey:",
      "contents": "longLongForKey(${1:NSString* aKey})"
    },
    {
      "trigger": "mailComposeController:didFinishWithResult:error:",
      "contents": "mailComposeController(${1:MFMailComposeViewController* controller}, didFinishWithResult:${2:MFMailComposeResult result}, error:${3:NSError* error})"
    },
    {
      "trigger": "makeObjectsPerformSelector:",
      "contents": "makeObjectsPerformSelector(${1:SEL aSelector})"
    },
    {
      "trigger": "makeObjectsPerformSelector:withObject:",
      "contents": "makeObjectsPerformSelector(${1:SEL aSelector}, withObject:${2:id argument})"
    },
    {
      "trigger": "makeTextWritingDirectionLeftToRight:",
      "contents": "makeTextWritingDirectionLeftToRight(${1:id sender})"
    },
    {
      "trigger": "makeTextWritingDirectionRightToLeft:",
      "contents": "makeTextWritingDirectionRightToLeft(${1:id sender})"
    },
    {
      "trigger": "managedObjectContextDidRegisterObjectsWithIDs:",
      "contents": "managedObjectContextDidRegisterObjectsWithIDs(${1:NSArray* objectIDs})"
    },
    {
      "trigger": "managedObjectContextDidUnregisterObjectsWithIDs:",
      "contents": "managedObjectContextDidUnregisterObjectsWithIDs(${1:NSArray* objectIDs})"
    },
    {
      "trigger": "managedObjectIDForURIRepresentation:",
      "contents": "managedObjectIDForURIRepresentation(${1:NSURL* url})"
    },
    {
      "trigger": "mapPointForPoint:",
      "contents": "mapPointForPoint(${1:CGPoint point})"
    },
    {
      "trigger": "mapRectForRect:",
      "contents": "mapRectForRect(${1:CGRect rect})"
    },
    {
      "trigger": "mapRectThatFits:",
      "contents": "mapRectThatFits(${1:MKMapRect mapRect})"
    },
    {
      "trigger": "mapRectThatFits:edgePadding:",
      "contents": "mapRectThatFits(${1:MKMapRect mapRect}, edgePadding:${2:UIEdgeInsets insets})"
    },
    {
      "trigger": "mapView:annotationView:calloutAccessoryControlTapped:",
      "contents": "mapView(${1:MKMapView* mapView}, annotationView:${2:MKAnnotationView* view}, calloutAccessoryControlTapped:${3:UIControl* control})"
    },
    {
      "trigger": "mapView:annotationView:didChangeDragState:fromOldState:",
      "contents": "mapView(${1:MKMapView* mapView}, annotationView:${2:MKAnnotationView* view}, didChangeDragState:${3:MKAnnotationViewDragState newState}, fromOldState:${4:MKAnnotationViewDragState oldState})"
    },
    {
      "trigger": "mapView:didAddAnnotationViews:",
      "contents": "mapView(${1:MKMapView* mapView}, didAddAnnotationViews:${2:NSArray* views})"
    },
    {
      "trigger": "mapView:didAddOverlayViews:",
      "contents": "mapView(${1:MKMapView* mapView}, didAddOverlayViews:${2:NSArray* overlayViews})"
    },
    {
      "trigger": "mapView:didChangeUserTrackingMode:animated:",
      "contents": "mapView(${1:MKMapView* mapView}, didChangeUserTrackingMode:${2:MKUserTrackingMode mode}, animated:${3:BOOL animated})"
    },
    {
      "trigger": "mapView:didDeselectAnnotationView:",
      "contents": "mapView(${1:MKMapView* mapView}, didDeselectAnnotationView:${2:MKAnnotationView* view})"
    },
    {
      "trigger": "mapView:didFailToLocateUserWithError:",
      "contents": "mapView(${1:MKMapView* mapView}, didFailToLocateUserWithError:${2:NSError* error})"
    },
    {
      "trigger": "mapView:didSelectAnnotationView:",
      "contents": "mapView(${1:MKMapView* mapView}, didSelectAnnotationView:${2:MKAnnotationView* view})"
    },
    {
      "trigger": "mapView:didUpdateUserLocation:",
      "contents": "mapView(${1:MKMapView* mapView}, didUpdateUserLocation:${2:MKUserLocation* userLocation})"
    },
    {
      "trigger": "mapView:regionDidChangeAnimated:",
      "contents": "mapView(${1:MKMapView* mapView}, regionDidChangeAnimated:${2:BOOL animated})"
    },
    {
      "trigger": "mapView:regionWillChangeAnimated:",
      "contents": "mapView(${1:MKMapView* mapView}, regionWillChangeAnimated:${2:BOOL animated})"
    },
    {
      "trigger": "mapView:viewForAnnotation:",
      "contents": "mapView(${1:MKMapView* mapView}, viewForAnnotation:${2:id annotation})"
    },
    {
      "trigger": "mapView:viewForOverlay:",
      "contents": "mapView(${1:MKMapView* mapView}, viewForOverlay:${2:id overlay})"
    },
    {
      "trigger": "mapViewDidFailLoadingMap:withError:",
      "contents": "mapViewDidFailLoadingMap(${1:MKMapView* mapView}, withError:${2:NSError* error})"
    },
    {
      "trigger": "mapViewDidFinishLoadingMap:",
      "contents": "mapViewDidFinishLoadingMap(${1:MKMapView* mapView})"
    },
    {
      "trigger": "mapViewDidStopLocatingUser:",
      "contents": "mapViewDidStopLocatingUser(${1:MKMapView* mapView})"
    },
    {
      "trigger": "mapViewWillStartLoadingMap:",
      "contents": "mapViewWillStartLoadingMap(${1:MKMapView* mapView})"
    },
    {
      "trigger": "mapViewWillStartLocatingUser:",
      "contents": "mapViewWillStartLocatingUser(${1:MKMapView* mapView})"
    },
    {
      "trigger": "match:connectionWithPlayerFailed:withError:",
      "contents": "match(${1:GKMatch* match}, connectionWithPlayerFailed:${2:NSString* playerID}, withError:${3:NSError* error})"
    },
    {
      "trigger": "match:didFailWithError:",
      "contents": "match(${1:GKMatch* match}, didFailWithError:${2:NSError* error})"
    },
    {
      "trigger": "match:didReceiveData:fromPlayer:",
      "contents": "match(${1:GKMatch* match}, didReceiveData:${2:NSData* data}, fromPlayer:${3:NSString* playerID})"
    },
    {
      "trigger": "match:player:didChangeState:",
      "contents": "match(${1:GKMatch* match}, player:${2:NSString* playerID}, didChangeState:${3:GKPlayerConnectionState state})"
    },
    {
      "trigger": "match:shouldReinvitePlayer:",
      "contents": "match(${1:GKMatch* match}, shouldReinvitePlayer:${2:NSString* playerID})"
    },
    {
      "trigger": "matchesContentsOfURL:",
      "contents": "matchesContentsOfURL(${1:NSURL* url})"
    },
    {
      "trigger": "matchesInString:options:range:",
      "contents": "matchesInString(${1:NSString* string}, options:${2:NSMatchingOptions options}, range:${3:NSRange range})"
    },
    {
      "trigger": "matchmakerViewController:didFailWithError:",
      "contents": "matchmakerViewController(${1:GKMatchmakerViewController* viewController}, didFailWithError:${2:NSError* error})"
    },
    {
      "trigger": "matchmakerViewController:didFindMatch:",
      "contents": "matchmakerViewController(${1:GKMatchmakerViewController* viewController}, didFindMatch:${2:GKMatch* match})"
    },
    {
      "trigger": "matchmakerViewController:didFindPlayers:",
      "contents": "matchmakerViewController(${1:GKMatchmakerViewController* viewController}, didFindPlayers:${2:NSArray* playerIDs})"
    },
    {
      "trigger": "matchmakerViewController:didReceiveAcceptFromHostedPlayer:",
      "contents": "matchmakerViewController(${1:GKMatchmakerViewController* viewController}, didReceiveAcceptFromHostedPlayer:${2:NSString* playerID})"
    },
    {
      "trigger": "matchmakerViewControllerWasCancelled:",
      "contents": "matchmakerViewControllerWasCancelled(${1:GKMatchmakerViewController* viewController})"
    },
    {
      "trigger": "maximumLengthOfBytesUsingEncoding:",
      "contents": "maximumLengthOfBytesUsingEncoding(${1:NSStringEncoding enc})"
    },
    {
      "trigger": "maximumRangeOfUnit:",
      "contents": "maximumRangeOfUnit(${1:NSCalendarUnit unit})"
    },
    {
      "trigger": "maximumTrackImageForState:",
      "contents": "maximumTrackImageForState(${1:UIControlState state})"
    },
    {
      "trigger": "maximumValueImageRectForBounds:",
      "contents": "maximumValueImageRectForBounds(${1:CGRect bounds})"
    },
    {
      "trigger": "mediaPicker:didPickMediaItems:",
      "contents": "mediaPicker(${1:MPMediaPickerController* mediaPicker}, didPickMediaItems:${2:MPMediaItemCollection* mediaItemCollection})"
    },
    {
      "trigger": "mediaPickerDidCancel:",
      "contents": "mediaPickerDidCancel(${1:MPMediaPickerController* mediaPicker})"
    },
    {
      "trigger": "mediaSelectionGroupForMediaCharacteristic:",
      "contents": "mediaSelectionGroupForMediaCharacteristic(${1:NSString* mediaCharacteristic})"
    },
    {
      "trigger": "mediaSelectionOptionWithPropertyList:",
      "contents": "mediaSelectionOptionWithPropertyList(${1:id plist})"
    },
    {
      "trigger": "member:",
      "contents": "member(${1:id object})"
    },
    {
      "trigger": "mergeChangesFromContextDidSaveNotification:",
      "contents": "mergeChangesFromContextDidSaveNotification(${1:NSNotification* notification})"
    },
    {
      "trigger": "messageComposeViewController:didFinishWithResult:",
      "contents": "messageComposeViewController(${1:MFMessageComposeViewController* controller}, didFinishWithResult:${2:MessageComposeResult result})"
    },
    {
      "trigger": "metadataForFormat:",
      "contents": "metadataForFormat(${1:NSString* format})"
    },
    {
      "trigger": "metadataForPersistentStore:",
      "contents": "metadataForPersistentStore(${1:NSPersistentStore* store})"
    },
    {
      "trigger": "metadataQuery:replacementObjectForResultObject:",
      "contents": "metadataQuery(${1:NSMetadataQuery* query}, replacementObjectForResultObject:${2:NSMetadataItem* result})"
    },
    {
      "trigger": "metadataQuery:replacementValueForAttribute:value:",
      "contents": "metadataQuery(${1:NSMetadataQuery* query}, replacementValueForAttribute:${2:NSString* attrName}, value:${3:id attrValue})"
    },
    {
      "trigger": "methodForSelector:",
      "contents": "methodForSelector(${1:SEL aSelector})"
    },
    {
      "trigger": "methodSignatureForSelector:",
      "contents": "methodSignatureForSelector(${1:SEL aSelector})"
    },
    {
      "trigger": "methodSignatureForSelector:",
      "contents": "methodSignatureForSelector(${1:SEL sel})"
    },
    {
      "trigger": "migratePersistentStore:toURL:options:withType:error:",
      "contents": "migratePersistentStore(${1:NSPersistentStore* store}, toURL:${2:NSURL* URL}, options:${3:NSDictionary* options}, withType:${4:NSString* storeType}, error:${5:NSError** error})"
    },
    {
      "trigger": "migrateStoreFromURL:type:options:withMappingModel:toDestinationURL:destinationType:destinationOptions:error:",
      "contents": "migrateStoreFromURL(${1:NSURL* sourceURL}, type:${2:NSString* sStoreType}, options:${3:NSDictionary* sOptions}, withMappingModel:${4:NSMappingModel* mappings}, toDestinationURL:${5:NSURL* dURL}, destinationType:${6:NSString* dStoreType}, destinationOptions:${7:NSDictionary* dOptions}, error:${8:NSError** error})"
    },
    {
      "trigger": "minimumRangeOfUnit:",
      "contents": "minimumRangeOfUnit(${1:NSCalendarUnit unit})"
    },
    {
      "trigger": "minimumTrackImageForState:",
      "contents": "minimumTrackImageForState(${1:UIControlState state})"
    },
    {
      "trigger": "minimumValueImageRectForBounds:",
      "contents": "minimumValueImageRectForBounds(${1:CGRect bounds})"
    },
    {
      "trigger": "minusOrderedSet:",
      "contents": "minusOrderedSet(${1:NSOrderedSet* other})"
    },
    {
      "trigger": "minusSet:",
      "contents": "minusSet(${1:NSSet* otherSet})"
    },
    {
      "trigger": "minusSet:",
      "contents": "minusSet(${1:NSSet* other})"
    },
    {
      "trigger": "motionBegan:withEvent:",
      "contents": "motionBegan(${1:UIEventSubtype motion}, withEvent:${2:UIEvent* event})"
    },
    {
      "trigger": "motionCancelled:withEvent:",
      "contents": "motionCancelled(${1:UIEventSubtype motion}, withEvent:${2:UIEvent* event})"
    },
    {
      "trigger": "motionEnded:withEvent:",
      "contents": "motionEnded(${1:UIEventSubtype motion}, withEvent:${2:UIEvent* event})"
    },
    {
      "trigger": "mountedVolumeURLsIncludingResourceValuesForKeys:options:",
      "contents": "mountedVolumeURLsIncludingResourceValuesForKeys(${1:NSArray* propertyKeys}, options:${2:NSVolumeEnumerationOptions options})"
    },
    {
      "trigger": "moveItemAtPath:toPath:error:",
      "contents": "moveItemAtPath(${1:NSString* srcPath}, toPath:${2:NSString* dstPath}, error:${3:NSError** error})"
    },
    {
      "trigger": "moveItemAtURL:toURL:error:",
      "contents": "moveItemAtURL(${1:NSURL* srcURL}, toURL:${2:NSURL* dstURL}, error:${3:NSError** error})"
    },
    {
      "trigger": "moveObjectsAtIndexes:toIndex:",
      "contents": "moveObjectsAtIndexes(${1:NSIndexSet* indexes}, toIndex:${2:NSUInteger idx})"
    },
    {
      "trigger": "moveRowAtIndexPath:toIndexPath:",
      "contents": "moveRowAtIndexPath(${1:NSIndexPath* indexPath}, toIndexPath:${2:NSIndexPath* newIndexPath})"
    },
    {
      "trigger": "moveSection:toSection:",
      "contents": "moveSection(${1:NSInteger section}, toSection:${2:NSInteger newSection})"
    },
    {
      "trigger": "moveToPoint:",
      "contents": "moveToPoint(${1:CGPoint point})"
    },
    {
      "trigger": "multiplyByInverseOfAttitude:",
      "contents": "multiplyByInverseOfAttitude(${1:CMAttitude* attitude})"
    },
    {
      "trigger": "mutableArrayValueForKey:",
      "contents": "mutableArrayValueForKey(${1:NSString* key})"
    },
    {
      "trigger": "mutableArrayValueForKeyPath:",
      "contents": "mutableArrayValueForKeyPath(${1:NSString* keyPath})"
    },
    {
      "trigger": "mutableCopyWithZone:",
      "contents": "mutableCopyWithZone(${1:NSZone* zone})"
    },
    {
      "trigger": "mutableOrderedSetValueForKey:",
      "contents": "mutableOrderedSetValueForKey(${1:NSString* key})"
    },
    {
      "trigger": "mutableOrderedSetValueForKeyPath:",
      "contents": "mutableOrderedSetValueForKeyPath(${1:NSString* keyPath})"
    },
    {
      "trigger": "mutableSetValueForKey:",
      "contents": "mutableSetValueForKey(${1:NSString* key})"
    },
    {
      "trigger": "mutableSetValueForKeyPath:",
      "contents": "mutableSetValueForKeyPath(${1:NSString* keyPath})"
    },
    {
      "trigger": "mutableTrackCompatibleWithTrack:",
      "contents": "mutableTrackCompatibleWithTrack(${1:AVAssetTrack* track})"
    },
    {
      "trigger": "nameFontTableTag (1851878757)",
      "contents": "NameFontTableTag"
    },
    {
      "trigger": "navigationBar:didPopItem:",
      "contents": "navigationBar(${1:UINavigationBar* navigationBar}, didPopItem:${2:UINavigationItem* item})"
    },
    {
      "trigger": "navigationBar:didPushItem:",
      "contents": "navigationBar(${1:UINavigationBar* navigationBar}, didPushItem:${2:UINavigationItem* item})"
    },
    {
      "trigger": "navigationBar:shouldPopItem:",
      "contents": "navigationBar(${1:UINavigationBar* navigationBar}, shouldPopItem:${2:UINavigationItem* item})"
    },
    {
      "trigger": "navigationBar:shouldPushItem:",
      "contents": "navigationBar(${1:UINavigationBar* navigationBar}, shouldPushItem:${2:UINavigationItem* item})"
    },
    {
      "trigger": "navigationController:didShowViewController:animated:",
      "contents": "navigationController(${1:UINavigationController* navigationController}, didShowViewController:${2:UIViewController* viewController}, animated:${3:BOOL animated})"
    },
    {
      "trigger": "navigationController:willShowViewController:animated:",
      "contents": "navigationController(${1:UINavigationController* navigationController}, willShowViewController:${2:UIViewController* viewController}, animated:${3:BOOL animated})"
    },
    {
      "trigger": "netService:didNotPublish:",
      "contents": "netService(${1:NSNetService* sender}, didNotPublish:${2:NSDictionary* errorDict})"
    },
    {
      "trigger": "netService:didNotResolve:",
      "contents": "netService(${1:NSNetService* sender}, didNotResolve:${2:NSDictionary* errorDict})"
    },
    {
      "trigger": "netService:didUpdateTXTRecordData:",
      "contents": "netService(${1:NSNetService* sender}, didUpdateTXTRecordData:${2:NSData* data})"
    },
    {
      "trigger": "netServiceBrowser:didFindDomain:moreComing:",
      "contents": "netServiceBrowser(${1:NSNetServiceBrowser* aNetServiceBrowser}, didFindDomain:${2:NSString* domainString}, moreComing:${3:BOOL moreComing})"
    },
    {
      "trigger": "netServiceBrowser:didFindService:moreComing:",
      "contents": "netServiceBrowser(${1:NSNetServiceBrowser* aNetServiceBrowser}, didFindService:${2:NSNetService* aNetService}, moreComing:${3:BOOL moreComing})"
    },
    {
      "trigger": "netServiceBrowser:didNotSearch:",
      "contents": "netServiceBrowser(${1:NSNetServiceBrowser* aNetServiceBrowser}, didNotSearch:${2:NSDictionary* errorDict})"
    },
    {
      "trigger": "netServiceBrowser:didRemoveDomain:moreComing:",
      "contents": "netServiceBrowser(${1:NSNetServiceBrowser* aNetServiceBrowser}, didRemoveDomain:${2:NSString* domainString}, moreComing:${3:BOOL moreComing})"
    },
    {
      "trigger": "netServiceBrowser:didRemoveService:moreComing:",
      "contents": "netServiceBrowser(${1:NSNetServiceBrowser* aNetServiceBrowser}, didRemoveService:${2:NSNetService* aNetService}, moreComing:${3:BOOL moreComing})"
    },
    {
      "trigger": "netServiceBrowserDidStopSearch:",
      "contents": "netServiceBrowserDidStopSearch(${1:NSNetServiceBrowser* aNetServiceBrowser})"
    },
    {
      "trigger": "netServiceBrowserWillSearch:",
      "contents": "netServiceBrowserWillSearch(${1:NSNetServiceBrowser* aNetServiceBrowser})"
    },
    {
      "trigger": "netServiceDidPublish:",
      "contents": "netServiceDidPublish(${1:NSNetService* sender})"
    },
    {
      "trigger": "netServiceDidResolveAddress:",
      "contents": "netServiceDidResolveAddress(${1:NSNetService* sender})"
    },
    {
      "trigger": "netServiceDidStop:",
      "contents": "netServiceDidStop(${1:NSNetService* sender})"
    },
    {
      "trigger": "netServiceWillPublish:",
      "contents": "netServiceWillPublish(${1:NSNetService* sender})"
    },
    {
      "trigger": "netServiceWillResolve:",
      "contents": "netServiceWillResolve(${1:NSNetService* sender})"
    },
    {
      "trigger": "newCacheNodeForManagedObject:",
      "contents": "newCacheNodeForManagedObject(${1:NSManagedObject* managedObject})"
    },
    {
      "trigger": "newObjectIDForEntity:referenceObject:",
      "contents": "newObjectIDForEntity(${1:NSEntityDescription* entity}, referenceObject:${2:id data})"
    },
    {
      "trigger": "newPersonViewController:didCompleteWithNewPerson:",
      "contents": "newPersonViewController(${1:ABNewPersonViewController* newPersonView}, didCompleteWithNewPerson:${2:ABRecordRef person})"
    },
    {
      "trigger": "newReferenceObjectForManagedObject:",
      "contents": "newReferenceObjectForManagedObject(${1:NSManagedObject* managedObject})"
    },
    {
      "trigger": "newValueForRelationship:forObjectWithID:withContext:error:",
      "contents": "newValueForRelationship(${1:NSRelationshipDescription* relationship}, forObjectWithID:${2:NSManagedObjectID* objectID}, withContext:${3:NSManagedObjectContext* context}, error:${4:NSError** error})"
    },
    {
      "trigger": "newValuesForObjectWithID:withContext:error:",
      "contents": "newValuesForObjectWithID(${1:NSManagedObjectID* objectID}, withContext:${2:NSManagedObjectContext* context}, error:${3:NSError** error})"
    },
    {
      "trigger": "nextDaylightSavingTimeTransitionAfterDate:",
      "contents": "nextDaylightSavingTimeTransitionAfterDate(${1:NSDate* aDate})"
    },
    {
      "trigger": "numberFromString:",
      "contents": "numberFromString(${1:NSString* string})"
    },
    {
      "trigger": "numberOfComponentsInPickerView:",
      "contents": "numberOfComponentsInPickerView(${1:UIPickerView* pickerView})"
    },
    {
      "trigger": "numberOfMatchesInString:options:range:",
      "contents": "numberOfMatchesInString(${1:NSString* string}, options:${2:NSMatchingOptions options}, range:${3:NSRange range})"
    },
    {
      "trigger": "numberOfPreviewItemsInPreviewController:",
      "contents": "numberOfPreviewItemsInPreviewController(${1:QLPreviewController* controller})"
    },
    {
      "trigger": "numberOfRowsInComponent:",
      "contents": "numberOfRowsInComponent(${1:NSInteger component})"
    },
    {
      "trigger": "numberOfRowsInSection:",
      "contents": "numberOfRowsInSection(${1:NSInteger section})"
    },
    {
      "trigger": "numberOfSectionsInTableView:",
      "contents": "numberOfSectionsInTableView(${1:UITableView* tableView})"
    },
    {
      "trigger": "objectAtIndex:",
      "contents": "objectAtIndex(${1:NSUInteger idx})"
    },
    {
      "trigger": "objectAtIndex:",
      "contents": "objectAtIndex(${1:NSUInteger index})"
    },
    {
      "trigger": "objectAtIndexPath:",
      "contents": "objectAtIndexPath(${1:NSIndexPath* indexPath})"
    },
    {
      "trigger": "objectForInfoDictionaryKey:",
      "contents": "objectForInfoDictionaryKey(${1:NSString* key})"
    },
    {
      "trigger": "objectForKey:",
      "contents": "objectForKey(${1:NSString* aKey})"
    },
    {
      "trigger": "objectForKey:",
      "contents": "objectForKey(${1:NSString* defaultName})"
    },
    {
      "trigger": "objectForKey:",
      "contents": "objectForKey(${1:id aKey})"
    },
    {
      "trigger": "objectForKey:",
      "contents": "objectForKey(${1:id key})"
    },
    {
      "trigger": "objectIDForEntity:referenceObject:",
      "contents": "objectIDForEntity(${1:NSEntityDescription* entity}, referenceObject:${2:id data})"
    },
    {
      "trigger": "objectIsForcedForKey:",
      "contents": "objectIsForcedForKey(${1:NSString* key})"
    },
    {
      "trigger": "objectIsForcedForKey:inDomain:",
      "contents": "objectIsForcedForKey(${1:NSString* key}, inDomain:${2:NSString* domain})"
    },
    {
      "trigger": "objectRegisteredForID:",
      "contents": "objectRegisteredForID(${1:NSManagedObjectID* objectID})"
    },
    {
      "trigger": "objectWithID:",
      "contents": "objectWithID(${1:NSManagedObjectID* objectID})"
    },
    {
      "trigger": "objectsAtIndexes:",
      "contents": "objectsAtIndexes(${1:NSIndexSet* indexes})"
    },
    {
      "trigger": "objectsForKeys:notFoundMarker:",
      "contents": "objectsForKeys(${1:NSArray* keys}, notFoundMarker:${2:id marker})"
    },
    {
      "trigger": "objectsPassingTest:",
      "contents": "objectsPassingTest(${1:BOOL (^)(id, BOOL *) predicate})"
    },
    {
      "trigger": "objectsWithOptions:passingTest:",
      "contents": "objectsWithOptions(${1:NSEnumerationOptions opts}, passingTest:${2:BOOL (^)(id, BOOL *) predicate})"
    },
    {
      "trigger": "observeValueForKeyPath:ofObject:change:context:",
      "contents": "observeValueForKeyPath(${1:NSString* keyPath}, ofObject:${2:id object}, change:${3:NSDictionary* change}, context:${4:void* context})"
    },
    {
      "trigger": "obtainPermanentIDsForObjects:error:",
      "contents": "obtainPermanentIDsForObjects(${1:NSArray* array}, error:${2:NSError** error})"
    },
    {
      "trigger": "obtainPermanentIDsForObjects:error:",
      "contents": "obtainPermanentIDsForObjects(${1:NSArray* objects}, error:${2:NSError** error})"
    },
    {
      "trigger": "offsetFromPosition:toPosition:",
      "contents": "offsetFromPosition(${1:UITextPosition* from}, toPosition:${2:UITextPosition* toPosition})"
    },
    {
      "trigger": "openURL:",
      "contents": "openURL(${1:NSURL* url})"
    },
    {
      "trigger": "openWithCompletionHandler:",
      "contents": "openWithCompletionHandler(${1:void (^)(BOOL) completionHandler})"
    },
    {
      "trigger": "ordinalityOfUnit:inUnit:forDate:",
      "contents": "ordinalityOfUnit(${1:NSCalendarUnit smaller}, inUnit:${2:NSCalendarUnit larger}, forDate:${3:NSDate* date})"
    },
    {
      "trigger": "orthographyAtIndex:effectiveRange:",
      "contents": "orthographyAtIndex(${1:NSUInteger charIndex}, effectiveRange:${2:NSRangePointer effectiveRange})"
    },
    {
      "trigger": "pageViewController:didFinishAnimating:previousViewControllers:transitionCompleted:",
      "contents": "pageViewController(${1:UIPageViewController* pageViewController}, didFinishAnimating:${2:BOOL finished}, previousViewControllers:${3:NSArray* previousViewControllers}, transitionCompleted:${4:BOOL completed})"
    },
    {
      "trigger": "pageViewController:spineLocationForInterfaceOrientation:",
      "contents": "pageViewController(${1:UIPageViewController* pageViewController}, spineLocationForInterfaceOrientation:${2:UIInterfaceOrientation orientation})"
    },
    {
      "trigger": "pageViewController:viewControllerAfterViewController:",
      "contents": "pageViewController(${1:UIPageViewController* pageViewController}, viewControllerAfterViewController:${2:UIViewController* viewController})"
    },
    {
      "trigger": "pageViewController:viewControllerBeforeViewController:",
      "contents": "pageViewController(${1:UIPageViewController* pageViewController}, viewControllerBeforeViewController:${2:UIViewController* viewController})"
    },
    {
      "trigger": "paragraphRangeForRange:",
      "contents": "paragraphRangeForRange(${1:NSRange range})"
    },
    {
      "trigger": "parser:didEndElement:namespaceURI:qualifiedName:",
      "contents": "parser(${1:NSXMLParser* parser}, didEndElement:${2:NSString* elementName}, namespaceURI:${3:NSString* namespaceURI}, qualifiedName:${4:NSString* qName})"
    },
    {
      "trigger": "parser:didEndMappingPrefix:",
      "contents": "parser(${1:NSXMLParser* parser}, didEndMappingPrefix:${2:NSString* prefix})"
    },
    {
      "trigger": "parser:didStartElement:namespaceURI:qualifiedName:attributes:",
      "contents": "parser(${1:NSXMLParser* parser}, didStartElement:${2:NSString* elementName}, namespaceURI:${3:NSString* namespaceURI}, qualifiedName:${4:NSString* qName}, attributes:${5:NSDictionary* attributeDict})"
    },
    {
      "trigger": "parser:didStartMappingPrefix:toURI:",
      "contents": "parser(${1:NSXMLParser* parser}, didStartMappingPrefix:${2:NSString* prefix}, toURI:${3:NSString* namespaceURI})"
    },
    {
      "trigger": "parser:foundAttributeDeclarationWithName:forElement:type:defaultValue:",
      "contents": "parser(${1:NSXMLParser* parser}, foundAttributeDeclarationWithName:${2:NSString* attributeName}, forElement:${3:NSString* elementName}, type:${4:NSString* type}, defaultValue:${5:NSString* defaultValue})"
    },
    {
      "trigger": "parser:foundCDATA:",
      "contents": "parser(${1:NSXMLParser* parser}, foundCDATA:${2:NSData* CDATABlock})"
    },
    {
      "trigger": "parser:foundCharacters:",
      "contents": "parser(${1:NSXMLParser* parser}, foundCharacters:${2:NSString* string})"
    },
    {
      "trigger": "parser:foundComment:",
      "contents": "parser(${1:NSXMLParser* parser}, foundComment:${2:NSString* comment})"
    },
    {
      "trigger": "parser:foundElementDeclarationWithName:model:",
      "contents": "parser(${1:NSXMLParser* parser}, foundElementDeclarationWithName:${2:NSString* elementName}, model:${3:NSString* model})"
    },
    {
      "trigger": "parser:foundExternalEntityDeclarationWithName:publicID:systemID:",
      "contents": "parser(${1:NSXMLParser* parser}, foundExternalEntityDeclarationWithName:${2:NSString* name}, publicID:${3:NSString* publicID}, systemID:${4:NSString* systemID})"
    },
    {
      "trigger": "parser:foundIgnorableWhitespace:",
      "contents": "parser(${1:NSXMLParser* parser}, foundIgnorableWhitespace:${2:NSString* whitespaceString})"
    },
    {
      "trigger": "parser:foundInternalEntityDeclarationWithName:value:",
      "contents": "parser(${1:NSXMLParser* parser}, foundInternalEntityDeclarationWithName:${2:NSString* name}, value:${3:NSString* value})"
    },
    {
      "trigger": "parser:foundNotationDeclarationWithName:publicID:systemID:",
      "contents": "parser(${1:NSXMLParser* parser}, foundNotationDeclarationWithName:${2:NSString* name}, publicID:${3:NSString* publicID}, systemID:${4:NSString* systemID})"
    },
    {
      "trigger": "parser:foundProcessingInstructionWithTarget:data:",
      "contents": "parser(${1:NSXMLParser* parser}, foundProcessingInstructionWithTarget:${2:NSString* target}, data:${3:NSString* data})"
    },
    {
      "trigger": "parser:foundUnparsedEntityDeclarationWithName:publicID:systemID:notationName:",
      "contents": "parser(${1:NSXMLParser* parser}, foundUnparsedEntityDeclarationWithName:${2:NSString* name}, publicID:${3:NSString* publicID}, systemID:${4:NSString* systemID}, notationName:${5:NSString* notationName})"
    },
    {
      "trigger": "parser:parseErrorOccurred:",
      "contents": "parser(${1:NSXMLParser* parser}, parseErrorOccurred:${2:NSError* parseError})"
    },
    {
      "trigger": "parser:resolveExternalEntityName:systemID:",
      "contents": "parser(${1:NSXMLParser* parser}, resolveExternalEntityName:${2:NSString* name}, systemID:${3:NSString* systemID})"
    },
    {
      "trigger": "parser:validationErrorOccurred:",
      "contents": "parser(${1:NSXMLParser* parser}, validationErrorOccurred:${2:NSError* validationError})"
    },
    {
      "trigger": "parserDidEndDocument:",
      "contents": "parserDidEndDocument(${1:NSXMLParser* parser})"
    },
    {
      "trigger": "parserDidStartDocument:",
      "contents": "parserDidStartDocument(${1:NSXMLParser* parser})"
    },
    {
      "trigger": "participantQuitInTurnWithOutcome:nextParticipant:matchData:completionHandler:",
      "contents": "participantQuitInTurnWithOutcome(${1:GKTurnBasedMatchOutcome matchOutcome}, nextParticipant:${2:GKTurnBasedParticipant* nextParticipant}, matchData:${3:NSData* matchData}, completionHandler:${4:void (^)(NSError *) completionHandler})"
    },
    {
      "trigger": "participantQuitOutOfTurnWithOutcome:withCompletionHandler:",
      "contents": "participantQuitOutOfTurnWithOutcome(${1:GKTurnBasedMatchOutcome matchOutcome}, withCompletionHandler:${2:void (^)(NSError *) completionHandler})"
    },
    {
      "trigger": "paste:",
      "contents": "paste(${1:id sender})"
    },
    {
      "trigger": "pasteboardTypesForItemSet:",
      "contents": "pasteboardTypesForItemSet(${1:NSIndexSet* itemSet})"
    },
    {
      "trigger": "pathContentOfSymbolicLinkAtPath:",
      "contents": "pathContentOfSymbolicLinkAtPath(${1:NSString* path})"
    },
    {
      "trigger": "pathForAuxiliaryExecutable:",
      "contents": "pathForAuxiliaryExecutable(${1:NSString* executableName})"
    },
    {
      "trigger": "pathForResource:ofType:",
      "contents": "pathForResource(${1:NSString* name}, ofType:${2:NSString* ext})"
    },
    {
      "trigger": "pathForResource:ofType:inDirectory:",
      "contents": "pathForResource(${1:NSString* name}, ofType:${2:NSString* ext}, inDirectory:${3:NSString* subpath})"
    },
    {
      "trigger": "pathForResource:ofType:inDirectory:forLocalization:",
      "contents": "pathForResource(${1:NSString* name}, ofType:${2:NSString* ext}, inDirectory:${3:NSString* subpath}, forLocalization:${4:NSString* localizationName})"
    },
    {
      "trigger": "pathsForResourcesOfType:inDirectory:",
      "contents": "pathsForResourcesOfType(${1:NSString* ext}, inDirectory:${2:NSString* subpath})"
    },
    {
      "trigger": "pathsForResourcesOfType:inDirectory:forLocalization:",
      "contents": "pathsForResourcesOfType(${1:NSString* ext}, inDirectory:${2:NSString* subpath}, forLocalization:${3:NSString* localizationName})"
    },
    {
      "trigger": "pathsMatchingExtensions:",
      "contents": "pathsMatchingExtensions(${1:NSArray* filterTypes})"
    },
    {
      "trigger": "paymentQueue:removedTransactions:",
      "contents": "paymentQueue(${1:SKPaymentQueue* queue}, removedTransactions:${2:NSArray* transactions})"
    },
    {
      "trigger": "paymentQueue:restoreCompletedTransactionsFailedWithError:",
      "contents": "paymentQueue(${1:SKPaymentQueue* queue}, restoreCompletedTransactionsFailedWithError:${2:NSError* error})"
    },
    {
      "trigger": "paymentQueue:updatedTransactions:",
      "contents": "paymentQueue(${1:SKPaymentQueue* queue}, updatedTransactions:${2:NSArray* transactions})"
    },
    {
      "trigger": "paymentQueueRestoreCompletedTransactionsFinished:",
      "contents": "paymentQueueRestoreCompletedTransactionsFinished(${1:SKPaymentQueue* queue})"
    },
    {
      "trigger": "peakPowerForChannel:",
      "contents": "peakPowerForChannel(${1:NSUInteger channelNumber})"
    },
    {
      "trigger": "peerPickerController:didConnectPeer:toSession:",
      "contents": "peerPickerController(${1:GKPeerPickerController* picker}, didConnectPeer:${2:NSString* peerID}, toSession:${3:GKSession* session})"
    },
    {
      "trigger": "peerPickerController:didSelectConnectionType:",
      "contents": "peerPickerController(${1:GKPeerPickerController* picker}, didSelectConnectionType:${2:GKPeerPickerConnectionType type})"
    },
    {
      "trigger": "peerPickerController:sessionForConnectionType:",
      "contents": "peerPickerController(${1:GKPeerPickerController* picker}, sessionForConnectionType:${2:GKPeerPickerConnectionType type})"
    },
    {
      "trigger": "peerPickerControllerDidCancel:",
      "contents": "peerPickerControllerDidCancel(${1:GKPeerPickerController* picker})"
    },
    {
      "trigger": "peersWithConnectionState:",
      "contents": "peersWithConnectionState(${1:GKPeerConnectionState state})"
    },
    {
      "trigger": "peoplePickerNavigationController:shouldContinueAfterSelectingPerson:",
      "contents": "peoplePickerNavigationController(${1:ABPeoplePickerNavigationController* peoplePicker}, shouldContinueAfterSelectingPerson:${2:ABRecordRef person})"
    },
    {
      "trigger": "peoplePickerNavigationController:shouldContinueAfterSelectingPerson:property:identifier:",
      "contents": "peoplePickerNavigationController(${1:ABPeoplePickerNavigationController* peoplePicker}, shouldContinueAfterSelectingPerson:${2:ABRecordRef person}, property:${3:ABPropertyID property}, identifier:${4:ABMultiValueIdentifier identifier})"
    },
    {
      "trigger": "peoplePickerNavigationControllerDidCancel:",
      "contents": "peoplePickerNavigationControllerDidCancel(${1:ABPeoplePickerNavigationController* peoplePicker})"
    },
    {
      "trigger": "performAsynchronousFileAccessUsingBlock:",
      "contents": "performAsynchronousFileAccessUsingBlock(${1:void (^)(void) block})"
    },
    {
      "trigger": "performBlock:",
      "contents": "performBlock(${1:void (^)() block})"
    },
    {
      "trigger": "performBlockAndWait:",
      "contents": "performBlockAndWait(${1:void (^)() block})"
    },
    {
      "trigger": "performCustomValidationForEntityMapping:manager:error:",
      "contents": "performCustomValidationForEntityMapping(${1:NSEntityMapping* mapping}, manager:${2:NSMigrationManager* manager}, error:${3:NSError** error})"
    },
    {
      "trigger": "performDefaultHandlingForAuthenticationChallenge:",
      "contents": "performDefaultHandlingForAuthenticationChallenge(${1:NSURLAuthenticationChallenge* challenge})"
    },
    {
      "trigger": "performFetch:",
      "contents": "performFetch(${1:NSError** error})"
    },
    {
      "trigger": "performRequestWithHandler:",
      "contents": "performRequestWithHandler(${1:TWRequestHandler handler})"
    },
    {
      "trigger": "performSegueWithIdentifier:sender:",
      "contents": "performSegueWithIdentifier(${1:NSString* identifier}, sender:${2:id sender})"
    },
    {
      "trigger": "performSelector:",
      "contents": "performSelector(${1:SEL aSelector})"
    },
    {
      "trigger": "performSelector:onThread:withObject:waitUntilDone:",
      "contents": "performSelector(${1:SEL aSelector}, onThread:${2:NSThread* thr}, withObject:${3:id arg}, waitUntilDone:${4:BOOL wait})"
    },
    {
      "trigger": "performSelector:onThread:withObject:waitUntilDone:modes:",
      "contents": "performSelector(${1:SEL aSelector}, onThread:${2:NSThread* thr}, withObject:${3:id arg}, waitUntilDone:${4:BOOL wait}, modes:${5:NSArray* array})"
    },
    {
      "trigger": "performSelector:target:argument:order:modes:",
      "contents": "performSelector(${1:SEL aSelector}, target:${2:id target}, argument:${3:id arg}, order:${4:NSUInteger order}, modes:${5:NSArray* modes})"
    },
    {
      "trigger": "performSelector:withObject:",
      "contents": "performSelector(${1:SEL aSelector}, withObject:${2:id object})"
    },
    {
      "trigger": "performSelector:withObject:afterDelay:",
      "contents": "performSelector(${1:SEL aSelector}, withObject:${2:id anArgument}, afterDelay:${3:NSTimeInterval delay})"
    },
    {
      "trigger": "performSelector:withObject:afterDelay:inModes:",
      "contents": "performSelector(${1:SEL aSelector}, withObject:${2:id anArgument}, afterDelay:${3:NSTimeInterval delay}, inModes:${4:NSArray* modes})"
    },
    {
      "trigger": "performSelector:withObject:withObject:",
      "contents": "performSelector(${1:SEL aSelector}, withObject:${2:id object1}, withObject:${3:id object2})"
    },
    {
      "trigger": "performSelectorInBackground:withObject:",
      "contents": "performSelectorInBackground(${1:SEL aSelector}, withObject:${2:id arg})"
    },
    {
      "trigger": "performSelectorOnMainThread:withObject:waitUntilDone:",
      "contents": "performSelectorOnMainThread(${1:SEL aSelector}, withObject:${2:id arg}, waitUntilDone:${3:BOOL wait})"
    },
    {
      "trigger": "performSelectorOnMainThread:withObject:waitUntilDone:modes:",
      "contents": "performSelectorOnMainThread(${1:SEL aSelector}, withObject:${2:id arg}, waitUntilDone:${3:BOOL wait}, modes:${4:NSArray* array})"
    },
    {
      "trigger": "peripheral:didDiscoverCharacteristicsForService:error:",
      "contents": "peripheral(${1:CBPeripheral* peripheral}, didDiscoverCharacteristicsForService:${2:CBService* service}, error:${3:NSError* error})"
    },
    {
      "trigger": "peripheral:didDiscoverDescriptorsForCharacteristic:error:",
      "contents": "peripheral(${1:CBPeripheral* peripheral}, didDiscoverDescriptorsForCharacteristic:${2:CBCharacteristic* characteristic}, error:${3:NSError* error})"
    },
    {
      "trigger": "peripheral:didDiscoverIncludedServicesForService:error:",
      "contents": "peripheral(${1:CBPeripheral* peripheral}, didDiscoverIncludedServicesForService:${2:CBService* service}, error:${3:NSError* error})"
    },
    {
      "trigger": "peripheral:didDiscoverServices:",
      "contents": "peripheral(${1:CBPeripheral* peripheral}, didDiscoverServices:${2:NSError* error})"
    },
    {
      "trigger": "peripheral:didUpdateNotificationStateForCharacteristic:error:",
      "contents": "peripheral(${1:CBPeripheral* peripheral}, didUpdateNotificationStateForCharacteristic:${2:CBCharacteristic* characteristic}, error:${3:NSError* error})"
    },
    {
      "trigger": "peripheral:didUpdateValueForCharacteristic:error:",
      "contents": "peripheral(${1:CBPeripheral* peripheral}, didUpdateValueForCharacteristic:${2:CBCharacteristic* characteristic}, error:${3:NSError* error})"
    },
    {
      "trigger": "peripheral:didUpdateValueForDescriptor:error:",
      "contents": "peripheral(${1:CBPeripheral* peripheral}, didUpdateValueForDescriptor:${2:CBDescriptor* descriptor}, error:${3:NSError* error})"
    },
    {
      "trigger": "peripheral:didWriteValueForCharacteristic:error:",
      "contents": "peripheral(${1:CBPeripheral* peripheral}, didWriteValueForCharacteristic:${2:CBCharacteristic* characteristic}, error:${3:NSError* error})"
    },
    {
      "trigger": "peripheral:didWriteValueForDescriptor:error:",
      "contents": "peripheral(${1:CBPeripheral* peripheral}, didWriteValueForDescriptor:${2:CBDescriptor* descriptor}, error:${3:NSError* error})"
    },
    {
      "trigger": "peripheralDidUpdateRSSI:error:",
      "contents": "peripheralDidUpdateRSSI(${1:CBPeripheral* peripheral}, error:${2:NSError* error})"
    },
    {
      "trigger": "persistentDomainForName:",
      "contents": "persistentDomainForName(${1:NSString* domainName})"
    },
    {
      "trigger": "persistentStoreForURL:",
      "contents": "persistentStoreForURL(${1:NSURL* URL})"
    },
    {
      "trigger": "persistentStoreTypeForFileType:",
      "contents": "persistentStoreTypeForFileType(${1:NSString* fileType})"
    },
    {
      "trigger": "personViewController:shouldPerformDefaultActionForPerson:property:identifier:",
      "contents": "personViewController(${1:ABPersonViewController* personViewController}, shouldPerformDefaultActionForPerson:${2:ABRecordRef person}, property:${3:ABPropertyID property}, identifier:${4:ABMultiValueIdentifier identifier})"
    },
    {
      "trigger": "pickerView:accessibilityHintForComponent:",
      "contents": "pickerView(${1:UIPickerView* pickerView}, accessibilityHintForComponent:${2:NSInteger component})"
    },
    {
      "trigger": "pickerView:accessibilityLabelForComponent:",
      "contents": "pickerView(${1:UIPickerView* pickerView}, accessibilityLabelForComponent:${2:NSInteger component})"
    },
    {
      "trigger": "pickerView:didSelectRow:inComponent:",
      "contents": "pickerView(${1:UIPickerView* pickerView}, didSelectRow:${2:NSInteger row}, inComponent:${3:NSInteger component})"
    },
    {
      "trigger": "pickerView:numberOfRowsInComponent:",
      "contents": "pickerView(${1:UIPickerView* pickerView}, numberOfRowsInComponent:${2:NSInteger component})"
    },
    {
      "trigger": "pickerView:rowHeightForComponent:",
      "contents": "pickerView(${1:UIPickerView* pickerView}, rowHeightForComponent:${2:NSInteger component})"
    },
    {
      "trigger": "pickerView:titleForRow:forComponent:",
      "contents": "pickerView(${1:UIPickerView* pickerView}, titleForRow:${2:NSInteger row}, forComponent:${3:NSInteger component})"
    },
    {
      "trigger": "pickerView:viewForRow:forComponent:reusingView:",
      "contents": "pickerView(${1:UIPickerView* pickerView}, viewForRow:${2:NSInteger row}, forComponent:${3:NSInteger component}, reusingView:${4:UIView* view})"
    },
    {
      "trigger": "pickerView:widthForComponent:",
      "contents": "pickerView(${1:UIPickerView* pickerView}, widthForComponent:${2:NSInteger component})"
    },
    {
      "trigger": "placeholderRectForBounds:",
      "contents": "placeholderRectForBounds(${1:CGRect bounds})"
    },
    {
      "trigger": "playAtTime:",
      "contents": "playAtTime(${1:NSTimeInterval time})"
    },
    {
      "trigger": "pointForMapPoint:",
      "contents": "pointForMapPoint(${1:MKMapPoint mapPoint})"
    },
    {
      "trigger": "pointInside:withEvent:",
      "contents": "pointInside(${1:CGPoint point}, withEvent:${2:UIEvent* event})"
    },
    {
      "trigger": "popNavigationItemAnimated:",
      "contents": "popNavigationItemAnimated(${1:BOOL animated})"
    },
    {
      "trigger": "popToRootViewControllerAnimated:",
      "contents": "popToRootViewControllerAnimated(${1:BOOL animated})"
    },
    {
      "trigger": "popToViewController:animated:",
      "contents": "popToViewController(${1:UIViewController* viewController}, animated:${2:BOOL animated})"
    },
    {
      "trigger": "popViewControllerAnimated:",
      "contents": "popViewControllerAnimated(${1:BOOL animated})"
    },
    {
      "trigger": "popoverControllerDidDismissPopover:",
      "contents": "popoverControllerDidDismissPopover(${1:UIPopoverController* popoverController})"
    },
    {
      "trigger": "popoverControllerShouldDismissPopover:",
      "contents": "popoverControllerShouldDismissPopover(${1:UIPopoverController* popoverController})"
    },
    {
      "trigger": "positionAdjustmentForSearchBarIcon:",
      "contents": "positionAdjustmentForSearchBarIcon(${1:UISearchBarIcon icon})"
    },
    {
      "trigger": "positionFromPosition:inDirection:offset:",
      "contents": "positionFromPosition(${1:UITextPosition* position}, inDirection:${2:UITextLayoutDirection direction}, offset:${3:NSInteger offset})"
    },
    {
      "trigger": "positionFromPosition:offset:",
      "contents": "positionFromPosition(${1:UITextPosition* position}, offset:${2:NSInteger offset})"
    },
    {
      "trigger": "positionFromPosition:toBoundary:inDirection:",
      "contents": "positionFromPosition(${1:UITextPosition* position}, toBoundary:${2:UITextGranularity granularity}, inDirection:${3:UITextDirection direction})"
    },
    {
      "trigger": "positionWithinRange:atCharacterOffset:",
      "contents": "positionWithinRange(${1:UITextRange* range}, atCharacterOffset:${2:NSInteger offset})"
    },
    {
      "trigger": "positionWithinRange:farthestInDirection:",
      "contents": "positionWithinRange(${1:UITextRange* range}, farthestInDirection:${2:UITextLayoutDirection direction})"
    },
    {
      "trigger": "possibleTagsAtIndex:scheme:tokenRange:sentenceRange:scores:",
      "contents": "possibleTagsAtIndex(${1:NSUInteger charIndex}, scheme:${2:NSString* tagScheme}, tokenRange:${3:NSRangePointer tokenRange}, sentenceRange:${4:NSRangePointer sentenceRange}, scores:${5:NSArray** scores})"
    },
    {
      "trigger": "postNotification:",
      "contents": "postNotification(${1:NSNotification* notification})"
    },
    {
      "trigger": "postNotificationName:object:",
      "contents": "postNotificationName(${1:NSString* aName}, object:${2:id anObject})"
    },
    {
      "trigger": "postNotificationName:object:userInfo:",
      "contents": "postNotificationName(${1:NSString* aName}, object:${2:id anObject}, userInfo:${3:NSDictionary* aUserInfo})"
    },
    {
      "trigger": "predicateForEventsWithStartDate:endDate:calendars:",
      "contents": "predicateForEventsWithStartDate(${1:NSDate* startDate}, endDate:${2:NSDate* endDate}, calendars:${3:NSArray* calendars})"
    },
    {
      "trigger": "predicateWithSubstitutionVariables:",
      "contents": "predicateWithSubstitutionVariables(${1:NSDictionary* variables})"
    },
    {
      "trigger": "preflightAndReturnError:",
      "contents": "preflightAndReturnError(${1:NSError** error})"
    },
    {
      "trigger": "prepareForDrawingPages:",
      "contents": "prepareForDrawingPages(${1:NSRange range})"
    },
    {
      "trigger": "prepareForReadingItemsAtURLs:options:writingItemsAtURLs:options:error:byAccessor:",
      "contents": "prepareForReadingItemsAtURLs(${1:NSArray* readingURLs}, options:${2:NSFileCoordinatorReadingOptions readingOptions}, writingItemsAtURLs:${3:NSArray* writingURLs}, options:${4:NSFileCoordinatorWritingOptions writingOptions}, error:${5:NSError** outError}, byAccessor:${6:void (^)(void (^)(void)) batchAccessor})"
    },
    {
      "trigger": "prepareForSegue:sender:",
      "contents": "prepareForSegue(${1:UIStoryboardSegue* segue}, sender:${2:id sender})"
    },
    {
      "trigger": "prepareWithInvocationTarget:",
      "contents": "prepareWithInvocationTarget(${1:id target})"
    },
    {
      "trigger": "presentAnimated:completionHandler:",
      "contents": "presentAnimated(${1:BOOL animated}, completionHandler:${2:UIPrintInteractionCompletionHandler completion})"
    },
    {
      "trigger": "presentFromBarButtonItem:animated:completionHandler:",
      "contents": "presentFromBarButtonItem(${1:UIBarButtonItem* item}, animated:${2:BOOL animated}, completionHandler:${3:UIPrintInteractionCompletionHandler completion})"
    },
    {
      "trigger": "presentFromRect:inView:animated:completionHandler:",
      "contents": "presentFromRect(${1:CGRect rect}, inView:${2:UIView* view}, animated:${3:BOOL animated}, completionHandler:${4:UIPrintInteractionCompletionHandler completion})"
    },
    {
      "trigger": "presentFromViewController:",
      "contents": "presentFromViewController(${1:UIViewController* viewController})"
    },
    {
      "trigger": "presentInView:",
      "contents": "presentInView(${1:UIView* containerView})"
    },
    {
      "trigger": "presentLocalNotificationNow:",
      "contents": "presentLocalNotificationNow(${1:UILocalNotification* notification})"
    },
    {
      "trigger": "presentModalViewController:animated:",
      "contents": "presentModalViewController(${1:UIViewController* modalViewController}, animated:${2:BOOL animated})"
    },
    {
      "trigger": "presentMoviePlayerViewControllerAnimated:",
      "contents": "presentMoviePlayerViewControllerAnimated(${1:MPMoviePlayerViewController* moviePlayerViewController})"
    },
    {
      "trigger": "presentOpenInMenuFromBarButtonItem:animated:",
      "contents": "presentOpenInMenuFromBarButtonItem(${1:UIBarButtonItem* item}, animated:${2:BOOL animated})"
    },
    {
      "trigger": "presentOpenInMenuFromRect:inView:animated:",
      "contents": "presentOpenInMenuFromRect(${1:CGRect rect}, inView:${2:UIView* view}, animated:${3:BOOL animated})"
    },
    {
      "trigger": "presentOptionsMenuFromBarButtonItem:animated:",
      "contents": "presentOptionsMenuFromBarButtonItem(${1:UIBarButtonItem* item}, animated:${2:BOOL animated})"
    },
    {
      "trigger": "presentOptionsMenuFromRect:inView:animated:",
      "contents": "presentOptionsMenuFromRect(${1:CGRect rect}, inView:${2:UIView* view}, animated:${3:BOOL animated})"
    },
    {
      "trigger": "presentPopoverFromBarButtonItem:permittedArrowDirections:animated:",
      "contents": "presentPopoverFromBarButtonItem(${1:UIBarButtonItem* item}, permittedArrowDirections:${2:UIPopoverArrowDirection arrowDirections}, animated:${3:BOOL animated})"
    },
    {
      "trigger": "presentPopoverFromRect:inView:permittedArrowDirections:animated:",
      "contents": "presentPopoverFromRect(${1:CGRect rect}, inView:${2:UIView* view}, permittedArrowDirections:${3:UIPopoverArrowDirection arrowDirections}, animated:${4:BOOL animated})"
    },
    {
      "trigger": "presentPreviewAnimated:",
      "contents": "presentPreviewAnimated(${1:BOOL animated})"
    },
    {
      "trigger": "presentRenderbuffer:",
      "contents": "presentRenderbuffer(${1:NSUInteger target})"
    },
    {
      "trigger": "presentViewController:animated:completion:",
      "contents": "presentViewController(${1:UIViewController* viewControllerToPresent}, animated:${2:BOOL flag}, completion:${3:void (^)(void) completion})"
    },
    {
      "trigger": "presentedItemDidGainVersion:",
      "contents": "presentedItemDidGainVersion(${1:NSFileVersion* version})"
    },
    {
      "trigger": "presentedItemDidLoseVersion:",
      "contents": "presentedItemDidLoseVersion(${1:NSFileVersion* version})"
    },
    {
      "trigger": "presentedItemDidMoveToURL:",
      "contents": "presentedItemDidMoveToURL(${1:NSURL* newURL})"
    },
    {
      "trigger": "presentedItemDidResolveConflictVersion:",
      "contents": "presentedItemDidResolveConflictVersion(${1:NSFileVersion* version})"
    },
    {
      "trigger": "presentedSubitemAtURL:didGainVersion:",
      "contents": "presentedSubitemAtURL(${1:NSURL* url}, didGainVersion:${2:NSFileVersion* version})"
    },
    {
      "trigger": "presentedSubitemAtURL:didLoseVersion:",
      "contents": "presentedSubitemAtURL(${1:NSURL* url}, didLoseVersion:${2:NSFileVersion* version})"
    },
    {
      "trigger": "presentedSubitemAtURL:didMoveToURL:",
      "contents": "presentedSubitemAtURL(${1:NSURL* oldURL}, didMoveToURL:${2:NSURL* newURL})"
    },
    {
      "trigger": "presentedSubitemAtURL:didResolveConflictVersion:",
      "contents": "presentedSubitemAtURL(${1:NSURL* url}, didResolveConflictVersion:${2:NSFileVersion* version})"
    },
    {
      "trigger": "presentedSubitemDidAppearAtURL:",
      "contents": "presentedSubitemDidAppearAtURL(${1:NSURL* url})"
    },
    {
      "trigger": "presentedSubitemDidChangeAtURL:",
      "contents": "presentedSubitemDidChangeAtURL(${1:NSURL* url})"
    },
    {
      "trigger": "previewController:frameForPreviewItem:inSourceView:",
      "contents": "previewController(${1:QLPreviewController* controller}, frameForPreviewItem:${2:id item}, inSourceView:${3:UIView** view})"
    },
    {
      "trigger": "previewController:previewItemAtIndex:",
      "contents": "previewController(${1:QLPreviewController* controller}, previewItemAtIndex:${2:NSInteger index})"
    },
    {
      "trigger": "previewController:shouldOpenURL:forPreviewItem:",
      "contents": "previewController(${1:QLPreviewController* controller}, shouldOpenURL:${2:NSURL* url}, forPreviewItem:${3:id item})"
    },
    {
      "trigger": "previewController:transitionImageForPreviewItem:contentRect:",
      "contents": "previewController(${1:QLPreviewController* controller}, transitionImageForPreviewItem:${2:id item}, contentRect:${3:CGRect* contentRect})"
    },
    {
      "trigger": "previewControllerDidDismiss:",
      "contents": "previewControllerDidDismiss(${1:QLPreviewController* controller})"
    },
    {
      "trigger": "previewControllerWillDismiss:",
      "contents": "previewControllerWillDismiss(${1:QLPreviewController* controller})"
    },
    {
      "trigger": "previousLocationInView:",
      "contents": "previousLocationInView(${1:UIView* view})"
    },
    {
      "trigger": "primitiveValueForKey:",
      "contents": "primitiveValueForKey(${1:NSString* key})"
    },
    {
      "trigger": "printFormattersForPageAtIndex:",
      "contents": "printFormattersForPageAtIndex(${1:NSInteger pageIndex})"
    },
    {
      "trigger": "printInteractionController:choosePaper:",
      "contents": "printInteractionController(${1:UIPrintInteractionController* printInteractionController}, choosePaper:${2:NSArray* paperList})"
    },
    {
      "trigger": "printInteractionControllerDidDismissPrinterOptions:",
      "contents": "printInteractionControllerDidDismissPrinterOptions(${1:UIPrintInteractionController* printInteractionController})"
    },
    {
      "trigger": "printInteractionControllerDidFinishJob:",
      "contents": "printInteractionControllerDidFinishJob(${1:UIPrintInteractionController* printInteractionController})"
    },
    {
      "trigger": "printInteractionControllerDidPresentPrinterOptions:",
      "contents": "printInteractionControllerDidPresentPrinterOptions(${1:UIPrintInteractionController* printInteractionController})"
    },
    {
      "trigger": "printInteractionControllerParentViewController:",
      "contents": "printInteractionControllerParentViewController(${1:UIPrintInteractionController* printInteractionController})"
    },
    {
      "trigger": "printInteractionControllerWillDismissPrinterOptions:",
      "contents": "printInteractionControllerWillDismissPrinterOptions(${1:UIPrintInteractionController* printInteractionController})"
    },
    {
      "trigger": "printInteractionControllerWillPresentPrinterOptions:",
      "contents": "printInteractionControllerWillPresentPrinterOptions(${1:UIPrintInteractionController* printInteractionController})"
    },
    {
      "trigger": "printInteractionControllerWillStartJob:",
      "contents": "printInteractionControllerWillStartJob(${1:UIPrintInteractionController* printInteractionController})"
    },
    {
      "trigger": "productsRequest:didReceiveResponse:",
      "contents": "productsRequest(${1:SKProductsRequest* request}, didReceiveResponse:${2:SKProductsResponse* response})"
    },
    {
      "trigger": "propertyForKey:",
      "contents": "propertyForKey(${1:NSString* key})"
    },
    {
      "trigger": "publishWithOptions:",
      "contents": "publishWithOptions(${1:NSNetServiceOptions options})"
    },
    {
      "trigger": "pushNavigationItem:animated:",
      "contents": "pushNavigationItem(${1:UINavigationItem* item}, animated:${2:BOOL animated})"
    },
    {
      "trigger": "pushViewController:animated:",
      "contents": "pushViewController(${1:UIViewController* viewController}, animated:${2:BOOL animated})"
    },
    {
      "trigger": "queryActivityWithCompletionHandler:",
      "contents": "queryActivityWithCompletionHandler(${1:void (^)(NSInteger, NSError *) completionHandler})"
    },
    {
      "trigger": "queryPlayerGroupActivity:withCompletionHandler:",
      "contents": "queryPlayerGroupActivity(${1:NSUInteger playerGroup}, withCompletionHandler:${2:void (^)(NSInteger, NSError *) completionHandler})"
    },
    {
      "trigger": "rangeAtIndex:",
      "contents": "rangeAtIndex(${1:NSUInteger idx})"
    },
    {
      "trigger": "rangeEnclosingPosition:withGranularity:inDirection:",
      "contents": "rangeEnclosingPosition(${1:UITextPosition* position}, withGranularity:${2:UITextGranularity granularity}, inDirection:${3:UITextDirection direction})"
    },
    {
      "trigger": "rangeOfCharacterFromSet:",
      "contents": "rangeOfCharacterFromSet(${1:NSCharacterSet* aSet})"
    },
    {
      "trigger": "rangeOfCharacterFromSet:options:",
      "contents": "rangeOfCharacterFromSet(${1:NSCharacterSet* aSet}, options:${2:NSStringCompareOptions mask})"
    },
    {
      "trigger": "rangeOfCharacterFromSet:options:range:",
      "contents": "rangeOfCharacterFromSet(${1:NSCharacterSet* aSet}, options:${2:NSStringCompareOptions mask}, range:${3:NSRange searchRange})"
    },
    {
      "trigger": "rangeOfComposedCharacterSequenceAtIndex:",
      "contents": "rangeOfComposedCharacterSequenceAtIndex(${1:NSUInteger index})"
    },
    {
      "trigger": "rangeOfComposedCharacterSequencesForRange:",
      "contents": "rangeOfComposedCharacterSequencesForRange(${1:NSRange range})"
    },
    {
      "trigger": "rangeOfData:options:range:",
      "contents": "rangeOfData(${1:NSData* dataToFind}, options:${2:NSDataSearchOptions mask}, range:${3:NSRange searchRange})"
    },
    {
      "trigger": "rangeOfFirstMatchInString:options:range:",
      "contents": "rangeOfFirstMatchInString(${1:NSString* string}, options:${2:NSMatchingOptions options}, range:${3:NSRange range})"
    },
    {
      "trigger": "rangeOfMisspelledWordInString:range:startingAt:wrap:language:",
      "contents": "rangeOfMisspelledWordInString(${1:NSString* stringToCheck}, range:${2:NSRange range}, startingAt:${3:NSInteger startingOffset}, wrap:${4:BOOL wrapFlag}, language:${5:NSString* language})"
    },
    {
      "trigger": "rangeOfString:",
      "contents": "rangeOfString(${1:NSString* aString})"
    },
    {
      "trigger": "rangeOfString:options:",
      "contents": "rangeOfString(${1:NSString* aString}, options:${2:NSStringCompareOptions mask})"
    },
    {
      "trigger": "rangeOfString:options:range:",
      "contents": "rangeOfString(${1:NSString* aString}, options:${2:NSStringCompareOptions mask}, range:${3:NSRange searchRange})"
    },
    {
      "trigger": "rangeOfString:options:range:locale:",
      "contents": "rangeOfString(${1:NSString* aString}, options:${2:NSStringCompareOptions mask}, range:${3:NSRange searchRange}, locale:${4:NSLocale* locale})"
    },
    {
      "trigger": "rangeOfUnit:inUnit:forDate:",
      "contents": "rangeOfUnit(${1:NSCalendarUnit smaller}, inUnit:${2:NSCalendarUnit larger}, forDate:${3:NSDate* date})"
    },
    {
      "trigger": "rangeOfUnit:startDate:interval:forDate:",
      "contents": "rangeOfUnit(${1:NSCalendarUnit unit}, startDate:${2:NSDate** datep}, interval:${3:NSTimeInterval* tip}, forDate:${4:NSDate* date})"
    },
    {
      "trigger": "read:maxLength:",
      "contents": "read(${1:uint8_t* buffer}, maxLength:${2:NSUInteger len})"
    },
    {
      "trigger": "readAdditionalContentFromURL:error:",
      "contents": "readAdditionalContentFromURL(${1:NSURL* absoluteURL}, error:${2:NSError** error})"
    },
    {
      "trigger": "readDataOfLength:",
      "contents": "readDataOfLength(${1:NSUInteger length})"
    },
    {
      "trigger": "readFromURL:error:",
      "contents": "readFromURL(${1:NSURL* url}, error:${2:NSError** outError})"
    },
    {
      "trigger": "readFromURL:options:error:",
      "contents": "readFromURL(${1:NSURL* url}, options:${2:NSFileWrapperReadingOptions options}, error:${3:NSError** outError})"
    },
    {
      "trigger": "readInBackgroundAndNotifyForModes:",
      "contents": "readInBackgroundAndNotifyForModes(${1:NSArray* modes})"
    },
    {
      "trigger": "readToEndOfFileInBackgroundAndNotifyForModes:",
      "contents": "readToEndOfFileInBackgroundAndNotifyForModes(${1:NSArray* modes})"
    },
    {
      "trigger": "readValueForCharacteristic:",
      "contents": "readValueForCharacteristic(${1:CBCharacteristic* characteristic})"
    },
    {
      "trigger": "readValueForDescriptor:",
      "contents": "readValueForDescriptor(${1:CBDescriptor* descriptor})"
    },
    {
      "trigger": "receivedData:fromParticipantID:",
      "contents": "receivedData(${1:NSData* arbitraryData}, fromParticipantID:${2:NSString* participantID})"
    },
    {
      "trigger": "receivedRealTimeData:fromParticipantID:",
      "contents": "receivedRealTimeData(${1:NSData* audio}, fromParticipantID:${2:NSString* participantID})"
    },
    {
      "trigger": "recordForDuration:",
      "contents": "recordForDuration(${1:NSTimeInterval duration})"
    },
    {
      "trigger": "rectForFooterInSection:",
      "contents": "rectForFooterInSection(${1:NSInteger section})"
    },
    {
      "trigger": "rectForHeaderInSection:",
      "contents": "rectForHeaderInSection(${1:NSInteger section})"
    },
    {
      "trigger": "rectForMapRect:",
      "contents": "rectForMapRect(${1:MKMapRect mapRect})"
    },
    {
      "trigger": "rectForPageAtIndex:",
      "contents": "rectForPageAtIndex(${1:NSInteger pageIndex})"
    },
    {
      "trigger": "rectForRowAtIndexPath:",
      "contents": "rectForRowAtIndexPath(${1:NSIndexPath* indexPath})"
    },
    {
      "trigger": "rectForSection:",
      "contents": "rectForSection(${1:NSInteger section})"
    },
    {
      "trigger": "redoMenuTitleForUndoActionName:",
      "contents": "redoMenuTitleForUndoActionName(${1:NSString* actionName})"
    },
    {
      "trigger": "referenceObjectForObjectID:",
      "contents": "referenceObjectForObjectID(${1:NSManagedObjectID* objectID})"
    },
    {
      "trigger": "refreshObject:mergeChanges:",
      "contents": "refreshObject(${1:NSManagedObject* object}, mergeChanges:${2:BOOL flag})"
    },
    {
      "trigger": "regionThatFits:",
      "contents": "regionThatFits(${1:MKCoordinateRegion region})"
    },
    {
      "trigger": "registerDefaults:",
      "contents": "registerDefaults(${1:NSDictionary* registrationDictionary})"
    },
    {
      "trigger": "registerForRemoteNotificationTypes:",
      "contents": "registerForRemoteNotificationTypes(${1:UIRemoteNotificationType types})"
    },
    {
      "trigger": "registerNib:forCellReuseIdentifier:",
      "contents": "registerNib(${1:UINib* nib}, forCellReuseIdentifier:${2:NSString* identifier})"
    },
    {
      "trigger": "registerUndoWithTarget:selector:object:",
      "contents": "registerUndoWithTarget(${1:id target}, selector:${2:SEL selector}, object:${3:id anObject})"
    },
    {
      "trigger": "rejectProtectionSpaceAndContinueWithChallenge:",
      "contents": "rejectProtectionSpaceAndContinueWithChallenge(${1:NSURLAuthenticationChallenge* challenge})"
    },
    {
      "trigger": "relationshipsWithDestinationEntity:",
      "contents": "relationshipsWithDestinationEntity(${1:NSEntityDescription* entity})"
    },
    {
      "trigger": "relinquishPresentedItemToReader:",
      "contents": "relinquishPresentedItemToReader(${1:void (^)(void (^)(void)) reader})"
    },
    {
      "trigger": "relinquishPresentedItemToWriter:",
      "contents": "relinquishPresentedItemToWriter(${1:void (^)(void (^)(void)) writer})"
    },
    {
      "trigger": "reloadComponent:",
      "contents": "reloadComponent(${1:NSInteger component})"
    },
    {
      "trigger": "reloadRowsAtIndexPaths:withRowAnimation:",
      "contents": "reloadRowsAtIndexPaths(${1:NSArray* indexPaths}, withRowAnimation:${2:UITableViewRowAnimation animation})"
    },
    {
      "trigger": "reloadSections:withRowAnimation:",
      "contents": "reloadSections(${1:NSIndexSet* sections}, withRowAnimation:${2:UITableViewRowAnimation animation})"
    },
    {
      "trigger": "remoteControlReceivedWithEvent:",
      "contents": "remoteControlReceivedWithEvent(${1:UIEvent* event})"
    },
    {
      "trigger": "removeAlarm:",
      "contents": "removeAlarm(${1:EKAlarm* alarm})"
    },
    {
      "trigger": "removeAllActionsWithTarget:",
      "contents": "removeAllActionsWithTarget(${1:id target})"
    },
    {
      "trigger": "removeAndReturnError:",
      "contents": "removeAndReturnError(${1:NSError** outError})"
    },
    {
      "trigger": "removeAnimationForKey:",
      "contents": "removeAnimationForKey(${1:NSString* key})"
    },
    {
      "trigger": "removeAnnotation:",
      "contents": "removeAnnotation(${1:id annotation})"
    },
    {
      "trigger": "removeAnnotations:",
      "contents": "removeAnnotations(${1:NSArray* annotations})"
    },
    {
      "trigger": "removeAttribute:range:",
      "contents": "removeAttribute(${1:NSString* name}, range:${2:NSRange range})"
    },
    {
      "trigger": "removeCachedResponseForRequest:",
      "contents": "removeCachedResponseForRequest(${1:NSURLRequest* request})"
    },
    {
      "trigger": "removeCalendar:commit:error:",
      "contents": "removeCalendar(${1:EKCalendar* calendar}, commit:${2:BOOL commit}, error:${3:NSError** error})"
    },
    {
      "trigger": "removeCharactersInRange:",
      "contents": "removeCharactersInRange(${1:NSRange aRange})"
    },
    {
      "trigger": "removeCharactersInString:",
      "contents": "removeCharactersInString(${1:NSString* aString})"
    },
    {
      "trigger": "removeConnection:",
      "contents": "removeConnection(${1:MIDINetworkConnection* connection})"
    },
    {
      "trigger": "removeContact:",
      "contents": "removeContact(${1:MIDINetworkHost* contact})"
    },
    {
      "trigger": "removeCredential:forProtectionSpace:",
      "contents": "removeCredential(${1:NSURLCredential* credential}, forProtectionSpace:${2:NSURLProtectionSpace* space})"
    },
    {
      "trigger": "removeDependency:",
      "contents": "removeDependency(${1:NSOperation* op})"
    },
    {
      "trigger": "removeEvent:span:commit:error:",
      "contents": "removeEvent(${1:EKEvent* event}, span:${2:EKSpan span}, commit:${3:BOOL commit}, error:${4:NSError** error})"
    },
    {
      "trigger": "removeEvent:span:error:",
      "contents": "removeEvent(${1:EKEvent* event}, span:${2:EKSpan span}, error:${3:NSError** error})"
    },
    {
      "trigger": "removeFileWrapper:",
      "contents": "removeFileWrapper(${1:NSFileWrapper* child})"
    },
    {
      "trigger": "removeFilterPredicate:",
      "contents": "removeFilterPredicate(${1:MPMediaPredicate* predicate})"
    },
    {
      "trigger": "removeFromRunLoop:forMode:",
      "contents": "removeFromRunLoop(${1:NSRunLoop* aRunLoop}, forMode:${2:NSString* mode})"
    },
    {
      "trigger": "removeFromRunLoop:forMode:",
      "contents": "removeFromRunLoop(${1:NSRunLoop* runLoop}, forMode:${2:NSString* mode})"
    },
    {
      "trigger": "removeFromRunLoop:forMode:",
      "contents": "removeFromRunLoop(${1:NSRunLoop* runloop}, forMode:${2:NSString* mode})"
    },
    {
      "trigger": "removeGestureRecognizer:",
      "contents": "removeGestureRecognizer(${1:UIGestureRecognizer* gestureRecognizer})"
    },
    {
      "trigger": "removeIndex:",
      "contents": "removeIndex(${1:NSUInteger value})"
    },
    {
      "trigger": "removeIndexes:",
      "contents": "removeIndexes(${1:NSIndexSet* indexSet})"
    },
    {
      "trigger": "removeIndexesInRange:",
      "contents": "removeIndexesInRange(${1:NSRange range})"
    },
    {
      "trigger": "removeInput:",
      "contents": "removeInput(${1:AVCaptureInput* input})"
    },
    {
      "trigger": "removeIssue:",
      "contents": "removeIssue(${1:NKIssue* issue})"
    },
    {
      "trigger": "removeItem:",
      "contents": "removeItem(${1:AVPlayerItem* item})"
    },
    {
      "trigger": "removeItemAtPath:error:",
      "contents": "removeItemAtPath(${1:NSString* path}, error:${2:NSError** error})"
    },
    {
      "trigger": "removeItemAtURL:error:",
      "contents": "removeItemAtURL(${1:NSURL* URL}, error:${2:NSError** error})"
    },
    {
      "trigger": "removeObject:",
      "contents": "removeObject(${1:id anObject})"
    },
    {
      "trigger": "removeObject:",
      "contents": "removeObject(${1:id object})"
    },
    {
      "trigger": "removeObject:inRange:",
      "contents": "removeObject(${1:id anObject}, inRange:${2:NSRange range})"
    },
    {
      "trigger": "removeObjectAtIndex:",
      "contents": "removeObjectAtIndex(${1:NSUInteger idx})"
    },
    {
      "trigger": "removeObjectAtIndex:",
      "contents": "removeObjectAtIndex(${1:NSUInteger index})"
    },
    {
      "trigger": "removeObjectForKey:",
      "contents": "removeObjectForKey(${1:NSString* aKey})"
    },
    {
      "trigger": "removeObjectForKey:",
      "contents": "removeObjectForKey(${1:NSString* defaultName})"
    },
    {
      "trigger": "removeObjectForKey:",
      "contents": "removeObjectForKey(${1:id aKey})"
    },
    {
      "trigger": "removeObjectForKey:",
      "contents": "removeObjectForKey(${1:id key})"
    },
    {
      "trigger": "removeObjectIdenticalTo:",
      "contents": "removeObjectIdenticalTo(${1:id anObject})"
    },
    {
      "trigger": "removeObjectIdenticalTo:inRange:",
      "contents": "removeObjectIdenticalTo(${1:id anObject}, inRange:${2:NSRange range})"
    },
    {
      "trigger": "removeObjectsAtIndexes:",
      "contents": "removeObjectsAtIndexes(${1:NSIndexSet* indexes})"
    },
    {
      "trigger": "removeObjectsForKeys:",
      "contents": "removeObjectsForKeys(${1:NSArray* keyArray})"
    },
    {
      "trigger": "removeObjectsFromIndices:numIndices:",
      "contents": "removeObjectsFromIndices(${1:NSUInteger* indices}, numIndices:${2:NSUInteger cnt})"
    },
    {
      "trigger": "removeObjectsInArray:",
      "contents": "removeObjectsInArray(${1:NSArray* array})"
    },
    {
      "trigger": "removeObjectsInArray:",
      "contents": "removeObjectsInArray(${1:NSArray* otherArray})"
    },
    {
      "trigger": "removeObjectsInRange:",
      "contents": "removeObjectsInRange(${1:NSRange range})"
    },
    {
      "trigger": "removeObserver:",
      "contents": "removeObserver(${1:id observer})"
    },
    {
      "trigger": "removeObserver:forKeyPath:",
      "contents": "removeObserver(${1:NSObject* observer}, forKeyPath:${2:NSString* keyPath})"
    },
    {
      "trigger": "removeObserver:forKeyPath:context:",
      "contents": "removeObserver(${1:NSObject* observer}, forKeyPath:${2:NSString* keyPath}, context:${3:void* context})"
    },
    {
      "trigger": "removeObserver:fromObjectsAtIndexes:forKeyPath:",
      "contents": "removeObserver(${1:NSObject* observer}, fromObjectsAtIndexes:${2:NSIndexSet* indexes}, forKeyPath:${3:NSString* keyPath})"
    },
    {
      "trigger": "removeObserver:fromObjectsAtIndexes:forKeyPath:context:",
      "contents": "removeObserver(${1:NSObject* observer}, fromObjectsAtIndexes:${2:NSIndexSet* indexes}, forKeyPath:${3:NSString* keyPath}, context:${4:void* context})"
    },
    {
      "trigger": "removeObserver:name:object:",
      "contents": "removeObserver(${1:id observer}, name:${2:NSString* aName}, object:${3:id anObject})"
    },
    {
      "trigger": "removeOutput:",
      "contents": "removeOutput(${1:AVCaptureOutput* output})"
    },
    {
      "trigger": "removeOverlay:",
      "contents": "removeOverlay(${1:id overlay})"
    },
    {
      "trigger": "removeOverlays:",
      "contents": "removeOverlays(${1:NSArray* overlays})"
    },
    {
      "trigger": "removePersistentDomainForName:",
      "contents": "removePersistentDomainForName(${1:NSString* domainName})"
    },
    {
      "trigger": "removePersistentStore:error:",
      "contents": "removePersistentStore(${1:NSPersistentStore* store}, error:${2:NSError** error})"
    },
    {
      "trigger": "removePort:forMode:",
      "contents": "removePort(${1:NSPort* aPort}, forMode:${2:NSString* mode})"
    },
    {
      "trigger": "removeRecurrenceRule:",
      "contents": "removeRecurrenceRule(${1:EKRecurrenceRule* rule})"
    },
    {
      "trigger": "removeSegmentAtIndex:animated:",
      "contents": "removeSegmentAtIndex(${1:NSUInteger segment}, animated:${2:BOOL animated})"
    },
    {
      "trigger": "removeSuiteNamed:",
      "contents": "removeSuiteNamed(${1:NSString* suiteName})"
    },
    {
      "trigger": "removeTarget:action:",
      "contents": "removeTarget(${1:id target}, action:${2:SEL action})"
    },
    {
      "trigger": "removeTarget:action:forControlEvents:",
      "contents": "removeTarget(${1:id target}, action:${2:SEL action}, forControlEvents:${3:UIControlEvents controlEvents})"
    },
    {
      "trigger": "removeTimeObserver:",
      "contents": "removeTimeObserver(${1:id observer})"
    },
    {
      "trigger": "removeTimeRange:",
      "contents": "removeTimeRange(${1:CMTimeRange timeRange})"
    },
    {
      "trigger": "removeTrack:",
      "contents": "removeTrack(${1:AVCompositionTrack* track})"
    },
    {
      "trigger": "removeTransactionObserver:",
      "contents": "removeTransactionObserver(${1:id observer})"
    },
    {
      "trigger": "removeVolatileDomainForName:",
      "contents": "removeVolatileDomainForName(${1:NSString* domainName})"
    },
    {
      "trigger": "removeWithCompletionHandler:",
      "contents": "removeWithCompletionHandler(${1:void (^)(NSError *) completionHandler})"
    },
    {
      "trigger": "render:toBitmap:rowBytes:bounds:format:colorSpace:",
      "contents": "render(${1:CIImage* im}, toBitmap:${2:void* data}, rowBytes:${3:ptrdiff_t rb}, bounds:${4:CGRect r}, format:${5:CIFormat f}, colorSpace:${6:CGColorSpaceRef cs})"
    },
    {
      "trigger": "render:toCVPixelBuffer:",
      "contents": "render(${1:CIImage* image}, toCVPixelBuffer:${2:CVPixelBufferRef buffer})"
    },
    {
      "trigger": "render:toCVPixelBuffer:bounds:colorSpace:",
      "contents": "render(${1:CIImage* image}, toCVPixelBuffer:${2:CVPixelBufferRef buffer}, bounds:${3:CGRect r}, colorSpace:${4:CGColorSpaceRef cs})"
    },
    {
      "trigger": "renderInContext:",
      "contents": "renderInContext(${1:CGContextRef ctx})"
    },
    {
      "trigger": "renderbufferStorage:fromDrawable:",
      "contents": "renderbufferStorage(${1:NSUInteger target}, fromDrawable:${2:id drawable})"
    },
    {
      "trigger": "replaceBytesInRange:withBytes:",
      "contents": "replaceBytesInRange(${1:NSRange range}, withBytes:${2:void* bytes})"
    },
    {
      "trigger": "replaceBytesInRange:withBytes:length:",
      "contents": "replaceBytesInRange(${1:NSRange range}, withBytes:${2:void* replacementBytes}, length:${3:NSUInteger replacementLength})"
    },
    {
      "trigger": "replaceCharactersInRange:withAttributedString:",
      "contents": "replaceCharactersInRange(${1:NSRange range}, withAttributedString:${2:NSAttributedString* attrString})"
    },
    {
      "trigger": "replaceCharactersInRange:withString:",
      "contents": "replaceCharactersInRange(${1:NSRange range}, withString:${2:NSString* aString})"
    },
    {
      "trigger": "replaceCharactersInRange:withString:",
      "contents": "replaceCharactersInRange(${1:NSRange range}, withString:${2:NSString* str})"
    },
    {
      "trigger": "replaceCurrentItemWithPlayerItem:",
      "contents": "replaceCurrentItemWithPlayerItem(${1:AVPlayerItem* item})"
    },
    {
      "trigger": "replaceItemAtURL:options:error:",
      "contents": "replaceItemAtURL(${1:NSURL* url}, options:${2:NSFileVersionReplacingOptions options}, error:${3:NSError** error})"
    },
    {
      "trigger": "replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:",
      "contents": "replaceItemAtURL(${1:NSURL* originalItemURL}, withItemAtURL:${2:NSURL* newItemURL}, backupItemName:${3:NSString* backupItemName}, options:${4:NSFileManagerItemReplacementOptions options}, resultingItemURL:${5:NSURL** resultingURL}, error:${6:NSError** error})"
    },
    {
      "trigger": "replaceMatchesInString:options:range:withTemplate:",
      "contents": "replaceMatchesInString(${1:NSMutableString* string}, options:${2:NSMatchingOptions options}, range:${3:NSRange range}, withTemplate:${4:NSString* templ})"
    },
    {
      "trigger": "replaceObjectAtIndex:withObject:",
      "contents": "replaceObjectAtIndex(${1:NSUInteger idx}, withObject:${2:id object})"
    },
    {
      "trigger": "replaceObjectAtIndex:withObject:",
      "contents": "replaceObjectAtIndex(${1:NSUInteger index}, withObject:${2:id anObject})"
    },
    {
      "trigger": "replaceObjectsAtIndexes:withObjects:",
      "contents": "replaceObjectsAtIndexes(${1:NSIndexSet* indexes}, withObjects:${2:NSArray* objects})"
    },
    {
      "trigger": "replaceObjectsInRange:withObjects:count:",
      "contents": "replaceObjectsInRange(${1:NSRange range}, withObjects:${2:id* objects}, count:${3:NSUInteger count})"
    },
    {
      "trigger": "replaceObjectsInRange:withObjectsFromArray:",
      "contents": "replaceObjectsInRange(${1:NSRange range}, withObjectsFromArray:${2:NSArray* otherArray})"
    },
    {
      "trigger": "replaceObjectsInRange:withObjectsFromArray:range:",
      "contents": "replaceObjectsInRange(${1:NSRange range}, withObjectsFromArray:${2:NSArray* otherArray}, range:${3:NSRange otherRange})"
    },
    {
      "trigger": "replaceOccurrencesOfString:withString:options:range:",
      "contents": "replaceOccurrencesOfString(${1:NSString* target}, withString:${2:NSString* replacement}, options:${3:NSStringCompareOptions options}, range:${4:NSRange searchRange})"
    },
    {
      "trigger": "replaceRange:withText:",
      "contents": "replaceRange(${1:UITextRange* range}, withText:${2:NSString* text})"
    },
    {
      "trigger": "replaceSublayer:with:",
      "contents": "replaceSublayer(${1:CALayer* layer}, with:${2:CALayer* layer2})"
    },
    {
      "trigger": "replacementObjectForCoder:",
      "contents": "replacementObjectForCoder(${1:NSCoder* aCoder})"
    },
    {
      "trigger": "replacementObjectForKeyedArchiver:",
      "contents": "replacementObjectForKeyedArchiver(${1:NSKeyedArchiver* archiver})"
    },
    {
      "trigger": "replacementStringForResult:inString:offset:template:",
      "contents": "replacementStringForResult(${1:NSTextCheckingResult* result}, inString:${2:NSString* string}, offset:${3:NSInteger offset}, template:${4:NSString* templ})"
    },
    {
      "trigger": "reportAchievementWithCompletionHandler:",
      "contents": "reportAchievementWithCompletionHandler(${1:void (^)(NSError *) completionHandler})"
    },
    {
      "trigger": "reportScoreWithCompletionHandler:",
      "contents": "reportScoreWithCompletionHandler(${1:void (^)(NSError *) completionHandler})"
    },
    {
      "trigger": "representationForUTI:",
      "contents": "representationForUTI(${1:NSString* representationUTI})"
    },
    {
      "trigger": "request:didFailWithError:",
      "contents": "request(${1:SKRequest* request}, didFailWithError:${2:NSError* error})"
    },
    {
      "trigger": "requestAccessToAccountsWithType:withCompletionHandler:",
      "contents": "requestAccessToAccountsWithType(${1:ACAccountType* accountType}, withCompletionHandler:${2:ACAccountStoreRequestAccessCompletionHandler handler})"
    },
    {
      "trigger": "requestDidFinish:",
      "contents": "requestDidFinish(${1:SKRequest* request})"
    },
    {
      "trigger": "requestMediaDataWhenReadyOnQueue:usingBlock:",
      "contents": "requestMediaDataWhenReadyOnQueue(${1:dispatch_queue_t queue}, usingBlock:${2:void (^)(void) block})"
    },
    {
      "trigger": "requestThumbnailImagesAtTimes:timeOption:",
      "contents": "requestThumbnailImagesAtTimes(${1:NSArray* playbackTimes}, timeOption:${2:MPMovieTimeOption option})"
    },
    {
      "trigger": "requireGestureRecognizerToFail:",
      "contents": "requireGestureRecognizerToFail(${1:UIGestureRecognizer* otherGestureRecognizer})"
    },
    {
      "trigger": "resetBytesInRange:",
      "contents": "resetBytesInRange(${1:NSRange range})"
    },
    {
      "trigger": "resizableImageWithCapInsets:",
      "contents": "resizableImageWithCapInsets(${1:UIEdgeInsets capInsets})"
    },
    {
      "trigger": "resolveConflicts:error:",
      "contents": "resolveConflicts(${1:NSArray* list}, error:${2:NSError** error})"
    },
    {
      "trigger": "resolveWithTimeout:",
      "contents": "resolveWithTimeout(${1:NSTimeInterval timeout})"
    },
    {
      "trigger": "resourceValuesForKeys:error:",
      "contents": "resourceValuesForKeys(${1:NSArray* keys}, error:${2:NSError** error})"
    },
    {
      "trigger": "respondsToSelector:",
      "contents": "respondsToSelector(${1:SEL aSelector})"
    },
    {
      "trigger": "resultAtIndex:",
      "contents": "resultAtIndex(${1:NSUInteger idx})"
    },
    {
      "trigger": "resultByAdjustingRangesWithOffset:",
      "contents": "resultByAdjustingRangesWithOffset(${1:NSInteger offset})"
    },
    {
      "trigger": "retrievePeripherals:",
      "contents": "retrievePeripherals(${1:NSArray* peripheralUUIDs})"
    },
    {
      "trigger": "reverseGeocodeLocation:completionHandler:",
      "contents": "reverseGeocodeLocation(${1:CLLocation* location}, completionHandler:${2:CLGeocodeCompletionHandler completionHandler})"
    },
    {
      "trigger": "reverseGeocoder:didFailWithError:",
      "contents": "reverseGeocoder(${1:MKReverseGeocoder* geocoder}, didFailWithError:${2:NSError* error})"
    },
    {
      "trigger": "reverseGeocoder:didFindPlacemark:",
      "contents": "reverseGeocoder(${1:MKReverseGeocoder* geocoder}, didFindPlacemark:${2:MKPlacemark* placemark})"
    },
    {
      "trigger": "reverseTransformedValue:",
      "contents": "reverseTransformedValue(${1:id value})"
    },
    {
      "trigger": "revertToContentsOfURL:completionHandler:",
      "contents": "revertToContentsOfURL(${1:NSURL* url}, completionHandler:${2:void (^)(BOOL) completionHandler})"
    },
    {
      "trigger": "rightViewRectForBounds:",
      "contents": "rightViewRectForBounds(${1:CGRect bounds})"
    },
    {
      "trigger": "rowSizeForComponent:",
      "contents": "rowSizeForComponent(${1:NSInteger component})"
    },
    {
      "trigger": "runActionForKey:object:arguments:",
      "contents": "runActionForKey(${1:NSString* event}, object:${2:id anObject}, arguments:${3:NSDictionary* dict})"
    },
    {
      "trigger": "runMode:beforeDate:",
      "contents": "runMode(${1:NSString* mode}, beforeDate:${2:NSDate* limitDate})"
    },
    {
      "trigger": "runUntilDate:",
      "contents": "runUntilDate(${1:NSDate* limitDate})"
    },
    {
      "trigger": "samplePresentationTimeForTrackTime:",
      "contents": "samplePresentationTimeForTrackTime(${1:CMTime trackTime})"
    },
    {
      "trigger": "save:",
      "contents": "save(${1:NSError** error})"
    },
    {
      "trigger": "saveAccount:withCompletionHandler:",
      "contents": "saveAccount(${1:ACAccount* account}, withCompletionHandler:${2:ACAccountStoreSaveCompletionHandler completionHandler})"
    },
    {
      "trigger": "saveCalendar:commit:error:",
      "contents": "saveCalendar(${1:EKCalendar* calendar}, commit:${2:BOOL commit}, error:${3:NSError** error})"
    },
    {
      "trigger": "saveEvent:span:commit:error:",
      "contents": "saveEvent(${1:EKEvent* event}, span:${2:EKSpan span}, commit:${3:BOOL commit}, error:${4:NSError** error})"
    },
    {
      "trigger": "saveEvent:span:error:",
      "contents": "saveEvent(${1:EKEvent* event}, span:${2:EKSpan span}, error:${3:NSError** error})"
    },
    {
      "trigger": "savePresentedItemChangesWithCompletionHandler:",
      "contents": "savePresentedItemChangesWithCompletionHandler(${1:void (^)(NSError *) completionHandler})"
    },
    {
      "trigger": "saveToURL:forSaveOperation:completionHandler:",
      "contents": "saveToURL(${1:NSURL* url}, forSaveOperation:${2:UIDocumentSaveOperation saveOperation}, completionHandler:${3:void (^)(BOOL) completionHandler})"
    },
    {
      "trigger": "scaleTimeRange:toDuration:",
      "contents": "scaleTimeRange(${1:CMTimeRange timeRange}, toDuration:${2:CMTime duration})"
    },
    {
      "trigger": "scanCharactersFromSet:intoString:",
      "contents": "scanCharactersFromSet(${1:NSCharacterSet* set}, intoString:${2:NSString** value})"
    },
    {
      "trigger": "scanDecimal:",
      "contents": "scanDecimal(${1:NSDecimal* dcm})"
    },
    {
      "trigger": "scanDouble:",
      "contents": "scanDouble(${1:double* value})"
    },
    {
      "trigger": "scanFloat:",
      "contents": "scanFloat(${1:float* value})"
    },
    {
      "trigger": "scanForPeripheralsWithServices:options:",
      "contents": "scanForPeripheralsWithServices(${1:NSArray* serviceUUIDs}, options:${2:NSDictionary* options})"
    },
    {
      "trigger": "scanHexDouble:",
      "contents": "scanHexDouble(${1:double* result})"
    },
    {
      "trigger": "scanHexFloat:",
      "contents": "scanHexFloat(${1:float* result})"
    },
    {
      "trigger": "scanHexInt:",
      "contents": "scanHexInt(${1:unsigned int* value})"
    },
    {
      "trigger": "scanHexLongLong:",
      "contents": "scanHexLongLong(${1:unsigned long long* result})"
    },
    {
      "trigger": "scanInt:",
      "contents": "scanInt(${1:int* value})"
    },
    {
      "trigger": "scanInteger:",
      "contents": "scanInteger(${1:NSInteger* value})"
    },
    {
      "trigger": "scanLongLong:",
      "contents": "scanLongLong(${1:long long* value})"
    },
    {
      "trigger": "scanString:intoString:",
      "contents": "scanString(${1:NSString* string}, intoString:${2:NSString** value})"
    },
    {
      "trigger": "scanUpToCharactersFromSet:intoString:",
      "contents": "scanUpToCharactersFromSet(${1:NSCharacterSet* set}, intoString:${2:NSString** value})"
    },
    {
      "trigger": "scanUpToString:intoString:",
      "contents": "scanUpToString(${1:NSString* string}, intoString:${2:NSString** value})"
    },
    {
      "trigger": "scheduleInRunLoop:forMode:",
      "contents": "scheduleInRunLoop(${1:NSRunLoop* aRunLoop}, forMode:${2:NSString* mode})"
    },
    {
      "trigger": "scheduleInRunLoop:forMode:",
      "contents": "scheduleInRunLoop(${1:NSRunLoop* runLoop}, forMode:${2:NSString* mode})"
    },
    {
      "trigger": "scheduleLocalNotification:",
      "contents": "scheduleLocalNotification(${1:UILocalNotification* notification})"
    },
    {
      "trigger": "scopeBarButtonBackgroundImageForState:",
      "contents": "scopeBarButtonBackgroundImageForState(${1:UIControlState state})"
    },
    {
      "trigger": "scopeBarButtonDividerImageForLeftSegmentState:rightSegmentState:",
      "contents": "scopeBarButtonDividerImageForLeftSegmentState(${1:UIControlState leftState}, rightSegmentState:${2:UIControlState rightState})"
    },
    {
      "trigger": "scopeBarButtonTitleTextAttributesForState:",
      "contents": "scopeBarButtonTitleTextAttributesForState(${1:UIControlState state})"
    },
    {
      "trigger": "scrollPoint:",
      "contents": "scrollPoint(${1:CGPoint p})"
    },
    {
      "trigger": "scrollRangeToVisible:",
      "contents": "scrollRangeToVisible(${1:NSRange range})"
    },
    {
      "trigger": "scrollRectToVisible:",
      "contents": "scrollRectToVisible(${1:CGRect r})"
    },
    {
      "trigger": "scrollRectToVisible:animated:",
      "contents": "scrollRectToVisible(${1:CGRect rect}, animated:${2:BOOL animated})"
    },
    {
      "trigger": "scrollToNearestSelectedRowAtScrollPosition:animated:",
      "contents": "scrollToNearestSelectedRowAtScrollPosition(${1:UITableViewScrollPosition scrollPosition}, animated:${2:BOOL animated})"
    },
    {
      "trigger": "scrollToPoint:",
      "contents": "scrollToPoint(${1:CGPoint p})"
    },
    {
      "trigger": "scrollToRect:",
      "contents": "scrollToRect(${1:CGRect r})"
    },
    {
      "trigger": "scrollToRowAtIndexPath:atScrollPosition:animated:",
      "contents": "scrollToRowAtIndexPath(${1:NSIndexPath* indexPath}, atScrollPosition:${2:UITableViewScrollPosition scrollPosition}, animated:${3:BOOL animated})"
    },
    {
      "trigger": "scrollViewDidEndDecelerating:",
      "contents": "scrollViewDidEndDecelerating(${1:UIScrollView* scrollView})"
    },
    {
      "trigger": "scrollViewDidEndDragging:willDecelerate:",
      "contents": "scrollViewDidEndDragging(${1:UIScrollView* scrollView}, willDecelerate:${2:BOOL decelerate})"
    },
    {
      "trigger": "scrollViewDidEndScrollingAnimation:",
      "contents": "scrollViewDidEndScrollingAnimation(${1:UIScrollView* scrollView})"
    },
    {
      "trigger": "scrollViewDidEndZooming:withView:atScale:",
      "contents": "scrollViewDidEndZooming(${1:UIScrollView* scrollView}, withView:${2:UIView* view}, atScale:${3:float scale})"
    },
    {
      "trigger": "scrollViewDidScroll:",
      "contents": "scrollViewDidScroll(${1:UIScrollView* scrollView})"
    },
    {
      "trigger": "scrollViewDidScrollToTop:",
      "contents": "scrollViewDidScrollToTop(${1:UIScrollView* scrollView})"
    },
    {
      "trigger": "scrollViewDidZoom:",
      "contents": "scrollViewDidZoom(${1:UIScrollView* scrollView})"
    },
    {
      "trigger": "scrollViewShouldScrollToTop:",
      "contents": "scrollViewShouldScrollToTop(${1:UIScrollView* scrollView})"
    },
    {
      "trigger": "scrollViewWillBeginDecelerating:",
      "contents": "scrollViewWillBeginDecelerating(${1:UIScrollView* scrollView})"
    },
    {
      "trigger": "scrollViewWillBeginDragging:",
      "contents": "scrollViewWillBeginDragging(${1:UIScrollView* scrollView})"
    },
    {
      "trigger": "scrollViewWillBeginZooming:withView:",
      "contents": "scrollViewWillBeginZooming(${1:UIScrollView* scrollView}, withView:${2:UIView* view})"
    },
    {
      "trigger": "scrollViewWillEndDragging:withVelocity:targetContentOffset:",
      "contents": "scrollViewWillEndDragging(${1:UIScrollView* scrollView}, withVelocity:${2:CGPoint velocity}, targetContentOffset:${3:CGPoint* targetContentOffset})"
    },
    {
      "trigger": "searchBar:selectedScopeButtonIndexDidChange:",
      "contents": "searchBar(${1:UISearchBar* searchBar}, selectedScopeButtonIndexDidChange:${2:NSInteger selectedScope})"
    },
    {
      "trigger": "searchBar:shouldChangeTextInRange:replacementText:",
      "contents": "searchBar(${1:UISearchBar* searchBar}, shouldChangeTextInRange:${2:NSRange range}, replacementText:${3:NSString* text})"
    },
    {
      "trigger": "searchBar:textDidChange:",
      "contents": "searchBar(${1:UISearchBar* searchBar}, textDidChange:${2:NSString* searchText})"
    },
    {
      "trigger": "searchBarBookmarkButtonClicked:",
      "contents": "searchBarBookmarkButtonClicked(${1:UISearchBar* searchBar})"
    },
    {
      "trigger": "searchBarCancelButtonClicked:",
      "contents": "searchBarCancelButtonClicked(${1:UISearchBar* searchBar})"
    },
    {
      "trigger": "searchBarResultsListButtonClicked:",
      "contents": "searchBarResultsListButtonClicked(${1:UISearchBar* searchBar})"
    },
    {
      "trigger": "searchBarSearchButtonClicked:",
      "contents": "searchBarSearchButtonClicked(${1:UISearchBar* searchBar})"
    },
    {
      "trigger": "searchBarShouldBeginEditing:",
      "contents": "searchBarShouldBeginEditing(${1:UISearchBar* searchBar})"
    },
    {
      "trigger": "searchBarShouldEndEditing:",
      "contents": "searchBarShouldEndEditing(${1:UISearchBar* searchBar})"
    },
    {
      "trigger": "searchBarTextDidBeginEditing:",
      "contents": "searchBarTextDidBeginEditing(${1:UISearchBar* searchBar})"
    },
    {
      "trigger": "searchBarTextDidEndEditing:",
      "contents": "searchBarTextDidEndEditing(${1:UISearchBar* searchBar})"
    },
    {
      "trigger": "searchDisplayController:didHideSearchResultsTableView:",
      "contents": "searchDisplayController(${1:UISearchDisplayController* controller}, didHideSearchResultsTableView:${2:UITableView* tableView})"
    },
    {
      "trigger": "searchDisplayController:didLoadSearchResultsTableView:",
      "contents": "searchDisplayController(${1:UISearchDisplayController* controller}, didLoadSearchResultsTableView:${2:UITableView* tableView})"
    },
    {
      "trigger": "searchDisplayController:didShowSearchResultsTableView:",
      "contents": "searchDisplayController(${1:UISearchDisplayController* controller}, didShowSearchResultsTableView:${2:UITableView* tableView})"
    },
    {
      "trigger": "searchDisplayController:shouldReloadTableForSearchScope:",
      "contents": "searchDisplayController(${1:UISearchDisplayController* controller}, shouldReloadTableForSearchScope:${2:NSInteger searchOption})"
    },
    {
      "trigger": "searchDisplayController:shouldReloadTableForSearchString:",
      "contents": "searchDisplayController(${1:UISearchDisplayController* controller}, shouldReloadTableForSearchString:${2:NSString* searchString})"
    },
    {
      "trigger": "searchDisplayController:willHideSearchResultsTableView:",
      "contents": "searchDisplayController(${1:UISearchDisplayController* controller}, willHideSearchResultsTableView:${2:UITableView* tableView})"
    },
    {
      "trigger": "searchDisplayController:willShowSearchResultsTableView:",
      "contents": "searchDisplayController(${1:UISearchDisplayController* controller}, willShowSearchResultsTableView:${2:UITableView* tableView})"
    },
    {
      "trigger": "searchDisplayController:willUnloadSearchResultsTableView:",
      "contents": "searchDisplayController(${1:UISearchDisplayController* controller}, willUnloadSearchResultsTableView:${2:UITableView* tableView})"
    },
    {
      "trigger": "searchDisplayControllerDidBeginSearch:",
      "contents": "searchDisplayControllerDidBeginSearch(${1:UISearchDisplayController* controller})"
    },
    {
      "trigger": "searchDisplayControllerDidEndSearch:",
      "contents": "searchDisplayControllerDidEndSearch(${1:UISearchDisplayController* controller})"
    },
    {
      "trigger": "searchDisplayControllerWillBeginSearch:",
      "contents": "searchDisplayControllerWillBeginSearch(${1:UISearchDisplayController* controller})"
    },
    {
      "trigger": "searchDisplayControllerWillEndSearch:",
      "contents": "searchDisplayControllerWillEndSearch(${1:UISearchDisplayController* controller})"
    },
    {
      "trigger": "searchFieldBackgroundImageForState:",
      "contents": "searchFieldBackgroundImageForState(${1:UIControlState state})"
    },
    {
      "trigger": "searchForServicesOfType:inDomain:",
      "contents": "searchForServicesOfType(${1:NSString* type}, inDomain:${2:NSString* domainString})"
    },
    {
      "trigger": "secondsFromGMTForDate:",
      "contents": "secondsFromGMTForDate(${1:NSDate* aDate})"
    },
    {
      "trigger": "sectionForObject:collationStringSelector:",
      "contents": "sectionForObject(${1:id object}, collationStringSelector:${2:SEL selector})"
    },
    {
      "trigger": "sectionForSectionIndexTitle:atIndex:",
      "contents": "sectionForSectionIndexTitle(${1:NSString* title}, atIndex:${2:NSInteger sectionIndex})"
    },
    {
      "trigger": "sectionForSectionIndexTitleAtIndex:",
      "contents": "sectionForSectionIndexTitleAtIndex(${1:NSInteger indexTitleIndex})"
    },
    {
      "trigger": "sectionIndexTitleForSectionName:",
      "contents": "sectionIndexTitleForSectionName(${1:NSString* sectionName})"
    },
    {
      "trigger": "sectionIndexTitlesForTableView:",
      "contents": "sectionIndexTitlesForTableView(${1:UITableView* tableView})"
    },
    {
      "trigger": "seekToDate:",
      "contents": "seekToDate(${1:NSDate* date})"
    },
    {
      "trigger": "seekToFileOffset:",
      "contents": "seekToFileOffset(${1:unsigned long long offset})"
    },
    {
      "trigger": "seekToTime:",
      "contents": "seekToTime(${1:CMTime time})"
    },
    {
      "trigger": "seekToTime:completionHandler:",
      "contents": "seekToTime(${1:CMTime time}, completionHandler:${2:void (^)(BOOL) completionHandler})"
    },
    {
      "trigger": "seekToTime:toleranceBefore:toleranceAfter:",
      "contents": "seekToTime(${1:CMTime time}, toleranceBefore:${2:CMTime toleranceBefore}, toleranceAfter:${3:CMTime toleranceAfter})"
    },
    {
      "trigger": "seekToTime:toleranceBefore:toleranceAfter:completionHandler:",
      "contents": "seekToTime(${1:CMTime time}, toleranceBefore:${2:CMTime toleranceBefore}, toleranceAfter:${3:CMTime toleranceAfter}, completionHandler:${4:void (^)(BOOL) completionHandler})"
    },
    {
      "trigger": "segmentForTrackTime:",
      "contents": "segmentForTrackTime(${1:CMTime trackTime})"
    },
    {
      "trigger": "select:",
      "contents": "select(${1:id sender})"
    },
    {
      "trigger": "selectAll:",
      "contents": "selectAll(${1:id sender})"
    },
    {
      "trigger": "selectAnnotation:animated:",
      "contents": "selectAnnotation(${1:id annotation}, animated:${2:BOOL animated})"
    },
    {
      "trigger": "selectMediaOption:inMediaSelectionGroup:",
      "contents": "selectMediaOption(${1:AVMediaSelectionOption* mediaSelectionOption}, inMediaSelectionGroup:${2:AVMediaSelectionGroup* mediaSelectionGroup})"
    },
    {
      "trigger": "selectRow:inComponent:animated:",
      "contents": "selectRow(${1:NSInteger row}, inComponent:${2:NSInteger component}, animated:${3:BOOL animated})"
    },
    {
      "trigger": "selectRowAtIndexPath:animated:scrollPosition:",
      "contents": "selectRowAtIndexPath(${1:NSIndexPath* indexPath}, animated:${2:BOOL animated}, scrollPosition:${3:UITableViewScrollPosition scrollPosition})"
    },
    {
      "trigger": "selectedMediaOptionInMediaSelectionGroup:",
      "contents": "selectedMediaOptionInMediaSelectionGroup(${1:AVMediaSelectionGroup* mediaSelectionGroup})"
    },
    {
      "trigger": "selectedRowInComponent:",
      "contents": "selectedRowInComponent(${1:NSInteger component})"
    },
    {
      "trigger": "selectionDidChange:",
      "contents": "selectionDidChange(${1:id textInput})"
    },
    {
      "trigger": "selectionWillChange:",
      "contents": "selectionWillChange(${1:id textInput})"
    },
    {
      "trigger": "sendAction:to:forEvent:",
      "contents": "sendAction(${1:SEL action}, to:${2:id target}, forEvent:${3:UIEvent* event})"
    },
    {
      "trigger": "sendAction:to:from:forEvent:",
      "contents": "sendAction(${1:SEL action}, to:${2:id target}, from:${3:id sender}, forEvent:${4:UIEvent* event})"
    },
    {
      "trigger": "sendActionsForControlEvents:",
      "contents": "sendActionsForControlEvents(${1:UIControlEvents controlEvents})"
    },
    {
      "trigger": "sendBeforeDate:components:from:reserved:",
      "contents": "sendBeforeDate(${1:NSDate* limitDate}, components:${2:NSMutableArray* components}, from:${3:NSPort* receivePort}, reserved:${4:NSUInteger headerSpaceReserved})"
    },
    {
      "trigger": "sendBeforeDate:msgid:components:from:reserved:",
      "contents": "sendBeforeDate(${1:NSDate* limitDate}, msgid:${2:NSUInteger msgID}, components:${3:NSMutableArray* components}, from:${4:NSPort* receivePort}, reserved:${5:NSUInteger headerSpaceReserved})"
    },
    {
      "trigger": "sendData:toPeers:withDataMode:error:",
      "contents": "sendData(${1:NSData* data}, toPeers:${2:NSArray* peers}, withDataMode:${3:GKSendDataMode mode}, error:${4:NSError** error})"
    },
    {
      "trigger": "sendData:toPlayers:withDataMode:error:",
      "contents": "sendData(${1:NSData* data}, toPlayers:${2:NSArray* playerIDs}, withDataMode:${3:GKMatchSendDataMode mode}, error:${4:NSError** error})"
    },
    {
      "trigger": "sendDataToAllPeers:withDataMode:error:",
      "contents": "sendDataToAllPeers(${1:NSData* data}, withDataMode:${2:GKSendDataMode mode}, error:${3:NSError** error})"
    },
    {
      "trigger": "sendDataToAllPlayers:withDataMode:error:",
      "contents": "sendDataToAllPlayers(${1:NSData* data}, withDataMode:${2:GKMatchSendDataMode mode}, error:${3:NSError** error})"
    },
    {
      "trigger": "sendEvent:",
      "contents": "sendEvent(${1:UIEvent* event})"
    },
    {
      "trigger": "sendSubviewToBack:",
      "contents": "sendSubviewToBack(${1:UIView* view})"
    },
    {
      "trigger": "sentenceRangeForRange:",
      "contents": "sentenceRangeForRange(${1:NSRange range})"
    },
    {
      "trigger": "session:connectionWithPeerFailed:withError:",
      "contents": "session(${1:GKSession* session}, connectionWithPeerFailed:${2:NSString* peerID}, withError:${3:NSError* error})"
    },
    {
      "trigger": "session:didFailWithError:",
      "contents": "session(${1:GKSession* session}, didFailWithError:${2:NSError* error})"
    },
    {
      "trigger": "session:didReceiveConnectionRequestFromPeer:",
      "contents": "session(${1:GKSession* session}, didReceiveConnectionRequestFromPeer:${2:NSString* peerID})"
    },
    {
      "trigger": "session:peer:didChangeState:",
      "contents": "session(${1:GKSession* session}, peer:${2:NSString* peerID}, didChangeState:${3:GKPeerConnectionState state})"
    },
    {
      "trigger": "setAMSymbol:",
      "contents": "setAMSymbol(${1:NSString* string})"
    },
    {
      "trigger": "setAbsoluteDate:",
      "contents": "setAbsoluteDate(${1:NSDate* absoluteDate})"
    },
    {
      "trigger": "setAbstract:",
      "contents": "setAbstract(${1:BOOL flag})"
    },
    {
      "trigger": "setAccelerometerUpdateInterval:",
      "contents": "setAccelerometerUpdateInterval(${1:NSTimeInterval accelerometerUpdateInterval})"
    },
    {
      "trigger": "setAccessibilityActivationPoint:",
      "contents": "setAccessibilityActivationPoint(${1:CGPoint accessibilityActivationPoint})"
    },
    {
      "trigger": "setAccessibilityContainer:",
      "contents": "setAccessibilityContainer(${1:id accessibilityContainer})"
    },
    {
      "trigger": "setAccessibilityElementsHidden:",
      "contents": "setAccessibilityElementsHidden(${1:BOOL accessibilityElementsHidden})"
    },
    {
      "trigger": "setAccessibilityFrame:",
      "contents": "setAccessibilityFrame(${1:CGRect accessibilityFrame})"
    },
    {
      "trigger": "setAccessibilityHint:",
      "contents": "setAccessibilityHint(${1:NSString* accessibilityHint})"
    },
    {
      "trigger": "setAccessibilityIdentifier:",
      "contents": "setAccessibilityIdentifier(${1:NSString* accessibilityIdentifier})"
    },
    {
      "trigger": "setAccessibilityLabel:",
      "contents": "setAccessibilityLabel(${1:NSString* accessibilityLabel})"
    },
    {
      "trigger": "setAccessibilityLanguage:",
      "contents": "setAccessibilityLanguage(${1:NSString* accessibilityLanguage})"
    },
    {
      "trigger": "setAccessibilityTraits:",
      "contents": "setAccessibilityTraits(${1:UIAccessibilityTraits accessibilityTraits})"
    },
    {
      "trigger": "setAccessibilityValue:",
      "contents": "setAccessibilityValue(${1:NSString* accessibilityValue})"
    },
    {
      "trigger": "setAccessibilityViewIsModal:",
      "contents": "setAccessibilityViewIsModal(${1:BOOL accessibilityViewIsModal})"
    },
    {
      "trigger": "setAccessoryAction:",
      "contents": "setAccessoryAction(${1:SEL accessoryAction})"
    },
    {
      "trigger": "setAccessoryType:",
      "contents": "setAccessoryType(${1:UITableViewCellAccessoryType accessoryType})"
    },
    {
      "trigger": "setAccessoryView:",
      "contents": "setAccessoryView(${1:UIView* accessoryView})"
    },
    {
      "trigger": "setAccount:",
      "contents": "setAccount(${1:ACAccount* account})"
    },
    {
      "trigger": "setAccountDescription:",
      "contents": "setAccountDescription(${1:NSString* accountDescription})"
    },
    {
      "trigger": "setAccountType:",
      "contents": "setAccountType(${1:ACAccountType* accountType})"
    },
    {
      "trigger": "setAchievementDelegate:",
      "contents": "setAchievementDelegate(${1:id achievementDelegate})"
    },
    {
      "trigger": "setAction:",
      "contents": "setAction(${1:SEL action})"
    },
    {
      "trigger": "setActionAtItemEnd:",
      "contents": "setActionAtItemEnd(${1:AVPlayerActionAtItemEnd actionAtItemEnd})"
    },
    {
      "trigger": "setActionIsDiscardable:",
      "contents": "setActionIsDiscardable(${1:BOOL discardable})"
    },
    {
      "trigger": "setActionName:",
      "contents": "setActionName(${1:NSString* actionName})"
    },
    {
      "trigger": "setActionSheetStyle:",
      "contents": "setActionSheetStyle(${1:UIActionSheetStyle actionSheetStyle})"
    },
    {
      "trigger": "setActions:",
      "contents": "setActions(${1:NSDictionary* actions})"
    },
    {
      "trigger": "setActive:",
      "contents": "setActive(${1:BOOL active})"
    },
    {
      "trigger": "setActive:animated:",
      "contents": "setActive(${1:BOOL visible}, animated:${2:BOOL animated})"
    },
    {
      "trigger": "setActive:error:",
      "contents": "setActive(${1:BOOL beActive}, error:${2:NSError** outError})"
    },
    {
      "trigger": "setActive:withFlags:error:",
      "contents": "setActive(${1:BOOL beActive}, withFlags:${2:NSInteger flags}, error:${3:NSError** outError})"
    },
    {
      "trigger": "setActivityIndicatorViewStyle:",
      "contents": "setActivityIndicatorViewStyle(${1:UIActivityIndicatorViewStyle activityIndicatorViewStyle})"
    },
    {
      "trigger": "setAdditive:",
      "contents": "setAdditive(${1:BOOL additive})"
    },
    {
      "trigger": "setAddressBook:",
      "contents": "setAddressBook(${1:ABAddressBookRef addressBook})"
    },
    {
      "trigger": "setAdjustsFontSizeToFitWidth:",
      "contents": "setAdjustsFontSizeToFitWidth(${1:BOOL adjustsFontSizeToFitWidth})"
    },
    {
      "trigger": "setAdjustsImageWhenDisabled:",
      "contents": "setAdjustsImageWhenDisabled(${1:BOOL adjustsImageWhenDisabled})"
    },
    {
      "trigger": "setAdjustsImageWhenHighlighted:",
      "contents": "setAdjustsImageWhenHighlighted(${1:BOOL adjustsImageWhenHighlighted})"
    },
    {
      "trigger": "setAdvertisingSection:",
      "contents": "setAdvertisingSection(${1:NSString* advertisingSection})"
    },
    {
      "trigger": "setAffectedStores:",
      "contents": "setAffectedStores(${1:NSArray* stores})"
    },
    {
      "trigger": "setAffineTransform:",
      "contents": "setAffineTransform(${1:CGAffineTransform m})"
    },
    {
      "trigger": "setAlarms:",
      "contents": "setAlarms(${1:NSArray* alarms})"
    },
    {
      "trigger": "setAlertAction:",
      "contents": "setAlertAction(${1:NSString* alertAction})"
    },
    {
      "trigger": "setAlertBody:",
      "contents": "setAlertBody(${1:NSString* alertBody})"
    },
    {
      "trigger": "setAlertLaunchImage:",
      "contents": "setAlertLaunchImage(${1:NSString* alertLaunchImage})"
    },
    {
      "trigger": "setAlertViewStyle:",
      "contents": "setAlertViewStyle(${1:UIAlertViewStyle alertViewStyle})"
    },
    {
      "trigger": "setAlignmentMode:",
      "contents": "setAlignmentMode(${1:NSString* alignmentMode})"
    },
    {
      "trigger": "setAllDay:",
      "contents": "setAllDay(${1:BOOL allDay})"
    },
    {
      "trigger": "setAllHTTPHeaderFields:",
      "contents": "setAllHTTPHeaderFields(${1:NSDictionary* headerFields})"
    },
    {
      "trigger": "setAllowableMovement:",
      "contents": "setAllowableMovement(${1:CGFloat allowableMovement})"
    },
    {
      "trigger": "setAllowsActions:",
      "contents": "setAllowsActions(${1:BOOL allowsActions})"
    },
    {
      "trigger": "setAllowsAddingToAddressBook:",
      "contents": "setAllowsAddingToAddressBook(${1:BOOL allowsAddingToAddressBook})"
    },
    {
      "trigger": "setAllowsAirPlay:",
      "contents": "setAllowsAirPlay(${1:BOOL allowsAirPlay})"
    },
    {
      "trigger": "setAllowsAirPlayVideo:",
      "contents": "setAllowsAirPlayVideo(${1:BOOL allowsAirPlayVideo})"
    },
    {
      "trigger": "setAllowsCalendarPreview:",
      "contents": "setAllowsCalendarPreview(${1:BOOL allowsCalendarPreview})"
    },
    {
      "trigger": "setAllowsEditing:",
      "contents": "setAllowsEditing(${1:BOOL allowsEditing})"
    },
    {
      "trigger": "setAllowsExternalBinaryDataStorage:",
      "contents": "setAllowsExternalBinaryDataStorage(${1:BOOL flag})"
    },
    {
      "trigger": "setAllowsFloats:",
      "contents": "setAllowsFloats(${1:BOOL flag})"
    },
    {
      "trigger": "setAllowsImageEditing:",
      "contents": "setAllowsImageEditing(${1:BOOL allowsImageEditing})"
    },
    {
      "trigger": "setAllowsInlineMediaPlayback:",
      "contents": "setAllowsInlineMediaPlayback(${1:BOOL allowsInlineMediaPlayback})"
    },
    {
      "trigger": "setAllowsMultipleSelection:",
      "contents": "setAllowsMultipleSelection(${1:BOOL allowsMultipleSelection})"
    },
    {
      "trigger": "setAllowsMultipleSelectionDuringEditing:",
      "contents": "setAllowsMultipleSelectionDuringEditing(${1:BOOL allowsMultipleSelectionDuringEditing})"
    },
    {
      "trigger": "setAllowsPickingMultipleItems:",
      "contents": "setAllowsPickingMultipleItems(${1:BOOL allowsPickingMultipleItems})"
    },
    {
      "trigger": "setAllowsSelection:",
      "contents": "setAllowsSelection(${1:BOOL allowsSelection})"
    },
    {
      "trigger": "setAllowsSelectionDuringEditing:",
      "contents": "setAllowsSelectionDuringEditing(${1:BOOL allowsSelectionDuringEditing})"
    },
    {
      "trigger": "setAlpha:",
      "contents": "setAlpha(${1:CGFloat alpha})"
    },
    {
      "trigger": "setAlphaRange:",
      "contents": "setAlphaRange(${1:float alphaRange})"
    },
    {
      "trigger": "setAlphaSpeed:",
      "contents": "setAlphaSpeed(${1:float alphaSpeed})"
    },
    {
      "trigger": "setAlternateName:",
      "contents": "setAlternateName(${1:NSString* alternateName})"
    },
    {
      "trigger": "setAlwaysBounceHorizontal:",
      "contents": "setAlwaysBounceHorizontal(${1:BOOL alwaysBounceHorizontal})"
    },
    {
      "trigger": "setAlwaysBounceVertical:",
      "contents": "setAlwaysBounceVertical(${1:BOOL alwaysBounceVertical})"
    },
    {
      "trigger": "setAlwaysCopiesSampleData:",
      "contents": "setAlwaysCopiesSampleData(${1:BOOL alwaysCopiesSampleData})"
    },
    {
      "trigger": "setAlwaysDiscardsLateVideoFrames:",
      "contents": "setAlwaysDiscardsLateVideoFrames(${1:BOOL alwaysDiscardsLateVideoFrames})"
    },
    {
      "trigger": "setAlwaysShowsDecimalSeparator:",
      "contents": "setAlwaysShowsDecimalSeparator(${1:BOOL b})"
    },
    {
      "trigger": "setAmbientColor:",
      "contents": "setAmbientColor(${1:GLKVector4 ambientColor})"
    },
    {
      "trigger": "setAnchorPoint:",
      "contents": "setAnchorPoint(${1:CGPoint anchorPoint})"
    },
    {
      "trigger": "setAnchorPointZ:",
      "contents": "setAnchorPointZ(${1:CGFloat anchorPointZ})"
    },
    {
      "trigger": "setAnimatesDrop:",
      "contents": "setAnimatesDrop(${1:BOOL animatesDrop})"
    },
    {
      "trigger": "setAnimationDuration:",
      "contents": "setAnimationDuration(${1:NSTimeInterval animationDuration})"
    },
    {
      "trigger": "setAnimationImages:",
      "contents": "setAnimationImages(${1:NSArray* animationImages})"
    },
    {
      "trigger": "setAnimationRepeatCount:",
      "contents": "setAnimationRepeatCount(${1:NSInteger animationRepeatCount})"
    },
    {
      "trigger": "setAnimationTool:",
      "contents": "setAnimationTool(${1:AVVideoCompositionCoreAnimationTool* animationTool})"
    },
    {
      "trigger": "setAnimations:",
      "contents": "setAnimations(${1:NSArray* animations})"
    },
    {
      "trigger": "setAnnotation:",
      "contents": "setAnnotation(${1:id annotation})"
    },
    {
      "trigger": "setApertureMode:",
      "contents": "setApertureMode(${1:NSString* apertureMode})"
    },
    {
      "trigger": "setApplicationIconBadgeNumber:",
      "contents": "setApplicationIconBadgeNumber(${1:NSInteger applicationIconBadgeNumber})"
    },
    {
      "trigger": "setApplicationSupportsShakeToEdit:",
      "contents": "setApplicationSupportsShakeToEdit(${1:BOOL applicationSupportsShakeToEdit})"
    },
    {
      "trigger": "setAppliesPreferredTrackTransform:",
      "contents": "setAppliesPreferredTrackTransform(${1:BOOL appliesPreferredTrackTransform})"
    },
    {
      "trigger": "setApportionsSegmentWidthsByContent:",
      "contents": "setApportionsSegmentWidthsByContent(${1:BOOL apportionsSegmentWidthsByContent})"
    },
    {
      "trigger": "setArgument:atIndex:",
      "contents": "setArgument(${1:void* argumentLocation}, atIndex:${2:NSInteger idx})"
    },
    {
      "trigger": "setArray:",
      "contents": "setArray(${1:NSArray* otherArray})"
    },
    {
      "trigger": "setArray:forKey:",
      "contents": "setArray(${1:NSArray* anArray}, forKey:${2:NSString* aKey})"
    },
    {
      "trigger": "setArrowDirection:",
      "contents": "setArrowDirection(${1:UIMenuControllerArrowDirection arrowDirection})"
    },
    {
      "trigger": "setArrowDirection:",
      "contents": "setArrowDirection(${1:UIPopoverArrowDirection arrowDirection})"
    },
    {
      "trigger": "setArrowOffset:",
      "contents": "setArrowOffset(${1:CGFloat arrowOffset})"
    },
    {
      "trigger": "setAssetsFilter:",
      "contents": "setAssetsFilter(${1:ALAssetsFilter* filter})"
    },
    {
      "trigger": "setAttributeMappings:",
      "contents": "setAttributeMappings(${1:NSArray* mappings})"
    },
    {
      "trigger": "setAttributeType:",
      "contents": "setAttributeType(${1:NSAttributeType type})"
    },
    {
      "trigger": "setAttributeValueClassName:",
      "contents": "setAttributeValueClassName(${1:NSString* className})"
    },
    {
      "trigger": "setAttributedString:",
      "contents": "setAttributedString(${1:NSAttributedString* attrString})"
    },
    {
      "trigger": "setAttributes:ofItemAtPath:error:",
      "contents": "setAttributes(${1:NSDictionary* attributes}, ofItemAtPath:${2:NSString* path}, error:${3:NSError** error})"
    },
    {
      "trigger": "setAttributes:range:",
      "contents": "setAttributes(${1:NSDictionary* attrs}, range:${2:NSRange range})"
    },
    {
      "trigger": "setAudioMix:",
      "contents": "setAudioMix(${1:AVAudioMix* audioMix})"
    },
    {
      "trigger": "setAutocapitalizationType:",
      "contents": "setAutocapitalizationType(${1:UITextAutocapitalizationType autocapitalizationType})"
    },
    {
      "trigger": "setAutocorrectionType:",
      "contents": "setAutocorrectionType(${1:UITextAutocorrectionType autocorrectionType})"
    },
    {
      "trigger": "setAutomaticallyAdjustsMirroring:",
      "contents": "setAutomaticallyAdjustsMirroring(${1:BOOL automaticallyAdjustsMirroring})"
    },
    {
      "trigger": "setAutorepeat:",
      "contents": "setAutorepeat(${1:BOOL autorepeat})"
    },
    {
      "trigger": "setAutoresizesSubviews:",
      "contents": "setAutoresizesSubviews(${1:BOOL autoresizesSubviews})"
    },
    {
      "trigger": "setAutoresizingMask:",
      "contents": "setAutoresizingMask(${1:UIViewAutoresizing autoresizingMask})"
    },
    {
      "trigger": "setAutoreverses:",
      "contents": "setAutoreverses(${1:BOOL autoreverses})"
    },
    {
      "trigger": "setAvailability:",
      "contents": "setAvailability(${1:EKEventAvailability availability})"
    },
    {
      "trigger": "setAvailable:",
      "contents": "setAvailable(${1:BOOL available})"
    },
    {
      "trigger": "setBackBarButtonItem:",
      "contents": "setBackBarButtonItem(${1:UIBarButtonItem* backBarButtonItem})"
    },
    {
      "trigger": "setBackButtonBackgroundImage:forState:barMetrics:",
      "contents": "setBackButtonBackgroundImage(${1:UIImage* backgroundImage}, forState:${2:UIControlState state}, barMetrics:${3:UIBarMetrics barMetrics})"
    },
    {
      "trigger": "setBackButtonBackgroundVerticalPositionAdjustment:forBarMetrics:",
      "contents": "setBackButtonBackgroundVerticalPositionAdjustment(${1:CGFloat adjustment}, forBarMetrics:${2:UIBarMetrics barMetrics})"
    },
    {
      "trigger": "setBackButtonTitlePositionAdjustment:forBarMetrics:",
      "contents": "setBackButtonTitlePositionAdjustment(${1:UIOffset adjustment}, forBarMetrics:${2:UIBarMetrics barMetrics})"
    },
    {
      "trigger": "setBackground:",
      "contents": "setBackground(${1:UIImage* background})"
    },
    {
      "trigger": "setBackgroundColor:",
      "contents": "setBackgroundColor(${1:CGColorRef backgroundColor})"
    },
    {
      "trigger": "setBackgroundColor:",
      "contents": "setBackgroundColor(${1:UIColor* backgroundColor})"
    },
    {
      "trigger": "setBackgroundFilters:",
      "contents": "setBackgroundFilters(${1:NSArray* backgroundFilters})"
    },
    {
      "trigger": "setBackgroundImage:",
      "contents": "setBackgroundImage(${1:UIImage* backgroundImage})"
    },
    {
      "trigger": "setBackgroundImage:forBarMetrics:",
      "contents": "setBackgroundImage(${1:UIImage* backgroundImage}, forBarMetrics:${2:UIBarMetrics barMetrics})"
    },
    {
      "trigger": "setBackgroundImage:forState:",
      "contents": "setBackgroundImage(${1:UIImage* image}, forState:${2:UIControlState state})"
    },
    {
      "trigger": "setBackgroundImage:forState:barMetrics:",
      "contents": "setBackgroundImage(${1:UIImage* backgroundImage}, forState:${2:UIControlState state}, barMetrics:${3:UIBarMetrics barMetrics})"
    },
    {
      "trigger": "setBackgroundImage:forToolbarPosition:barMetrics:",
      "contents": "setBackgroundImage(${1:UIImage* backgroundImage}, forToolbarPosition:${2:UIToolbarPosition topOrBottom}, barMetrics:${3:UIBarMetrics barMetrics})"
    },
    {
      "trigger": "setBackgroundVerticalPositionAdjustment:forBarMetrics:",
      "contents": "setBackgroundVerticalPositionAdjustment(${1:CGFloat adjustment}, forBarMetrics:${2:UIBarMetrics barMetrics})"
    },
    {
      "trigger": "setBackgroundView:",
      "contents": "setBackgroundView(${1:UIView* backgroundView})"
    },
    {
      "trigger": "setBadgeValue:",
      "contents": "setBadgeValue(${1:NSString* badgeValue})"
    },
    {
      "trigger": "setBarStyle:",
      "contents": "setBarStyle(${1:UIBarStyle barStyle})"
    },
    {
      "trigger": "setBaseWritingDirection:forRange:",
      "contents": "setBaseWritingDirection(${1:UITextWritingDirection writingDirection}, forRange:${2:UITextRange* range})"
    },
    {
      "trigger": "setBaselineAdjustment:",
      "contents": "setBaselineAdjustment(${1:UIBaselineAdjustment baselineAdjustment})"
    },
    {
      "trigger": "setBatteryMonitoringEnabled:",
      "contents": "setBatteryMonitoringEnabled(${1:BOOL batteryMonitoringEnabled})"
    },
    {
      "trigger": "setBccRecipients:",
      "contents": "setBccRecipients(${1:NSArray* bccRecipients})"
    },
    {
      "trigger": "setBeginTime:",
      "contents": "setBeginTime(${1:CFTimeInterval beginTime})"
    },
    {
      "trigger": "setBiasValues:",
      "contents": "setBiasValues(${1:NSArray* biasValues})"
    },
    {
      "trigger": "setBirthRate:",
      "contents": "setBirthRate(${1:float birthRate})"
    },
    {
      "trigger": "setBlueRange:",
      "contents": "setBlueRange(${1:float blueRange})"
    },
    {
      "trigger": "setBlueSpeed:",
      "contents": "setBlueSpeed(${1:float blueSpeed})"
    },
    {
      "trigger": "setBody:",
      "contents": "setBody(${1:NSString* body})"
    },
    {
      "trigger": "setBool:forKey:",
      "contents": "setBool(${1:BOOL value}, forKey:${2:NSString* aKey})"
    },
    {
      "trigger": "setBool:forKey:",
      "contents": "setBool(${1:BOOL value}, forKey:${2:NSString* defaultName})"
    },
    {
      "trigger": "setBorderColor:",
      "contents": "setBorderColor(${1:CGColorRef borderColor})"
    },
    {
      "trigger": "setBorderStyle:",
      "contents": "setBorderStyle(${1:UITextBorderStyle borderStyle})"
    },
    {
      "trigger": "setBorderWidth:",
      "contents": "setBorderWidth(${1:CGFloat borderWidth})"
    },
    {
      "trigger": "setBounces:",
      "contents": "setBounces(${1:BOOL bounces})"
    },
    {
      "trigger": "setBouncesZoom:",
      "contents": "setBouncesZoom(${1:BOOL bouncesZoom})"
    },
    {
      "trigger": "setBounds:",
      "contents": "setBounds(${1:CGRect bounds})"
    },
    {
      "trigger": "setBrightness:",
      "contents": "setBrightness(${1:CGFloat brightness})"
    },
    {
      "trigger": "setByAddingObject:",
      "contents": "setByAddingObject(${1:id anObject})"
    },
    {
      "trigger": "setByAddingObjectsFromArray:",
      "contents": "setByAddingObjectsFromArray(${1:NSArray* other})"
    },
    {
      "trigger": "setByAddingObjectsFromSet:",
      "contents": "setByAddingObjectsFromSet(${1:NSSet* other})"
    },
    {
      "trigger": "setByValue:",
      "contents": "setByValue(${1:id byValue})"
    },
    {
      "trigger": "setCGColor:",
      "contents": "setCGColor(${1:CGColorRef CGColor})"
    },
    {
      "trigger": "setCGPath:",
      "contents": "setCGPath(${1:CGPathRef CGPath})"
    },
    {
      "trigger": "setCachePolicy:",
      "contents": "setCachePolicy(${1:NSURLRequestCachePolicy policy})"
    },
    {
      "trigger": "setCalculationMode:",
      "contents": "setCalculationMode(${1:NSString* calculationMode})"
    },
    {
      "trigger": "setCalendar:",
      "contents": "setCalendar(${1:EKCalendar* calendar})"
    },
    {
      "trigger": "setCalendar:",
      "contents": "setCalendar(${1:NSCalendar* calendar})"
    },
    {
      "trigger": "setCalendar:",
      "contents": "setCalendar(${1:NSCalendar* cal})"
    },
    {
      "trigger": "setCallEventHandler:",
      "contents": "setCallEventHandler(${1:void (^)(CTCall *) callEventHandler})"
    },
    {
      "trigger": "setCalloutOffset:",
      "contents": "setCalloutOffset(${1:CGPoint calloutOffset})"
    },
    {
      "trigger": "setCameraCaptureMode:",
      "contents": "setCameraCaptureMode(${1:UIImagePickerControllerCameraCaptureMode cameraCaptureMode})"
    },
    {
      "trigger": "setCameraDevice:",
      "contents": "setCameraDevice(${1:UIImagePickerControllerCameraDevice cameraDevice})"
    },
    {
      "trigger": "setCameraFlashMode:",
      "contents": "setCameraFlashMode(${1:UIImagePickerControllerCameraFlashMode cameraFlashMode})"
    },
    {
      "trigger": "setCameraOverlayView:",
      "contents": "setCameraOverlayView(${1:UIView* cameraOverlayView})"
    },
    {
      "trigger": "setCameraViewTransform:",
      "contents": "setCameraViewTransform(${1:CGAffineTransform cameraViewTransform})"
    },
    {
      "trigger": "setCanCancelContentTouches:",
      "contents": "setCanCancelContentTouches(${1:BOOL canCancelContentTouches})"
    },
    {
      "trigger": "setCanShowCallout:",
      "contents": "setCanShowCallout(${1:BOOL canShowCallout})"
    },
    {
      "trigger": "setCancelButtonIndex:",
      "contents": "setCancelButtonIndex(${1:NSInteger cancelButtonIndex})"
    },
    {
      "trigger": "setCancelsTouchesInView:",
      "contents": "setCancelsTouchesInView(${1:BOOL cancelsTouchesInView})"
    },
    {
      "trigger": "setCaseSensitive:",
      "contents": "setCaseSensitive(${1:BOOL flag})"
    },
    {
      "trigger": "setCategory:",
      "contents": "setCategory(${1:NSString* category})"
    },
    {
      "trigger": "setCategory:error:",
      "contents": "setCategory(${1:NSString* theCategory}, error:${2:NSError** outError})"
    },
    {
      "trigger": "setCcRecipients:",
      "contents": "setCcRecipients(${1:NSArray* ccRecipients})"
    },
    {
      "trigger": "setCenter:",
      "contents": "setCenter(${1:CGPoint center})"
    },
    {
      "trigger": "setCenter:",
      "contents": "setCenter(${1:GLKVector3 center})"
    },
    {
      "trigger": "setCenterCoordinate:",
      "contents": "setCenterCoordinate(${1:CLLocationCoordinate2D centerCoordinate})"
    },
    {
      "trigger": "setCenterCoordinate:animated:",
      "contents": "setCenterCoordinate(${1:CLLocationCoordinate2D coordinate}, animated:${2:BOOL animated})"
    },
    {
      "trigger": "setCenterOffset:",
      "contents": "setCenterOffset(${1:CGPoint centerOffset})"
    },
    {
      "trigger": "setCharactersToBeSkipped:",
      "contents": "setCharactersToBeSkipped(${1:NSCharacterSet* set})"
    },
    {
      "trigger": "setClass:forClassName:",
      "contents": "setClass(${1:Class cls}, forClassName:${2:NSString* codedName})"
    },
    {
      "trigger": "setClassName:forClass:",
      "contents": "setClassName(${1:NSString* codedName}, forClass:${2:Class cls})"
    },
    {
      "trigger": "setClearButtonMode:",
      "contents": "setClearButtonMode(${1:UITextFieldViewMode clearButtonMode})"
    },
    {
      "trigger": "setClearsContextBeforeDrawing:",
      "contents": "setClearsContextBeforeDrawing(${1:BOOL clearsContextBeforeDrawing})"
    },
    {
      "trigger": "setClearsOnBeginEditing:",
      "contents": "setClearsOnBeginEditing(${1:BOOL clearsOnBeginEditing})"
    },
    {
      "trigger": "setClearsSelectionOnViewWillAppear:",
      "contents": "setClearsSelectionOnViewWillAppear(${1:BOOL clearsSelectionOnViewWillAppear})"
    },
    {
      "trigger": "setClient:",
      "contents": "setClient(${1:id client})"
    },
    {
      "trigger": "setClipsToBounds:",
      "contents": "setClipsToBounds(${1:BOOL clipsToBounds})"
    },
    {
      "trigger": "setClosedCaptionDisplayEnabled:",
      "contents": "setClosedCaptionDisplayEnabled(${1:BOOL closedCaptionDisplayEnabled})"
    },
    {
      "trigger": "setColor:",
      "contents": "setColor(${1:CGColorRef color})"
    },
    {
      "trigger": "setColor:",
      "contents": "setColor(${1:GLKVector4 color})"
    },
    {
      "trigger": "setColor:",
      "contents": "setColor(${1:UIColor* color})"
    },
    {
      "trigger": "setColorMaterialEnabled:",
      "contents": "setColorMaterialEnabled(${1:GLboolean colorMaterialEnabled})"
    },
    {
      "trigger": "setColors:",
      "contents": "setColors(${1:NSArray* colors})"
    },
    {
      "trigger": "setCompletionBlock:",
      "contents": "setCompletionBlock(${1:void (^)(void) block})"
    },
    {
      "trigger": "setCompletionHandler:",
      "contents": "setCompletionHandler(${1:TWTweetComposeViewControllerCompletionHandler completionHandler})"
    },
    {
      "trigger": "setComposeViewDelegate:",
      "contents": "setComposeViewDelegate(${1:id composeViewDelegate})"
    },
    {
      "trigger": "setCompositingFilter:",
      "contents": "setCompositingFilter(${1:id compositingFilter})"
    },
    {
      "trigger": "setCompoundIndexes:",
      "contents": "setCompoundIndexes(${1:NSArray* value})"
    },
    {
      "trigger": "setConnectionPolicy:",
      "contents": "setConnectionPolicy(${1:MIDINetworkConnectionPolicy connectionPolicy})"
    },
    {
      "trigger": "setConnectionTypesMask:",
      "contents": "setConnectionTypesMask(${1:GKPeerPickerConnectionType connectionTypesMask})"
    },
    {
      "trigger": "setConstantAttenuation:",
      "contents": "setConstantAttenuation(${1:GLfloat constantAttenuation})"
    },
    {
      "trigger": "setConstantColor:",
      "contents": "setConstantColor(${1:GLKVector4 constantColor})"
    },
    {
      "trigger": "setContentEdgeInsets:",
      "contents": "setContentEdgeInsets(${1:UIEdgeInsets contentEdgeInsets})"
    },
    {
      "trigger": "setContentHorizontalAlignment:",
      "contents": "setContentHorizontalAlignment(${1:UIControlContentHorizontalAlignment contentHorizontalAlignment})"
    },
    {
      "trigger": "setContentInset:",
      "contents": "setContentInset(${1:UIEdgeInsets contentInset})"
    },
    {
      "trigger": "setContentInsets:",
      "contents": "setContentInsets(${1:UIEdgeInsets contentInsets})"
    },
    {
      "trigger": "setContentMode:",
      "contents": "setContentMode(${1:UIViewContentMode contentMode})"
    },
    {
      "trigger": "setContentOffset:",
      "contents": "setContentOffset(${1:CGPoint contentOffset})"
    },
    {
      "trigger": "setContentOffset:animated:",
      "contents": "setContentOffset(${1:CGPoint contentOffset}, animated:${2:BOOL animated})"
    },
    {
      "trigger": "setContentOffset:forSegmentAtIndex:",
      "contents": "setContentOffset(${1:CGSize offset}, forSegmentAtIndex:${2:NSUInteger segment})"
    },
    {
      "trigger": "setContentPositionAdjustment:forSegmentType:barMetrics:",
      "contents": "setContentPositionAdjustment(${1:UIOffset adjustment}, forSegmentType:${2:UISegmentedControlSegment leftCenterRightOrAlone}, barMetrics:${3:UIBarMetrics barMetrics})"
    },
    {
      "trigger": "setContentScaleFactor:",
      "contents": "setContentScaleFactor(${1:CGFloat contentScaleFactor})"
    },
    {
      "trigger": "setContentSize:",
      "contents": "setContentSize(${1:CGSize contentSize})"
    },
    {
      "trigger": "setContentSizeForViewInPopover:",
      "contents": "setContentSizeForViewInPopover(${1:CGSize contentSizeForViewInPopover})"
    },
    {
      "trigger": "setContentStretch:",
      "contents": "setContentStretch(${1:CGRect contentStretch})"
    },
    {
      "trigger": "setContentURL:",
      "contents": "setContentURL(${1:NSURL* contentURL})"
    },
    {
      "trigger": "setContentVerticalAlignment:",
      "contents": "setContentVerticalAlignment(${1:UIControlContentVerticalAlignment contentVerticalAlignment})"
    },
    {
      "trigger": "setContentViewController:",
      "contents": "setContentViewController(${1:UIViewController* contentViewController})"
    },
    {
      "trigger": "setContentViewController:animated:",
      "contents": "setContentViewController(${1:UIViewController* viewController}, animated:${2:BOOL animated})"
    },
    {
      "trigger": "setContents:",
      "contents": "setContents(${1:id contents})"
    },
    {
      "trigger": "setContentsCenter:",
      "contents": "setContentsCenter(${1:CGRect contentsCenter})"
    },
    {
      "trigger": "setContentsGravity:",
      "contents": "setContentsGravity(${1:NSString* contentsGravity})"
    },
    {
      "trigger": "setContentsRect:",
      "contents": "setContentsRect(${1:CGRect contentsRect})"
    },
    {
      "trigger": "setContentsScale:",
      "contents": "setContentsScale(${1:CGFloat contentsScale})"
    },
    {
      "trigger": "setContext:",
      "contents": "setContext(${1:EAGLContext* context})"
    },
    {
      "trigger": "setContext:",
      "contents": "setContext(${1:uint64_t context})"
    },
    {
      "trigger": "setContinuityValues:",
      "contents": "setContinuityValues(${1:NSArray* continuityValues})"
    },
    {
      "trigger": "setContinuous:",
      "contents": "setContinuous(${1:BOOL continuous})"
    },
    {
      "trigger": "setControlStyle:",
      "contents": "setControlStyle(${1:MPMovieControlStyle controlStyle})"
    },
    {
      "trigger": "setCookie:",
      "contents": "setCookie(${1:NSHTTPCookie* cookie})"
    },
    {
      "trigger": "setCookieAcceptPolicy:",
      "contents": "setCookieAcceptPolicy(${1:NSHTTPCookieAcceptPolicy cookieAcceptPolicy})"
    },
    {
      "trigger": "setCookies:forURL:mainDocumentURL:",
      "contents": "setCookies(${1:NSArray* cookies}, forURL:${2:NSURL* URL}, mainDocumentURL:${3:NSURL* mainDocumentURL})"
    },
    {
      "trigger": "setCoordinate:",
      "contents": "setCoordinate(${1:CLLocationCoordinate2D coordinate})"
    },
    {
      "trigger": "setCoordinate:",
      "contents": "setCoordinate(${1:CLLocationCoordinate2D newCoordinate})"
    },
    {
      "trigger": "setCornerRadius:",
      "contents": "setCornerRadius(${1:CGFloat cornerRadius})"
    },
    {
      "trigger": "setCountDownDuration:",
      "contents": "setCountDownDuration(${1:NSTimeInterval countDownDuration})"
    },
    {
      "trigger": "setCountLimit:",
      "contents": "setCountLimit(${1:NSUInteger lim})"
    },
    {
      "trigger": "setCredential:",
      "contents": "setCredential(${1:ACAccountCredential* credential})"
    },
    {
      "trigger": "setCredential:forProtectionSpace:",
      "contents": "setCredential(${1:NSURLCredential* credential}, forProtectionSpace:${2:NSURLProtectionSpace* space})"
    },
    {
      "trigger": "setCumulative:",
      "contents": "setCumulative(${1:BOOL cumulative})"
    },
    {
      "trigger": "setCurrencyCode:",
      "contents": "setCurrencyCode(${1:NSString* string})"
    },
    {
      "trigger": "setCurrencyDecimalSeparator:",
      "contents": "setCurrencyDecimalSeparator(${1:NSString* string})"
    },
    {
      "trigger": "setCurrencyGroupingSeparator:",
      "contents": "setCurrencyGroupingSeparator(${1:NSString* string})"
    },
    {
      "trigger": "setCurrencySymbol:",
      "contents": "setCurrencySymbol(${1:NSString* string})"
    },
    {
      "trigger": "setCurrentContentSizeIdentifier:",
      "contents": "setCurrentContentSizeIdentifier(${1:NSString* currentContentSizeIdentifier})"
    },
    {
      "trigger": "setCurrentMode:",
      "contents": "setCurrentMode(${1:UIScreenMode* currentMode})"
    },
    {
      "trigger": "setCurrentPage:",
      "contents": "setCurrentPage(${1:NSInteger currentPage})"
    },
    {
      "trigger": "setCurrentPlaybackRate:",
      "contents": "setCurrentPlaybackRate(${1:float currentPlaybackRate})"
    },
    {
      "trigger": "setCurrentPlaybackTime:",
      "contents": "setCurrentPlaybackTime(${1:NSTimeInterval currentPlaybackTime})"
    },
    {
      "trigger": "setCurrentPreviewItemIndex:",
      "contents": "setCurrentPreviewItemIndex(${1:NSInteger currentPreviewItemIndex})"
    },
    {
      "trigger": "setCurrentTime:",
      "contents": "setCurrentTime(${1:NSTimeInterval currentTime})"
    },
    {
      "trigger": "setCurrentlyReadingIssue:",
      "contents": "setCurrentlyReadingIssue(${1:NKIssue* currentlyReadingIssue})"
    },
    {
      "trigger": "setCustomView:",
      "contents": "setCustomView(${1:UIView* customView})"
    },
    {
      "trigger": "setCustomizableViewControllers:",
      "contents": "setCustomizableViewControllers(${1:NSArray* customizableViewControllers})"
    },
    {
      "trigger": "setData:",
      "contents": "setData(${1:NSData* data})"
    },
    {
      "trigger": "setData:forKey:",
      "contents": "setData(${1:NSData* aData}, forKey:${2:NSString* aKey})"
    },
    {
      "trigger": "setData:forPasteboardType:",
      "contents": "setData(${1:NSData* data}, forPasteboardType:${2:NSString* pasteboardType})"
    },
    {
      "trigger": "setDataDetectorTypes:",
      "contents": "setDataDetectorTypes(${1:UIDataDetectorTypes dataDetectorTypes})"
    },
    {
      "trigger": "setDataReceiveHandler:withContext:",
      "contents": "setDataReceiveHandler(${1:id handler}, withContext:${2:void* context})"
    },
    {
      "trigger": "setDataSource:",
      "contents": "setDataSource(${1:id dataSource})"
    },
    {
      "trigger": "setDate:",
      "contents": "setDate(${1:NSDate* date})"
    },
    {
      "trigger": "setDate:animated:",
      "contents": "setDate(${1:NSDate* date}, animated:${2:BOOL animated})"
    },
    {
      "trigger": "setDateFormat:",
      "contents": "setDateFormat(${1:NSString* string})"
    },
    {
      "trigger": "setDatePickerMode:",
      "contents": "setDatePickerMode(${1:UIDatePickerMode datePickerMode})"
    },
    {
      "trigger": "setDateStyle:",
      "contents": "setDateStyle(${1:NSDateFormatterStyle style})"
    },
    {
      "trigger": "setDay:",
      "contents": "setDay(${1:NSInteger v})"
    },
    {
      "trigger": "setDecelerationRate:",
      "contents": "setDecelerationRate(${1:float decelerationRate})"
    },
    {
      "trigger": "setDecimalSeparator:",
      "contents": "setDecimalSeparator(${1:NSString* string})"
    },
    {
      "trigger": "setDefaultCredential:forProtectionSpace:",
      "contents": "setDefaultCredential(${1:NSURLCredential* credential}, forProtectionSpace:${2:NSURLProtectionSpace* space})"
    },
    {
      "trigger": "setDefaultDate:",
      "contents": "setDefaultDate(${1:NSDate* date})"
    },
    {
      "trigger": "setDefaultInvitationMessage:",
      "contents": "setDefaultInvitationMessage(${1:NSString* defaultInvitationMessage})"
    },
    {
      "trigger": "setDefaultValue:",
      "contents": "setDefaultValue(${1:id value})"
    },
    {
      "trigger": "setDefersCurrentPageDisplay:",
      "contents": "setDefersCurrentPageDisplay(${1:BOOL defersCurrentPageDisplay})"
    },
    {
      "trigger": "setDefinesPresentationContext:",
      "contents": "setDefinesPresentationContext(${1:BOOL definesPresentationContext})"
    },
    {
      "trigger": "setDelaysContentTouches:",
      "contents": "setDelaysContentTouches(${1:BOOL delaysContentTouches})"
    },
    {
      "trigger": "setDelaysTouchesBegan:",
      "contents": "setDelaysTouchesBegan(${1:BOOL delaysTouchesBegan})"
    },
    {
      "trigger": "setDelaysTouchesEnded:",
      "contents": "setDelaysTouchesEnded(${1:BOOL delaysTouchesEnded})"
    },
    {
      "trigger": "setDelegate:",
      "contents": "setDelegate(${1:NSObject* delegate})"
    },
    {
      "trigger": "setDelegate:",
      "contents": "setDelegate(${1:id anObject})"
    },
    {
      "trigger": "setDelegate:",
      "contents": "setDelegate(${1:id delegate})"
    },
    {
      "trigger": "setDelegate:",
      "contents": "setDelegate(${1:id d})"
    },
    {
      "trigger": "setDelegateQueue:",
      "contents": "setDelegateQueue(${1:NSOperationQueue* queue})"
    },
    {
      "trigger": "setDeleteRule:",
      "contents": "setDeleteRule(${1:NSDeleteRule rule})"
    },
    {
      "trigger": "setDensity:",
      "contents": "setDensity(${1:GLfloat density})"
    },
    {
      "trigger": "setDesiredAccuracy:",
      "contents": "setDesiredAccuracy(${1:CLLocationAccuracy desiredAccuracy})"
    },
    {
      "trigger": "setDestinationEntity:",
      "contents": "setDestinationEntity(${1:NSEntityDescription* entity})"
    },
    {
      "trigger": "setDestinationEntityName:",
      "contents": "setDestinationEntityName(${1:NSString* name})"
    },
    {
      "trigger": "setDestinationEntityVersionHash:",
      "contents": "setDestinationEntityVersionHash(${1:NSData* vhash})"
    },
    {
      "trigger": "setDestructiveButtonIndex:",
      "contents": "setDestructiveButtonIndex(${1:NSInteger destructiveButtonIndex})"
    },
    {
      "trigger": "setDetectsPhoneNumbers:",
      "contents": "setDetectsPhoneNumbers(${1:BOOL detectsPhoneNumbers})"
    },
    {
      "trigger": "setDeviceMotionUpdateInterval:",
      "contents": "setDeviceMotionUpdateInterval(${1:NSTimeInterval deviceMotionUpdateInterval})"
    },
    {
      "trigger": "setDictionary:",
      "contents": "setDictionary(${1:NSDictionary* otherDictionary})"
    },
    {
      "trigger": "setDictionary:forKey:",
      "contents": "setDictionary(${1:NSDictionary* aDictionary}, forKey:${2:NSString* aKey})"
    },
    {
      "trigger": "setDiffuseColor:",
      "contents": "setDiffuseColor(${1:GLKVector4 diffuseColor})"
    },
    {
      "trigger": "setDirection:",
      "contents": "setDirection(${1:UISwipeGestureRecognizerDirection direction})"
    },
    {
      "trigger": "setDirectionalLockEnabled:",
      "contents": "setDirectionalLockEnabled(${1:BOOL directionalLockEnabled})"
    },
    {
      "trigger": "setDisabledBackground:",
      "contents": "setDisabledBackground(${1:UIImage* disabledBackground})"
    },
    {
      "trigger": "setDiscardable:",
      "contents": "setDiscardable(${1:BOOL discardable})"
    },
    {
      "trigger": "setDisconnectTimeout:",
      "contents": "setDisconnectTimeout(${1:NSTimeInterval disconnectTimeout})"
    },
    {
      "trigger": "setDiskCapacity:",
      "contents": "setDiskCapacity(${1:NSUInteger diskCapacity})"
    },
    {
      "trigger": "setDisplayedPerson:",
      "contents": "setDisplayedPerson(${1:ABRecordRef displayedPerson})"
    },
    {
      "trigger": "setDisplayedProperties:",
      "contents": "setDisplayedProperties(${1:NSArray* displayedProperties})"
    },
    {
      "trigger": "setDistanceFilter:",
      "contents": "setDistanceFilter(${1:CLLocationDistance distanceFilter})"
    },
    {
      "trigger": "setDividerImage:forLeftSegmentState:rightSegmentState:barMetrics:",
      "contents": "setDividerImage(${1:UIImage* dividerImage}, forLeftSegmentState:${2:UIControlState leftState}, rightSegmentState:${3:UIControlState rightState}, barMetrics:${4:UIBarMetrics barMetrics})"
    },
    {
      "trigger": "setDoesRelativeDateFormatting:",
      "contents": "setDoesRelativeDateFormatting(${1:BOOL b})"
    },
    {
      "trigger": "setDouble:forKey:",
      "contents": "setDouble(${1:double value}, forKey:${2:NSString* aKey})"
    },
    {
      "trigger": "setDouble:forKey:",
      "contents": "setDouble(${1:double value}, forKey:${2:NSString* defaultName})"
    },
    {
      "trigger": "setDoubleSided:",
      "contents": "setDoubleSided(${1:BOOL doubleSided})"
    },
    {
      "trigger": "setDragState:",
      "contents": "setDragState(${1:MKAnnotationViewDragState dragState})"
    },
    {
      "trigger": "setDragState:animated:",
      "contents": "setDragState(${1:MKAnnotationViewDragState newDragState}, animated:${2:BOOL animated})"
    },
    {
      "trigger": "setDraggable:",
      "contents": "setDraggable(${1:BOOL draggable})"
    },
    {
      "trigger": "setDrawableColorFormat:",
      "contents": "setDrawableColorFormat(${1:GLKViewDrawableColorFormat drawableColorFormat})"
    },
    {
      "trigger": "setDrawableDepthFormat:",
      "contents": "setDrawableDepthFormat(${1:GLKViewDrawableDepthFormat drawableDepthFormat})"
    },
    {
      "trigger": "setDrawableMultisample:",
      "contents": "setDrawableMultisample(${1:GLKViewDrawableMultisample drawableMultisample})"
    },
    {
      "trigger": "setDrawableProperties:",
      "contents": "setDrawableProperties(${1:NSDictionary* drawableProperties})"
    },
    {
      "trigger": "setDrawableStencilFormat:",
      "contents": "setDrawableStencilFormat(${1:GLKViewDrawableStencilFormat drawableStencilFormat})"
    },
    {
      "trigger": "setDuplex:",
      "contents": "setDuplex(${1:UIPrintInfoDuplex duplex})"
    },
    {
      "trigger": "setDuration:",
      "contents": "setDuration(${1:CFTimeInterval duration})"
    },
    {
      "trigger": "setDuration:",
      "contents": "setDuration(${1:CMTime duration})"
    },
    {
      "trigger": "setEdgeAntialiasingMask:",
      "contents": "setEdgeAntialiasingMask(${1:unsigned int edgeAntialiasingMask})"
    },
    {
      "trigger": "setEditAction:",
      "contents": "setEditAction(${1:SEL editAction})"
    },
    {
      "trigger": "setEditViewDelegate:",
      "contents": "setEditViewDelegate(${1:id editViewDelegate})"
    },
    {
      "trigger": "setEditable:",
      "contents": "setEditable(${1:BOOL editable})"
    },
    {
      "trigger": "setEditing:",
      "contents": "setEditing(${1:BOOL editing})"
    },
    {
      "trigger": "setEditing:animated:",
      "contents": "setEditing(${1:BOOL editing}, animated:${2:BOOL animated})"
    },
    {
      "trigger": "setEditingAccessoryType:",
      "contents": "setEditingAccessoryType(${1:UITableViewCellAccessoryType editingAccessoryType})"
    },
    {
      "trigger": "setEditingAccessoryView:",
      "contents": "setEditingAccessoryView(${1:UIView* editingAccessoryView})"
    },
    {
      "trigger": "setEmissionLatitude:",
      "contents": "setEmissionLatitude(${1:CGFloat emissionLatitude})"
    },
    {
      "trigger": "setEmissionLongitude:",
      "contents": "setEmissionLongitude(${1:CGFloat emissionLongitude})"
    },
    {
      "trigger": "setEmissionRange:",
      "contents": "setEmissionRange(${1:CGFloat emissionRange})"
    },
    {
      "trigger": "setEmissiveColor:",
      "contents": "setEmissiveColor(${1:GLKVector4 emissiveColor})"
    },
    {
      "trigger": "setEmitterCells:",
      "contents": "setEmitterCells(${1:NSArray* emitterCells})"
    },
    {
      "trigger": "setEmitterDepth:",
      "contents": "setEmitterDepth(${1:CGFloat emitterDepth})"
    },
    {
      "trigger": "setEmitterMode:",
      "contents": "setEmitterMode(${1:NSString* emitterMode})"
    },
    {
      "trigger": "setEmitterPosition:",
      "contents": "setEmitterPosition(${1:CGPoint emitterPosition})"
    },
    {
      "trigger": "setEmitterShape:",
      "contents": "setEmitterShape(${1:NSString* emitterShape})"
    },
    {
      "trigger": "setEmitterSize:",
      "contents": "setEmitterSize(${1:CGSize emitterSize})"
    },
    {
      "trigger": "setEmitterZPosition:",
      "contents": "setEmitterZPosition(${1:CGFloat emitterZPosition})"
    },
    {
      "trigger": "setEnablePostProcessing:",
      "contents": "setEnablePostProcessing(${1:BOOL enablePostProcessing})"
    },
    {
      "trigger": "setEnableRate:",
      "contents": "setEnableRate(${1:BOOL enableRate})"
    },
    {
      "trigger": "setEnableSetNeedsDisplay:",
      "contents": "setEnableSetNeedsDisplay(${1:BOOL enableSetNeedsDisplay})"
    },
    {
      "trigger": "setEnabled:",
      "contents": "setEnabled(${1:BOOL enabled})"
    },
    {
      "trigger": "setEnabled:",
      "contents": "setEnabled(${1:GLboolean enabled})"
    },
    {
      "trigger": "setEnabled:forSegmentAtIndex:",
      "contents": "setEnabled(${1:BOOL enabled}, forSegmentAtIndex:${2:NSUInteger segment})"
    },
    {
      "trigger": "setEnablesReturnKeyAutomatically:",
      "contents": "setEnablesReturnKeyAutomatically(${1:BOOL enablesReturnKeyAutomatically})"
    },
    {
      "trigger": "setEnd:",
      "contents": "setEnd(${1:GLfloat end})"
    },
    {
      "trigger": "setEndDate:",
      "contents": "setEndDate(${1:NSDate* endDate})"
    },
    {
      "trigger": "setEndPlaybackTime:",
      "contents": "setEndPlaybackTime(${1:NSTimeInterval endPlaybackTime})"
    },
    {
      "trigger": "setEndPoint:",
      "contents": "setEndPoint(${1:CGPoint endPoint})"
    },
    {
      "trigger": "setEndProgress:",
      "contents": "setEndProgress(${1:float endProgress})"
    },
    {
      "trigger": "setEntities:",
      "contents": "setEntities(${1:NSArray* entities})"
    },
    {
      "trigger": "setEntities:forConfiguration:",
      "contents": "setEntities(${1:NSArray* entities}, forConfiguration:${2:NSString* configuration})"
    },
    {
      "trigger": "setEntity:",
      "contents": "setEntity(${1:NSEntityDescription* entity})"
    },
    {
      "trigger": "setEntityMappings:",
      "contents": "setEntityMappings(${1:NSArray* mappings})"
    },
    {
      "trigger": "setEntityMigrationPolicyClassName:",
      "contents": "setEntityMigrationPolicyClassName(${1:NSString* name})"
    },
    {
      "trigger": "setEnvMode:",
      "contents": "setEnvMode(${1:GLint envMode})"
    },
    {
      "trigger": "setEra:",
      "contents": "setEra(${1:NSInteger v})"
    },
    {
      "trigger": "setEraSymbols:",
      "contents": "setEraSymbols(${1:NSArray* array})"
    },
    {
      "trigger": "setEvent:",
      "contents": "setEvent(${1:EKEvent* event})"
    },
    {
      "trigger": "setEventStore:",
      "contents": "setEventStore(${1:EKEventStore* eventStore})"
    },
    {
      "trigger": "setEvictsObjectsWithDiscardedContent:",
      "contents": "setEvictsObjectsWithDiscardedContent(${1:BOOL b})"
    },
    {
      "trigger": "setExclusiveTouch:",
      "contents": "setExclusiveTouch(${1:BOOL exclusiveTouch})"
    },
    {
      "trigger": "setExpectsMediaDataInRealTime:",
      "contents": "setExpectsMediaDataInRealTime(${1:BOOL expectsMediaDataInRealTime})"
    },
    {
      "trigger": "setExponentSymbol:",
      "contents": "setExponentSymbol(${1:NSString* string})"
    },
    {
      "trigger": "setExposureMode:",
      "contents": "setExposureMode(${1:AVCaptureExposureMode exposureMode})"
    },
    {
      "trigger": "setExposurePointOfInterest:",
      "contents": "setExposurePointOfInterest(${1:CGPoint exposurePointOfInterest})"
    },
    {
      "trigger": "setExpression:",
      "contents": "setExpression(${1:NSExpression* expression})"
    },
    {
      "trigger": "setExpressionResultType:",
      "contents": "setExpressionResultType(${1:NSAttributeType type})"
    },
    {
      "trigger": "setExtendedLanguageTag:",
      "contents": "setExtendedLanguageTag(${1:NSString* extendedLanguageTag})"
    },
    {
      "trigger": "setExtraAttributes:",
      "contents": "setExtraAttributes(${1:NSDictionary* extraAttributes})"
    },
    {
      "trigger": "setFetchBatchSize:",
      "contents": "setFetchBatchSize(${1:NSUInteger bsize})"
    },
    {
      "trigger": "setFetchLimit:",
      "contents": "setFetchLimit(${1:NSUInteger limit})"
    },
    {
      "trigger": "setFetchOffset:",
      "contents": "setFetchOffset(${1:NSUInteger offset})"
    },
    {
      "trigger": "setFetchRequest:",
      "contents": "setFetchRequest(${1:NSFetchRequest* fetchRequest})"
    },
    {
      "trigger": "setFetchRequestTemplate:forName:",
      "contents": "setFetchRequestTemplate(${1:NSFetchRequest* fetchRequestTemplate}, forName:${2:NSString* name})"
    },
    {
      "trigger": "setFileAttributes:",
      "contents": "setFileAttributes(${1:NSDictionary* fileAttributes})"
    },
    {
      "trigger": "setFileLengthLimit:",
      "contents": "setFileLengthLimit(${1:long long fileLengthLimit})"
    },
    {
      "trigger": "setFileModificationDate:",
      "contents": "setFileModificationDate(${1:NSDate* fileModificationDate})"
    },
    {
      "trigger": "setFilename:",
      "contents": "setFilename(${1:NSString* fileName})"
    },
    {
      "trigger": "setFillColor:",
      "contents": "setFillColor(${1:CGColorRef fillColor})"
    },
    {
      "trigger": "setFillColor:",
      "contents": "setFillColor(${1:UIColor* fillColor})"
    },
    {
      "trigger": "setFillMode:",
      "contents": "setFillMode(${1:NSString* fillMode})"
    },
    {
      "trigger": "setFillRule:",
      "contents": "setFillRule(${1:NSString* fillRule})"
    },
    {
      "trigger": "setFilter:",
      "contents": "setFilter(${1:id filter})"
    },
    {
      "trigger": "setFilterPredicates:",
      "contents": "setFilterPredicates(${1:NSSet* filterPredicates})"
    },
    {
      "trigger": "setFilters:",
      "contents": "setFilters(${1:NSArray* filters})"
    },
    {
      "trigger": "setFinishedSelectedImage:withFinishedUnselectedImage:",
      "contents": "setFinishedSelectedImage(${1:UIImage* selectedImage}, withFinishedUnselectedImage:${2:UIImage* unselectedImage})"
    },
    {
      "trigger": "setFireDate:",
      "contents": "setFireDate(${1:NSDate* date})"
    },
    {
      "trigger": "setFireDate:",
      "contents": "setFireDate(${1:NSDate* fireDate})"
    },
    {
      "trigger": "setFirstWeekday:",
      "contents": "setFirstWeekday(${1:NSUInteger weekday})"
    },
    {
      "trigger": "setFlashMode:",
      "contents": "setFlashMode(${1:AVCaptureFlashMode flashMode})"
    },
    {
      "trigger": "setFlatness:",
      "contents": "setFlatness(${1:CGFloat flatness})"
    },
    {
      "trigger": "setFloat:forKey:",
      "contents": "setFloat(${1:float value}, forKey:${2:NSString* defaultName})"
    },
    {
      "trigger": "setFocusMode:",
      "contents": "setFocusMode(${1:AVCaptureFocusMode focusMode})"
    },
    {
      "trigger": "setFocusPointOfInterest:",
      "contents": "setFocusPointOfInterest(${1:CGPoint focusPointOfInterest})"
    },
    {
      "trigger": "setFont:",
      "contents": "setFont(${1:CFTypeRef font})"
    },
    {
      "trigger": "setFont:",
      "contents": "setFont(${1:UIFont* font})"
    },
    {
      "trigger": "setFontSize:",
      "contents": "setFontSize(${1:CGFloat fontSize})"
    },
    {
      "trigger": "setFooterHeight:",
      "contents": "setFooterHeight(${1:CGFloat footerHeight})"
    },
    {
      "trigger": "setForegroundColor:",
      "contents": "setForegroundColor(${1:CGColorRef foregroundColor})"
    },
    {
      "trigger": "setFormatWidth:",
      "contents": "setFormatWidth(${1:NSUInteger number})"
    },
    {
      "trigger": "setFormatterBehavior:",
      "contents": "setFormatterBehavior(${1:NSDateFormatterBehavior behavior})"
    },
    {
      "trigger": "setFormatterBehavior:",
      "contents": "setFormatterBehavior(${1:NSNumberFormatterBehavior behavior})"
    },
    {
      "trigger": "setForwardPlaybackEndTime:",
      "contents": "setForwardPlaybackEndTime(${1:CMTime forwardPlaybackEndTime})"
    },
    {
      "trigger": "setFrame:",
      "contents": "setFrame(${1:CGRect frame})"
    },
    {
      "trigger": "setFrameDuration:",
      "contents": "setFrameDuration(${1:CMTime frameDuration})"
    },
    {
      "trigger": "setFrameInterval:",
      "contents": "setFrameInterval(${1:NSInteger frameInterval})"
    },
    {
      "trigger": "setFromValue:",
      "contents": "setFromValue(${1:id fromValue})"
    },
    {
      "trigger": "setFullscreen:",
      "contents": "setFullscreen(${1:BOOL fullscreen})"
    },
    {
      "trigger": "setFullscreen:animated:",
      "contents": "setFullscreen(${1:BOOL fullscreen}, animated:${2:BOOL animated})"
    },
    {
      "trigger": "setGeneratesCalendarDates:",
      "contents": "setGeneratesCalendarDates(${1:BOOL b})"
    },
    {
      "trigger": "setGeneratesDecimalNumbers:",
      "contents": "setGeneratesDecimalNumbers(${1:BOOL b})"
    },
    {
      "trigger": "setGeometryFlipped:",
      "contents": "setGeometryFlipped(${1:BOOL geometryFlipped})"
    },
    {
      "trigger": "setGestureRecognizers:",
      "contents": "setGestureRecognizers(${1:NSArray* gestureRecognizers})"
    },
    {
      "trigger": "setGreenRange:",
      "contents": "setGreenRange(${1:float greenRange})"
    },
    {
      "trigger": "setGreenSpeed:",
      "contents": "setGreenSpeed(${1:float greenSpeed})"
    },
    {
      "trigger": "setGregorianStartDate:",
      "contents": "setGregorianStartDate(${1:NSDate* date})"
    },
    {
      "trigger": "setGroupingAttributes:",
      "contents": "setGroupingAttributes(${1:NSArray* attrs})"
    },
    {
      "trigger": "setGroupingSeparator:",
      "contents": "setGroupingSeparator(${1:NSString* string})"
    },
    {
      "trigger": "setGroupingSize:",
      "contents": "setGroupingSize(${1:NSUInteger number})"
    },
    {
      "trigger": "setGroupingType:",
      "contents": "setGroupingType(${1:MPMediaGrouping groupingType})"
    },
    {
      "trigger": "setGroupsByEvent:",
      "contents": "setGroupsByEvent(${1:BOOL groupsByEvent})"
    },
    {
      "trigger": "setGyroUpdateInterval:",
      "contents": "setGyroUpdateInterval(${1:NSTimeInterval gyroUpdateInterval})"
    },
    {
      "trigger": "setHTTPBody:",
      "contents": "setHTTPBody(${1:NSData* data})"
    },
    {
      "trigger": "setHTTPBodyStream:",
      "contents": "setHTTPBodyStream(${1:NSInputStream* inputStream})"
    },
    {
      "trigger": "setHTTPMethod:",
      "contents": "setHTTPMethod(${1:NSString* method})"
    },
    {
      "trigger": "setHTTPShouldHandleCookies:",
      "contents": "setHTTPShouldHandleCookies(${1:BOOL should})"
    },
    {
      "trigger": "setHTTPShouldUsePipelining:",
      "contents": "setHTTPShouldUsePipelining(${1:BOOL shouldUsePipelining})"
    },
    {
      "trigger": "setHasAction:",
      "contents": "setHasAction(${1:BOOL hasAction})"
    },
    {
      "trigger": "setHavingPredicate:",
      "contents": "setHavingPredicate(${1:NSPredicate* predicate})"
    },
    {
      "trigger": "setHeaderHeight:",
      "contents": "setHeaderHeight(${1:CGFloat headerHeight})"
    },
    {
      "trigger": "setHeadingFilter:",
      "contents": "setHeadingFilter(${1:CLLocationDegrees headingFilter})"
    },
    {
      "trigger": "setHeadingOrientation:",
      "contents": "setHeadingOrientation(${1:CLDeviceOrientation headingOrientation})"
    },
    {
      "trigger": "setHidden:",
      "contents": "setHidden(${1:BOOL hidden})"
    },
    {
      "trigger": "setHidesAccessoryWhenEditing:",
      "contents": "setHidesAccessoryWhenEditing(${1:BOOL hidesAccessoryWhenEditing})"
    },
    {
      "trigger": "setHidesBackButton:",
      "contents": "setHidesBackButton(${1:BOOL hidesBackButton})"
    },
    {
      "trigger": "setHidesBackButton:animated:",
      "contents": "setHidesBackButton(${1:BOOL hidesBackButton}, animated:${2:BOOL animated})"
    },
    {
      "trigger": "setHidesBottomBarWhenPushed:",
      "contents": "setHidesBottomBarWhenPushed(${1:BOOL hidesBottomBarWhenPushed})"
    },
    {
      "trigger": "setHidesForSinglePage:",
      "contents": "setHidesForSinglePage(${1:BOOL hidesForSinglePage})"
    },
    {
      "trigger": "setHidesWhenStopped:",
      "contents": "setHidesWhenStopped(${1:BOOL hidesWhenStopped})"
    },
    {
      "trigger": "setHighlighted:",
      "contents": "setHighlighted(${1:BOOL highlighted})"
    },
    {
      "trigger": "setHighlighted:animated:",
      "contents": "setHighlighted(${1:BOOL highlighted}, animated:${2:BOOL animated})"
    },
    {
      "trigger": "setHighlightedAnimationImages:",
      "contents": "setHighlightedAnimationImages(${1:NSArray* highlightedAnimationImages})"
    },
    {
      "trigger": "setHighlightedImage:",
      "contents": "setHighlightedImage(${1:UIImage* highlightedImage})"
    },
    {
      "trigger": "setHighlightedItemForProperty:withIdentifier:",
      "contents": "setHighlightedItemForProperty(${1:ABPropertyID property}, withIdentifier:${2:ABMultiValueIdentifier identifier})"
    },
    {
      "trigger": "setHighlightedTextColor:",
      "contents": "setHighlightedTextColor(${1:UIColor* highlightedTextColor})"
    },
    {
      "trigger": "setHosted:",
      "contents": "setHosted(${1:BOOL hosted})"
    },
    {
      "trigger": "setHostedPlayer:connected:",
      "contents": "setHostedPlayer(${1:NSString* playerID}, connected:${2:BOOL connected})"
    },
    {
      "trigger": "setHostedPlayerReady:",
      "contents": "setHostedPlayerReady(${1:NSString* playerID})"
    },
    {
      "trigger": "setHour:",
      "contents": "setHour(${1:NSInteger v})"
    },
    {
      "trigger": "setIdentifier:",
      "contents": "setIdentifier(${1:NSString* identifier})"
    },
    {
      "trigger": "setIdleTimerDisabled:",
      "contents": "setIdleTimerDisabled(${1:BOOL idleTimerDisabled})"
    },
    {
      "trigger": "setIgnoredWords:",
      "contents": "setIgnoredWords(${1:NSArray* words})"
    },
    {
      "trigger": "setImage:",
      "contents": "setImage(${1:UIImage* image})"
    },
    {
      "trigger": "setImage:forSearchBarIcon:state:",
      "contents": "setImage(${1:UIImage* iconImage}, forSearchBarIcon:${2:UISearchBarIcon icon}, state:${3:UIControlState state})"
    },
    {
      "trigger": "setImage:forSegmentAtIndex:",
      "contents": "setImage(${1:UIImage* image}, forSegmentAtIndex:${2:NSUInteger segment})"
    },
    {
      "trigger": "setImage:forState:",
      "contents": "setImage(${1:UIImage* image}, forState:${2:UIControlState state})"
    },
    {
      "trigger": "setImageData:metadata:completionBlock:",
      "contents": "setImageData(${1:NSData* imageData}, metadata:${2:NSDictionary* metadata}, completionBlock:${3:ALAssetsLibraryWriteImageCompletionBlock completionBlock})"
    },
    {
      "trigger": "setImageEdgeInsets:",
      "contents": "setImageEdgeInsets(${1:UIEdgeInsets imageEdgeInsets})"
    },
    {
      "trigger": "setImageInsets:",
      "contents": "setImageInsets(${1:UIEdgeInsets imageInsets})"
    },
    {
      "trigger": "setImages:",
      "contents": "setImages(${1:NSArray* images})"
    },
    {
      "trigger": "setIncludesPendingChanges:",
      "contents": "setIncludesPendingChanges(${1:BOOL flag})"
    },
    {
      "trigger": "setIncludesPropertyValues:",
      "contents": "setIncludesPropertyValues(${1:BOOL yesNo})"
    },
    {
      "trigger": "setIncludesSubentities:",
      "contents": "setIncludesSubentities(${1:BOOL yesNo})"
    },
    {
      "trigger": "setIndentationLevel:",
      "contents": "setIndentationLevel(${1:NSInteger indentationLevel})"
    },
    {
      "trigger": "setIndentationWidth:",
      "contents": "setIndentationWidth(${1:CGFloat indentationWidth})"
    },
    {
      "trigger": "setIndexed:",
      "contents": "setIndexed(${1:BOOL flag})"
    },
    {
      "trigger": "setIndexedBySpotlight:",
      "contents": "setIndexedBySpotlight(${1:BOOL flag})"
    },
    {
      "trigger": "setIndicatorStyle:",
      "contents": "setIndicatorStyle(${1:UIScrollViewIndicatorStyle indicatorStyle})"
    },
    {
      "trigger": "setInitialPlaybackTime:",
      "contents": "setInitialPlaybackTime(${1:NSTimeInterval initialPlaybackTime})"
    },
    {
      "trigger": "setInitialText:",
      "contents": "setInitialText(${1:NSString* text})"
    },
    {
      "trigger": "setInputAccessoryView:",
      "contents": "setInputAccessoryView(${1:UIView* inputAccessoryView})"
    },
    {
      "trigger": "setInputDelegate:",
      "contents": "setInputDelegate(${1:id inputDelegate})"
    },
    {
      "trigger": "setInputMeteringEnabled:",
      "contents": "setInputMeteringEnabled(${1:BOOL inputMeteringEnabled})"
    },
    {
      "trigger": "setInputParameters:",
      "contents": "setInputParameters(${1:NSArray* inputParameters})"
    },
    {
      "trigger": "setInputView:",
      "contents": "setInputView(${1:UIView* inputView})"
    },
    {
      "trigger": "setInstanceAlphaOffset:",
      "contents": "setInstanceAlphaOffset(${1:float instanceAlphaOffset})"
    },
    {
      "trigger": "setInstanceBlueOffset:",
      "contents": "setInstanceBlueOffset(${1:float instanceBlueOffset})"
    },
    {
      "trigger": "setInstanceColor:",
      "contents": "setInstanceColor(${1:CGColorRef instanceColor})"
    },
    {
      "trigger": "setInstanceCount:",
      "contents": "setInstanceCount(${1:NSInteger instanceCount})"
    },
    {
      "trigger": "setInstanceDelay:",
      "contents": "setInstanceDelay(${1:CFTimeInterval instanceDelay})"
    },
    {
      "trigger": "setInstanceGreenOffset:",
      "contents": "setInstanceGreenOffset(${1:float instanceGreenOffset})"
    },
    {
      "trigger": "setInstanceRedOffset:",
      "contents": "setInstanceRedOffset(${1:float instanceRedOffset})"
    },
    {
      "trigger": "setInstanceTransform:",
      "contents": "setInstanceTransform(${1:CATransform3D instanceTransform})"
    },
    {
      "trigger": "setInstructions:",
      "contents": "setInstructions(${1:NSArray* instructions})"
    },
    {
      "trigger": "setInteger:forKey:",
      "contents": "setInteger(${1:NSInteger value}, forKey:${2:NSString* defaultName})"
    },
    {
      "trigger": "setInternationalCurrencySymbol:",
      "contents": "setInternationalCurrencySymbol(${1:NSString* string})"
    },
    {
      "trigger": "setInverseRelationship:",
      "contents": "setInverseRelationship(${1:NSRelationshipDescription* relationship})"
    },
    {
      "trigger": "setInviteHandler:",
      "contents": "setInviteHandler(${1:void (^)(GKInvite *, NSArray *) inviteHandler})"
    },
    {
      "trigger": "setIsAccessibilityElement:",
      "contents": "setIsAccessibilityElement(${1:BOOL isAccessibilityElement})"
    },
    {
      "trigger": "setItems:",
      "contents": "setItems(${1:NSArray* items})"
    },
    {
      "trigger": "setItems:animated:",
      "contents": "setItems(${1:NSArray* items}, animated:${2:BOOL animated})"
    },
    {
      "trigger": "setJobName:",
      "contents": "setJobName(${1:NSString* jobName})"
    },
    {
      "trigger": "setKeepAliveTimeout:handler:",
      "contents": "setKeepAliveTimeout(${1:NSTimeInterval timeout}, handler:${2:void (^)(void) keepAliveHandler})"
    },
    {
      "trigger": "setKey:",
      "contents": "setKey(${1:id key})"
    },
    {
      "trigger": "setKeyPath:",
      "contents": "setKeyPath(${1:NSString* keyPath})"
    },
    {
      "trigger": "setKeySpace:",
      "contents": "setKeySpace(${1:NSString* keySpace})"
    },
    {
      "trigger": "setKeyTimes:",
      "contents": "setKeyTimes(${1:NSArray* keyTimes})"
    },
    {
      "trigger": "setKeyboardAppearance:",
      "contents": "setKeyboardAppearance(${1:UIKeyboardAppearance keyboardAppearance})"
    },
    {
      "trigger": "setKeyboardType:",
      "contents": "setKeyboardType(${1:UIKeyboardType keyboardType})"
    },
    {
      "trigger": "setLabel:",
      "contents": "setLabel(${1:NSString* label})"
    },
    {
      "trigger": "setLandscapeImagePhone:",
      "contents": "setLandscapeImagePhone(${1:UIImage* landscapeImagePhone})"
    },
    {
      "trigger": "setLandscapeImagePhoneInsets:",
      "contents": "setLandscapeImagePhoneInsets(${1:UIEdgeInsets landscapeImagePhoneInsets})"
    },
    {
      "trigger": "setLanguageCode:",
      "contents": "setLanguageCode(${1:NSString* languageCode})"
    },
    {
      "trigger": "setLayerInstructions:",
      "contents": "setLayerInstructions(${1:NSArray* layerInstructions})"
    },
    {
      "trigger": "setLeaderboardDelegate:",
      "contents": "setLeaderboardDelegate(${1:id leaderboardDelegate})"
    },
    {
      "trigger": "setLeftBarButtonItem:",
      "contents": "setLeftBarButtonItem(${1:UIBarButtonItem* leftBarButtonItem})"
    },
    {
      "trigger": "setLeftBarButtonItem:animated:",
      "contents": "setLeftBarButtonItem(${1:UIBarButtonItem* item}, animated:${2:BOOL animated})"
    },
    {
      "trigger": "setLeftBarButtonItems:",
      "contents": "setLeftBarButtonItems(${1:NSArray* leftBarButtonItems})"
    },
    {
      "trigger": "setLeftBarButtonItems:animated:",
      "contents": "setLeftBarButtonItems(${1:NSArray* items}, animated:${2:BOOL animated})"
    },
    {
      "trigger": "setLeftCalloutAccessoryView:",
      "contents": "setLeftCalloutAccessoryView(${1:UIView* leftCalloutAccessoryView})"
    },
    {
      "trigger": "setLeftItemsSupplementBackButton:",
      "contents": "setLeftItemsSupplementBackButton(${1:BOOL leftItemsSupplementBackButton})"
    },
    {
      "trigger": "setLeftView:",
      "contents": "setLeftView(${1:UIView* leftView})"
    },
    {
      "trigger": "setLeftViewMode:",
      "contents": "setLeftViewMode(${1:UITextFieldViewMode leftViewMode})"
    },
    {
      "trigger": "setLength:",
      "contents": "setLength(${1:NSUInteger length})"
    },
    {
      "trigger": "setLenient:",
      "contents": "setLenient(${1:BOOL b})"
    },
    {
      "trigger": "setLevelsOfDetail:",
      "contents": "setLevelsOfDetail(${1:size_t levelsOfDetail})"
    },
    {
      "trigger": "setLevelsOfDetailBias:",
      "contents": "setLevelsOfDetailBias(${1:size_t levelsOfDetailBias})"
    },
    {
      "trigger": "setLevelsOfUndo:",
      "contents": "setLevelsOfUndo(${1:NSUInteger levels})"
    },
    {
      "trigger": "setLifetime:",
      "contents": "setLifetime(${1:float lifetime})"
    },
    {
      "trigger": "setLifetimeRange:",
      "contents": "setLifetimeRange(${1:float lifetimeRange})"
    },
    {
      "trigger": "setLightModelAmbientColor:",
      "contents": "setLightModelAmbientColor(${1:GLKVector4 lightModelAmbientColor})"
    },
    {
      "trigger": "setLightModelTwoSided:",
      "contents": "setLightModelTwoSided(${1:GLboolean lightModelTwoSided})"
    },
    {
      "trigger": "setLightingType:",
      "contents": "setLightingType(${1:GLKLightingType lightingType})"
    },
    {
      "trigger": "setLineBreakMode:",
      "contents": "setLineBreakMode(${1:UILineBreakMode lineBreakMode})"
    },
    {
      "trigger": "setLineCap:",
      "contents": "setLineCap(${1:CGLineCap lineCap})"
    },
    {
      "trigger": "setLineCap:",
      "contents": "setLineCap(${1:NSString* lineCap})"
    },
    {
      "trigger": "setLineCapStyle:",
      "contents": "setLineCapStyle(${1:CGLineCap lineCapStyle})"
    },
    {
      "trigger": "setLineDash:count:phase:",
      "contents": "setLineDash(${1:CGFloat* pattern}, count:${2:NSInteger count}, phase:${3:CGFloat phase})"
    },
    {
      "trigger": "setLineDashPattern:",
      "contents": "setLineDashPattern(${1:NSArray* lineDashPattern})"
    },
    {
      "trigger": "setLineDashPhase:",
      "contents": "setLineDashPhase(${1:CGFloat lineDashPhase})"
    },
    {
      "trigger": "setLineJoin:",
      "contents": "setLineJoin(${1:CGLineJoin lineJoin})"
    },
    {
      "trigger": "setLineJoin:",
      "contents": "setLineJoin(${1:NSString* lineJoin})"
    },
    {
      "trigger": "setLineJoinStyle:",
      "contents": "setLineJoinStyle(${1:CGLineJoin lineJoinStyle})"
    },
    {
      "trigger": "setLineWidth:",
      "contents": "setLineWidth(${1:CGFloat lineWidth})"
    },
    {
      "trigger": "setLinearAttenuation:",
      "contents": "setLinearAttenuation(${1:GLfloat linearAttenuation})"
    },
    {
      "trigger": "setLocale:",
      "contents": "setLocale(${1:NSLocale* locale})"
    },
    {
      "trigger": "setLocale:",
      "contents": "setLocale(${1:id locale})"
    },
    {
      "trigger": "setLocalizationDictionary:",
      "contents": "setLocalizationDictionary(${1:NSDictionary* localizationDictionary})"
    },
    {
      "trigger": "setLocation:",
      "contents": "setLocation(${1:NSString* location})"
    },
    {
      "trigger": "setLocations:",
      "contents": "setLocations(${1:NSArray* locations})"
    },
    {
      "trigger": "setLongEraSymbols:",
      "contents": "setLongEraSymbols(${1:NSArray* array})"
    },
    {
      "trigger": "setLongLong:forKey:",
      "contents": "setLongLong(${1:long long value}, forKey:${2:NSString* aKey})"
    },
    {
      "trigger": "setMagnetometerUpdateInterval:",
      "contents": "setMagnetometerUpdateInterval(${1:NSTimeInterval magnetometerUpdateInterval})"
    },
    {
      "trigger": "setMagnificationFilter:",
      "contents": "setMagnificationFilter(${1:NSString* magnificationFilter})"
    },
    {
      "trigger": "setMailComposeDelegate:",
      "contents": "setMailComposeDelegate(${1:id mailComposeDelegate})"
    },
    {
      "trigger": "setMainDocumentURL:",
      "contents": "setMainDocumentURL(${1:NSURL* URL})"
    },
    {
      "trigger": "setManagedObjectClassName:",
      "contents": "setManagedObjectClassName(${1:NSString* name})"
    },
    {
      "trigger": "setMapType:",
      "contents": "setMapType(${1:MKMapType mapType})"
    },
    {
      "trigger": "setMapView:",
      "contents": "setMapView(${1:MKMapView* mapView})"
    },
    {
      "trigger": "setMappingType:",
      "contents": "setMappingType(${1:NSEntityMappingType type})"
    },
    {
      "trigger": "setMarkedText:selectedRange:",
      "contents": "setMarkedText(${1:NSString* markedText}, selectedRange:${2:NSRange selectedRange})"
    },
    {
      "trigger": "setMarkedTextStyle:",
      "contents": "setMarkedTextStyle(${1:NSDictionary* markedTextStyle})"
    },
    {
      "trigger": "setMarkupText:",
      "contents": "setMarkupText(${1:NSString* markupText})"
    },
    {
      "trigger": "setMask:",
      "contents": "setMask(${1:CALayer* mask})"
    },
    {
      "trigger": "setMasksToBounds:",
      "contents": "setMasksToBounds(${1:BOOL masksToBounds})"
    },
    {
      "trigger": "setMatchOutcome:",
      "contents": "setMatchOutcome(${1:GKTurnBasedMatchOutcome matchOutcome})"
    },
    {
      "trigger": "setMatchmakerDelegate:",
      "contents": "setMatchmakerDelegate(${1:id matchmakerDelegate})"
    },
    {
      "trigger": "setMatrix:",
      "contents": "setMatrix(${1:GLKMatrix3 matrix})"
    },
    {
      "trigger": "setMaxConcurrentOperationCount:",
      "contents": "setMaxConcurrentOperationCount(${1:NSInteger cnt})"
    },
    {
      "trigger": "setMaxCount:",
      "contents": "setMaxCount(${1:NSUInteger maxCount})"
    },
    {
      "trigger": "setMaxPlayers:",
      "contents": "setMaxPlayers(${1:NSUInteger maxPlayers})"
    },
    {
      "trigger": "setMaxRecordedDuration:",
      "contents": "setMaxRecordedDuration(${1:CMTime maxRecordedDuration})"
    },
    {
      "trigger": "setMaxRecordedFileSize:",
      "contents": "setMaxRecordedFileSize(${1:int64_t maxRecordedFileSize})"
    },
    {
      "trigger": "setMaximum:",
      "contents": "setMaximum(${1:NSNumber* number})"
    },
    {
      "trigger": "setMaximumContentHeight:",
      "contents": "setMaximumContentHeight(${1:CGFloat maximumContentHeight})"
    },
    {
      "trigger": "setMaximumContentWidth:",
      "contents": "setMaximumContentWidth(${1:CGFloat maximumContentWidth})"
    },
    {
      "trigger": "setMaximumDate:",
      "contents": "setMaximumDate(${1:NSDate* maximumDate})"
    },
    {
      "trigger": "setMaximumFractionDigits:",
      "contents": "setMaximumFractionDigits(${1:NSUInteger number})"
    },
    {
      "trigger": "setMaximumIntegerDigits:",
      "contents": "setMaximumIntegerDigits(${1:NSUInteger number})"
    },
    {
      "trigger": "setMaximumNumberOfTouches:",
      "contents": "setMaximumNumberOfTouches(${1:NSUInteger maximumNumberOfTouches})"
    },
    {
      "trigger": "setMaximumSignificantDigits:",
      "contents": "setMaximumSignificantDigits(${1:NSUInteger number})"
    },
    {
      "trigger": "setMaximumSize:",
      "contents": "setMaximumSize(${1:CGSize maximumSize})"
    },
    {
      "trigger": "setMaximumTrackImage:forState:",
      "contents": "setMaximumTrackImage(${1:UIImage* image}, forState:${2:UIControlState state})"
    },
    {
      "trigger": "setMaximumTrackTintColor:",
      "contents": "setMaximumTrackTintColor(${1:UIColor* maximumTrackTintColor})"
    },
    {
      "trigger": "setMaximumValue:",
      "contents": "setMaximumValue(${1:double maximumValue})"
    },
    {
      "trigger": "setMaximumValue:",
      "contents": "setMaximumValue(${1:float maximumValue})"
    },
    {
      "trigger": "setMaximumValueImage:",
      "contents": "setMaximumValueImage(${1:UIImage* maximumValueImage})"
    },
    {
      "trigger": "setMaximumZoomScale:",
      "contents": "setMaximumZoomScale(${1:float maximumZoomScale})"
    },
    {
      "trigger": "setMediaPlaybackAllowsAirPlay:",
      "contents": "setMediaPlaybackAllowsAirPlay(${1:BOOL mediaPlaybackAllowsAirPlay})"
    },
    {
      "trigger": "setMediaPlaybackRequiresUserAction:",
      "contents": "setMediaPlaybackRequiresUserAction(${1:BOOL mediaPlaybackRequiresUserAction})"
    },
    {
      "trigger": "setMediaTimeScale:",
      "contents": "setMediaTimeScale(${1:CMTimeScale mediaTimeScale})"
    },
    {
      "trigger": "setMediaTypes:",
      "contents": "setMediaTypes(${1:NSArray* mediaTypes})"
    },
    {
      "trigger": "setMemoryCapacity:",
      "contents": "setMemoryCapacity(${1:NSUInteger memoryCapacity})"
    },
    {
      "trigger": "setMenuItems:",
      "contents": "setMenuItems(${1:NSArray* menuItems})"
    },
    {
      "trigger": "setMenuVisible:",
      "contents": "setMenuVisible(${1:BOOL menuVisible})"
    },
    {
      "trigger": "setMenuVisible:animated:",
      "contents": "setMenuVisible(${1:BOOL menuVisible}, animated:${2:BOOL animated})"
    },
    {
      "trigger": "setMergePolicy:",
      "contents": "setMergePolicy(${1:id mergePolicy})"
    },
    {
      "trigger": "setMessage:",
      "contents": "setMessage(${1:NSString* message})"
    },
    {
      "trigger": "setMessageBody:isHTML:",
      "contents": "setMessageBody(${1:NSString* body}, isHTML:${2:BOOL isHTML})"
    },
    {
      "trigger": "setMessageComposeDelegate:",
      "contents": "setMessageComposeDelegate(${1:id messageComposeDelegate})"
    },
    {
      "trigger": "setMetadata:",
      "contents": "setMetadata(${1:NSArray* metadata})"
    },
    {
      "trigger": "setMetadata:",
      "contents": "setMetadata(${1:NSDictionary* storeMetadata})"
    },
    {
      "trigger": "setMetadata:forPersistentStore:",
      "contents": "setMetadata(${1:NSDictionary* metadata}, forPersistentStore:${2:NSPersistentStore* store})"
    },
    {
      "trigger": "setMeteringEnabled:",
      "contents": "setMeteringEnabled(${1:BOOL meteringEnabled})"
    },
    {
      "trigger": "setMicrophoneMuted:",
      "contents": "setMicrophoneMuted(${1:BOOL microphoneMuted})"
    },
    {
      "trigger": "setMinCount:",
      "contents": "setMinCount(${1:NSUInteger minCount})"
    },
    {
      "trigger": "setMinFrameDuration:",
      "contents": "setMinFrameDuration(${1:CMTime minFrameDuration})"
    },
    {
      "trigger": "setMinFreeDiskSpaceLimit:",
      "contents": "setMinFreeDiskSpaceLimit(${1:int64_t minFreeDiskSpaceLimit})"
    },
    {
      "trigger": "setMinPlayers:",
      "contents": "setMinPlayers(${1:NSUInteger minPlayers})"
    },
    {
      "trigger": "setMinificationFilter:",
      "contents": "setMinificationFilter(${1:NSString* minificationFilter})"
    },
    {
      "trigger": "setMinificationFilterBias:",
      "contents": "setMinificationFilterBias(${1:float minificationFilterBias})"
    },
    {
      "trigger": "setMinimum:",
      "contents": "setMinimum(${1:NSNumber* number})"
    },
    {
      "trigger": "setMinimumDate:",
      "contents": "setMinimumDate(${1:NSDate* minimumDate})"
    },
    {
      "trigger": "setMinimumDaysInFirstWeek:",
      "contents": "setMinimumDaysInFirstWeek(${1:NSUInteger mdw})"
    },
    {
      "trigger": "setMinimumFontSize:",
      "contents": "setMinimumFontSize(${1:CGFloat minimumFontSize})"
    },
    {
      "trigger": "setMinimumFractionDigits:",
      "contents": "setMinimumFractionDigits(${1:NSUInteger number})"
    },
    {
      "trigger": "setMinimumIntegerDigits:",
      "contents": "setMinimumIntegerDigits(${1:NSUInteger number})"
    },
    {
      "trigger": "setMinimumNumberOfTouches:",
      "contents": "setMinimumNumberOfTouches(${1:NSUInteger minimumNumberOfTouches})"
    },
    {
      "trigger": "setMinimumPressDuration:",
      "contents": "setMinimumPressDuration(${1:CFTimeInterval minimumPressDuration})"
    },
    {
      "trigger": "setMinimumSignificantDigits:",
      "contents": "setMinimumSignificantDigits(${1:NSUInteger number})"
    },
    {
      "trigger": "setMinimumTrackImage:forState:",
      "contents": "setMinimumTrackImage(${1:UIImage* image}, forState:${2:UIControlState state})"
    },
    {
      "trigger": "setMinimumTrackTintColor:",
      "contents": "setMinimumTrackTintColor(${1:UIColor* minimumTrackTintColor})"
    },
    {
      "trigger": "setMinimumValue:",
      "contents": "setMinimumValue(${1:double minimumValue})"
    },
    {
      "trigger": "setMinimumValue:",
      "contents": "setMinimumValue(${1:float minimumValue})"
    },
    {
      "trigger": "setMinimumValueImage:",
      "contents": "setMinimumValueImage(${1:UIImage* minimumValueImage})"
    },
    {
      "trigger": "setMinimumZoomScale:",
      "contents": "setMinimumZoomScale(${1:float minimumZoomScale})"
    },
    {
      "trigger": "setMinusSign:",
      "contents": "setMinusSign(${1:NSString* string})"
    },
    {
      "trigger": "setMinute:",
      "contents": "setMinute(${1:NSInteger v})"
    },
    {
      "trigger": "setMinuteInterval:",
      "contents": "setMinuteInterval(${1:NSInteger minuteInterval})"
    },
    {
      "trigger": "setMirrored:",
      "contents": "setMirrored(${1:BOOL mirrored})"
    },
    {
      "trigger": "setMiterLimit:",
      "contents": "setMiterLimit(${1:CGFloat miterLimit})"
    },
    {
      "trigger": "setModalInPopover:",
      "contents": "setModalInPopover(${1:BOOL modalInPopover})"
    },
    {
      "trigger": "setModalPresentationStyle:",
      "contents": "setModalPresentationStyle(${1:UIModalPresentationStyle modalPresentationStyle})"
    },
    {
      "trigger": "setModalTransitionStyle:",
      "contents": "setModalTransitionStyle(${1:UIModalTransitionStyle modalTransitionStyle})"
    },
    {
      "trigger": "setMode:",
      "contents": "setMode(${1:GLint mode})"
    },
    {
      "trigger": "setMode:error:",
      "contents": "setMode(${1:NSString* theMode}, error:${2:NSError** outError})"
    },
    {
      "trigger": "setModelConfiguration:",
      "contents": "setModelConfiguration(${1:NSString* modelConfiguration})"
    },
    {
      "trigger": "setModelviewMatrix:",
      "contents": "setModelviewMatrix(${1:GLKMatrix4 modelviewMatrix})"
    },
    {
      "trigger": "setMomentary:",
      "contents": "setMomentary(${1:BOOL momentary})"
    },
    {
      "trigger": "setMonth:",
      "contents": "setMonth(${1:NSInteger v})"
    },
    {
      "trigger": "setMonthSymbols:",
      "contents": "setMonthSymbols(${1:NSArray* array})"
    },
    {
      "trigger": "setMovieControlMode:",
      "contents": "setMovieControlMode(${1:MPMovieControlMode movieControlMode})"
    },
    {
      "trigger": "setMovieFragmentInterval:",
      "contents": "setMovieFragmentInterval(${1:CMTime movieFragmentInterval})"
    },
    {
      "trigger": "setMovieSourceType:",
      "contents": "setMovieSourceType(${1:MPMovieSourceType movieSourceType})"
    },
    {
      "trigger": "setMovieTimeScale:",
      "contents": "setMovieTimeScale(${1:CMTimeScale movieTimeScale})"
    },
    {
      "trigger": "setMultipleSelectionBackgroundView:",
      "contents": "setMultipleSelectionBackgroundView(${1:UIView* multipleSelectionBackgroundView})"
    },
    {
      "trigger": "setMultipleTouchEnabled:",
      "contents": "setMultipleTouchEnabled(${1:BOOL multipleTouchEnabled})"
    },
    {
      "trigger": "setMultiplier:",
      "contents": "setMultiplier(${1:NSNumber* number})"
    },
    {
      "trigger": "setMute:forPlayer:",
      "contents": "setMute(${1:BOOL isMuted}, forPlayer:${2:NSString* playerID})"
    },
    {
      "trigger": "setName:",
      "contents": "setName(${1:GLuint name})"
    },
    {
      "trigger": "setName:",
      "contents": "setName(${1:NSString* name})"
    },
    {
      "trigger": "setName:",
      "contents": "setName(${1:NSString* n})"
    },
    {
      "trigger": "setNaturalSize:",
      "contents": "setNaturalSize(${1:CGSize naturalSize})"
    },
    {
      "trigger": "setNaturalTimeScale:",
      "contents": "setNaturalTimeScale(${1:CMTimeScale naturalTimeScale})"
    },
    {
      "trigger": "setNavigationBarHidden:",
      "contents": "setNavigationBarHidden(${1:BOOL navigationBarHidden})"
    },
    {
      "trigger": "setNavigationBarHidden:animated:",
      "contents": "setNavigationBarHidden(${1:BOOL hidden}, animated:${2:BOOL animated})"
    },
    {
      "trigger": "setNeedsDisplayInMapRect:",
      "contents": "setNeedsDisplayInMapRect(${1:MKMapRect mapRect})"
    },
    {
      "trigger": "setNeedsDisplayInMapRect:zoomScale:",
      "contents": "setNeedsDisplayInMapRect(${1:MKMapRect mapRect}, zoomScale:${2:MKZoomScale zoomScale})"
    },
    {
      "trigger": "setNeedsDisplayInRect:",
      "contents": "setNeedsDisplayInRect(${1:CGRect rect})"
    },
    {
      "trigger": "setNeedsDisplayInRect:",
      "contents": "setNeedsDisplayInRect(${1:CGRect r})"
    },
    {
      "trigger": "setNeedsDisplayOnBoundsChange:",
      "contents": "setNeedsDisplayOnBoundsChange(${1:BOOL needsDisplayOnBoundsChange})"
    },
    {
      "trigger": "setNegativeFormat:",
      "contents": "setNegativeFormat(${1:NSString* format})"
    },
    {
      "trigger": "setNegativeInfinitySymbol:",
      "contents": "setNegativeInfinitySymbol(${1:NSString* string})"
    },
    {
      "trigger": "setNegativePrefix:",
      "contents": "setNegativePrefix(${1:NSString* string})"
    },
    {
      "trigger": "setNegativeSuffix:",
      "contents": "setNegativeSuffix(${1:NSString* string})"
    },
    {
      "trigger": "setNetworkActivityIndicatorVisible:",
      "contents": "setNetworkActivityIndicatorVisible(${1:BOOL networkActivityIndicatorVisible})"
    },
    {
      "trigger": "setNetworkServiceType:",
      "contents": "setNetworkServiceType(${1:NSURLRequestNetworkServiceType networkServiceType})"
    },
    {
      "trigger": "setNewPersonViewDelegate:",
      "contents": "setNewPersonViewDelegate(${1:id newPersonViewDelegate})"
    },
    {
      "trigger": "setNewsstandIconImage:",
      "contents": "setNewsstandIconImage(${1:UIImage* image})"
    },
    {
      "trigger": "setNilSymbol:",
      "contents": "setNilSymbol(${1:NSString* string})"
    },
    {
      "trigger": "setNilValueForKey:",
      "contents": "setNilValueForKey(${1:NSString* key})"
    },
    {
      "trigger": "setNotANumberSymbol:",
      "contents": "setNotANumberSymbol(${1:NSString* string})"
    },
    {
      "trigger": "setNotes:",
      "contents": "setNotes(${1:NSString* notes})"
    },
    {
      "trigger": "setNotificationBatchingInterval:",
      "contents": "setNotificationBatchingInterval(${1:NSTimeInterval ti})"
    },
    {
      "trigger": "setNotifyValue:forCharacteristic:",
      "contents": "setNotifyValue(${1:BOOL notifyValue}, forCharacteristic:${2:CBCharacteristic* characteristic})"
    },
    {
      "trigger": "setNowPlayingInfo:",
      "contents": "setNowPlayingInfo(${1:NSDictionary* nowPlayingInfo})"
    },
    {
      "trigger": "setNowPlayingItem:",
      "contents": "setNowPlayingItem(${1:MPMediaItem* nowPlayingItem})"
    },
    {
      "trigger": "setNumberOfLines:",
      "contents": "setNumberOfLines(${1:NSInteger numberOfLines})"
    },
    {
      "trigger": "setNumberOfLoops:",
      "contents": "setNumberOfLoops(${1:NSInteger numberOfLoops})"
    },
    {
      "trigger": "setNumberOfPages:",
      "contents": "setNumberOfPages(${1:NSInteger numberOfPages})"
    },
    {
      "trigger": "setNumberOfTapsRequired:",
      "contents": "setNumberOfTapsRequired(${1:NSInteger numberOfTapsRequired})"
    },
    {
      "trigger": "setNumberOfTapsRequired:",
      "contents": "setNumberOfTapsRequired(${1:NSUInteger numberOfTapsRequired})"
    },
    {
      "trigger": "setNumberOfTouchesRequired:",
      "contents": "setNumberOfTouchesRequired(${1:NSInteger numberOfTouchesRequired})"
    },
    {
      "trigger": "setNumberOfTouchesRequired:",
      "contents": "setNumberOfTouchesRequired(${1:NSUInteger numberOfTouchesRequired})"
    },
    {
      "trigger": "setNumberStyle:",
      "contents": "setNumberStyle(${1:NSNumberFormatterStyle style})"
    },
    {
      "trigger": "setObject:atIndex:",
      "contents": "setObject(${1:id obj}, atIndex:${2:NSUInteger idx})"
    },
    {
      "trigger": "setObject:forKey:",
      "contents": "setObject(${1:id anObject}, forKey:${2:NSString* aKey})"
    },
    {
      "trigger": "setObject:forKey:",
      "contents": "setObject(${1:id anObject}, forKey:${2:id aKey})"
    },
    {
      "trigger": "setObject:forKey:",
      "contents": "setObject(${1:id obj}, forKey:${2:id key})"
    },
    {
      "trigger": "setObject:forKey:",
      "contents": "setObject(${1:id value}, forKey:${2:NSString* defaultName})"
    },
    {
      "trigger": "setObject:forKey:cost:",
      "contents": "setObject(${1:id obj}, forKey:${2:id key}, cost:${3:NSUInteger g})"
    },
    {
      "trigger": "setObjectZone:",
      "contents": "setObjectZone(${1:NSZone* zone})"
    },
    {
      "trigger": "setObservationInfo:",
      "contents": "setObservationInfo(${1:id inObservationInfo})"
    },
    {
      "trigger": "setObservationInfo:",
      "contents": "setObservationInfo(${1:void* observationInfo})"
    },
    {
      "trigger": "setOn:",
      "contents": "setOn(${1:BOOL on})"
    },
    {
      "trigger": "setOn:animated:",
      "contents": "setOn(${1:BOOL on}, animated:${2:BOOL animated})"
    },
    {
      "trigger": "setOnTintColor:",
      "contents": "setOnTintColor(${1:UIColor* onTintColor})"
    },
    {
      "trigger": "setOpacity:",
      "contents": "setOpacity(${1:float opacity})"
    },
    {
      "trigger": "setOpacity:atTime:",
      "contents": "setOpacity(${1:float opacity}, atTime:${2:CMTime time})"
    },
    {
      "trigger": "setOpacityRampFromStartOpacity:toEndOpacity:timeRange:",
      "contents": "setOpacityRampFromStartOpacity(${1:float startOpacity}, toEndOpacity:${2:float endOpacity}, timeRange:${3:CMTimeRange timeRange})"
    },
    {
      "trigger": "setOpaque:",
      "contents": "setOpaque(${1:BOOL cftype})"
    },
    {
      "trigger": "setOptional:",
      "contents": "setOptional(${1:BOOL flag})"
    },
    {
      "trigger": "setOrdered:",
      "contents": "setOrdered(${1:BOOL flag})"
    },
    {
      "trigger": "setOrientation:",
      "contents": "setOrientation(${1:AVCaptureVideoOrientation orientation})"
    },
    {
      "trigger": "setOrientation:",
      "contents": "setOrientation(${1:UIPrintInfoOrientation orientation})"
    },
    {
      "trigger": "setOrthography:range:",
      "contents": "setOrthography(${1:NSOrthography* orthography}, range:${2:NSRange range})"
    },
    {
      "trigger": "setOutputFileType:",
      "contents": "setOutputFileType(${1:NSString* outputFileType})"
    },
    {
      "trigger": "setOutputFormat:",
      "contents": "setOutputFormat(${1:NSPropertyListFormat format})"
    },
    {
      "trigger": "setOutputMeteringEnabled:",
      "contents": "setOutputMeteringEnabled(${1:BOOL outputMeteringEnabled})"
    },
    {
      "trigger": "setOutputSettings:",
      "contents": "setOutputSettings(${1:NSDictionary* outputSettings})"
    },
    {
      "trigger": "setOutputType:",
      "contents": "setOutputType(${1:UIPrintInfoOutputType outputType})"
    },
    {
      "trigger": "setOutputURL:",
      "contents": "setOutputURL(${1:NSURL* outputURL})"
    },
    {
      "trigger": "setOverscanCompensation:",
      "contents": "setOverscanCompensation(${1:UIScreenOverscanCompensation overscanCompensation})"
    },
    {
      "trigger": "setPMSymbol:",
      "contents": "setPMSymbol(${1:NSString* string})"
    },
    {
      "trigger": "setPaddingCharacter:",
      "contents": "setPaddingCharacter(${1:NSString* string})"
    },
    {
      "trigger": "setPaddingPosition:",
      "contents": "setPaddingPosition(${1:NSNumberFormatterPadPosition position})"
    },
    {
      "trigger": "setPagingEnabled:",
      "contents": "setPagingEnabled(${1:BOOL pagingEnabled})"
    },
    {
      "trigger": "setPan:",
      "contents": "setPan(${1:float pan})"
    },
    {
      "trigger": "setParentContext:",
      "contents": "setParentContext(${1:NSManagedObjectContext* parent})"
    },
    {
      "trigger": "setParentGroup:",
      "contents": "setParentGroup(${1:ABRecordRef parentGroup})"
    },
    {
      "trigger": "setPartialStringValidationEnabled:",
      "contents": "setPartialStringValidationEnabled(${1:BOOL b})"
    },
    {
      "trigger": "setPassthroughViews:",
      "contents": "setPassthroughViews(${1:NSArray* passthroughViews})"
    },
    {
      "trigger": "setPath:",
      "contents": "setPath(${1:CGPathRef path})"
    },
    {
      "trigger": "setPauseOnWillResignActive:",
      "contents": "setPauseOnWillResignActive(${1:BOOL pauseOnWillResignActive})"
    },
    {
      "trigger": "setPaused:",
      "contents": "setPaused(${1:BOOL paused})"
    },
    {
      "trigger": "setPeoplePickerDelegate:",
      "contents": "setPeoplePickerDelegate(${1:id peoplePickerDelegate})"
    },
    {
      "trigger": "setPerMillSymbol:",
      "contents": "setPerMillSymbol(${1:NSString* string})"
    },
    {
      "trigger": "setPercentComplete:",
      "contents": "setPercentComplete(${1:double percentComplete})"
    },
    {
      "trigger": "setPercentSymbol:",
      "contents": "setPercentSymbol(${1:NSString* string})"
    },
    {
      "trigger": "setPersistent:",
      "contents": "setPersistent(${1:BOOL persistent})"
    },
    {
      "trigger": "setPersistentDomain:forName:",
      "contents": "setPersistentDomain(${1:NSDictionary* domain}, forName:${2:NSString* domainName})"
    },
    {
      "trigger": "setPersistentStoreCoordinator:",
      "contents": "setPersistentStoreCoordinator(${1:NSPersistentStoreCoordinator* coordinator})"
    },
    {
      "trigger": "setPersistentStoreOptions:",
      "contents": "setPersistentStoreOptions(${1:NSDictionary* persistentStoreOptions})"
    },
    {
      "trigger": "setPersonViewDelegate:",
      "contents": "setPersonViewDelegate(${1:id personViewDelegate})"
    },
    {
      "trigger": "setPinColor:",
      "contents": "setPinColor(${1:MKPinAnnotationColor pinColor})"
    },
    {
      "trigger": "setPlaceholder:",
      "contents": "setPlaceholder(${1:NSString* placeholder})"
    },
    {
      "trigger": "setPlayer:",
      "contents": "setPlayer(${1:AVPlayer* player})"
    },
    {
      "trigger": "setPlayerAttributes:",
      "contents": "setPlayerAttributes(${1:uint32_t playerAttributes})"
    },
    {
      "trigger": "setPlayerGroup:",
      "contents": "setPlayerGroup(${1:NSUInteger playerGroup})"
    },
    {
      "trigger": "setPlayerItem:",
      "contents": "setPlayerItem(${1:AVPlayerItem* playerItem})"
    },
    {
      "trigger": "setPlayerScope:",
      "contents": "setPlayerScope(${1:GKLeaderboardPlayerScope playerScope})"
    },
    {
      "trigger": "setPlayerStateUpdateHandler:",
      "contents": "setPlayerStateUpdateHandler(${1:void (^)(NSString *, GKVoiceChatPlayerState) playerStateUpdateHandler})"
    },
    {
      "trigger": "setPlayersToInvite:",
      "contents": "setPlayersToInvite(${1:NSArray* playersToInvite})"
    },
    {
      "trigger": "setPlusSign:",
      "contents": "setPlusSign(${1:NSString* string})"
    },
    {
      "trigger": "setPopoverBackgroundViewClass:",
      "contents": "setPopoverBackgroundViewClass(${1:Class popoverBackgroundViewClass})"
    },
    {
      "trigger": "setPopoverContentSize:",
      "contents": "setPopoverContentSize(${1:CGSize popoverContentSize})"
    },
    {
      "trigger": "setPopoverContentSize:animated:",
      "contents": "setPopoverContentSize(${1:CGSize size}, animated:${2:BOOL animated})"
    },
    {
      "trigger": "setPopoverLayoutMargins:",
      "contents": "setPopoverLayoutMargins(${1:UIEdgeInsets popoverLayoutMargins})"
    },
    {
      "trigger": "setPosition:",
      "contents": "setPosition(${1:CGPoint position})"
    },
    {
      "trigger": "setPosition:",
      "contents": "setPosition(${1:GLKVector4 position})"
    },
    {
      "trigger": "setPositionAdjustment:forSearchBarIcon:",
      "contents": "setPositionAdjustment(${1:UIOffset adjustment}, forSearchBarIcon:${2:UISearchBarIcon icon})"
    },
    {
      "trigger": "setPositiveFormat:",
      "contents": "setPositiveFormat(${1:NSString* format})"
    },
    {
      "trigger": "setPositiveInfinitySymbol:",
      "contents": "setPositiveInfinitySymbol(${1:NSString* string})"
    },
    {
      "trigger": "setPositivePrefix:",
      "contents": "setPositivePrefix(${1:NSString* string})"
    },
    {
      "trigger": "setPositiveSuffix:",
      "contents": "setPositiveSuffix(${1:NSString* string})"
    },
    {
      "trigger": "setPossibleTitles:",
      "contents": "setPossibleTitles(${1:NSSet* possibleTitles})"
    },
    {
      "trigger": "setPredicate:",
      "contents": "setPredicate(${1:NSPredicate* predicate})"
    },
    {
      "trigger": "setPreferredFilename:",
      "contents": "setPreferredFilename(${1:NSString* fileName})"
    },
    {
      "trigger": "setPreferredFramesPerSecond:",
      "contents": "setPreferredFramesPerSecond(${1:NSInteger preferredFramesPerSecond})"
    },
    {
      "trigger": "setPreferredHardwareSampleRate:error:",
      "contents": "setPreferredHardwareSampleRate(${1:double sampleRate}, error:${2:NSError** outError})"
    },
    {
      "trigger": "setPreferredIOBufferDuration:error:",
      "contents": "setPreferredIOBufferDuration(${1:NSTimeInterval duration}, error:${2:NSError** outError})"
    },
    {
      "trigger": "setPreferredTransform:",
      "contents": "setPreferredTransform(${1:CGAffineTransform preferredTransform})"
    },
    {
      "trigger": "setPreferredVolume:",
      "contents": "setPreferredVolume(${1:float preferredVolume})"
    },
    {
      "trigger": "setPresentsWithGesture:",
      "contents": "setPresentsWithGesture(${1:BOOL presentsWithGesture})"
    },
    {
      "trigger": "setPreservesDepth:",
      "contents": "setPreservesDepth(${1:BOOL preservesDepth})"
    },
    {
      "trigger": "setPrimitiveValue:forKey:",
      "contents": "setPrimitiveValue(${1:id value}, forKey:${2:NSString* key})"
    },
    {
      "trigger": "setPrintFormatter:",
      "contents": "setPrintFormatter(${1:UIPrintFormatter* printFormatter})"
    },
    {
      "trigger": "setPrintFormatters:",
      "contents": "setPrintFormatters(${1:NSArray* printFormatters})"
    },
    {
      "trigger": "setPrintInfo:",
      "contents": "setPrintInfo(${1:UIPrintInfo* printInfo})"
    },
    {
      "trigger": "setPrintPageRenderer:",
      "contents": "setPrintPageRenderer(${1:UIPrintPageRenderer* printPageRenderer})"
    },
    {
      "trigger": "setPrinterID:",
      "contents": "setPrinterID(${1:NSString* printerID})"
    },
    {
      "trigger": "setPrintingItem:",
      "contents": "setPrintingItem(${1:id printingItem})"
    },
    {
      "trigger": "setPrintingItems:",
      "contents": "setPrintingItems(${1:NSArray* printingItems})"
    },
    {
      "trigger": "setProcessName:",
      "contents": "setProcessName(${1:NSString* newName})"
    },
    {
      "trigger": "setProductIdentifier:",
      "contents": "setProductIdentifier(${1:NSString* productIdentifier})"
    },
    {
      "trigger": "setProgress:",
      "contents": "setProgress(${1:float progress})"
    },
    {
      "trigger": "setProgress:animated:",
      "contents": "setProgress(${1:float progress}, animated:${2:BOOL animated})"
    },
    {
      "trigger": "setProgressImage:",
      "contents": "setProgressImage(${1:UIImage* progressImage})"
    },
    {
      "trigger": "setProgressTintColor:",
      "contents": "setProgressTintColor(${1:UIColor* progressTintColor})"
    },
    {
      "trigger": "setProgressViewStyle:",
      "contents": "setProgressViewStyle(${1:UIProgressViewStyle progressViewStyle})"
    },
    {
      "trigger": "setProjectionMatrix:",
      "contents": "setProjectionMatrix(${1:GLKMatrix4 projectionMatrix})"
    },
    {
      "trigger": "setPrompt:",
      "contents": "setPrompt(${1:NSString* prompt})"
    },
    {
      "trigger": "setPropagatesDeletesAtEndOfEvent:",
      "contents": "setPropagatesDeletesAtEndOfEvent(${1:BOOL flag})"
    },
    {
      "trigger": "setProperties:",
      "contents": "setProperties(${1:NSArray* properties})"
    },
    {
      "trigger": "setPropertiesToFetch:",
      "contents": "setPropertiesToFetch(${1:NSArray* values})"
    },
    {
      "trigger": "setPropertiesToGroupBy:",
      "contents": "setPropertiesToGroupBy(${1:NSArray* array})"
    },
    {
      "trigger": "setProperty:forKey:",
      "contents": "setProperty(${1:id property}, forKey:${2:NSString* key})"
    },
    {
      "trigger": "setPropertyCache:",
      "contents": "setPropertyCache(${1:NSMutableDictionary* propertyCache})"
    },
    {
      "trigger": "setProvidesPresentationContextTransitionStyle:",
      "contents": "setProvidesPresentationContextTransitionStyle(${1:BOOL providesPresentationContextTransitionStyle})"
    },
    {
      "trigger": "setProximityMonitoringEnabled:",
      "contents": "setProximityMonitoringEnabled(${1:BOOL proximityMonitoringEnabled})"
    },
    {
      "trigger": "setProximitySensingEnabled:",
      "contents": "setProximitySensingEnabled(${1:BOOL proximitySensingEnabled})"
    },
    {
      "trigger": "setPurpose:",
      "contents": "setPurpose(${1:NSString* purpose})"
    },
    {
      "trigger": "setQuadraticAttenuation:",
      "contents": "setQuadraticAttenuation(${1:GLfloat quadraticAttenuation})"
    },
    {
      "trigger": "setQuantity:",
      "contents": "setQuantity(${1:NSInteger quantity})"
    },
    {
      "trigger": "setQuarter:",
      "contents": "setQuarter(${1:NSInteger v})"
    },
    {
      "trigger": "setQuarterSymbols:",
      "contents": "setQuarterSymbols(${1:NSArray* array})"
    },
    {
      "trigger": "setQueuePriority:",
      "contents": "setQueuePriority(${1:NSOperationQueuePriority p})"
    },
    {
      "trigger": "setQueueWithItemCollection:",
      "contents": "setQueueWithItemCollection(${1:MPMediaItemCollection* itemCollection})"
    },
    {
      "trigger": "setQueueWithQuery:",
      "contents": "setQueueWithQuery(${1:MPMediaQuery* query})"
    },
    {
      "trigger": "setRange:",
      "contents": "setRange(${1:NSRange range})"
    },
    {
      "trigger": "setRasterizationScale:",
      "contents": "setRasterizationScale(${1:CGFloat rasterizationScale})"
    },
    {
      "trigger": "setRate:",
      "contents": "setRate(${1:float rate})"
    },
    {
      "trigger": "setReadOnly:",
      "contents": "setReadOnly(${1:BOOL flag})"
    },
    {
      "trigger": "setReadabilityHandler:",
      "contents": "setReadabilityHandler(${1:void (^)(NSFileHandle *) readabilityHandler})"
    },
    {
      "trigger": "setRecipients:",
      "contents": "setRecipients(${1:NSArray* recipients})"
    },
    {
      "trigger": "setRecurrenceEnd:",
      "contents": "setRecurrenceEnd(${1:EKRecurrenceEnd* recurrenceEnd})"
    },
    {
      "trigger": "setRecurrenceRule:",
      "contents": "setRecurrenceRule(${1:EKRecurrenceRule* recurrenceRule})"
    },
    {
      "trigger": "setRecurrenceRules:",
      "contents": "setRecurrenceRules(${1:NSArray* recurrenceRules})"
    },
    {
      "trigger": "setRedRange:",
      "contents": "setRedRange(${1:float redRange})"
    },
    {
      "trigger": "setRedSpeed:",
      "contents": "setRedSpeed(${1:float redSpeed})"
    },
    {
      "trigger": "setRegion:",
      "contents": "setRegion(${1:MKCoordinateRegion region})"
    },
    {
      "trigger": "setRegion:animated:",
      "contents": "setRegion(${1:MKCoordinateRegion region}, animated:${2:BOOL animated})"
    },
    {
      "trigger": "setRelationshipKeyPathsForPrefetching:",
      "contents": "setRelationshipKeyPathsForPrefetching(${1:NSArray* keys})"
    },
    {
      "trigger": "setRelationshipMappings:",
      "contents": "setRelationshipMappings(${1:NSArray* mappings})"
    },
    {
      "trigger": "setRelativeOffset:",
      "contents": "setRelativeOffset(${1:NSTimeInterval relativeOffset})"
    },
    {
      "trigger": "setRemoteParticipantVolume:",
      "contents": "setRemoteParticipantVolume(${1:float remoteParticipantVolume})"
    },
    {
      "trigger": "setRemovedOnCompletion:",
      "contents": "setRemovedOnCompletion(${1:BOOL removedOnCompletion})"
    },
    {
      "trigger": "setRenamingIdentifier:",
      "contents": "setRenamingIdentifier(${1:NSString* value})"
    },
    {
      "trigger": "setRenderMode:",
      "contents": "setRenderMode(${1:NSString* renderMode})"
    },
    {
      "trigger": "setRenderScale:",
      "contents": "setRenderScale(${1:float renderScale})"
    },
    {
      "trigger": "setRenderSize:",
      "contents": "setRenderSize(${1:CGSize renderSize})"
    },
    {
      "trigger": "setRepeatCalendar:",
      "contents": "setRepeatCalendar(${1:NSCalendar* repeatCalendar})"
    },
    {
      "trigger": "setRepeatCount:",
      "contents": "setRepeatCount(${1:float repeatCount})"
    },
    {
      "trigger": "setRepeatDuration:",
      "contents": "setRepeatDuration(${1:CFTimeInterval repeatDuration})"
    },
    {
      "trigger": "setRepeatInterval:",
      "contents": "setRepeatInterval(${1:NSCalendarUnit repeatInterval})"
    },
    {
      "trigger": "setRepeatMode:",
      "contents": "setRepeatMode(${1:MPMovieRepeatMode repeatMode})"
    },
    {
      "trigger": "setRepeatMode:",
      "contents": "setRepeatMode(${1:MPMusicRepeatMode repeatMode})"
    },
    {
      "trigger": "setRequestData:",
      "contents": "setRequestData(${1:NSData* requestData})"
    },
    {
      "trigger": "setRequestedTimeToleranceAfter:",
      "contents": "setRequestedTimeToleranceAfter(${1:CMTime requestedTimeToleranceAfter})"
    },
    {
      "trigger": "setRequestedTimeToleranceBefore:",
      "contents": "setRequestedTimeToleranceBefore(${1:CMTime requestedTimeToleranceBefore})"
    },
    {
      "trigger": "setRequiredContentSizeIdentifiers:",
      "contents": "setRequiredContentSizeIdentifiers(${1:NSSet* requiredContentSizeIdentifiers})"
    },
    {
      "trigger": "setResolved:",
      "contents": "setResolved(${1:BOOL resolved})"
    },
    {
      "trigger": "setResourceValue:forKey:error:",
      "contents": "setResourceValue(${1:id value}, forKey:${2:NSString* key}, error:${3:NSError** error})"
    },
    {
      "trigger": "setResourceValues:error:",
      "contents": "setResourceValues(${1:NSDictionary* keyedValues}, error:${2:NSError** error})"
    },
    {
      "trigger": "setResultType:",
      "contents": "setResultType(${1:NSFetchRequestResultType type})"
    },
    {
      "trigger": "setResumeOnDidBecomeActive:",
      "contents": "setResumeOnDidBecomeActive(${1:BOOL resumeOnDidBecomeActive})"
    },
    {
      "trigger": "setRetainsRegisteredObjects:",
      "contents": "setRetainsRegisteredObjects(${1:BOOL flag})"
    },
    {
      "trigger": "setReturnKeyType:",
      "contents": "setReturnKeyType(${1:UIReturnKeyType returnKeyType})"
    },
    {
      "trigger": "setReturnValue:",
      "contents": "setReturnValue(${1:void* retLoc})"
    },
    {
      "trigger": "setReturnsDistinctResults:",
      "contents": "setReturnsDistinctResults(${1:BOOL flag})"
    },
    {
      "trigger": "setReturnsObjectsAsFaults:",
      "contents": "setReturnsObjectsAsFaults(${1:BOOL yesNo})"
    },
    {
      "trigger": "setReversePlaybackEndTime:",
      "contents": "setReversePlaybackEndTime(${1:CMTime reversePlaybackEndTime})"
    },
    {
      "trigger": "setReversesTitleShadowWhenHighlighted:",
      "contents": "setReversesTitleShadowWhenHighlighted(${1:BOOL reversesTitleShadowWhenHighlighted})"
    },
    {
      "trigger": "setRightBarButtonItem:",
      "contents": "setRightBarButtonItem(${1:UIBarButtonItem* rightBarButtonItem})"
    },
    {
      "trigger": "setRightBarButtonItem:animated:",
      "contents": "setRightBarButtonItem(${1:UIBarButtonItem* item}, animated:${2:BOOL animated})"
    },
    {
      "trigger": "setRightBarButtonItems:",
      "contents": "setRightBarButtonItems(${1:NSArray* rightBarButtonItems})"
    },
    {
      "trigger": "setRightBarButtonItems:animated:",
      "contents": "setRightBarButtonItems(${1:NSArray* items}, animated:${2:BOOL animated})"
    },
    {
      "trigger": "setRightCalloutAccessoryView:",
      "contents": "setRightCalloutAccessoryView(${1:UIView* rightCalloutAccessoryView})"
    },
    {
      "trigger": "setRightView:",
      "contents": "setRightView(${1:UIView* rightView})"
    },
    {
      "trigger": "setRightViewMode:",
      "contents": "setRightViewMode(${1:UITextFieldViewMode rightViewMode})"
    },
    {
      "trigger": "setRootViewController:",
      "contents": "setRootViewController(${1:UIViewController* rootViewController})"
    },
    {
      "trigger": "setRotation:",
      "contents": "setRotation(${1:CGFloat rotation})"
    },
    {
      "trigger": "setRotationMode:",
      "contents": "setRotationMode(${1:NSString* rotationMode})"
    },
    {
      "trigger": "setRoundingIncrement:",
      "contents": "setRoundingIncrement(${1:NSNumber* number})"
    },
    {
      "trigger": "setRoundingMode:",
      "contents": "setRoundingMode(${1:NSNumberFormatterRoundingMode mode})"
    },
    {
      "trigger": "setRowHeight:",
      "contents": "setRowHeight(${1:CGFloat rowHeight})"
    },
    {
      "trigger": "setRunLoopModes:",
      "contents": "setRunLoopModes(${1:NSArray* runLoopModes})"
    },
    {
      "trigger": "setSampleBufferDelegate:queue:",
      "contents": "setSampleBufferDelegate(${1:id sampleBufferDelegate}, queue:${2:dispatch_queue_t sampleBufferCallbackQueue})"
    },
    {
      "trigger": "setScale:",
      "contents": "setScale(${1:CGFloat scale})"
    },
    {
      "trigger": "setScale:",
      "contents": "setScale(${1:float scale})"
    },
    {
      "trigger": "setScaleRange:",
      "contents": "setScaleRange(${1:CGFloat scaleRange})"
    },
    {
      "trigger": "setScaleSpeed:",
      "contents": "setScaleSpeed(${1:CGFloat scaleSpeed})"
    },
    {
      "trigger": "setScalesPageToFit:",
      "contents": "setScalesPageToFit(${1:BOOL scalesPageToFit})"
    },
    {
      "trigger": "setScalingMode:",
      "contents": "setScalingMode(${1:MPMovieScalingMode scalingMode})"
    },
    {
      "trigger": "setScanLocation:",
      "contents": "setScanLocation(${1:NSUInteger pos})"
    },
    {
      "trigger": "setScheduledLocalNotifications:",
      "contents": "setScheduledLocalNotifications(${1:NSArray* scheduledLocalNotifications})"
    },
    {
      "trigger": "setScopeBarBackgroundImage:",
      "contents": "setScopeBarBackgroundImage(${1:UIImage* scopeBarBackgroundImage})"
    },
    {
      "trigger": "setScopeBarButtonBackgroundImage:forState:",
      "contents": "setScopeBarButtonBackgroundImage(${1:UIImage* backgroundImage}, forState:${2:UIControlState state})"
    },
    {
      "trigger": "setScopeBarButtonDividerImage:forLeftSegmentState:rightSegmentState:",
      "contents": "setScopeBarButtonDividerImage(${1:UIImage* dividerImage}, forLeftSegmentState:${2:UIControlState leftState}, rightSegmentState:${3:UIControlState rightState})"
    },
    {
      "trigger": "setScopeBarButtonTitleTextAttributes:forState:",
      "contents": "setScopeBarButtonTitleTextAttributes(${1:NSDictionary* attributes}, forState:${2:UIControlState state})"
    },
    {
      "trigger": "setScopeButtonTitles:",
      "contents": "setScopeButtonTitles(${1:NSArray* scopeButtonTitles})"
    },
    {
      "trigger": "setScreen:",
      "contents": "setScreen(${1:UIScreen* screen})"
    },
    {
      "trigger": "setScrollEnabled:",
      "contents": "setScrollEnabled(${1:BOOL scrollEnabled})"
    },
    {
      "trigger": "setScrollIndicatorInsets:",
      "contents": "setScrollIndicatorInsets(${1:UIEdgeInsets scrollIndicatorInsets})"
    },
    {
      "trigger": "setScrollMode:",
      "contents": "setScrollMode(${1:NSString* scrollMode})"
    },
    {
      "trigger": "setScrollsToTop:",
      "contents": "setScrollsToTop(${1:BOOL scrollsToTop})"
    },
    {
      "trigger": "setSearchFieldBackgroundImage:forState:",
      "contents": "setSearchFieldBackgroundImage(${1:UIImage* backgroundImage}, forState:${2:UIControlState state})"
    },
    {
      "trigger": "setSearchFieldBackgroundPositionAdjustment:",
      "contents": "setSearchFieldBackgroundPositionAdjustment(${1:UIOffset searchFieldBackgroundPositionAdjustment})"
    },
    {
      "trigger": "setSearchResultsButtonSelected:",
      "contents": "setSearchResultsButtonSelected(${1:BOOL searchResultsButtonSelected})"
    },
    {
      "trigger": "setSearchResultsDataSource:",
      "contents": "setSearchResultsDataSource(${1:id searchResultsDataSource})"
    },
    {
      "trigger": "setSearchResultsDelegate:",
      "contents": "setSearchResultsDelegate(${1:id searchResultsDelegate})"
    },
    {
      "trigger": "setSearchResultsTitle:",
      "contents": "setSearchResultsTitle(${1:NSString* searchResultsTitle})"
    },
    {
      "trigger": "setSearchScopes:",
      "contents": "setSearchScopes(${1:NSArray* scopes})"
    },
    {
      "trigger": "setSearchTextPositionAdjustment:",
      "contents": "setSearchTextPositionAdjustment(${1:UIOffset searchTextPositionAdjustment})"
    },
    {
      "trigger": "setSecond:",
      "contents": "setSecond(${1:NSInteger v})"
    },
    {
      "trigger": "setSecondaryGroupingSize:",
      "contents": "setSecondaryGroupingSize(${1:NSUInteger number})"
    },
    {
      "trigger": "setSectionFooterHeight:",
      "contents": "setSectionFooterHeight(${1:CGFloat sectionFooterHeight})"
    },
    {
      "trigger": "setSectionHeaderHeight:",
      "contents": "setSectionHeaderHeight(${1:CGFloat sectionHeaderHeight})"
    },
    {
      "trigger": "setSectionIndexMinimumDisplayRowCount:",
      "contents": "setSectionIndexMinimumDisplayRowCount(${1:NSInteger sectionIndexMinimumDisplayRowCount})"
    },
    {
      "trigger": "setSecureTextEntry:",
      "contents": "setSecureTextEntry(${1:BOOL secureTextEntry})"
    },
    {
      "trigger": "setSeed:",
      "contents": "setSeed(${1:unsigned int seed})"
    },
    {
      "trigger": "setSegmentedControlStyle:",
      "contents": "setSegmentedControlStyle(${1:UISegmentedControlStyle segmentedControlStyle})"
    },
    {
      "trigger": "setSegments:",
      "contents": "setSegments(${1:NSArray* segments})"
    },
    {
      "trigger": "setSelected:",
      "contents": "setSelected(${1:BOOL selected})"
    },
    {
      "trigger": "setSelected:animated:",
      "contents": "setSelected(${1:BOOL selected}, animated:${2:BOOL animated})"
    },
    {
      "trigger": "setSelectedAnnotations:",
      "contents": "setSelectedAnnotations(${1:NSArray* selectedAnnotations})"
    },
    {
      "trigger": "setSelectedBackgroundView:",
      "contents": "setSelectedBackgroundView(${1:UIView* selectedBackgroundView})"
    },
    {
      "trigger": "setSelectedCalendars:",
      "contents": "setSelectedCalendars(${1:NSSet* selectedCalendars})"
    },
    {
      "trigger": "setSelectedImage:",
      "contents": "setSelectedImage(${1:UIImage* selectedImage})"
    },
    {
      "trigger": "setSelectedImageTintColor:",
      "contents": "setSelectedImageTintColor(${1:UIColor* selectedImageTintColor})"
    },
    {
      "trigger": "setSelectedIndex:",
      "contents": "setSelectedIndex(${1:NSUInteger selectedIndex})"
    },
    {
      "trigger": "setSelectedItem:",
      "contents": "setSelectedItem(${1:UITabBarItem* selectedItem})"
    },
    {
      "trigger": "setSelectedRange:",
      "contents": "setSelectedRange(${1:NSRange selectedRange})"
    },
    {
      "trigger": "setSelectedScopeButtonIndex:",
      "contents": "setSelectedScopeButtonIndex(${1:NSInteger selectedScopeButtonIndex})"
    },
    {
      "trigger": "setSelectedSegmentIndex:",
      "contents": "setSelectedSegmentIndex(${1:NSInteger selectedSegmentIndex})"
    },
    {
      "trigger": "setSelectedTextColor:",
      "contents": "setSelectedTextColor(${1:UIColor* selectedTextColor})"
    },
    {
      "trigger": "setSelectedTextRange:",
      "contents": "setSelectedTextRange(${1:UITextRange* selectedTextRange})"
    },
    {
      "trigger": "setSelectedViewController:",
      "contents": "setSelectedViewController(${1:UIViewController* selectedViewController})"
    },
    {
      "trigger": "setSelectionAffinity:",
      "contents": "setSelectionAffinity(${1:UITextStorageDirection selectionAffinity})"
    },
    {
      "trigger": "setSelectionIndicatorImage:",
      "contents": "setSelectionIndicatorImage(${1:UIImage* selectionIndicatorImage})"
    },
    {
      "trigger": "setSelectionStyle:",
      "contents": "setSelectionStyle(${1:UITableViewCellSelectionStyle selectionStyle})"
    },
    {
      "trigger": "setSelector:",
      "contents": "setSelector(${1:SEL selector})"
    },
    {
      "trigger": "setSeparatorColor:",
      "contents": "setSeparatorColor(${1:UIColor* separatorColor})"
    },
    {
      "trigger": "setSeparatorStyle:",
      "contents": "setSeparatorStyle(${1:UITableViewCellSeparatorStyle separatorStyle})"
    },
    {
      "trigger": "setSession:",
      "contents": "setSession(${1:AVCaptureSession* session})"
    },
    {
      "trigger": "setSessionPreset:",
      "contents": "setSessionPreset(${1:NSString* sessionPreset})"
    },
    {
      "trigger": "setSet:",
      "contents": "setSet(${1:NSSet* otherSet})"
    },
    {
      "trigger": "setShadowColor:",
      "contents": "setShadowColor(${1:CGColorRef shadowColor})"
    },
    {
      "trigger": "setShadowColor:",
      "contents": "setShadowColor(${1:UIColor* shadowColor})"
    },
    {
      "trigger": "setShadowOffset:",
      "contents": "setShadowOffset(${1:CGSize shadowOffset})"
    },
    {
      "trigger": "setShadowOpacity:",
      "contents": "setShadowOpacity(${1:float shadowOpacity})"
    },
    {
      "trigger": "setShadowPath:",
      "contents": "setShadowPath(${1:CGPathRef shadowPath})"
    },
    {
      "trigger": "setShadowRadius:",
      "contents": "setShadowRadius(${1:CGFloat shadowRadius})"
    },
    {
      "trigger": "setShininess:",
      "contents": "setShininess(${1:GLfloat shininess})"
    },
    {
      "trigger": "setShortMonthSymbols:",
      "contents": "setShortMonthSymbols(${1:NSArray* array})"
    },
    {
      "trigger": "setShortQuarterSymbols:",
      "contents": "setShortQuarterSymbols(${1:NSArray* array})"
    },
    {
      "trigger": "setShortStandaloneMonthSymbols:",
      "contents": "setShortStandaloneMonthSymbols(${1:NSArray* array})"
    },
    {
      "trigger": "setShortStandaloneQuarterSymbols:",
      "contents": "setShortStandaloneQuarterSymbols(${1:NSArray* array})"
    },
    {
      "trigger": "setShortStandaloneWeekdaySymbols:",
      "contents": "setShortStandaloneWeekdaySymbols(${1:NSArray* array})"
    },
    {
      "trigger": "setShortWeekdaySymbols:",
      "contents": "setShortWeekdaySymbols(${1:NSArray* array})"
    },
    {
      "trigger": "setShouldAutoplay:",
      "contents": "setShouldAutoplay(${1:BOOL shouldAutoplay})"
    },
    {
      "trigger": "setShouldIndentWhileEditing:",
      "contents": "setShouldIndentWhileEditing(${1:BOOL shouldIndentWhileEditing})"
    },
    {
      "trigger": "setShouldOptimizeForNetworkUse:",
      "contents": "setShouldOptimizeForNetworkUse(${1:BOOL shouldOptimizeForNetworkUse})"
    },
    {
      "trigger": "setShouldProcessNamespaces:",
      "contents": "setShouldProcessNamespaces(${1:BOOL shouldProcessNamespaces})"
    },
    {
      "trigger": "setShouldRasterize:",
      "contents": "setShouldRasterize(${1:BOOL shouldRasterize})"
    },
    {
      "trigger": "setShouldRefreshRefetchedObjects:",
      "contents": "setShouldRefreshRefetchedObjects(${1:BOOL flag})"
    },
    {
      "trigger": "setShouldReportNamespacePrefixes:",
      "contents": "setShouldReportNamespacePrefixes(${1:BOOL shouldReportNamespacePrefixes})"
    },
    {
      "trigger": "setShouldResolveExternalEntities:",
      "contents": "setShouldResolveExternalEntities(${1:BOOL shouldResolveExternalEntities})"
    },
    {
      "trigger": "setShouldSetDefaultLeaderboard:",
      "contents": "setShouldSetDefaultLeaderboard(${1:BOOL shouldSetDefaultLeaderboard})"
    },
    {
      "trigger": "setShouldShowLinkedPeople:",
      "contents": "setShouldShowLinkedPeople(${1:BOOL shouldShowLinkedPeople})"
    },
    {
      "trigger": "setShowExistingMatches:",
      "contents": "setShowExistingMatches(${1:BOOL showExistingMatches})"
    },
    {
      "trigger": "setShowsBookmarkButton:",
      "contents": "setShowsBookmarkButton(${1:BOOL showsBookmarkButton})"
    },
    {
      "trigger": "setShowsCameraControls:",
      "contents": "setShowsCameraControls(${1:BOOL showsCameraControls})"
    },
    {
      "trigger": "setShowsCancelButton:",
      "contents": "setShowsCancelButton(${1:BOOL showsCancelButton})"
    },
    {
      "trigger": "setShowsCancelButton:animated:",
      "contents": "setShowsCancelButton(${1:BOOL showsCancelButton}, animated:${2:BOOL animated})"
    },
    {
      "trigger": "setShowsCompletionBanner:",
      "contents": "setShowsCompletionBanner(${1:BOOL showsCompletionBanner})"
    },
    {
      "trigger": "setShowsDeviceMovementDisplay:",
      "contents": "setShowsDeviceMovementDisplay(${1:BOOL showsDeviceMovementDisplay})"
    },
    {
      "trigger": "setShowsDoneButton:",
      "contents": "setShowsDoneButton(${1:BOOL showsDoneButton})"
    },
    {
      "trigger": "setShowsHorizontalScrollIndicator:",
      "contents": "setShowsHorizontalScrollIndicator(${1:BOOL showsHorizontalScrollIndicator})"
    },
    {
      "trigger": "setShowsPageRange:",
      "contents": "setShowsPageRange(${1:BOOL showsPageRange})"
    },
    {
      "trigger": "setShowsReorderControl:",
      "contents": "setShowsReorderControl(${1:BOOL showsReorderControl})"
    },
    {
      "trigger": "setShowsRouteButton:",
      "contents": "setShowsRouteButton(${1:BOOL showsRouteButton})"
    },
    {
      "trigger": "setShowsScopeBar:",
      "contents": "setShowsScopeBar(${1:BOOL showsScopeBar})"
    },
    {
      "trigger": "setShowsSearchResultsButton:",
      "contents": "setShowsSearchResultsButton(${1:BOOL showsSearchResultsButton})"
    },
    {
      "trigger": "setShowsSelectionIndicator:",
      "contents": "setShowsSelectionIndicator(${1:BOOL showsSelectionIndicator})"
    },
    {
      "trigger": "setShowsTouchWhenHighlighted:",
      "contents": "setShowsTouchWhenHighlighted(${1:BOOL showsTouchWhenHighlighted})"
    },
    {
      "trigger": "setShowsUserLocation:",
      "contents": "setShowsUserLocation(${1:BOOL showsUserLocation})"
    },
    {
      "trigger": "setShowsVerticalScrollIndicator:",
      "contents": "setShowsVerticalScrollIndicator(${1:BOOL showsVerticalScrollIndicator})"
    },
    {
      "trigger": "setShowsVolumeSlider:",
      "contents": "setShowsVolumeSlider(${1:BOOL showsVolumeSlider})"
    },
    {
      "trigger": "setShuffleMode:",
      "contents": "setShuffleMode(${1:MPMusicShuffleMode shuffleMode})"
    },
    {
      "trigger": "setSortDescriptors:",
      "contents": "setSortDescriptors(${1:NSArray* descriptors})"
    },
    {
      "trigger": "setSortDescriptors:",
      "contents": "setSortDescriptors(${1:NSArray* sortDescriptors})"
    },
    {
      "trigger": "setSoundName:",
      "contents": "setSoundName(${1:NSString* soundName})"
    },
    {
      "trigger": "setSource:",
      "contents": "setSource(${1:EKSource* source})"
    },
    {
      "trigger": "setSourceEntityName:",
      "contents": "setSourceEntityName(${1:NSString* name})"
    },
    {
      "trigger": "setSourceEntityVersionHash:",
      "contents": "setSourceEntityVersionHash(${1:NSData* vhash})"
    },
    {
      "trigger": "setSourceExpression:",
      "contents": "setSourceExpression(${1:NSExpression* source})"
    },
    {
      "trigger": "setSourceType:",
      "contents": "setSourceType(${1:UIImagePickerControllerSourceType sourceType})"
    },
    {
      "trigger": "setSpecularColor:",
      "contents": "setSpecularColor(${1:GLKVector4 specularColor})"
    },
    {
      "trigger": "setSpeed:",
      "contents": "setSpeed(${1:float speed})"
    },
    {
      "trigger": "setSpellCheckingType:",
      "contents": "setSpellCheckingType(${1:UITextSpellCheckingType spellCheckingType})"
    },
    {
      "trigger": "setSpin:",
      "contents": "setSpin(${1:CGFloat spin})"
    },
    {
      "trigger": "setSpin:",
      "contents": "setSpin(${1:float spin})"
    },
    {
      "trigger": "setSpinRange:",
      "contents": "setSpinRange(${1:CGFloat spinRange})"
    },
    {
      "trigger": "setSpotCutoff:",
      "contents": "setSpotCutoff(${1:GLfloat spotCutoff})"
    },
    {
      "trigger": "setSpotDirection:",
      "contents": "setSpotDirection(${1:GLKVector3 spotDirection})"
    },
    {
      "trigger": "setSpotExponent:",
      "contents": "setSpotExponent(${1:GLfloat spotExponent})"
    },
    {
      "trigger": "setStackSize:",
      "contents": "setStackSize(${1:NSUInteger s})"
    },
    {
      "trigger": "setStalenessInterval:",
      "contents": "setStalenessInterval(${1:NSTimeInterval expiration})"
    },
    {
      "trigger": "setStandaloneMonthSymbols:",
      "contents": "setStandaloneMonthSymbols(${1:NSArray* array})"
    },
    {
      "trigger": "setStandaloneQuarterSymbols:",
      "contents": "setStandaloneQuarterSymbols(${1:NSArray* array})"
    },
    {
      "trigger": "setStandaloneWeekdaySymbols:",
      "contents": "setStandaloneWeekdaySymbols(${1:NSArray* array})"
    },
    {
      "trigger": "setStart:",
      "contents": "setStart(${1:GLfloat start})"
    },
    {
      "trigger": "setStartDate:",
      "contents": "setStartDate(${1:NSDate* startDate})"
    },
    {
      "trigger": "setStartPage:",
      "contents": "setStartPage(${1:NSInteger startPage})"
    },
    {
      "trigger": "setStartPoint:",
      "contents": "setStartPoint(${1:CGPoint startPoint})"
    },
    {
      "trigger": "setStartProgress:",
      "contents": "setStartProgress(${1:float startProgress})"
    },
    {
      "trigger": "setState:",
      "contents": "setState(${1:UIGestureRecognizerState state})"
    },
    {
      "trigger": "setStatusBarHidden:",
      "contents": "setStatusBarHidden(${1:BOOL statusBarHidden})"
    },
    {
      "trigger": "setStatusBarHidden:animated:",
      "contents": "setStatusBarHidden(${1:BOOL hidden}, animated:${2:BOOL animated})"
    },
    {
      "trigger": "setStatusBarHidden:withAnimation:",
      "contents": "setStatusBarHidden(${1:BOOL hidden}, withAnimation:${2:UIStatusBarAnimation animation})"
    },
    {
      "trigger": "setStatusBarOrientation:",
      "contents": "setStatusBarOrientation(${1:UIInterfaceOrientation statusBarOrientation})"
    },
    {
      "trigger": "setStatusBarOrientation:animated:",
      "contents": "setStatusBarOrientation(${1:UIInterfaceOrientation interfaceOrientation}, animated:${2:BOOL animated})"
    },
    {
      "trigger": "setStatusBarStyle:",
      "contents": "setStatusBarStyle(${1:UIStatusBarStyle statusBarStyle})"
    },
    {
      "trigger": "setStatusBarStyle:animated:",
      "contents": "setStatusBarStyle(${1:UIStatusBarStyle statusBarStyle}, animated:${2:BOOL animated})"
    },
    {
      "trigger": "setStepValue:",
      "contents": "setStepValue(${1:double stepValue})"
    },
    {
      "trigger": "setStoredInExternalRecord:",
      "contents": "setStoredInExternalRecord(${1:BOOL flag})"
    },
    {
      "trigger": "setString:",
      "contents": "setString(${1:NSString* aString})"
    },
    {
      "trigger": "setString:",
      "contents": "setString(${1:NSString* string})"
    },
    {
      "trigger": "setString:",
      "contents": "setString(${1:id string})"
    },
    {
      "trigger": "setString:forKey:",
      "contents": "setString(${1:NSString* aString}, forKey:${2:NSString* aKey})"
    },
    {
      "trigger": "setStrings:",
      "contents": "setStrings(${1:NSArray* strings})"
    },
    {
      "trigger": "setStrokeColor:",
      "contents": "setStrokeColor(${1:CGColorRef strokeColor})"
    },
    {
      "trigger": "setStrokeColor:",
      "contents": "setStrokeColor(${1:UIColor* strokeColor})"
    },
    {
      "trigger": "setStrokeEnd:",
      "contents": "setStrokeEnd(${1:CGFloat strokeEnd})"
    },
    {
      "trigger": "setStrokeStart:",
      "contents": "setStrokeStart(${1:CGFloat strokeStart})"
    },
    {
      "trigger": "setStyle:",
      "contents": "setStyle(${1:NSDictionary* style})"
    },
    {
      "trigger": "setStyle:",
      "contents": "setStyle(${1:UIBarButtonItemStyle style})"
    },
    {
      "trigger": "setSubentities:",
      "contents": "setSubentities(${1:NSArray* array})"
    },
    {
      "trigger": "setSubject:",
      "contents": "setSubject(${1:NSString* subject})"
    },
    {
      "trigger": "setSubjectAreaChangeMonitoringEnabled:",
      "contents": "setSubjectAreaChangeMonitoringEnabled(${1:BOOL subjectAreaChangeMonitoringEnabled})"
    },
    {
      "trigger": "setSublayerTransform:",
      "contents": "setSublayerTransform(${1:CATransform3D sublayerTransform})"
    },
    {
      "trigger": "setSublayers:",
      "contents": "setSublayers(${1:NSArray* sublayers})"
    },
    {
      "trigger": "setSubscriberCellularProviderDidUpdateNotifier:",
      "contents": "setSubscriberCellularProviderDidUpdateNotifier(${1:void (^)(CTCarrier *) subscriberCellularProviderDidUpdateNotifier})"
    },
    {
      "trigger": "setSubtitle:",
      "contents": "setSubtitle(${1:NSString* subtitle})"
    },
    {
      "trigger": "setSubtype:",
      "contents": "setSubtype(${1:NSString* subtype})"
    },
    {
      "trigger": "setSuspended:",
      "contents": "setSuspended(${1:BOOL b})"
    },
    {
      "trigger": "setTXTRecordData:",
      "contents": "setTXTRecordData(${1:NSData* recordData})"
    },
    {
      "trigger": "setTabBarItem:",
      "contents": "setTabBarItem(${1:UITabBarItem* tabBarItem})"
    },
    {
      "trigger": "setTableFooterView:",
      "contents": "setTableFooterView(${1:UIView* tableFooterView})"
    },
    {
      "trigger": "setTableHeaderView:",
      "contents": "setTableHeaderView(${1:UIView* tableHeaderView})"
    },
    {
      "trigger": "setTableView:",
      "contents": "setTableView(${1:UITableView* tableView})"
    },
    {
      "trigger": "setTag:",
      "contents": "setTag(${1:NSInteger tag})"
    },
    {
      "trigger": "setTarget:",
      "contents": "setTarget(${1:GLKTextureTarget target})"
    },
    {
      "trigger": "setTarget:",
      "contents": "setTarget(${1:id target})"
    },
    {
      "trigger": "setTargetRect:inView:",
      "contents": "setTargetRect(${1:CGRect targetRect}, inView:${2:UIView* targetView})"
    },
    {
      "trigger": "setTensionValues:",
      "contents": "setTensionValues(${1:NSArray* tensionValues})"
    },
    {
      "trigger": "setText:",
      "contents": "setText(${1:NSString* text})"
    },
    {
      "trigger": "setTextAlignment:",
      "contents": "setTextAlignment(${1:UITextAlignment textAlignment})"
    },
    {
      "trigger": "setTextAttributesForNegativeInfinity:",
      "contents": "setTextAttributesForNegativeInfinity(${1:NSDictionary* newAttributes})"
    },
    {
      "trigger": "setTextAttributesForNegativeValues:",
      "contents": "setTextAttributesForNegativeValues(${1:NSDictionary* newAttributes})"
    },
    {
      "trigger": "setTextAttributesForNil:",
      "contents": "setTextAttributesForNil(${1:NSDictionary* newAttributes})"
    },
    {
      "trigger": "setTextAttributesForNotANumber:",
      "contents": "setTextAttributesForNotANumber(${1:NSDictionary* newAttributes})"
    },
    {
      "trigger": "setTextAttributesForPositiveInfinity:",
      "contents": "setTextAttributesForPositiveInfinity(${1:NSDictionary* newAttributes})"
    },
    {
      "trigger": "setTextAttributesForPositiveValues:",
      "contents": "setTextAttributesForPositiveValues(${1:NSDictionary* newAttributes})"
    },
    {
      "trigger": "setTextAttributesForZero:",
      "contents": "setTextAttributesForZero(${1:NSDictionary* newAttributes})"
    },
    {
      "trigger": "setTextColor:",
      "contents": "setTextColor(${1:UIColor* textColor})"
    },
    {
      "trigger": "setTextureOrder:",
      "contents": "setTextureOrder(${1:NSArray* textureOrder})"
    },
    {
      "trigger": "setThreadPriority:",
      "contents": "setThreadPriority(${1:double p})"
    },
    {
      "trigger": "setThumbImage:forState:",
      "contents": "setThumbImage(${1:UIImage* image}, forState:${2:UIControlState state})"
    },
    {
      "trigger": "setThumbTintColor:",
      "contents": "setThumbTintColor(${1:UIColor* thumbTintColor})"
    },
    {
      "trigger": "setTileSize:",
      "contents": "setTileSize(${1:CGSize tileSize})"
    },
    {
      "trigger": "setTime:",
      "contents": "setTime(${1:CMTime time})"
    },
    {
      "trigger": "setTimeOffset:",
      "contents": "setTimeOffset(${1:CFTimeInterval timeOffset})"
    },
    {
      "trigger": "setTimeRange:",
      "contents": "setTimeRange(${1:CMTimeRange timeRange})"
    },
    {
      "trigger": "setTimeScope:",
      "contents": "setTimeScope(${1:GKLeaderboardTimeScope timeScope})"
    },
    {
      "trigger": "setTimeStyle:",
      "contents": "setTimeStyle(${1:NSDateFormatterStyle style})"
    },
    {
      "trigger": "setTimeZone:",
      "contents": "setTimeZone(${1:NSTimeZone* timeZone})"
    },
    {
      "trigger": "setTimeZone:",
      "contents": "setTimeZone(${1:NSTimeZone* tz})"
    },
    {
      "trigger": "setTimeoutInterval:",
      "contents": "setTimeoutInterval(${1:NSTimeInterval seconds})"
    },
    {
      "trigger": "setTimingFunction:",
      "contents": "setTimingFunction(${1:CAMediaTimingFunction* timingFunction})"
    },
    {
      "trigger": "setTimingFunctions:",
      "contents": "setTimingFunctions(${1:NSArray* timingFunctions})"
    },
    {
      "trigger": "setTintColor:",
      "contents": "setTintColor(${1:UIColor* tintColor})"
    },
    {
      "trigger": "setTitle:",
      "contents": "setTitle(${1:NSString* title})"
    },
    {
      "trigger": "setTitle:forSegmentAtIndex:",
      "contents": "setTitle(${1:NSString* title}, forSegmentAtIndex:${2:NSUInteger segment})"
    },
    {
      "trigger": "setTitle:forState:",
      "contents": "setTitle(${1:NSString* title}, forState:${2:UIControlState state})"
    },
    {
      "trigger": "setTitleColor:forState:",
      "contents": "setTitleColor(${1:UIColor* color}, forState:${2:UIControlState state})"
    },
    {
      "trigger": "setTitleEdgeInsets:",
      "contents": "setTitleEdgeInsets(${1:UIEdgeInsets titleEdgeInsets})"
    },
    {
      "trigger": "setTitlePositionAdjustment:",
      "contents": "setTitlePositionAdjustment(${1:UIOffset adjustment})"
    },
    {
      "trigger": "setTitlePositionAdjustment:forBarMetrics:",
      "contents": "setTitlePositionAdjustment(${1:UIOffset adjustment}, forBarMetrics:${2:UIBarMetrics barMetrics})"
    },
    {
      "trigger": "setTitleShadowColor:forState:",
      "contents": "setTitleShadowColor(${1:UIColor* color}, forState:${2:UIControlState state})"
    },
    {
      "trigger": "setTitleShadowOffset:",
      "contents": "setTitleShadowOffset(${1:CGSize titleShadowOffset})"
    },
    {
      "trigger": "setTitleTextAttributes:",
      "contents": "setTitleTextAttributes(${1:NSDictionary* titleTextAttributes})"
    },
    {
      "trigger": "setTitleTextAttributes:forState:",
      "contents": "setTitleTextAttributes(${1:NSDictionary* attributes}, forState:${2:UIControlState state})"
    },
    {
      "trigger": "setTitleVerticalPositionAdjustment:forBarMetrics:",
      "contents": "setTitleVerticalPositionAdjustment(${1:CGFloat adjustment}, forBarMetrics:${2:UIBarMetrics barMetrics})"
    },
    {
      "trigger": "setTitleView:",
      "contents": "setTitleView(${1:UIView* titleView})"
    },
    {
      "trigger": "setToRecipients:",
      "contents": "setToRecipients(${1:NSArray* toRecipients})"
    },
    {
      "trigger": "setToValue:",
      "contents": "setToValue(${1:id toValue})"
    },
    {
      "trigger": "setToolbarHidden:",
      "contents": "setToolbarHidden(${1:BOOL toolbarHidden})"
    },
    {
      "trigger": "setToolbarHidden:animated:",
      "contents": "setToolbarHidden(${1:BOOL hidden}, animated:${2:BOOL animated})"
    },
    {
      "trigger": "setToolbarItems:",
      "contents": "setToolbarItems(${1:NSArray* toolbarItems})"
    },
    {
      "trigger": "setToolbarItems:animated:",
      "contents": "setToolbarItems(${1:NSArray* toolbarItems}, animated:${2:BOOL animated})"
    },
    {
      "trigger": "setTorchMode:",
      "contents": "setTorchMode(${1:AVCaptureTorchMode torchMode})"
    },
    {
      "trigger": "setTotalCostLimit:",
      "contents": "setTotalCostLimit(${1:NSUInteger lim})"
    },
    {
      "trigger": "setTrackID:",
      "contents": "setTrackID(${1:CMPersistentTrackID trackID})"
    },
    {
      "trigger": "setTrackImage:",
      "contents": "setTrackImage(${1:UIImage* trackImage})"
    },
    {
      "trigger": "setTrackTintColor:",
      "contents": "setTrackTintColor(${1:UIColor* trackTintColor})"
    },
    {
      "trigger": "setTransform:",
      "contents": "setTransform(${1:CATransform3D transform})"
    },
    {
      "trigger": "setTransform:",
      "contents": "setTransform(${1:CGAffineTransform transform})"
    },
    {
      "trigger": "setTransform:",
      "contents": "setTransform(${1:GLKEffectPropertyTransform* transform})"
    },
    {
      "trigger": "setTransform:atTime:",
      "contents": "setTransform(${1:CGAffineTransform transform}, atTime:${2:CMTime time})"
    },
    {
      "trigger": "setTransformRampFromStartTransform:toEndTransform:timeRange:",
      "contents": "setTransformRampFromStartTransform(${1:CGAffineTransform startTransform}, toEndTransform:${2:CGAffineTransform endTransform}, timeRange:${3:CMTimeRange timeRange})"
    },
    {
      "trigger": "setTransient:",
      "contents": "setTransient(${1:BOOL flag})"
    },
    {
      "trigger": "setTranslation:inView:",
      "contents": "setTranslation(${1:CGPoint translation}, inView:${2:UIView* view})"
    },
    {
      "trigger": "setTranslucent:",
      "contents": "setTranslucent(${1:BOOL translucent})"
    },
    {
      "trigger": "setTruncationMode:",
      "contents": "setTruncationMode(${1:NSString* truncationMode})"
    },
    {
      "trigger": "setTurnBasedMatchmakerDelegate:",
      "contents": "setTurnBasedMatchmakerDelegate(${1:id turnBasedMatchmakerDelegate})"
    },
    {
      "trigger": "setTwoDigitStartDate:",
      "contents": "setTwoDigitStartDate(${1:NSDate* date})"
    },
    {
      "trigger": "setType:",
      "contents": "setType(${1:NSString* type})"
    },
    {
      "trigger": "setURL:",
      "contents": "setURL(${1:NSURL* URL})"
    },
    {
      "trigger": "setURL:",
      "contents": "setURL(${1:NSURL* url})"
    },
    {
      "trigger": "setURL:forKey:",
      "contents": "setURL(${1:NSURL* url}, forKey:${2:NSString* defaultName})"
    },
    {
      "trigger": "setURL:forPersistentStore:",
      "contents": "setURL(${1:NSURL* url}, forPersistentStore:${2:NSPersistentStore* store})"
    },
    {
      "trigger": "setURLs:",
      "contents": "setURLs(${1:NSArray* URLs})"
    },
    {
      "trigger": "setUTI:",
      "contents": "setUTI(${1:NSString* UTI})"
    },
    {
      "trigger": "setUbiquitous:itemAtURL:destinationURL:error:",
      "contents": "setUbiquitous(${1:BOOL flag}, itemAtURL:${2:NSURL* url}, destinationURL:${3:NSURL* destinationURL}, error:${4:NSError** error})"
    },
    {
      "trigger": "setUndoManager:",
      "contents": "setUndoManager(${1:NSUndoManager* undoManager})"
    },
    {
      "trigger": "setUnknownPersonViewDelegate:",
      "contents": "setUnknownPersonViewDelegate(${1:id unknownPersonViewDelegate})"
    },
    {
      "trigger": "setUpdateInterval:",
      "contents": "setUpdateInterval(${1:NSTimeInterval updateInterval})"
    },
    {
      "trigger": "setUseApplicationAudioSession:",
      "contents": "setUseApplicationAudioSession(${1:BOOL useApplicationAudioSession})"
    },
    {
      "trigger": "setUseConstantColor:",
      "contents": "setUseConstantColor(${1:GLboolean useConstantColor})"
    },
    {
      "trigger": "setUserInfo:",
      "contents": "setUserInfo(${1:NSDictionary* dictionary})"
    },
    {
      "trigger": "setUserInfo:",
      "contents": "setUserInfo(${1:NSDictionary* dict})"
    },
    {
      "trigger": "setUserInfo:",
      "contents": "setUserInfo(${1:NSDictionary* userInfo})"
    },
    {
      "trigger": "setUserInteractionEnabled:",
      "contents": "setUserInteractionEnabled(${1:BOOL userInteractionEnabled})"
    },
    {
      "trigger": "setUserTrackingMode:",
      "contents": "setUserTrackingMode(${1:MKUserTrackingMode userTrackingMode})"
    },
    {
      "trigger": "setUserTrackingMode:animated:",
      "contents": "setUserTrackingMode(${1:MKUserTrackingMode mode}, animated:${2:BOOL animated})"
    },
    {
      "trigger": "setUsername:",
      "contents": "setUsername(${1:NSString* username})"
    },
    {
      "trigger": "setUsesAirPlayVideoWhileAirPlayScreenIsActive:",
      "contents": "setUsesAirPlayVideoWhileAirPlayScreenIsActive(${1:BOOL usesAirPlayVideoWhileAirPlayScreenIsActive})"
    },
    {
      "trigger": "setUsesEvenOddFillRule:",
      "contents": "setUsesEvenOddFillRule(${1:BOOL usesEvenOddFillRule})"
    },
    {
      "trigger": "setUsesGroupingSeparator:",
      "contents": "setUsesGroupingSeparator(${1:BOOL b})"
    },
    {
      "trigger": "setUsesSignificantDigits:",
      "contents": "setUsesSignificantDigits(${1:BOOL b})"
    },
    {
      "trigger": "setUsesStoreSpecificMigrationManager:",
      "contents": "setUsesStoreSpecificMigrationManager(${1:BOOL flag})"
    },
    {
      "trigger": "setValidationPredicates:withValidationWarnings:",
      "contents": "setValidationPredicates(${1:NSArray* validationPredicates}, withValidationWarnings:${2:NSArray* validationWarnings})"
    },
    {
      "trigger": "setValue:",
      "contents": "setValue(${1:double value})"
    },
    {
      "trigger": "setValue:",
      "contents": "setValue(${1:float value})"
    },
    {
      "trigger": "setValue:",
      "contents": "setValue(${1:id value})"
    },
    {
      "trigger": "setValue:",
      "contents": "setValue(${1:int64_t value})"
    },
    {
      "trigger": "setValue:animated:",
      "contents": "setValue(${1:float value}, animated:${2:BOOL animated})"
    },
    {
      "trigger": "setValue:forHTTPHeaderField:",
      "contents": "setValue(${1:NSString* value}, forHTTPHeaderField:${2:NSString* field})"
    },
    {
      "trigger": "setValue:forKey:",
      "contents": "setValue(${1:id value}, forKey:${2:NSString* key})"
    },
    {
      "trigger": "setValue:forKeyPath:",
      "contents": "setValue(${1:id value}, forKeyPath:${2:NSString* keyPath})"
    },
    {
      "trigger": "setValue:forPasteboardType:",
      "contents": "setValue(${1:id value}, forPasteboardType:${2:NSString* pasteboardType})"
    },
    {
      "trigger": "setValue:forUndefinedKey:",
      "contents": "setValue(${1:id value}, forUndefinedKey:${2:NSString* key})"
    },
    {
      "trigger": "setValueExpression:",
      "contents": "setValueExpression(${1:NSExpression* expression})"
    },
    {
      "trigger": "setValueFunction:",
      "contents": "setValueFunction(${1:CAValueFunction* valueFunction})"
    },
    {
      "trigger": "setValueListAttributes:",
      "contents": "setValueListAttributes(${1:NSArray* attrs})"
    },
    {
      "trigger": "setValueTransformerName:",
      "contents": "setValueTransformerName(${1:NSString* string})"
    },
    {
      "trigger": "setValues:",
      "contents": "setValues(${1:NSArray* values})"
    },
    {
      "trigger": "setValuesForKeysWithDictionary:",
      "contents": "setValuesForKeysWithDictionary(${1:NSDictionary* keyedValues})"
    },
    {
      "trigger": "setVelocity:",
      "contents": "setVelocity(${1:CGFloat velocity})"
    },
    {
      "trigger": "setVelocity:",
      "contents": "setVelocity(${1:float velocity})"
    },
    {
      "trigger": "setVelocityRange:",
      "contents": "setVelocityRange(${1:CGFloat velocityRange})"
    },
    {
      "trigger": "setVersionHashModifier:",
      "contents": "setVersionHashModifier(${1:NSString* modifierString})"
    },
    {
      "trigger": "setVersionIdentifiers:",
      "contents": "setVersionIdentifiers(${1:NSSet* identifiers})"
    },
    {
      "trigger": "setVeryShortMonthSymbols:",
      "contents": "setVeryShortMonthSymbols(${1:NSArray* array})"
    },
    {
      "trigger": "setVeryShortStandaloneMonthSymbols:",
      "contents": "setVeryShortStandaloneMonthSymbols(${1:NSArray* array})"
    },
    {
      "trigger": "setVeryShortStandaloneWeekdaySymbols:",
      "contents": "setVeryShortStandaloneWeekdaySymbols(${1:NSArray* array})"
    },
    {
      "trigger": "setVeryShortWeekdaySymbols:",
      "contents": "setVeryShortWeekdaySymbols(${1:NSArray* array})"
    },
    {
      "trigger": "setVideoAtPath:completionBlock:",
      "contents": "setVideoAtPath(${1:NSURL* videoPathURL}, completionBlock:${2:ALAssetsLibraryWriteVideoCompletionBlock completionBlock})"
    },
    {
      "trigger": "setVideoComposition:",
      "contents": "setVideoComposition(${1:AVVideoComposition* videoComposition})"
    },
    {
      "trigger": "setVideoGravity:",
      "contents": "setVideoGravity(${1:NSString* videoGravity})"
    },
    {
      "trigger": "setVideoMaxFrameDuration:",
      "contents": "setVideoMaxFrameDuration(${1:CMTime videoMaxFrameDuration})"
    },
    {
      "trigger": "setVideoMaximumDuration:",
      "contents": "setVideoMaximumDuration(${1:NSTimeInterval videoMaximumDuration})"
    },
    {
      "trigger": "setVideoMinFrameDuration:",
      "contents": "setVideoMinFrameDuration(${1:CMTime videoMinFrameDuration})"
    },
    {
      "trigger": "setVideoMirrored:",
      "contents": "setVideoMirrored(${1:BOOL videoMirrored})"
    },
    {
      "trigger": "setVideoOrientation:",
      "contents": "setVideoOrientation(${1:AVCaptureVideoOrientation videoOrientation})"
    },
    {
      "trigger": "setVideoPath:",
      "contents": "setVideoPath(${1:NSString* videoPath})"
    },
    {
      "trigger": "setVideoQuality:",
      "contents": "setVideoQuality(${1:UIImagePickerControllerQualityType videoQuality})"
    },
    {
      "trigger": "setVideoScaleAndCropFactor:",
      "contents": "setVideoScaleAndCropFactor(${1:CGFloat videoScaleAndCropFactor})"
    },
    {
      "trigger": "setVideoSettings:",
      "contents": "setVideoSettings(${1:NSDictionary* videoSettings})"
    },
    {
      "trigger": "setView:",
      "contents": "setView(${1:UIView* view})"
    },
    {
      "trigger": "setViewControllers:",
      "contents": "setViewControllers(${1:NSArray* viewControllers})"
    },
    {
      "trigger": "setViewControllers:animated:",
      "contents": "setViewControllers(${1:NSArray* viewControllers}, animated:${2:BOOL animated})"
    },
    {
      "trigger": "setViewControllers:direction:animated:completion:",
      "contents": "setViewControllers(${1:NSArray* viewControllers}, direction:${2:UIPageViewControllerNavigationDirection direction}, animated:${3:BOOL animated}, completion:${4:void (^)(BOOL) completion})"
    },
    {
      "trigger": "setVisibleMapRect:",
      "contents": "setVisibleMapRect(${1:MKMapRect visibleMapRect})"
    },
    {
      "trigger": "setVisibleMapRect:animated:",
      "contents": "setVisibleMapRect(${1:MKMapRect mapRect}, animated:${2:BOOL animate})"
    },
    {
      "trigger": "setVisibleMapRect:edgePadding:animated:",
      "contents": "setVisibleMapRect(${1:MKMapRect mapRect}, edgePadding:${2:UIEdgeInsets insets}, animated:${3:BOOL animate})"
    },
    {
      "trigger": "setVolatileDomain:forName:",
      "contents": "setVolatileDomain(${1:NSDictionary* domain}, forName:${2:NSString* domainName})"
    },
    {
      "trigger": "setVolume:",
      "contents": "setVolume(${1:float volume})"
    },
    {
      "trigger": "setVolume:atTime:",
      "contents": "setVolume(${1:float volume}, atTime:${2:CMTime time})"
    },
    {
      "trigger": "setVolumeRampFromStartVolume:toEndVolume:timeRange:",
      "contents": "setVolumeRampFromStartVolume(${1:float startVolume}, toEndVolume:${2:float endVolume}, timeRange:${3:CMTimeRange timeRange})"
    },
    {
      "trigger": "setWantsFullScreenLayout:",
      "contents": "setWantsFullScreenLayout(${1:BOOL wantsFullScreenLayout})"
    },
    {
      "trigger": "setWantsSoftwareDimming:",
      "contents": "setWantsSoftwareDimming(${1:BOOL wantsSoftwareDimming})"
    },
    {
      "trigger": "setWeek:",
      "contents": "setWeek(${1:NSInteger v})"
    },
    {
      "trigger": "setWeekOfMonth:",
      "contents": "setWeekOfMonth(${1:NSInteger w})"
    },
    {
      "trigger": "setWeekOfYear:",
      "contents": "setWeekOfYear(${1:NSInteger w})"
    },
    {
      "trigger": "setWeekday:",
      "contents": "setWeekday(${1:NSInteger v})"
    },
    {
      "trigger": "setWeekdayOrdinal:",
      "contents": "setWeekdayOrdinal(${1:NSInteger v})"
    },
    {
      "trigger": "setWeekdaySymbols:",
      "contents": "setWeekdaySymbols(${1:NSArray* array})"
    },
    {
      "trigger": "setWhiteBalanceMode:",
      "contents": "setWhiteBalanceMode(${1:AVCaptureWhiteBalanceMode whiteBalanceMode})"
    },
    {
      "trigger": "setWidth:",
      "contents": "setWidth(${1:CGFloat width})"
    },
    {
      "trigger": "setWidth:forSegmentAtIndex:",
      "contents": "setWidth(${1:CGFloat width}, forSegmentAtIndex:${2:NSUInteger segment})"
    },
    {
      "trigger": "setWindow:",
      "contents": "setWindow(${1:UIWindow* window})"
    },
    {
      "trigger": "setWindowLevel:",
      "contents": "setWindowLevel(${1:UIWindowLevel windowLevel})"
    },
    {
      "trigger": "setWrapped:",
      "contents": "setWrapped(${1:BOOL wrapped})"
    },
    {
      "trigger": "setWraps:",
      "contents": "setWraps(${1:BOOL wraps})"
    },
    {
      "trigger": "setWriteabilityHandler:",
      "contents": "setWriteabilityHandler(${1:void (^)(NSFileHandle *) writeabilityHandler})"
    },
    {
      "trigger": "setXAcceleration:",
      "contents": "setXAcceleration(${1:CGFloat xAcceleration})"
    },
    {
      "trigger": "setXSize:",
      "contents": "setXSize(${1:GLfloat xSize})"
    },
    {
      "trigger": "setYAcceleration:",
      "contents": "setYAcceleration(${1:CGFloat yAcceleration})"
    },
    {
      "trigger": "setYSize:",
      "contents": "setYSize(${1:GLfloat ySize})"
    },
    {
      "trigger": "setYear:",
      "contents": "setYear(${1:NSInteger v})"
    },
    {
      "trigger": "setYearForWeekOfYear:",
      "contents": "setYearForWeekOfYear(${1:NSInteger y})"
    },
    {
      "trigger": "setZAcceleration:",
      "contents": "setZAcceleration(${1:CGFloat zAcceleration})"
    },
    {
      "trigger": "setZPosition:",
      "contents": "setZPosition(${1:CGFloat zPosition})"
    },
    {
      "trigger": "setZSize:",
      "contents": "setZSize(${1:GLfloat zSize})"
    },
    {
      "trigger": "setZeroSymbol:",
      "contents": "setZeroSymbol(${1:NSString* string})"
    },
    {
      "trigger": "setZoomEnabled:",
      "contents": "setZoomEnabled(${1:BOOL zoomEnabled})"
    },
    {
      "trigger": "setZoomScale:",
      "contents": "setZoomScale(${1:float zoomScale})"
    },
    {
      "trigger": "setZoomScale:animated:",
      "contents": "setZoomScale(${1:float scale}, animated:${2:BOOL animated})"
    },
    {
      "trigger": "shiftIndexesStartingAtIndex:by:",
      "contents": "shiftIndexesStartingAtIndex(${1:NSUInteger index}, by:${2:NSInteger delta})"
    },
    {
      "trigger": "shouldArchiveValueForKey:",
      "contents": "shouldArchiveValueForKey(${1:NSString* key})"
    },
    {
      "trigger": "shouldAutorotateToInterfaceOrientation:",
      "contents": "shouldAutorotateToInterfaceOrientation(${1:UIInterfaceOrientation toInterfaceOrientation})"
    },
    {
      "trigger": "showFromBarButtonItem:animated:",
      "contents": "showFromBarButtonItem(${1:UIBarButtonItem* item}, animated:${2:BOOL animated})"
    },
    {
      "trigger": "showFromRect:inView:animated:",
      "contents": "showFromRect(${1:CGRect rect}, inView:${2:UIView* view}, animated:${3:BOOL animated})"
    },
    {
      "trigger": "showFromTabBar:",
      "contents": "showFromTabBar(${1:UITabBar* view})"
    },
    {
      "trigger": "showFromToolbar:",
      "contents": "showFromToolbar(${1:UIToolbar* view})"
    },
    {
      "trigger": "showInView:",
      "contents": "showInView(${1:UIView* view})"
    },
    {
      "trigger": "sizeForNumberOfPages:",
      "contents": "sizeForNumberOfPages(${1:NSInteger pageCount})"
    },
    {
      "trigger": "sizeThatFits:",
      "contents": "sizeThatFits(${1:CGSize size})"
    },
    {
      "trigger": "sizeWithFont:",
      "contents": "sizeWithFont(${1:UIFont* font})"
    },
    {
      "trigger": "sizeWithFont:constrainedToSize:",
      "contents": "sizeWithFont(${1:UIFont* font}, constrainedToSize:${2:CGSize size})"
    },
    {
      "trigger": "sizeWithFont:constrainedToSize:lineBreakMode:",
      "contents": "sizeWithFont(${1:UIFont* font}, constrainedToSize:${2:CGSize size}, lineBreakMode:${3:UILineBreakMode lineBreakMode})"
    },
    {
      "trigger": "sizeWithFont:forWidth:lineBreakMode:",
      "contents": "sizeWithFont(${1:UIFont* font}, forWidth:${2:CGFloat width}, lineBreakMode:${3:UILineBreakMode lineBreakMode})"
    },
    {
      "trigger": "sizeWithFont:minFontSize:actualFontSize:forWidth:lineBreakMode:",
      "contents": "sizeWithFont(${1:UIFont* font}, minFontSize:${2:CGFloat minFontSize}, actualFontSize:${3:CGFloat* actualFontSize}, forWidth:${4:CGFloat width}, lineBreakMode:${5:UILineBreakMode lineBreakMode})"
    },
    {
      "trigger": "sizeof_sfntCMapEncoding (8)",
      "contents": "Sizeof_sfntCMapEncoding"
    },
    {
      "trigger": "sizeof_sfntCMapExtendedSubHeader (12)",
      "contents": "Sizeof_sfntCMapExtendedSubHeader"
    },
    {
      "trigger": "sizeof_sfntCMapHeader (4)",
      "contents": "Sizeof_sfntCMapHeader"
    },
    {
      "trigger": "sizeof_sfntCMapSubHeader (6)",
      "contents": "Sizeof_sfntCMapSubHeader"
    },
    {
      "trigger": "sizeof_sfntDirectory (12)",
      "contents": "Sizeof_sfntDirectory"
    },
    {
      "trigger": "sizeof_sfntInstance (4)",
      "contents": "Sizeof_sfntInstance"
    },
    {
      "trigger": "sizeof_sfntNameHeader (6)",
      "contents": "Sizeof_sfntNameHeader"
    },
    {
      "trigger": "sizeof_sfntNameRecord (12)",
      "contents": "Sizeof_sfntNameRecord"
    },
    {
      "trigger": "sizeof_sfntVariationAxis (20)",
      "contents": "Sizeof_sfntVariationAxis"
    },
    {
      "trigger": "sizeof_sfntVariationHeader (16)",
      "contents": "Sizeof_sfntVariationHeader"
    },
    {
      "trigger": "sortRange:options:usingComparator:",
      "contents": "sortRange(${1:NSRange range}, options:${2:NSSortOptions opts}, usingComparator:${3:NSComparator cmptr})"
    },
    {
      "trigger": "sortUsingComparator:",
      "contents": "sortUsingComparator(${1:NSComparator cmptr})"
    },
    {
      "trigger": "sortUsingDescriptors:",
      "contents": "sortUsingDescriptors(${1:NSArray* sortDescriptors})"
    },
    {
      "trigger": "sortUsingFunction:context:",
      "contents": "sortUsingFunction(${1:NSInteger (*)(id, id, void *) compare}, context:${2:void* context})"
    },
    {
      "trigger": "sortUsingSelector:",
      "contents": "sortUsingSelector(${1:SEL comparator})"
    },
    {
      "trigger": "sortWithOptions:usingComparator:",
      "contents": "sortWithOptions(${1:NSSortOptions opts}, usingComparator:${2:NSComparator cmptr})"
    },
    {
      "trigger": "sortedArrayFromArray:collationStringSelector:",
      "contents": "sortedArrayFromArray(${1:NSArray* array}, collationStringSelector:${2:SEL selector})"
    },
    {
      "trigger": "sortedArrayUsingComparator:",
      "contents": "sortedArrayUsingComparator(${1:NSComparator cmptr})"
    },
    {
      "trigger": "sortedArrayUsingDescriptors:",
      "contents": "sortedArrayUsingDescriptors(${1:NSArray* sortDescriptors})"
    },
    {
      "trigger": "sortedArrayUsingFunction:context:",
      "contents": "sortedArrayUsingFunction(${1:NSInteger (*)(id, id, void *) comparator}, context:${2:void* context})"
    },
    {
      "trigger": "sortedArrayUsingFunction:context:hint:",
      "contents": "sortedArrayUsingFunction(${1:NSInteger (*)(id, id, void *) comparator}, context:${2:void* context}, hint:${3:NSData* hint})"
    },
    {
      "trigger": "sortedArrayUsingSelector:",
      "contents": "sortedArrayUsingSelector(${1:SEL comparator})"
    },
    {
      "trigger": "sortedArrayWithOptions:usingComparator:",
      "contents": "sortedArrayWithOptions(${1:NSSortOptions opts}, usingComparator:${2:NSComparator cmptr})"
    },
    {
      "trigger": "sortedCookiesUsingDescriptors:",
      "contents": "sortedCookiesUsingDescriptors(${1:NSArray* sortOrder})"
    },
    {
      "trigger": "sourceEntityForEntityMapping:",
      "contents": "sourceEntityForEntityMapping(${1:NSEntityMapping* mEntity})"
    },
    {
      "trigger": "sourceInstancesForEntityMappingNamed:destinationInstances:",
      "contents": "sourceInstancesForEntityMappingNamed(${1:NSString* mappingName}, destinationInstances:${2:NSArray* destinationInstances})"
    },
    {
      "trigger": "sourceWithIdentifier:",
      "contents": "sourceWithIdentifier(${1:NSString* identifier})"
    },
    {
      "trigger": "splitViewController:popoverController:willPresentViewController:",
      "contents": "splitViewController(${1:UISplitViewController* svc}, popoverController:${2:UIPopoverController* pc}, willPresentViewController:${3:UIViewController* aViewController})"
    },
    {
      "trigger": "splitViewController:shouldHideViewController:inOrientation:",
      "contents": "splitViewController(${1:UISplitViewController* svc}, shouldHideViewController:${2:UIViewController* vc}, inOrientation:${3:UIInterfaceOrientation orientation})"
    },
    {
      "trigger": "splitViewController:willHideViewController:withBarButtonItem:forPopoverController:",
      "contents": "splitViewController(${1:UISplitViewController* svc}, willHideViewController:${2:UIViewController* aViewController}, withBarButtonItem:${3:UIBarButtonItem* barButtonItem}, forPopoverController:${4:UIPopoverController* pc})"
    },
    {
      "trigger": "splitViewController:willShowViewController:invalidatingBarButtonItem:",
      "contents": "splitViewController(${1:UISplitViewController* svc}, willShowViewController:${2:UIViewController* aViewController}, invalidatingBarButtonItem:${3:UIBarButtonItem* barButtonItem})"
    },
    {
      "trigger": "startAccelerometerUpdatesToQueue:withHandler:",
      "contents": "startAccelerometerUpdatesToQueue(${1:NSOperationQueue* queue}, withHandler:${2:CMAccelerometerHandler handler})"
    },
    {
      "trigger": "startDeviceMotionUpdatesToQueue:withHandler:",
      "contents": "startDeviceMotionUpdatesToQueue(${1:NSOperationQueue* queue}, withHandler:${2:CMDeviceMotionHandler handler})"
    },
    {
      "trigger": "startDeviceMotionUpdatesUsingReferenceFrame:",
      "contents": "startDeviceMotionUpdatesUsingReferenceFrame(${1:CMAttitudeReferenceFrame referenceFrame})"
    },
    {
      "trigger": "startDeviceMotionUpdatesUsingReferenceFrame:toQueue:withHandler:",
      "contents": "startDeviceMotionUpdatesUsingReferenceFrame(${1:CMAttitudeReferenceFrame referenceFrame}, toQueue:${2:NSOperationQueue* queue}, withHandler:${3:CMDeviceMotionHandler handler})"
    },
    {
      "trigger": "startDownloadingUbiquitousItemAtURL:error:",
      "contents": "startDownloadingUbiquitousItemAtURL(${1:NSURL* url}, error:${2:NSError** error})"
    },
    {
      "trigger": "startGyroUpdatesToQueue:withHandler:",
      "contents": "startGyroUpdatesToQueue(${1:NSOperationQueue* queue}, withHandler:${2:CMGyroHandler handler})"
    },
    {
      "trigger": "startMagnetometerUpdatesToQueue:withHandler:",
      "contents": "startMagnetometerUpdatesToQueue(${1:NSOperationQueue* queue}, withHandler:${2:CMMagnetometerHandler handler})"
    },
    {
      "trigger": "startMonitoringForRegion:",
      "contents": "startMonitoringForRegion(${1:CLRegion* region})"
    },
    {
      "trigger": "startMonitoringForRegion:desiredAccuracy:",
      "contents": "startMonitoringForRegion(${1:CLRegion* region}, desiredAccuracy:${2:CLLocationAccuracy accuracy})"
    },
    {
      "trigger": "startRecordingToOutputFileURL:recordingDelegate:",
      "contents": "startRecordingToOutputFileURL(${1:NSURL* outputFileURL}, recordingDelegate:${2:id delegate})"
    },
    {
      "trigger": "startSessionAtSourceTime:",
      "contents": "startSessionAtSourceTime(${1:CMTime startTime})"
    },
    {
      "trigger": "startVoiceChatWithParticipantID:error:",
      "contents": "startVoiceChatWithParticipantID(${1:NSString* participantID}, error:${2:NSError** error})"
    },
    {
      "trigger": "statusOfValueForKey:error:",
      "contents": "statusOfValueForKey(${1:NSString* key}, error:${2:NSError** outError})"
    },
    {
      "trigger": "stepByCount:",
      "contents": "stepByCount(${1:NSInteger stepCount})"
    },
    {
      "trigger": "stopMonitoringForRegion:",
      "contents": "stopMonitoringForRegion(${1:CLRegion* region})"
    },
    {
      "trigger": "stopVoiceChatWithParticipantID:",
      "contents": "stopVoiceChatWithParticipantID(${1:NSString* participantID})"
    },
    {
      "trigger": "storeCachedResponse:forRequest:",
      "contents": "storeCachedResponse(${1:NSCachedURLResponse* cachedResponse}, forRequest:${2:NSURLRequest* request})"
    },
    {
      "trigger": "stream:handleEvent:",
      "contents": "stream(${1:NSStream* aStream}, handleEvent:${2:NSStreamEvent eventCode})"
    },
    {
      "trigger": "stretchableImageWithLeftCapWidth:topCapHeight:",
      "contents": "stretchableImageWithLeftCapWidth(${1:NSInteger leftCapWidth}, topCapHeight:${2:NSInteger topCapHeight})"
    },
    {
      "trigger": "stringArrayForKey:",
      "contents": "stringArrayForKey(${1:NSString* defaultName})"
    },
    {
      "trigger": "stringByAddingPercentEscapesUsingEncoding:",
      "contents": "stringByAddingPercentEscapesUsingEncoding(${1:NSStringEncoding enc})"
    },
    {
      "trigger": "stringByAppendingFormat:",
      "contents": "stringByAppendingFormat(${1:NSString* format})"
    },
    {
      "trigger": "stringByAppendingPathComponent:",
      "contents": "stringByAppendingPathComponent(${1:NSString* str})"
    },
    {
      "trigger": "stringByAppendingPathExtension:",
      "contents": "stringByAppendingPathExtension(${1:NSString* str})"
    },
    {
      "trigger": "stringByAppendingString:",
      "contents": "stringByAppendingString(${1:NSString* aString})"
    },
    {
      "trigger": "stringByEvaluatingJavaScriptFromString:",
      "contents": "stringByEvaluatingJavaScriptFromString(${1:NSString* script})"
    },
    {
      "trigger": "stringByFoldingWithOptions:locale:",
      "contents": "stringByFoldingWithOptions(${1:NSStringCompareOptions options}, locale:${2:NSLocale* locale})"
    },
    {
      "trigger": "stringByPaddingToLength:withString:startingAtIndex:",
      "contents": "stringByPaddingToLength(${1:NSUInteger newLength}, withString:${2:NSString* padString}, startingAtIndex:${3:NSUInteger padIndex})"
    },
    {
      "trigger": "stringByReplacingCharactersInRange:withString:",
      "contents": "stringByReplacingCharactersInRange(${1:NSRange range}, withString:${2:NSString* replacement})"
    },
    {
      "trigger": "stringByReplacingMatchesInString:options:range:withTemplate:",
      "contents": "stringByReplacingMatchesInString(${1:NSString* string}, options:${2:NSMatchingOptions options}, range:${3:NSRange range}, withTemplate:${4:NSString* templ})"
    },
    {
      "trigger": "stringByReplacingOccurrencesOfString:withString:",
      "contents": "stringByReplacingOccurrencesOfString(${1:NSString* target}, withString:${2:NSString* replacement})"
    },
    {
      "trigger": "stringByReplacingOccurrencesOfString:withString:options:range:",
      "contents": "stringByReplacingOccurrencesOfString(${1:NSString* target}, withString:${2:NSString* replacement}, options:${3:NSStringCompareOptions options}, range:${4:NSRange searchRange})"
    },
    {
      "trigger": "stringByReplacingPercentEscapesUsingEncoding:",
      "contents": "stringByReplacingPercentEscapesUsingEncoding(${1:NSStringEncoding enc})"
    },
    {
      "trigger": "stringByTrimmingCharactersInSet:",
      "contents": "stringByTrimmingCharactersInSet(${1:NSCharacterSet* set})"
    },
    {
      "trigger": "stringEditedInRange:changeInLength:",
      "contents": "stringEditedInRange(${1:NSRange newRange}, changeInLength:${2:NSInteger delta})"
    },
    {
      "trigger": "stringForKey:",
      "contents": "stringForKey(${1:NSString* aKey})"
    },
    {
      "trigger": "stringForKey:",
      "contents": "stringForKey(${1:NSString* defaultName})"
    },
    {
      "trigger": "stringForObjectValue:",
      "contents": "stringForObjectValue(${1:id obj})"
    },
    {
      "trigger": "stringFromDate:",
      "contents": "stringFromDate(${1:NSDate* date})"
    },
    {
      "trigger": "stringFromNumber:",
      "contents": "stringFromNumber(${1:NSNumber* number})"
    },
    {
      "trigger": "stringWithFileSystemRepresentation:length:",
      "contents": "stringWithFileSystemRepresentation(${1:char* str}, length:${2:NSUInteger len})"
    },
    {
      "trigger": "stringsByAppendingPaths:",
      "contents": "stringsByAppendingPaths(${1:NSArray* paths})"
    },
    {
      "trigger": "strokePath:inContext:",
      "contents": "strokePath(${1:CGPathRef path}, inContext:${2:CGContextRef context})"
    },
    {
      "trigger": "strokeWithBlendMode:alpha:",
      "contents": "strokeWithBlendMode(${1:CGBlendMode blendMode}, alpha:${2:CGFloat alpha})"
    },
    {
      "trigger": "subarrayWithRange:",
      "contents": "subarrayWithRange(${1:NSRange range})"
    },
    {
      "trigger": "subdataWithRange:",
      "contents": "subdataWithRange(${1:NSRange range})"
    },
    {
      "trigger": "subpathsAtPath:",
      "contents": "subpathsAtPath(${1:NSString* path})"
    },
    {
      "trigger": "subpathsOfDirectoryAtPath:error:",
      "contents": "subpathsOfDirectoryAtPath(${1:NSString* path}, error:${2:NSError** error})"
    },
    {
      "trigger": "substringFromIndex:",
      "contents": "substringFromIndex(${1:NSUInteger from})"
    },
    {
      "trigger": "substringToIndex:",
      "contents": "substringToIndex(${1:NSUInteger to})"
    },
    {
      "trigger": "substringWithRange:",
      "contents": "substringWithRange(${1:NSRange range})"
    },
    {
      "trigger": "supportsAVCaptureSessionPreset:",
      "contents": "supportsAVCaptureSessionPreset(${1:NSString* preset})"
    },
    {
      "trigger": "tabBar:didBeginCustomizingItems:",
      "contents": "tabBar(${1:UITabBar* tabBar}, didBeginCustomizingItems:${2:NSArray* items})"
    },
    {
      "trigger": "tabBar:didEndCustomizingItems:changed:",
      "contents": "tabBar(${1:UITabBar* tabBar}, didEndCustomizingItems:${2:NSArray* items}, changed:${3:BOOL changed})"
    },
    {
      "trigger": "tabBar:didSelectItem:",
      "contents": "tabBar(${1:UITabBar* tabBar}, didSelectItem:${2:UITabBarItem* item})"
    },
    {
      "trigger": "tabBar:willBeginCustomizingItems:",
      "contents": "tabBar(${1:UITabBar* tabBar}, willBeginCustomizingItems:${2:NSArray* items})"
    },
    {
      "trigger": "tabBar:willEndCustomizingItems:changed:",
      "contents": "tabBar(${1:UITabBar* tabBar}, willEndCustomizingItems:${2:NSArray* items}, changed:${3:BOOL changed})"
    },
    {
      "trigger": "tabBarController:didEndCustomizingViewControllers:changed:",
      "contents": "tabBarController(${1:UITabBarController* tabBarController}, didEndCustomizingViewControllers:${2:NSArray* viewControllers}, changed:${3:BOOL changed})"
    },
    {
      "trigger": "tabBarController:didSelectViewController:",
      "contents": "tabBarController(${1:UITabBarController* tabBarController}, didSelectViewController:${2:UIViewController* viewController})"
    },
    {
      "trigger": "tabBarController:shouldSelectViewController:",
      "contents": "tabBarController(${1:UITabBarController* tabBarController}, shouldSelectViewController:${2:UIViewController* viewController})"
    },
    {
      "trigger": "tabBarController:willBeginCustomizingViewControllers:",
      "contents": "tabBarController(${1:UITabBarController* tabBarController}, willBeginCustomizingViewControllers:${2:NSArray* viewControllers})"
    },
    {
      "trigger": "tabBarController:willEndCustomizingViewControllers:changed:",
      "contents": "tabBarController(${1:UITabBarController* tabBarController}, willEndCustomizingViewControllers:${2:NSArray* viewControllers}, changed:${3:BOOL changed})"
    },
    {
      "trigger": "tableView:accessoryButtonTappedForRowWithIndexPath:",
      "contents": "tableView(${1:UITableView* tableView}, accessoryButtonTappedForRowWithIndexPath:${2:NSIndexPath* indexPath})"
    },
    {
      "trigger": "tableView:accessoryTypeForRowWithIndexPath:",
      "contents": "tableView(${1:UITableView* tableView}, accessoryTypeForRowWithIndexPath:${2:NSIndexPath* indexPath})"
    },
    {
      "trigger": "tableView:canEditRowAtIndexPath:",
      "contents": "tableView(${1:UITableView* tableView}, canEditRowAtIndexPath:${2:NSIndexPath* indexPath})"
    },
    {
      "trigger": "tableView:canMoveRowAtIndexPath:",
      "contents": "tableView(${1:UITableView* tableView}, canMoveRowAtIndexPath:${2:NSIndexPath* indexPath})"
    },
    {
      "trigger": "tableView:canPerformAction:forRowAtIndexPath:withSender:",
      "contents": "tableView(${1:UITableView* tableView}, canPerformAction:${2:SEL action}, forRowAtIndexPath:${3:NSIndexPath* indexPath}, withSender:${4:id sender})"
    },
    {
      "trigger": "tableView:cellForRowAtIndexPath:",
      "contents": "tableView(${1:UITableView* tableView}, cellForRowAtIndexPath:${2:NSIndexPath* indexPath})"
    },
    {
      "trigger": "tableView:commitEditingStyle:forRowAtIndexPath:",
      "contents": "tableView(${1:UITableView* tableView}, commitEditingStyle:${2:UITableViewCellEditingStyle editingStyle}, forRowAtIndexPath:${3:NSIndexPath* indexPath})"
    },
    {
      "trigger": "tableView:didDeselectRowAtIndexPath:",
      "contents": "tableView(${1:UITableView* tableView}, didDeselectRowAtIndexPath:${2:NSIndexPath* indexPath})"
    },
    {
      "trigger": "tableView:didEndEditingRowAtIndexPath:",
      "contents": "tableView(${1:UITableView* tableView}, didEndEditingRowAtIndexPath:${2:NSIndexPath* indexPath})"
    },
    {
      "trigger": "tableView:didSelectRowAtIndexPath:",
      "contents": "tableView(${1:UITableView* tableView}, didSelectRowAtIndexPath:${2:NSIndexPath* indexPath})"
    },
    {
      "trigger": "tableView:editingStyleForRowAtIndexPath:",
      "contents": "tableView(${1:UITableView* tableView}, editingStyleForRowAtIndexPath:${2:NSIndexPath* indexPath})"
    },
    {
      "trigger": "tableView:heightForFooterInSection:",
      "contents": "tableView(${1:UITableView* tableView}, heightForFooterInSection:${2:NSInteger section})"
    },
    {
      "trigger": "tableView:heightForHeaderInSection:",
      "contents": "tableView(${1:UITableView* tableView}, heightForHeaderInSection:${2:NSInteger section})"
    },
    {
      "trigger": "tableView:heightForRowAtIndexPath:",
      "contents": "tableView(${1:UITableView* tableView}, heightForRowAtIndexPath:${2:NSIndexPath* indexPath})"
    },
    {
      "trigger": "tableView:indentationLevelForRowAtIndexPath:",
      "contents": "tableView(${1:UITableView* tableView}, indentationLevelForRowAtIndexPath:${2:NSIndexPath* indexPath})"
    },
    {
      "trigger": "tableView:moveRowAtIndexPath:toIndexPath:",
      "contents": "tableView(${1:UITableView* tableView}, moveRowAtIndexPath:${2:NSIndexPath* sourceIndexPath}, toIndexPath:${3:NSIndexPath* destinationIndexPath})"
    },
    {
      "trigger": "tableView:numberOfRowsInSection:",
      "contents": "tableView(${1:UITableView* tableView}, numberOfRowsInSection:${2:NSInteger section})"
    },
    {
      "trigger": "tableView:performAction:forRowAtIndexPath:withSender:",
      "contents": "tableView(${1:UITableView* tableView}, performAction:${2:SEL action}, forRowAtIndexPath:${3:NSIndexPath* indexPath}, withSender:${4:id sender})"
    },
    {
      "trigger": "tableView:sectionForSectionIndexTitle:atIndex:",
      "contents": "tableView(${1:UITableView* tableView}, sectionForSectionIndexTitle:${2:NSString* title}, atIndex:${3:NSInteger index})"
    },
    {
      "trigger": "tableView:shouldIndentWhileEditingRowAtIndexPath:",
      "contents": "tableView(${1:UITableView* tableView}, shouldIndentWhileEditingRowAtIndexPath:${2:NSIndexPath* indexPath})"
    },
    {
      "trigger": "tableView:shouldShowMenuForRowAtIndexPath:",
      "contents": "tableView(${1:UITableView* tableView}, shouldShowMenuForRowAtIndexPath:${2:NSIndexPath* indexPath})"
    },
    {
      "trigger": "tableView:targetIndexPathForMoveFromRowAtIndexPath:toProposedIndexPath:",
      "contents": "tableView(${1:UITableView* tableView}, targetIndexPathForMoveFromRowAtIndexPath:${2:NSIndexPath* sourceIndexPath}, toProposedIndexPath:${3:NSIndexPath* proposedDestinationIndexPath})"
    },
    {
      "trigger": "tableView:titleForDeleteConfirmationButtonForRowAtIndexPath:",
      "contents": "tableView(${1:UITableView* tableView}, titleForDeleteConfirmationButtonForRowAtIndexPath:${2:NSIndexPath* indexPath})"
    },
    {
      "trigger": "tableView:titleForFooterInSection:",
      "contents": "tableView(${1:UITableView* tableView}, titleForFooterInSection:${2:NSInteger section})"
    },
    {
      "trigger": "tableView:titleForHeaderInSection:",
      "contents": "tableView(${1:UITableView* tableView}, titleForHeaderInSection:${2:NSInteger section})"
    },
    {
      "trigger": "tableView:viewForFooterInSection:",
      "contents": "tableView(${1:UITableView* tableView}, viewForFooterInSection:${2:NSInteger section})"
    },
    {
      "trigger": "tableView:viewForHeaderInSection:",
      "contents": "tableView(${1:UITableView* tableView}, viewForHeaderInSection:${2:NSInteger section})"
    },
    {
      "trigger": "tableView:willBeginEditingRowAtIndexPath:",
      "contents": "tableView(${1:UITableView* tableView}, willBeginEditingRowAtIndexPath:${2:NSIndexPath* indexPath})"
    },
    {
      "trigger": "tableView:willDeselectRowAtIndexPath:",
      "contents": "tableView(${1:UITableView* tableView}, willDeselectRowAtIndexPath:${2:NSIndexPath* indexPath})"
    },
    {
      "trigger": "tableView:willDisplayCell:forRowAtIndexPath:",
      "contents": "tableView(${1:UITableView* tableView}, willDisplayCell:${2:UITableViewCell* cell}, forRowAtIndexPath:${3:NSIndexPath* indexPath})"
    },
    {
      "trigger": "tableView:willSelectRowAtIndexPath:",
      "contents": "tableView(${1:UITableView* tableView}, willSelectRowAtIndexPath:${2:NSIndexPath* indexPath})"
    },
    {
      "trigger": "tagAtIndex:scheme:tokenRange:sentenceRange:",
      "contents": "tagAtIndex(${1:NSUInteger charIndex}, scheme:${2:NSString* tagScheme}, tokenRange:${3:NSRangePointer tokenRange}, sentenceRange:${4:NSRangePointer sentenceRange})"
    },
    {
      "trigger": "tagsInRange:scheme:options:tokenRanges:",
      "contents": "tagsInRange(${1:NSRange range}, scheme:${2:NSString* tagScheme}, options:${3:NSLinguisticTaggerOptions opts}, tokenRanges:${4:NSArray** tokenRanges})"
    },
    {
      "trigger": "textDidChange:",
      "contents": "textDidChange(${1:id textInput})"
    },
    {
      "trigger": "textField:shouldChangeCharactersInRange:replacementString:",
      "contents": "textField(${1:UITextField* textField}, shouldChangeCharactersInRange:${2:NSRange range}, replacementString:${3:NSString* string})"
    },
    {
      "trigger": "textFieldAtIndex:",
      "contents": "textFieldAtIndex(${1:NSInteger textFieldIndex})"
    },
    {
      "trigger": "textFieldDidBeginEditing:",
      "contents": "textFieldDidBeginEditing(${1:UITextField* textField})"
    },
    {
      "trigger": "textFieldDidEndEditing:",
      "contents": "textFieldDidEndEditing(${1:UITextField* textField})"
    },
    {
      "trigger": "textFieldShouldBeginEditing:",
      "contents": "textFieldShouldBeginEditing(${1:UITextField* textField})"
    },
    {
      "trigger": "textFieldShouldClear:",
      "contents": "textFieldShouldClear(${1:UITextField* textField})"
    },
    {
      "trigger": "textFieldShouldEndEditing:",
      "contents": "textFieldShouldEndEditing(${1:UITextField* textField})"
    },
    {
      "trigger": "textFieldShouldReturn:",
      "contents": "textFieldShouldReturn(${1:UITextField* textField})"
    },
    {
      "trigger": "textInRange:",
      "contents": "textInRange(${1:UITextRange* range})"
    },
    {
      "trigger": "textRangeFromPosition:toPosition:",
      "contents": "textRangeFromPosition(${1:UITextPosition* fromPosition}, toPosition:${2:UITextPosition* toPosition})"
    },
    {
      "trigger": "textRectForBounds:",
      "contents": "textRectForBounds(${1:CGRect bounds})"
    },
    {
      "trigger": "textRectForBounds:limitedToNumberOfLines:",
      "contents": "textRectForBounds(${1:CGRect bounds}, limitedToNumberOfLines:${2:NSInteger numberOfLines})"
    },
    {
      "trigger": "textStylingAtPosition:inDirection:",
      "contents": "textStylingAtPosition(${1:UITextPosition* position}, inDirection:${2:UITextStorageDirection direction})"
    },
    {
      "trigger": "textView:shouldChangeTextInRange:replacementText:",
      "contents": "textView(${1:UITextView* textView}, shouldChangeTextInRange:${2:NSRange range}, replacementText:${3:NSString* text})"
    },
    {
      "trigger": "textViewDidBeginEditing:",
      "contents": "textViewDidBeginEditing(${1:UITextView* textView})"
    },
    {
      "trigger": "textViewDidChange:",
      "contents": "textViewDidChange(${1:UITextView* textView})"
    },
    {
      "trigger": "textViewDidChangeSelection:",
      "contents": "textViewDidChangeSelection(${1:UITextView* textView})"
    },
    {
      "trigger": "textViewDidEndEditing:",
      "contents": "textViewDidEndEditing(${1:UITextView* textView})"
    },
    {
      "trigger": "textViewShouldBeginEditing:",
      "contents": "textViewShouldBeginEditing(${1:UITextView* textView})"
    },
    {
      "trigger": "textViewShouldEndEditing:",
      "contents": "textViewShouldEndEditing(${1:UITextView* textView})"
    },
    {
      "trigger": "textWillChange:",
      "contents": "textWillChange(${1:id textInput})"
    },
    {
      "trigger": "textureWithCGImage:options:queue:completionHandler:",
      "contents": "textureWithCGImage(${1:CGImageRef cgImage}, options:${2:NSDictionary* options}, queue:${3:dispatch_queue_t queue}, completionHandler:${4:GLKTextureLoaderCallback block})"
    },
    {
      "trigger": "textureWithContentsOfData:options:queue:completionHandler:",
      "contents": "textureWithContentsOfData(${1:NSData* data}, options:${2:NSDictionary* options}, queue:${3:dispatch_queue_t queue}, completionHandler:${4:GLKTextureLoaderCallback block})"
    },
    {
      "trigger": "textureWithContentsOfFile:options:queue:completionHandler:",
      "contents": "textureWithContentsOfFile(${1:NSString* path}, options:${2:NSDictionary* options}, queue:${3:dispatch_queue_t queue}, completionHandler:${4:GLKTextureLoaderCallback block})"
    },
    {
      "trigger": "textureWithContentsOfURL:options:queue:completionHandler:",
      "contents": "textureWithContentsOfURL(${1:NSURL* url}, options:${2:NSDictionary* options}, queue:${3:dispatch_queue_t queue}, completionHandler:${4:GLKTextureLoaderCallback block})"
    },
    {
      "trigger": "thumbImageForState:",
      "contents": "thumbImageForState(${1:UIControlState state})"
    },
    {
      "trigger": "thumbRectForBounds:trackRect:value:",
      "contents": "thumbRectForBounds(${1:CGRect bounds}, trackRect:${2:CGRect rect}, value:${3:float value})"
    },
    {
      "trigger": "thumbnailImageAtTime:timeOption:",
      "contents": "thumbnailImageAtTime(${1:NSTimeInterval playbackTime}, timeOption:${2:MPMovieTimeOption option})"
    },
    {
      "trigger": "timeIntervalSinceDate:",
      "contents": "timeIntervalSinceDate(${1:NSDate* anotherDate})"
    },
    {
      "trigger": "titleColorForState:",
      "contents": "titleColorForState(${1:UIControlState state})"
    },
    {
      "trigger": "titleForSegmentAtIndex:",
      "contents": "titleForSegmentAtIndex(${1:NSUInteger segment})"
    },
    {
      "trigger": "titleForState:",
      "contents": "titleForState(${1:UIControlState state})"
    },
    {
      "trigger": "titlePositionAdjustmentForBarMetrics:",
      "contents": "titlePositionAdjustmentForBarMetrics(${1:UIBarMetrics barMetrics})"
    },
    {
      "trigger": "titleRectForContentRect:",
      "contents": "titleRectForContentRect(${1:CGRect contentRect})"
    },
    {
      "trigger": "titleShadowColorForState:",
      "contents": "titleShadowColorForState(${1:UIControlState state})"
    },
    {
      "trigger": "titleTextAttributesForState:",
      "contents": "titleTextAttributesForState(${1:UIControlState state})"
    },
    {
      "trigger": "titleVerticalPositionAdjustmentForBarMetrics:",
      "contents": "titleVerticalPositionAdjustmentForBarMetrics(${1:UIBarMetrics barMetrics})"
    },
    {
      "trigger": "touchesBegan:withEvent:",
      "contents": "touchesBegan(${1:NSSet* touches}, withEvent:${2:UIEvent* event})"
    },
    {
      "trigger": "touchesCancelled:withEvent:",
      "contents": "touchesCancelled(${1:NSSet* touches}, withEvent:${2:UIEvent* event})"
    },
    {
      "trigger": "touchesEnded:withEvent:",
      "contents": "touchesEnded(${1:NSSet* touches}, withEvent:${2:UIEvent* event})"
    },
    {
      "trigger": "touchesForGestureRecognizer:",
      "contents": "touchesForGestureRecognizer(${1:UIGestureRecognizer* gesture})"
    },
    {
      "trigger": "touchesForView:",
      "contents": "touchesForView(${1:UIView* view})"
    },
    {
      "trigger": "touchesForWindow:",
      "contents": "touchesForWindow(${1:UIWindow* window})"
    },
    {
      "trigger": "touchesMoved:withEvent:",
      "contents": "touchesMoved(${1:NSSet* touches}, withEvent:${2:UIEvent* event})"
    },
    {
      "trigger": "touchesShouldBegin:withEvent:inContentView:",
      "contents": "touchesShouldBegin(${1:NSSet* touches}, withEvent:${2:UIEvent* event}, inContentView:${3:UIView* view})"
    },
    {
      "trigger": "touchesShouldCancelInContentView:",
      "contents": "touchesShouldCancelInContentView(${1:UIView* view})"
    },
    {
      "trigger": "trackRectForBounds:",
      "contents": "trackRectForBounds(${1:CGRect bounds})"
    },
    {
      "trigger": "trackWithTrackID:",
      "contents": "trackWithTrackID(${1:CMPersistentTrackID trackID})"
    },
    {
      "trigger": "tracksWithMediaCharacteristic:",
      "contents": "tracksWithMediaCharacteristic(${1:NSString* mediaCharacteristic})"
    },
    {
      "trigger": "tracksWithMediaType:",
      "contents": "tracksWithMediaType(${1:NSString* mediaType})"
    },
    {
      "trigger": "transformedValue:",
      "contents": "transformedValue(${1:id value})"
    },
    {
      "trigger": "transitionFromViewController:toViewController:duration:options:animations:completion:",
      "contents": "transitionFromViewController(${1:UIViewController* fromViewController}, toViewController:${2:UIViewController* toViewController}, duration:${3:NSTimeInterval duration}, options:${4:UIViewAnimationOptions options}, animations:${5:void (^)(void) animations}, completion:${6:void (^)(BOOL) completion})"
    },
    {
      "trigger": "translationInView:",
      "contents": "translationInView(${1:UIView* view})"
    },
    {
      "trigger": "truncateFileAtOffset:",
      "contents": "truncateFileAtOffset(${1:unsigned long long offset})"
    },
    {
      "trigger": "tryLockWhenCondition:",
      "contents": "tryLockWhenCondition(${1:NSInteger condition})"
    },
    {
      "trigger": "turnBasedMatchmakerViewController:didFailWithError:",
      "contents": "turnBasedMatchmakerViewController(${1:GKTurnBasedMatchmakerViewController* viewController}, didFailWithError:${2:NSError* error})"
    },
    {
      "trigger": "turnBasedMatchmakerViewController:didFindMatch:",
      "contents": "turnBasedMatchmakerViewController(${1:GKTurnBasedMatchmakerViewController* viewController}, didFindMatch:${2:GKTurnBasedMatch* match})"
    },
    {
      "trigger": "turnBasedMatchmakerViewController:playerQuitForMatch:",
      "contents": "turnBasedMatchmakerViewController(${1:GKTurnBasedMatchmakerViewController* viewController}, playerQuitForMatch:${2:GKTurnBasedMatch* match})"
    },
    {
      "trigger": "turnBasedMatchmakerViewControllerWasCancelled:",
      "contents": "turnBasedMatchmakerViewControllerWasCancelled(${1:GKTurnBasedMatchmakerViewController* viewController})"
    },
    {
      "trigger": "unarchiver:cannotDecodeObjectOfClassName:originalClasses:",
      "contents": "unarchiver(${1:NSKeyedUnarchiver* unarchiver}, cannotDecodeObjectOfClassName:${2:NSString* name}, originalClasses:${3:NSArray* classNames})"
    },
    {
      "trigger": "unarchiver:didDecodeObject:",
      "contents": "unarchiver(${1:NSKeyedUnarchiver* unarchiver}, didDecodeObject:${2:id object})"
    },
    {
      "trigger": "unarchiver:willReplaceObject:withObject:",
      "contents": "unarchiver(${1:NSKeyedUnarchiver* unarchiver}, willReplaceObject:${2:id object}, withObject:${3:id newObject})"
    },
    {
      "trigger": "unarchiverDidFinish:",
      "contents": "unarchiverDidFinish(${1:NSKeyedUnarchiver* unarchiver})"
    },
    {
      "trigger": "unarchiverWillFinish:",
      "contents": "unarchiverWillFinish(${1:NSKeyedUnarchiver* unarchiver})"
    },
    {
      "trigger": "undoMenuTitleForUndoActionName:",
      "contents": "undoMenuTitleForUndoActionName(${1:NSString* actionName})"
    },
    {
      "trigger": "unionOrderedSet:",
      "contents": "unionOrderedSet(${1:NSOrderedSet* other})"
    },
    {
      "trigger": "unionSet:",
      "contents": "unionSet(${1:NSSet* otherSet})"
    },
    {
      "trigger": "unionSet:",
      "contents": "unionSet(${1:NSSet* other})"
    },
    {
      "trigger": "unknownPersonViewController:didResolveToPerson:",
      "contents": "unknownPersonViewController(${1:ABUnknownPersonViewController* unknownCardViewController}, didResolveToPerson:${2:ABRecordRef person})"
    },
    {
      "trigger": "unknownPersonViewController:shouldPerformDefaultActionForPerson:property:identifier:",
      "contents": "unknownPersonViewController(${1:ABUnknownPersonViewController* personViewController}, shouldPerformDefaultActionForPerson:${2:ABRecordRef person}, property:${3:ABPropertyID property}, identifier:${4:ABMultiValueIdentifier identifier})"
    },
    {
      "trigger": "unlockWithCondition:",
      "contents": "unlockWithCondition(${1:NSInteger condition})"
    },
    {
      "trigger": "unscheduleFromRunLoop:forMode:",
      "contents": "unscheduleFromRunLoop(${1:NSRunLoop* aRunLoop}, forMode:${2:NSString* mode})"
    },
    {
      "trigger": "updateCacheNode:fromManagedObject:",
      "contents": "updateCacheNode(${1:NSAtomicStoreCacheNode* node}, fromManagedObject:${2:NSManagedObject* managedObject})"
    },
    {
      "trigger": "updateChangeCount:",
      "contents": "updateChangeCount(${1:UIDocumentChangeKind change})"
    },
    {
      "trigger": "updateChangeCountWithToken:forSaveOperation:",
      "contents": "updateChangeCountWithToken(${1:id changeCountToken}, forSaveOperation:${2:UIDocumentSaveOperation saveOperation})"
    },
    {
      "trigger": "updateWithValues:version:",
      "contents": "updateWithValues(${1:NSDictionary* values}, version:${2:uint64_t version})"
    },
    {
      "trigger": "useCredential:forAuthenticationChallenge:",
      "contents": "useCredential(${1:NSURLCredential* credential}, forAuthenticationChallenge:${2:NSURLAuthenticationChallenge* challenge})"
    },
    {
      "trigger": "userInteractionNoLongerPermittedForError:",
      "contents": "userInteractionNoLongerPermittedForError(${1:NSError* error})"
    },
    {
      "trigger": "validateForDelete:",
      "contents": "validateForDelete(${1:NSError** error})"
    },
    {
      "trigger": "validateForInsert:",
      "contents": "validateForInsert(${1:NSError** error})"
    },
    {
      "trigger": "validateForUpdate:",
      "contents": "validateForUpdate(${1:NSError** error})"
    },
    {
      "trigger": "validateTrackSegments:error:",
      "contents": "validateTrackSegments(${1:NSArray* trackSegments}, error:${2:NSError** error})"
    },
    {
      "trigger": "validateValue:forKey:error:",
      "contents": "validateValue(${1:id* ioValue}, forKey:${2:NSString* inKey}, error:${3:NSError** outError})"
    },
    {
      "trigger": "validateValue:forKey:error:",
      "contents": "validateValue(${1:id* value}, forKey:${2:NSString* key}, error:${3:NSError** error})"
    },
    {
      "trigger": "validateValue:forKeyPath:error:",
      "contents": "validateValue(${1:id* ioValue}, forKeyPath:${2:NSString* inKeyPath}, error:${3:NSError** outError})"
    },
    {
      "trigger": "valueAtIndex:",
      "contents": "valueAtIndex(${1:size_t index})"
    },
    {
      "trigger": "valueForAttribute:",
      "contents": "valueForAttribute(${1:NSString* key})"
    },
    {
      "trigger": "valueForHTTPHeaderField:",
      "contents": "valueForHTTPHeaderField(${1:NSString* field})"
    },
    {
      "trigger": "valueForKey:",
      "contents": "valueForKey(${1:NSString* key})"
    },
    {
      "trigger": "valueForKeyPath:",
      "contents": "valueForKeyPath(${1:NSString* keyPath})"
    },
    {
      "trigger": "valueForPasteboardType:",
      "contents": "valueForPasteboardType(${1:NSString* pasteboardType})"
    },
    {
      "trigger": "valueForProperty:",
      "contents": "valueForProperty(${1:NSString* property})"
    },
    {
      "trigger": "valueForPropertyDescription:",
      "contents": "valueForPropertyDescription(${1:NSPropertyDescription* prop})"
    },
    {
      "trigger": "valueForUndefinedKey:",
      "contents": "valueForUndefinedKey(${1:NSString* key})"
    },
    {
      "trigger": "valueOfAttribute:forResultAtIndex:",
      "contents": "valueOfAttribute(${1:NSString* attrName}, forResultAtIndex:${2:NSUInteger idx})"
    },
    {
      "trigger": "valuesForAttributes:",
      "contents": "valuesForAttributes(${1:NSArray* keys})"
    },
    {
      "trigger": "valuesForPasteboardType:inItemSet:",
      "contents": "valuesForPasteboardType(${1:NSString* pasteboardType}, inItemSet:${2:NSIndexSet* itemSet})"
    },
    {
      "trigger": "variationFontTableTag (1719034226)",
      "contents": "VariationFontTableTag"
    },
    {
      "trigger": "velocityInView:",
      "contents": "velocityInView(${1:UIView* view})"
    },
    {
      "trigger": "versionForClassName:",
      "contents": "versionForClassName(${1:NSString* className})"
    },
    {
      "trigger": "videoAtPathIsCompatibleWithSavedPhotosAlbum:",
      "contents": "videoAtPathIsCompatibleWithSavedPhotosAlbum(${1:NSURL* videoPathURL})"
    },
    {
      "trigger": "videoComposition:shouldContinueValidatingAfterFindingEmptyTimeRange:",
      "contents": "videoComposition(${1:AVVideoComposition* videoComposition}, shouldContinueValidatingAfterFindingEmptyTimeRange:${2:CMTimeRange timeRange})"
    },
    {
      "trigger": "videoComposition:shouldContinueValidatingAfterFindingInvalidTimeRangeInInstruction:",
      "contents": "videoComposition(${1:AVVideoComposition* videoComposition}, shouldContinueValidatingAfterFindingInvalidTimeRangeInInstruction:${2:AVVideoCompositionInstruction* videoCompositionInstruction})"
    },
    {
      "trigger": "videoComposition:shouldContinueValidatingAfterFindingInvalidTrackIDInInstruction:layerInstruction:asset:",
      "contents": "videoComposition(${1:AVVideoComposition* videoComposition}, shouldContinueValidatingAfterFindingInvalidTrackIDInInstruction:${2:AVVideoCompositionInstruction* videoCompositionInstruction}, layerInstruction:${3:AVVideoCompositionLayerInstruction* layerInstruction}, asset:${4:AVAsset* asset})"
    },
    {
      "trigger": "videoComposition:shouldContinueValidatingAfterFindingInvalidValueForKey:",
      "contents": "videoComposition(${1:AVVideoComposition* videoComposition}, shouldContinueValidatingAfterFindingInvalidValueForKey:${2:NSString* key})"
    },
    {
      "trigger": "videoEditorController:didFailWithError:",
      "contents": "videoEditorController(${1:UIVideoEditorController* editor}, didFailWithError:${2:NSError* error})"
    },
    {
      "trigger": "videoEditorController:didSaveEditedVideoToPath:",
      "contents": "videoEditorController(${1:UIVideoEditorController* editor}, didSaveEditedVideoToPath:${2:NSString* editedVideoPath})"
    },
    {
      "trigger": "videoEditorControllerDidCancel:",
      "contents": "videoEditorControllerDidCancel(${1:UIVideoEditorController* editor})"
    },
    {
      "trigger": "viewDidAppear:",
      "contents": "viewDidAppear(${1:BOOL animated})"
    },
    {
      "trigger": "viewDidDisappear:",
      "contents": "viewDidDisappear(${1:BOOL animated})"
    },
    {
      "trigger": "viewForAnnotation:",
      "contents": "viewForAnnotation(${1:id annotation})"
    },
    {
      "trigger": "viewForOverlay:",
      "contents": "viewForOverlay(${1:id overlay})"
    },
    {
      "trigger": "viewForRow:forComponent:",
      "contents": "viewForRow(${1:NSInteger row}, forComponent:${2:NSInteger component})"
    },
    {
      "trigger": "viewForZoomingInScrollView:",
      "contents": "viewForZoomingInScrollView(${1:UIScrollView* scrollView})"
    },
    {
      "trigger": "viewWillAppear:",
      "contents": "viewWillAppear(${1:BOOL animated})"
    },
    {
      "trigger": "viewWillDisappear:",
      "contents": "viewWillDisappear(${1:BOOL animated})"
    },
    {
      "trigger": "viewWithTag:",
      "contents": "viewWithTag(${1:NSInteger tag})"
    },
    {
      "trigger": "voiceChatService:didNotStartWithParticipantID:error:",
      "contents": "voiceChatService(${1:GKVoiceChatService* voiceChatService}, didNotStartWithParticipantID:${2:NSString* participantID}, error:${3:NSError* error})"
    },
    {
      "trigger": "voiceChatService:didReceiveInvitationFromParticipantID:callID:",
      "contents": "voiceChatService(${1:GKVoiceChatService* voiceChatService}, didReceiveInvitationFromParticipantID:${2:NSString* participantID}, callID:${3:NSInteger callID})"
    },
    {
      "trigger": "voiceChatService:didStartWithParticipantID:",
      "contents": "voiceChatService(${1:GKVoiceChatService* voiceChatService}, didStartWithParticipantID:${2:NSString* participantID})"
    },
    {
      "trigger": "voiceChatService:didStopWithParticipantID:error:",
      "contents": "voiceChatService(${1:GKVoiceChatService* voiceChatService}, didStopWithParticipantID:${2:NSString* participantID}, error:${3:NSError* error})"
    },
    {
      "trigger": "voiceChatService:sendData:toParticipantID:",
      "contents": "voiceChatService(${1:GKVoiceChatService* voiceChatService}, sendData:${2:NSData* data}, toParticipantID:${3:NSString* participantID})"
    },
    {
      "trigger": "voiceChatService:sendRealTimeData:toParticipantID:",
      "contents": "voiceChatService(${1:GKVoiceChatService* voiceChatService}, sendRealTimeData:${2:NSData* data}, toParticipantID:${3:NSString* participantID})"
    },
    {
      "trigger": "voiceChatWithName:",
      "contents": "voiceChatWithName(${1:NSString* name})"
    },
    {
      "trigger": "volatileDomainForName:",
      "contents": "volatileDomainForName(${1:NSString* domainName})"
    },
    {
      "trigger": "waitForDataInBackgroundAndNotifyForModes:",
      "contents": "waitForDataInBackgroundAndNotifyForModes(${1:NSArray* modes})"
    },
    {
      "trigger": "waitUntilDate:",
      "contents": "waitUntilDate(${1:NSDate* limit})"
    },
    {
      "trigger": "webView:didFailLoadWithError:",
      "contents": "webView(${1:UIWebView* webView}, didFailLoadWithError:${2:NSError* error})"
    },
    {
      "trigger": "webView:shouldStartLoadWithRequest:navigationType:",
      "contents": "webView(${1:UIWebView* webView}, shouldStartLoadWithRequest:${2:NSURLRequest* request}, navigationType:${3:UIWebViewNavigationType navigationType})"
    },
    {
      "trigger": "webViewDidFinishLoad:",
      "contents": "webViewDidFinishLoad(${1:UIWebView* webView})"
    },
    {
      "trigger": "webViewDidStartLoad:",
      "contents": "webViewDidStartLoad(${1:UIWebView* webView})"
    },
    {
      "trigger": "widthForSegmentAtIndex:",
      "contents": "widthForSegmentAtIndex(${1:NSUInteger segment})"
    },
    {
      "trigger": "willAccessValueForKey:",
      "contents": "willAccessValueForKey(${1:NSString* key})"
    },
    {
      "trigger": "willAnimateFirstHalfOfRotationToInterfaceOrientation:duration:",
      "contents": "willAnimateFirstHalfOfRotationToInterfaceOrientation(${1:UIInterfaceOrientation toInterfaceOrientation}, duration:${2:NSTimeInterval duration})"
    },
    {
      "trigger": "willAnimateRotationToInterfaceOrientation:duration:",
      "contents": "willAnimateRotationToInterfaceOrientation(${1:UIInterfaceOrientation toInterfaceOrientation}, duration:${2:NSTimeInterval duration})"
    },
    {
      "trigger": "willAnimateSecondHalfOfRotationFromInterfaceOrientation:duration:",
      "contents": "willAnimateSecondHalfOfRotationFromInterfaceOrientation(${1:UIInterfaceOrientation fromInterfaceOrientation}, duration:${2:NSTimeInterval duration})"
    },
    {
      "trigger": "willChange:valuesAtIndexes:forKey:",
      "contents": "willChange(${1:NSKeyValueChange changeKind}, valuesAtIndexes:${2:NSIndexSet* indexes}, forKey:${3:NSString* key})"
    },
    {
      "trigger": "willChangeValueForKey:",
      "contents": "willChangeValueForKey(${1:NSString* key})"
    },
    {
      "trigger": "willChangeValueForKey:withSetMutation:usingObjects:",
      "contents": "willChangeValueForKey(${1:NSString* inKey}, withSetMutation:${2:NSKeyValueSetMutationKind inMutationKind}, usingObjects:${3:NSSet* inObjects})"
    },
    {
      "trigger": "willChangeValueForKey:withSetMutation:usingObjects:",
      "contents": "willChangeValueForKey(${1:NSString* key}, withSetMutation:${2:NSKeyValueSetMutationKind mutationKind}, usingObjects:${3:NSSet* objects})"
    },
    {
      "trigger": "willMoveToParentViewController:",
      "contents": "willMoveToParentViewController(${1:UIViewController* parent})"
    },
    {
      "trigger": "willMoveToSuperview:",
      "contents": "willMoveToSuperview(${1:UIView* newSuperview})"
    },
    {
      "trigger": "willMoveToWindow:",
      "contents": "willMoveToWindow(${1:UIWindow* newWindow})"
    },
    {
      "trigger": "willPresentActionSheet:",
      "contents": "willPresentActionSheet(${1:UIActionSheet* actionSheet})"
    },
    {
      "trigger": "willPresentAlertView:",
      "contents": "willPresentAlertView(${1:UIAlertView* alertView})"
    },
    {
      "trigger": "willRemoveCacheNodes:",
      "contents": "willRemoveCacheNodes(${1:NSSet* cacheNodes})"
    },
    {
      "trigger": "willRemoveFromPersistentStoreCoordinator:",
      "contents": "willRemoveFromPersistentStoreCoordinator(${1:NSPersistentStoreCoordinator* coordinator})"
    },
    {
      "trigger": "willRemoveSubview:",
      "contents": "willRemoveSubview(${1:UIView* subview})"
    },
    {
      "trigger": "willRotateToInterfaceOrientation:duration:",
      "contents": "willRotateToInterfaceOrientation(${1:UIInterfaceOrientation toInterfaceOrientation}, duration:${2:NSTimeInterval duration})"
    },
    {
      "trigger": "willTransitionToState:",
      "contents": "willTransitionToState(${1:UITableViewCellStateMask state})"
    },
    {
      "trigger": "write:maxLength:",
      "contents": "write(${1:uint8_t* buffer}, maxLength:${2:NSUInteger len})"
    },
    {
      "trigger": "writeAdditionalContent:toURL:originalContentsURL:error:",
      "contents": "writeAdditionalContent(${1:id content}, toURL:${2:NSURL* absoluteURL}, originalContentsURL:${3:NSURL* absoluteOriginalContentsURL}, error:${4:NSError** error})"
    },
    {
      "trigger": "writeContents:andAttributes:safelyToURL:forSaveOperation:error:",
      "contents": "writeContents(${1:id contents}, andAttributes:${2:NSDictionary* additionalFileAttributes}, safelyToURL:${3:NSURL* url}, forSaveOperation:${4:UIDocumentSaveOperation saveOperation}, error:${5:NSError** outError})"
    },
    {
      "trigger": "writeContents:toURL:forSaveOperation:originalContentsURL:error:",
      "contents": "writeContents(${1:id contents}, toURL:${2:NSURL* url}, forSaveOperation:${3:UIDocumentSaveOperation saveOperation}, originalContentsURL:${4:NSURL* originalContentsURL}, error:${5:NSError** outError})"
    },
    {
      "trigger": "writeData:",
      "contents": "writeData(${1:NSData* data})"
    },
    {
      "trigger": "writeImageDataToSavedPhotosAlbum:metadata:completionBlock:",
      "contents": "writeImageDataToSavedPhotosAlbum(${1:NSData* imageData}, metadata:${2:NSDictionary* metadata}, completionBlock:${3:ALAssetsLibraryWriteImageCompletionBlock completionBlock})"
    },
    {
      "trigger": "writeImageToSavedPhotosAlbum:metadata:completionBlock:",
      "contents": "writeImageToSavedPhotosAlbum(${1:CGImageRef imageRef}, metadata:${2:NSDictionary* metadata}, completionBlock:${3:ALAssetsLibraryWriteImageCompletionBlock completionBlock})"
    },
    {
      "trigger": "writeImageToSavedPhotosAlbum:orientation:completionBlock:",
      "contents": "writeImageToSavedPhotosAlbum(${1:CGImageRef imageRef}, orientation:${2:ALAssetOrientation orientation}, completionBlock:${3:ALAssetsLibraryWriteImageCompletionBlock completionBlock})"
    },
    {
      "trigger": "writeModifiedImageDataToSavedPhotosAlbum:metadata:completionBlock:",
      "contents": "writeModifiedImageDataToSavedPhotosAlbum(${1:NSData* imageData}, metadata:${2:NSDictionary* metadata}, completionBlock:${3:ALAssetsLibraryWriteImageCompletionBlock completionBlock})"
    },
    {
      "trigger": "writeModifiedVideoAtPathToSavedPhotosAlbum:completionBlock:",
      "contents": "writeModifiedVideoAtPathToSavedPhotosAlbum(${1:NSURL* videoPathURL}, completionBlock:${2:ALAssetsLibraryWriteVideoCompletionBlock completionBlock})"
    },
    {
      "trigger": "writeToFile:atomically:",
      "contents": "writeToFile(${1:NSString* path}, atomically:${2:BOOL useAuxiliaryFile})"
    },
    {
      "trigger": "writeToFile:atomically:encoding:error:",
      "contents": "writeToFile(${1:NSString* path}, atomically:${2:BOOL useAuxiliaryFile}, encoding:${3:NSStringEncoding enc}, error:${4:NSError** error})"
    },
    {
      "trigger": "writeToFile:options:error:",
      "contents": "writeToFile(${1:NSString* path}, options:${2:NSDataWritingOptions writeOptionsMask}, error:${3:NSError** errorPtr})"
    },
    {
      "trigger": "writeToURL:atomically:",
      "contents": "writeToURL(${1:NSURL* url}, atomically:${2:BOOL atomically})"
    },
    {
      "trigger": "writeToURL:atomically:encoding:error:",
      "contents": "writeToURL(${1:NSURL* url}, atomically:${2:BOOL useAuxiliaryFile}, encoding:${3:NSStringEncoding enc}, error:${4:NSError** error})"
    },
    {
      "trigger": "writeToURL:options:error:",
      "contents": "writeToURL(${1:NSURL* url}, options:${2:NSDataWritingOptions writeOptionsMask}, error:${3:NSError** errorPtr})"
    },
    {
      "trigger": "writeToURL:options:originalContentsURL:error:",
      "contents": "writeToURL(${1:NSURL* url}, options:${2:NSFileWrapperWritingOptions options}, originalContentsURL:${3:NSURL* originalContentsURL}, error:${4:NSError** outError})"
    },
    {
      "trigger": "writeValue:forCharacteristic:type:",
      "contents": "writeValue(${1:NSData* data}, forCharacteristic:${2:CBCharacteristic* characteristic}, type:${3:CBCharacteristicWriteType type})"
    },
    {
      "trigger": "writeValue:forDescriptor:",
      "contents": "writeValue(${1:NSData* data}, forDescriptor:${2:CBDescriptor* descriptor})"
    },
    {
      "trigger": "writeVideoAtPathToSavedPhotosAlbum:completionBlock:",
      "contents": "writeVideoAtPathToSavedPhotosAlbum(${1:NSURL* videoPathURL}, completionBlock:${2:ALAssetsLibraryWriteVideoCompletionBlock completionBlock})"
    },
    {
      "trigger": "zoomToRect:animated:",
      "contents": "zoomToRect(${1:CGRect rect}, animated:${2:BOOL animated})"
    }
  ]
}
